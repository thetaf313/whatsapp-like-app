import {
  require_events,
  require_node_os,
  require_stream
} from "./chunk-ZN22YT7P.js";
import {
  parseAst,
  parseAstAsync,
  require_native,
  require_node_fs,
  require_node_path,
  require_node_perf_hooks,
  require_node_process,
  require_promises
} from "./chunk-D3RQZBNN.js";
import {
  require_node_http
} from "./chunk-GL6B4O4A.js";
import {
  require_node_https
} from "./chunk-PS6RWICK.js";
import {
  require_assert,
  require_crypto,
  require_module,
  require_tty
} from "./chunk-YPDLOCLX.js";
import {
  require_os,
  require_util
} from "./chunk-KB4MFTKA.js";
import {
  require_url
} from "./chunk-S5LLOYK2.js";
import {
  require_fs
} from "./chunk-3AHSGBK4.js";
import {
  require_path
} from "./chunk-ZB4G6MVN.js";
import {
  __commonJS,
  __privateAdd,
  __privateGet,
  __publicField,
  __require,
  __toESM
} from "./chunk-6PRBTMBS.js";

// browser-external:node:url
var require_node_url = __commonJS({
  "browser-external:node:url"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "node:url" has been externalized for browser compatibility. Cannot access "node:url.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:node:util
var require_node_util = __commonJS({
  "browser-external:node:util"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "node:util" has been externalized for browser compatibility. Cannot access "node:util.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:node:module
var require_node_module = __commonJS({
  "browser-external:node:module"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "node:module" has been externalized for browser compatibility. Cannot access "node:module.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:node:crypto
var require_node_crypto = __commonJS({
  "browser-external:node:crypto"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "node:crypto" has been externalized for browser compatibility. Cannot access "node:crypto.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/vite/node_modules/picomatch/lib/constants.js
var require_constants = __commonJS({
  "node_modules/vite/node_modules/picomatch/lib/constants.js"(exports, module) {
    "use strict";
    var WIN_SLASH = "\\\\/";
    var WIN_NO_SLASH = `[^${WIN_SLASH}]`;
    var DOT_LITERAL = "\\.";
    var PLUS_LITERAL = "\\+";
    var QMARK_LITERAL = "\\?";
    var SLASH_LITERAL = "\\/";
    var ONE_CHAR = "(?=.)";
    var QMARK = "[^/]";
    var END_ANCHOR = `(?:${SLASH_LITERAL}|$)`;
    var START_ANCHOR = `(?:^|${SLASH_LITERAL})`;
    var DOTS_SLASH = `${DOT_LITERAL}{1,2}${END_ANCHOR}`;
    var NO_DOT = `(?!${DOT_LITERAL})`;
    var NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`;
    var NO_DOT_SLASH = `(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`;
    var NO_DOTS_SLASH = `(?!${DOTS_SLASH})`;
    var QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`;
    var STAR2 = `${QMARK}*?`;
    var SEP = "/";
    var POSIX_CHARS = {
      DOT_LITERAL,
      PLUS_LITERAL,
      QMARK_LITERAL,
      SLASH_LITERAL,
      ONE_CHAR,
      QMARK,
      END_ANCHOR,
      DOTS_SLASH,
      NO_DOT,
      NO_DOTS,
      NO_DOT_SLASH,
      NO_DOTS_SLASH,
      QMARK_NO_DOT,
      STAR: STAR2,
      START_ANCHOR,
      SEP
    };
    var WINDOWS_CHARS = {
      ...POSIX_CHARS,
      SLASH_LITERAL: `[${WIN_SLASH}]`,
      QMARK: WIN_NO_SLASH,
      STAR: `${WIN_NO_SLASH}*?`,
      DOTS_SLASH: `${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,
      NO_DOT: `(?!${DOT_LITERAL})`,
      NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
      NO_DOT_SLASH: `(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,
      NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
      QMARK_NO_DOT: `[^.${WIN_SLASH}]`,
      START_ANCHOR: `(?:^|[${WIN_SLASH}])`,
      END_ANCHOR: `(?:[${WIN_SLASH}]|$)`,
      SEP: "\\"
    };
    var POSIX_REGEX_SOURCE = {
      alnum: "a-zA-Z0-9",
      alpha: "a-zA-Z",
      ascii: "\\x00-\\x7F",
      blank: " \\t",
      cntrl: "\\x00-\\x1F\\x7F",
      digit: "0-9",
      graph: "\\x21-\\x7E",
      lower: "a-z",
      print: "\\x20-\\x7E ",
      punct: "\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",
      space: " \\t\\r\\n\\v\\f",
      upper: "A-Z",
      word: "A-Za-z0-9_",
      xdigit: "A-Fa-f0-9"
    };
    module.exports = {
      MAX_LENGTH: 1024 * 64,
      POSIX_REGEX_SOURCE,
      // regular expressions
      REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g,
      REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/,
      REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/,
      REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g,
      REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g,
      REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g,
      // Replace globs with equivalent patterns to reduce parsing time.
      REPLACEMENTS: {
        "***": "*",
        "**/**": "**",
        "**/**/**": "**"
      },
      // Digits
      CHAR_0: 48,
      /* 0 */
      CHAR_9: 57,
      /* 9 */
      // Alphabet chars.
      CHAR_UPPERCASE_A: 65,
      /* A */
      CHAR_LOWERCASE_A: 97,
      /* a */
      CHAR_UPPERCASE_Z: 90,
      /* Z */
      CHAR_LOWERCASE_Z: 122,
      /* z */
      CHAR_LEFT_PARENTHESES: 40,
      /* ( */
      CHAR_RIGHT_PARENTHESES: 41,
      /* ) */
      CHAR_ASTERISK: 42,
      /* * */
      // Non-alphabetic chars.
      CHAR_AMPERSAND: 38,
      /* & */
      CHAR_AT: 64,
      /* @ */
      CHAR_BACKWARD_SLASH: 92,
      /* \ */
      CHAR_CARRIAGE_RETURN: 13,
      /* \r */
      CHAR_CIRCUMFLEX_ACCENT: 94,
      /* ^ */
      CHAR_COLON: 58,
      /* : */
      CHAR_COMMA: 44,
      /* , */
      CHAR_DOT: 46,
      /* . */
      CHAR_DOUBLE_QUOTE: 34,
      /* " */
      CHAR_EQUAL: 61,
      /* = */
      CHAR_EXCLAMATION_MARK: 33,
      /* ! */
      CHAR_FORM_FEED: 12,
      /* \f */
      CHAR_FORWARD_SLASH: 47,
      /* / */
      CHAR_GRAVE_ACCENT: 96,
      /* ` */
      CHAR_HASH: 35,
      /* # */
      CHAR_HYPHEN_MINUS: 45,
      /* - */
      CHAR_LEFT_ANGLE_BRACKET: 60,
      /* < */
      CHAR_LEFT_CURLY_BRACE: 123,
      /* { */
      CHAR_LEFT_SQUARE_BRACKET: 91,
      /* [ */
      CHAR_LINE_FEED: 10,
      /* \n */
      CHAR_NO_BREAK_SPACE: 160,
      /* \u00A0 */
      CHAR_PERCENT: 37,
      /* % */
      CHAR_PLUS: 43,
      /* + */
      CHAR_QUESTION_MARK: 63,
      /* ? */
      CHAR_RIGHT_ANGLE_BRACKET: 62,
      /* > */
      CHAR_RIGHT_CURLY_BRACE: 125,
      /* } */
      CHAR_RIGHT_SQUARE_BRACKET: 93,
      /* ] */
      CHAR_SEMICOLON: 59,
      /* ; */
      CHAR_SINGLE_QUOTE: 39,
      /* ' */
      CHAR_SPACE: 32,
      /*   */
      CHAR_TAB: 9,
      /* \t */
      CHAR_UNDERSCORE: 95,
      /* _ */
      CHAR_VERTICAL_LINE: 124,
      /* | */
      CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279,
      /* \uFEFF */
      /**
       * Create EXTGLOB_CHARS
       */
      extglobChars(chars3) {
        return {
          "!": { type: "negate", open: "(?:(?!(?:", close: `))${chars3.STAR})` },
          "?": { type: "qmark", open: "(?:", close: ")?" },
          "+": { type: "plus", open: "(?:", close: ")+" },
          "*": { type: "star", open: "(?:", close: ")*" },
          "@": { type: "at", open: "(?:", close: ")" }
        };
      },
      /**
       * Create GLOB_CHARS
       */
      globChars(win322) {
        return win322 === true ? WINDOWS_CHARS : POSIX_CHARS;
      }
    };
  }
});

// node_modules/vite/node_modules/picomatch/lib/utils.js
var require_utils = __commonJS({
  "node_modules/vite/node_modules/picomatch/lib/utils.js"(exports) {
    "use strict";
    var {
      REGEX_BACKSLASH,
      REGEX_REMOVE_BACKSLASH,
      REGEX_SPECIAL_CHARS,
      REGEX_SPECIAL_CHARS_GLOBAL
    } = require_constants();
    exports.isObject = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
    exports.hasRegexChars = (str) => REGEX_SPECIAL_CHARS.test(str);
    exports.isRegexChar = (str) => str.length === 1 && exports.hasRegexChars(str);
    exports.escapeRegex = (str) => str.replace(REGEX_SPECIAL_CHARS_GLOBAL, "\\$1");
    exports.toPosixSlashes = (str) => str.replace(REGEX_BACKSLASH, "/");
    exports.isWindows = () => {
      if (typeof navigator !== "undefined" && navigator.platform) {
        const platform2 = navigator.platform.toLowerCase();
        return platform2 === "win32" || platform2 === "windows";
      }
      if (typeof process !== "undefined" && process.platform) {
        return process.platform === "win32";
      }
      return false;
    };
    exports.removeBackslashes = (str) => {
      return str.replace(REGEX_REMOVE_BACKSLASH, (match) => {
        return match === "\\" ? "" : match;
      });
    };
    exports.escapeLast = (input, char, lastIdx) => {
      const idx = input.lastIndexOf(char, lastIdx);
      if (idx === -1) return input;
      if (input[idx - 1] === "\\") return exports.escapeLast(input, char, idx - 1);
      return `${input.slice(0, idx)}\\${input.slice(idx)}`;
    };
    exports.removePrefix = (input, state = {}) => {
      let output = input;
      if (output.startsWith("./")) {
        output = output.slice(2);
        state.prefix = "./";
      }
      return output;
    };
    exports.wrapOutput = (input, state = {}, options2 = {}) => {
      const prepend = options2.contains ? "" : "^";
      const append2 = options2.contains ? "" : "$";
      let output = `${prepend}(?:${input})${append2}`;
      if (state.negated === true) {
        output = `(?:^(?!${output}).*$)`;
      }
      return output;
    };
    exports.basename = (path4, { windows: windows2 } = {}) => {
      const segs = path4.split(windows2 ? /[\\/]/ : "/");
      const last = segs[segs.length - 1];
      if (last === "") {
        return segs[segs.length - 2];
      }
      return last;
    };
  }
});

// node_modules/vite/node_modules/picomatch/lib/scan.js
var require_scan = __commonJS({
  "node_modules/vite/node_modules/picomatch/lib/scan.js"(exports, module) {
    "use strict";
    var utils2 = require_utils();
    var {
      CHAR_ASTERISK,
      /* * */
      CHAR_AT,
      /* @ */
      CHAR_BACKWARD_SLASH: CHAR_BACKWARD_SLASH2,
      /* \ */
      CHAR_COMMA: CHAR_COMMA2,
      /* , */
      CHAR_DOT: CHAR_DOT2,
      /* . */
      CHAR_EXCLAMATION_MARK,
      /* ! */
      CHAR_FORWARD_SLASH: CHAR_FORWARD_SLASH2,
      /* / */
      CHAR_LEFT_CURLY_BRACE: CHAR_LEFT_CURLY_BRACE2,
      /* { */
      CHAR_LEFT_PARENTHESES: CHAR_LEFT_PARENTHESES2,
      /* ( */
      CHAR_LEFT_SQUARE_BRACKET: CHAR_LEFT_SQUARE_BRACKET2,
      /* [ */
      CHAR_PLUS,
      /* + */
      CHAR_QUESTION_MARK,
      /* ? */
      CHAR_RIGHT_CURLY_BRACE: CHAR_RIGHT_CURLY_BRACE2,
      /* } */
      CHAR_RIGHT_PARENTHESES: CHAR_RIGHT_PARENTHESES2,
      /* ) */
      CHAR_RIGHT_SQUARE_BRACKET: CHAR_RIGHT_SQUARE_BRACKET2
      /* ] */
    } = require_constants();
    var isPathSeparator = (code) => {
      return code === CHAR_FORWARD_SLASH2 || code === CHAR_BACKWARD_SLASH2;
    };
    var depth = (token) => {
      if (token.isPrefix !== true) {
        token.depth = token.isGlobstar ? Infinity : 1;
      }
    };
    var scan = (input, options2) => {
      const opts = options2 || {};
      const length = input.length - 1;
      const scanToEnd = opts.parts === true || opts.scanToEnd === true;
      const slashes = [];
      const tokens = [];
      const parts = [];
      let str = input;
      let index = -1;
      let start = 0;
      let lastIndex = 0;
      let isBrace = false;
      let isBracket = false;
      let isGlob3 = false;
      let isExtglob3 = false;
      let isGlobstar = false;
      let braceEscaped = false;
      let backslashes = false;
      let negated = false;
      let negatedExtglob = false;
      let finished = false;
      let braces2 = 0;
      let prev;
      let code;
      let token = { value: "", depth: 0, isGlob: false };
      const eos = () => index >= length;
      const peek = () => str.charCodeAt(index + 1);
      const advance = () => {
        prev = code;
        return str.charCodeAt(++index);
      };
      while (index < length) {
        code = advance();
        let next;
        if (code === CHAR_BACKWARD_SLASH2) {
          backslashes = token.backslashes = true;
          code = advance();
          if (code === CHAR_LEFT_CURLY_BRACE2) {
            braceEscaped = true;
          }
          continue;
        }
        if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE2) {
          braces2++;
          while (eos() !== true && (code = advance())) {
            if (code === CHAR_BACKWARD_SLASH2) {
              backslashes = token.backslashes = true;
              advance();
              continue;
            }
            if (code === CHAR_LEFT_CURLY_BRACE2) {
              braces2++;
              continue;
            }
            if (braceEscaped !== true && code === CHAR_DOT2 && (code = advance()) === CHAR_DOT2) {
              isBrace = token.isBrace = true;
              isGlob3 = token.isGlob = true;
              finished = true;
              if (scanToEnd === true) {
                continue;
              }
              break;
            }
            if (braceEscaped !== true && code === CHAR_COMMA2) {
              isBrace = token.isBrace = true;
              isGlob3 = token.isGlob = true;
              finished = true;
              if (scanToEnd === true) {
                continue;
              }
              break;
            }
            if (code === CHAR_RIGHT_CURLY_BRACE2) {
              braces2--;
              if (braces2 === 0) {
                braceEscaped = false;
                isBrace = token.isBrace = true;
                finished = true;
                break;
              }
            }
          }
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (code === CHAR_FORWARD_SLASH2) {
          slashes.push(index);
          tokens.push(token);
          token = { value: "", depth: 0, isGlob: false };
          if (finished === true) continue;
          if (prev === CHAR_DOT2 && index === start + 1) {
            start += 2;
            continue;
          }
          lastIndex = index + 1;
          continue;
        }
        if (opts.noext !== true) {
          const isExtglobChar = code === CHAR_PLUS || code === CHAR_AT || code === CHAR_ASTERISK || code === CHAR_QUESTION_MARK || code === CHAR_EXCLAMATION_MARK;
          if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES2) {
            isGlob3 = token.isGlob = true;
            isExtglob3 = token.isExtglob = true;
            finished = true;
            if (code === CHAR_EXCLAMATION_MARK && index === start) {
              negatedExtglob = true;
            }
            if (scanToEnd === true) {
              while (eos() !== true && (code = advance())) {
                if (code === CHAR_BACKWARD_SLASH2) {
                  backslashes = token.backslashes = true;
                  code = advance();
                  continue;
                }
                if (code === CHAR_RIGHT_PARENTHESES2) {
                  isGlob3 = token.isGlob = true;
                  finished = true;
                  break;
                }
              }
              continue;
            }
            break;
          }
        }
        if (code === CHAR_ASTERISK) {
          if (prev === CHAR_ASTERISK) isGlobstar = token.isGlobstar = true;
          isGlob3 = token.isGlob = true;
          finished = true;
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (code === CHAR_QUESTION_MARK) {
          isGlob3 = token.isGlob = true;
          finished = true;
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (code === CHAR_LEFT_SQUARE_BRACKET2) {
          while (eos() !== true && (next = advance())) {
            if (next === CHAR_BACKWARD_SLASH2) {
              backslashes = token.backslashes = true;
              advance();
              continue;
            }
            if (next === CHAR_RIGHT_SQUARE_BRACKET2) {
              isBracket = token.isBracket = true;
              isGlob3 = token.isGlob = true;
              finished = true;
              break;
            }
          }
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index === start) {
          negated = token.negated = true;
          start++;
          continue;
        }
        if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES2) {
          isGlob3 = token.isGlob = true;
          if (scanToEnd === true) {
            while (eos() !== true && (code = advance())) {
              if (code === CHAR_LEFT_PARENTHESES2) {
                backslashes = token.backslashes = true;
                code = advance();
                continue;
              }
              if (code === CHAR_RIGHT_PARENTHESES2) {
                finished = true;
                break;
              }
            }
            continue;
          }
          break;
        }
        if (isGlob3 === true) {
          finished = true;
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
      }
      if (opts.noext === true) {
        isExtglob3 = false;
        isGlob3 = false;
      }
      let base = str;
      let prefix = "";
      let glob2 = "";
      if (start > 0) {
        prefix = str.slice(0, start);
        str = str.slice(start);
        lastIndex -= start;
      }
      if (base && isGlob3 === true && lastIndex > 0) {
        base = str.slice(0, lastIndex);
        glob2 = str.slice(lastIndex);
      } else if (isGlob3 === true) {
        base = "";
        glob2 = str;
      } else {
        base = str;
      }
      if (base && base !== "" && base !== "/" && base !== str) {
        if (isPathSeparator(base.charCodeAt(base.length - 1))) {
          base = base.slice(0, -1);
        }
      }
      if (opts.unescape === true) {
        if (glob2) glob2 = utils2.removeBackslashes(glob2);
        if (base && backslashes === true) {
          base = utils2.removeBackslashes(base);
        }
      }
      const state = {
        prefix,
        input,
        start,
        base,
        glob: glob2,
        isBrace,
        isBracket,
        isGlob: isGlob3,
        isExtglob: isExtglob3,
        isGlobstar,
        negated,
        negatedExtglob
      };
      if (opts.tokens === true) {
        state.maxDepth = 0;
        if (!isPathSeparator(code)) {
          tokens.push(token);
        }
        state.tokens = tokens;
      }
      if (opts.parts === true || opts.tokens === true) {
        let prevIndex;
        for (let idx = 0; idx < slashes.length; idx++) {
          const n2 = prevIndex ? prevIndex + 1 : start;
          const i = slashes[idx];
          const value2 = input.slice(n2, i);
          if (opts.tokens) {
            if (idx === 0 && start !== 0) {
              tokens[idx].isPrefix = true;
              tokens[idx].value = prefix;
            } else {
              tokens[idx].value = value2;
            }
            depth(tokens[idx]);
            state.maxDepth += tokens[idx].depth;
          }
          if (idx !== 0 || value2 !== "") {
            parts.push(value2);
          }
          prevIndex = i;
        }
        if (prevIndex && prevIndex + 1 < input.length) {
          const value2 = input.slice(prevIndex + 1);
          parts.push(value2);
          if (opts.tokens) {
            tokens[tokens.length - 1].value = value2;
            depth(tokens[tokens.length - 1]);
            state.maxDepth += tokens[tokens.length - 1].depth;
          }
        }
        state.slashes = slashes;
        state.parts = parts;
      }
      return state;
    };
    module.exports = scan;
  }
});

// node_modules/vite/node_modules/picomatch/lib/parse.js
var require_parse = __commonJS({
  "node_modules/vite/node_modules/picomatch/lib/parse.js"(exports, module) {
    "use strict";
    var constants2 = require_constants();
    var utils2 = require_utils();
    var {
      MAX_LENGTH: MAX_LENGTH2,
      POSIX_REGEX_SOURCE,
      REGEX_NON_SPECIAL_CHARS,
      REGEX_SPECIAL_CHARS_BACKREF,
      REPLACEMENTS
    } = constants2;
    var expandRange = (args, options2) => {
      if (typeof options2.expandRange === "function") {
        return options2.expandRange(...args, options2);
      }
      args.sort();
      const value2 = `[${args.join("-")}]`;
      try {
        new RegExp(value2);
      } catch (ex) {
        return args.map((v) => utils2.escapeRegex(v)).join("..");
      }
      return value2;
    };
    var syntaxError = (type, char) => {
      return `Missing ${type}: "${char}" - use "\\\\${char}" to match literal characters`;
    };
    var parse4 = (input, options2) => {
      if (typeof input !== "string") {
        throw new TypeError("Expected a string");
      }
      input = REPLACEMENTS[input] || input;
      const opts = { ...options2 };
      const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH2, opts.maxLength) : MAX_LENGTH2;
      let len = input.length;
      if (len > max) {
        throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
      }
      const bos = { type: "bos", value: "", output: opts.prepend || "" };
      const tokens = [bos];
      const capture = opts.capture ? "" : "?:";
      const PLATFORM_CHARS = constants2.globChars(opts.windows);
      const EXTGLOB_CHARS = constants2.extglobChars(PLATFORM_CHARS);
      const {
        DOT_LITERAL,
        PLUS_LITERAL,
        SLASH_LITERAL,
        ONE_CHAR,
        DOTS_SLASH,
        NO_DOT,
        NO_DOT_SLASH,
        NO_DOTS_SLASH,
        QMARK,
        QMARK_NO_DOT,
        STAR: STAR2,
        START_ANCHOR
      } = PLATFORM_CHARS;
      const globstar = (opts2) => {
        return `(${capture}(?:(?!${START_ANCHOR}${opts2.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
      };
      const nodot = opts.dot ? "" : NO_DOT;
      const qmarkNoDot = opts.dot ? QMARK : QMARK_NO_DOT;
      let star = opts.bash === true ? globstar(opts) : STAR2;
      if (opts.capture) {
        star = `(${star})`;
      }
      if (typeof opts.noext === "boolean") {
        opts.noextglob = opts.noext;
      }
      const state = {
        input,
        index: -1,
        start: 0,
        dot: opts.dot === true,
        consumed: "",
        output: "",
        prefix: "",
        backtrack: false,
        negated: false,
        brackets: 0,
        braces: 0,
        parens: 0,
        quotes: 0,
        globstar: false,
        tokens
      };
      input = utils2.removePrefix(input, state);
      len = input.length;
      const extglobs = [];
      const braces2 = [];
      const stack = [];
      let prev = bos;
      let value2;
      const eos = () => state.index === len - 1;
      const peek = state.peek = (n2 = 1) => input[state.index + n2];
      const advance = state.advance = () => input[++state.index] || "";
      const remaining = () => input.slice(state.index + 1);
      const consume = (value3 = "", num = 0) => {
        state.consumed += value3;
        state.index += num;
      };
      const append2 = (token) => {
        state.output += token.output != null ? token.output : token.value;
        consume(token.value);
      };
      const negate = () => {
        let count = 1;
        while (peek() === "!" && (peek(2) !== "(" || peek(3) === "?")) {
          advance();
          state.start++;
          count++;
        }
        if (count % 2 === 0) {
          return false;
        }
        state.negated = true;
        state.start++;
        return true;
      };
      const increment = (type) => {
        state[type]++;
        stack.push(type);
      };
      const decrement = (type) => {
        state[type]--;
        stack.pop();
      };
      const push2 = (tok) => {
        if (prev.type === "globstar") {
          const isBrace = state.braces > 0 && (tok.type === "comma" || tok.type === "brace");
          const isExtglob3 = tok.extglob === true || extglobs.length && (tok.type === "pipe" || tok.type === "paren");
          if (tok.type !== "slash" && tok.type !== "paren" && !isBrace && !isExtglob3) {
            state.output = state.output.slice(0, -prev.output.length);
            prev.type = "star";
            prev.value = "*";
            prev.output = star;
            state.output += prev.output;
          }
        }
        if (extglobs.length && tok.type !== "paren") {
          extglobs[extglobs.length - 1].inner += tok.value;
        }
        if (tok.value || tok.output) append2(tok);
        if (prev && prev.type === "text" && tok.type === "text") {
          prev.output = (prev.output || prev.value) + tok.value;
          prev.value += tok.value;
          return;
        }
        tok.prev = prev;
        tokens.push(tok);
        prev = tok;
      };
      const extglobOpen = (type, value3) => {
        const token = { ...EXTGLOB_CHARS[value3], conditions: 1, inner: "" };
        token.prev = prev;
        token.parens = state.parens;
        token.output = state.output;
        const output = (opts.capture ? "(" : "") + token.open;
        increment("parens");
        push2({ type, value: value3, output: state.output ? "" : ONE_CHAR });
        push2({ type: "paren", extglob: true, value: advance(), output });
        extglobs.push(token);
      };
      const extglobClose = (token) => {
        let output = token.close + (opts.capture ? ")" : "");
        let rest;
        if (token.type === "negate") {
          let extglobStar = star;
          if (token.inner && token.inner.length > 1 && token.inner.includes("/")) {
            extglobStar = globstar(opts);
          }
          if (extglobStar !== star || eos() || /^\)+$/.test(remaining())) {
            output = token.close = `)$))${extglobStar}`;
          }
          if (token.inner.includes("*") && (rest = remaining()) && /^\.[^\\/.]+$/.test(rest)) {
            const expression = parse4(rest, { ...options2, fastpaths: false }).output;
            output = token.close = `)${expression})${extglobStar})`;
          }
          if (token.prev.type === "bos") {
            state.negatedExtglob = true;
          }
        }
        push2({ type: "paren", extglob: true, value: value2, output });
        decrement("parens");
      };
      if (opts.fastpaths !== false && !/(^[*!]|[/()[\]{}"])/.test(input)) {
        let backslashes = false;
        let output = input.replace(REGEX_SPECIAL_CHARS_BACKREF, (m2, esc, chars3, first2, rest, index) => {
          if (first2 === "\\") {
            backslashes = true;
            return m2;
          }
          if (first2 === "?") {
            if (esc) {
              return esc + first2 + (rest ? QMARK.repeat(rest.length) : "");
            }
            if (index === 0) {
              return qmarkNoDot + (rest ? QMARK.repeat(rest.length) : "");
            }
            return QMARK.repeat(chars3.length);
          }
          if (first2 === ".") {
            return DOT_LITERAL.repeat(chars3.length);
          }
          if (first2 === "*") {
            if (esc) {
              return esc + first2 + (rest ? star : "");
            }
            return star;
          }
          return esc ? m2 : `\\${m2}`;
        });
        if (backslashes === true) {
          if (opts.unescape === true) {
            output = output.replace(/\\/g, "");
          } else {
            output = output.replace(/\\+/g, (m2) => {
              return m2.length % 2 === 0 ? "\\\\" : m2 ? "\\" : "";
            });
          }
        }
        if (output === input && opts.contains === true) {
          state.output = input;
          return state;
        }
        state.output = utils2.wrapOutput(output, state, options2);
        return state;
      }
      while (!eos()) {
        value2 = advance();
        if (value2 === "\0") {
          continue;
        }
        if (value2 === "\\") {
          const next = peek();
          if (next === "/" && opts.bash !== true) {
            continue;
          }
          if (next === "." || next === ";") {
            continue;
          }
          if (!next) {
            value2 += "\\";
            push2({ type: "text", value: value2 });
            continue;
          }
          const match = /^\\+/.exec(remaining());
          let slashes = 0;
          if (match && match[0].length > 2) {
            slashes = match[0].length;
            state.index += slashes;
            if (slashes % 2 !== 0) {
              value2 += "\\";
            }
          }
          if (opts.unescape === true) {
            value2 = advance();
          } else {
            value2 += advance();
          }
          if (state.brackets === 0) {
            push2({ type: "text", value: value2 });
            continue;
          }
        }
        if (state.brackets > 0 && (value2 !== "]" || prev.value === "[" || prev.value === "[^")) {
          if (opts.posix !== false && value2 === ":") {
            const inner = prev.value.slice(1);
            if (inner.includes("[")) {
              prev.posix = true;
              if (inner.includes(":")) {
                const idx = prev.value.lastIndexOf("[");
                const pre = prev.value.slice(0, idx);
                const rest2 = prev.value.slice(idx + 2);
                const posix3 = POSIX_REGEX_SOURCE[rest2];
                if (posix3) {
                  prev.value = pre + posix3;
                  state.backtrack = true;
                  advance();
                  if (!bos.output && tokens.indexOf(prev) === 1) {
                    bos.output = ONE_CHAR;
                  }
                  continue;
                }
              }
            }
          }
          if (value2 === "[" && peek() !== ":" || value2 === "-" && peek() === "]") {
            value2 = `\\${value2}`;
          }
          if (value2 === "]" && (prev.value === "[" || prev.value === "[^")) {
            value2 = `\\${value2}`;
          }
          if (opts.posix === true && value2 === "!" && prev.value === "[") {
            value2 = "^";
          }
          prev.value += value2;
          append2({ value: value2 });
          continue;
        }
        if (state.quotes === 1 && value2 !== '"') {
          value2 = utils2.escapeRegex(value2);
          prev.value += value2;
          append2({ value: value2 });
          continue;
        }
        if (value2 === '"') {
          state.quotes = state.quotes === 1 ? 0 : 1;
          if (opts.keepQuotes === true) {
            push2({ type: "text", value: value2 });
          }
          continue;
        }
        if (value2 === "(") {
          increment("parens");
          push2({ type: "paren", value: value2 });
          continue;
        }
        if (value2 === ")") {
          if (state.parens === 0 && opts.strictBrackets === true) {
            throw new SyntaxError(syntaxError("opening", "("));
          }
          const extglob = extglobs[extglobs.length - 1];
          if (extglob && state.parens === extglob.parens + 1) {
            extglobClose(extglobs.pop());
            continue;
          }
          push2({ type: "paren", value: value2, output: state.parens ? ")" : "\\)" });
          decrement("parens");
          continue;
        }
        if (value2 === "[") {
          if (opts.nobracket === true || !remaining().includes("]")) {
            if (opts.nobracket !== true && opts.strictBrackets === true) {
              throw new SyntaxError(syntaxError("closing", "]"));
            }
            value2 = `\\${value2}`;
          } else {
            increment("brackets");
          }
          push2({ type: "bracket", value: value2 });
          continue;
        }
        if (value2 === "]") {
          if (opts.nobracket === true || prev && prev.type === "bracket" && prev.value.length === 1) {
            push2({ type: "text", value: value2, output: `\\${value2}` });
            continue;
          }
          if (state.brackets === 0) {
            if (opts.strictBrackets === true) {
              throw new SyntaxError(syntaxError("opening", "["));
            }
            push2({ type: "text", value: value2, output: `\\${value2}` });
            continue;
          }
          decrement("brackets");
          const prevValue = prev.value.slice(1);
          if (prev.posix !== true && prevValue[0] === "^" && !prevValue.includes("/")) {
            value2 = `/${value2}`;
          }
          prev.value += value2;
          append2({ value: value2 });
          if (opts.literalBrackets === false || utils2.hasRegexChars(prevValue)) {
            continue;
          }
          const escaped2 = utils2.escapeRegex(prev.value);
          state.output = state.output.slice(0, -prev.value.length);
          if (opts.literalBrackets === true) {
            state.output += escaped2;
            prev.value = escaped2;
            continue;
          }
          prev.value = `(${capture}${escaped2}|${prev.value})`;
          state.output += prev.value;
          continue;
        }
        if (value2 === "{" && opts.nobrace !== true) {
          increment("braces");
          const open2 = {
            type: "brace",
            value: value2,
            output: "(",
            outputIndex: state.output.length,
            tokensIndex: state.tokens.length
          };
          braces2.push(open2);
          push2(open2);
          continue;
        }
        if (value2 === "}") {
          const brace = braces2[braces2.length - 1];
          if (opts.nobrace === true || !brace) {
            push2({ type: "text", value: value2, output: value2 });
            continue;
          }
          let output = ")";
          if (brace.dots === true) {
            const arr = tokens.slice();
            const range2 = [];
            for (let i = arr.length - 1; i >= 0; i--) {
              tokens.pop();
              if (arr[i].type === "brace") {
                break;
              }
              if (arr[i].type !== "dots") {
                range2.unshift(arr[i].value);
              }
            }
            output = expandRange(range2, opts);
            state.backtrack = true;
          }
          if (brace.comma !== true && brace.dots !== true) {
            const out = state.output.slice(0, brace.outputIndex);
            const toks = state.tokens.slice(brace.tokensIndex);
            brace.value = brace.output = "\\{";
            value2 = output = "\\}";
            state.output = out;
            for (const t2 of toks) {
              state.output += t2.output || t2.value;
            }
          }
          push2({ type: "brace", value: value2, output });
          decrement("braces");
          braces2.pop();
          continue;
        }
        if (value2 === "|") {
          if (extglobs.length > 0) {
            extglobs[extglobs.length - 1].conditions++;
          }
          push2({ type: "text", value: value2 });
          continue;
        }
        if (value2 === ",") {
          let output = value2;
          const brace = braces2[braces2.length - 1];
          if (brace && stack[stack.length - 1] === "braces") {
            brace.comma = true;
            output = "|";
          }
          push2({ type: "comma", value: value2, output });
          continue;
        }
        if (value2 === "/") {
          if (prev.type === "dot" && state.index === state.start + 1) {
            state.start = state.index + 1;
            state.consumed = "";
            state.output = "";
            tokens.pop();
            prev = bos;
            continue;
          }
          push2({ type: "slash", value: value2, output: SLASH_LITERAL });
          continue;
        }
        if (value2 === ".") {
          if (state.braces > 0 && prev.type === "dot") {
            if (prev.value === ".") prev.output = DOT_LITERAL;
            const brace = braces2[braces2.length - 1];
            prev.type = "dots";
            prev.output += value2;
            prev.value += value2;
            brace.dots = true;
            continue;
          }
          if (state.braces + state.parens === 0 && prev.type !== "bos" && prev.type !== "slash") {
            push2({ type: "text", value: value2, output: DOT_LITERAL });
            continue;
          }
          push2({ type: "dot", value: value2, output: DOT_LITERAL });
          continue;
        }
        if (value2 === "?") {
          const isGroup = prev && prev.value === "(";
          if (!isGroup && opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
            extglobOpen("qmark", value2);
            continue;
          }
          if (prev && prev.type === "paren") {
            const next = peek();
            let output = value2;
            if (prev.value === "(" && !/[!=<:]/.test(next) || next === "<" && !/<([!=]|\w+>)/.test(remaining())) {
              output = `\\${value2}`;
            }
            push2({ type: "text", value: value2, output });
            continue;
          }
          if (opts.dot !== true && (prev.type === "slash" || prev.type === "bos")) {
            push2({ type: "qmark", value: value2, output: QMARK_NO_DOT });
            continue;
          }
          push2({ type: "qmark", value: value2, output: QMARK });
          continue;
        }
        if (value2 === "!") {
          if (opts.noextglob !== true && peek() === "(") {
            if (peek(2) !== "?" || !/[!=<:]/.test(peek(3))) {
              extglobOpen("negate", value2);
              continue;
            }
          }
          if (opts.nonegate !== true && state.index === 0) {
            negate();
            continue;
          }
        }
        if (value2 === "+") {
          if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
            extglobOpen("plus", value2);
            continue;
          }
          if (prev && prev.value === "(" || opts.regex === false) {
            push2({ type: "plus", value: value2, output: PLUS_LITERAL });
            continue;
          }
          if (prev && (prev.type === "bracket" || prev.type === "paren" || prev.type === "brace") || state.parens > 0) {
            push2({ type: "plus", value: value2 });
            continue;
          }
          push2({ type: "plus", value: PLUS_LITERAL });
          continue;
        }
        if (value2 === "@") {
          if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
            push2({ type: "at", extglob: true, value: value2, output: "" });
            continue;
          }
          push2({ type: "text", value: value2 });
          continue;
        }
        if (value2 !== "*") {
          if (value2 === "$" || value2 === "^") {
            value2 = `\\${value2}`;
          }
          const match = REGEX_NON_SPECIAL_CHARS.exec(remaining());
          if (match) {
            value2 += match[0];
            state.index += match[0].length;
          }
          push2({ type: "text", value: value2 });
          continue;
        }
        if (prev && (prev.type === "globstar" || prev.star === true)) {
          prev.type = "star";
          prev.star = true;
          prev.value += value2;
          prev.output = star;
          state.backtrack = true;
          state.globstar = true;
          consume(value2);
          continue;
        }
        let rest = remaining();
        if (opts.noextglob !== true && /^\([^?]/.test(rest)) {
          extglobOpen("star", value2);
          continue;
        }
        if (prev.type === "star") {
          if (opts.noglobstar === true) {
            consume(value2);
            continue;
          }
          const prior = prev.prev;
          const before = prior.prev;
          const isStart = prior.type === "slash" || prior.type === "bos";
          const afterStar = before && (before.type === "star" || before.type === "globstar");
          if (opts.bash === true && (!isStart || rest[0] && rest[0] !== "/")) {
            push2({ type: "star", value: value2, output: "" });
            continue;
          }
          const isBrace = state.braces > 0 && (prior.type === "comma" || prior.type === "brace");
          const isExtglob3 = extglobs.length && (prior.type === "pipe" || prior.type === "paren");
          if (!isStart && prior.type !== "paren" && !isBrace && !isExtglob3) {
            push2({ type: "star", value: value2, output: "" });
            continue;
          }
          while (rest.slice(0, 3) === "/**") {
            const after = input[state.index + 4];
            if (after && after !== "/") {
              break;
            }
            rest = rest.slice(3);
            consume("/**", 3);
          }
          if (prior.type === "bos" && eos()) {
            prev.type = "globstar";
            prev.value += value2;
            prev.output = globstar(opts);
            state.output = prev.output;
            state.globstar = true;
            consume(value2);
            continue;
          }
          if (prior.type === "slash" && prior.prev.type !== "bos" && !afterStar && eos()) {
            state.output = state.output.slice(0, -(prior.output + prev.output).length);
            prior.output = `(?:${prior.output}`;
            prev.type = "globstar";
            prev.output = globstar(opts) + (opts.strictSlashes ? ")" : "|$)");
            prev.value += value2;
            state.globstar = true;
            state.output += prior.output + prev.output;
            consume(value2);
            continue;
          }
          if (prior.type === "slash" && prior.prev.type !== "bos" && rest[0] === "/") {
            const end = rest[1] !== void 0 ? "|$" : "";
            state.output = state.output.slice(0, -(prior.output + prev.output).length);
            prior.output = `(?:${prior.output}`;
            prev.type = "globstar";
            prev.output = `${globstar(opts)}${SLASH_LITERAL}|${SLASH_LITERAL}${end})`;
            prev.value += value2;
            state.output += prior.output + prev.output;
            state.globstar = true;
            consume(value2 + advance());
            push2({ type: "slash", value: "/", output: "" });
            continue;
          }
          if (prior.type === "bos" && rest[0] === "/") {
            prev.type = "globstar";
            prev.value += value2;
            prev.output = `(?:^|${SLASH_LITERAL}|${globstar(opts)}${SLASH_LITERAL})`;
            state.output = prev.output;
            state.globstar = true;
            consume(value2 + advance());
            push2({ type: "slash", value: "/", output: "" });
            continue;
          }
          state.output = state.output.slice(0, -prev.output.length);
          prev.type = "globstar";
          prev.output = globstar(opts);
          prev.value += value2;
          state.output += prev.output;
          state.globstar = true;
          consume(value2);
          continue;
        }
        const token = { type: "star", value: value2, output: star };
        if (opts.bash === true) {
          token.output = ".*?";
          if (prev.type === "bos" || prev.type === "slash") {
            token.output = nodot + token.output;
          }
          push2(token);
          continue;
        }
        if (prev && (prev.type === "bracket" || prev.type === "paren") && opts.regex === true) {
          token.output = value2;
          push2(token);
          continue;
        }
        if (state.index === state.start || prev.type === "slash" || prev.type === "dot") {
          if (prev.type === "dot") {
            state.output += NO_DOT_SLASH;
            prev.output += NO_DOT_SLASH;
          } else if (opts.dot === true) {
            state.output += NO_DOTS_SLASH;
            prev.output += NO_DOTS_SLASH;
          } else {
            state.output += nodot;
            prev.output += nodot;
          }
          if (peek() !== "*") {
            state.output += ONE_CHAR;
            prev.output += ONE_CHAR;
          }
        }
        push2(token);
      }
      while (state.brackets > 0) {
        if (opts.strictBrackets === true) throw new SyntaxError(syntaxError("closing", "]"));
        state.output = utils2.escapeLast(state.output, "[");
        decrement("brackets");
      }
      while (state.parens > 0) {
        if (opts.strictBrackets === true) throw new SyntaxError(syntaxError("closing", ")"));
        state.output = utils2.escapeLast(state.output, "(");
        decrement("parens");
      }
      while (state.braces > 0) {
        if (opts.strictBrackets === true) throw new SyntaxError(syntaxError("closing", "}"));
        state.output = utils2.escapeLast(state.output, "{");
        decrement("braces");
      }
      if (opts.strictSlashes !== true && (prev.type === "star" || prev.type === "bracket")) {
        push2({ type: "maybe_slash", value: "", output: `${SLASH_LITERAL}?` });
      }
      if (state.backtrack === true) {
        state.output = "";
        for (const token of state.tokens) {
          state.output += token.output != null ? token.output : token.value;
          if (token.suffix) {
            state.output += token.suffix;
          }
        }
      }
      return state;
    };
    parse4.fastpaths = (input, options2) => {
      const opts = { ...options2 };
      const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH2, opts.maxLength) : MAX_LENGTH2;
      const len = input.length;
      if (len > max) {
        throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
      }
      input = REPLACEMENTS[input] || input;
      const {
        DOT_LITERAL,
        SLASH_LITERAL,
        ONE_CHAR,
        DOTS_SLASH,
        NO_DOT,
        NO_DOTS,
        NO_DOTS_SLASH,
        STAR: STAR2,
        START_ANCHOR
      } = constants2.globChars(opts.windows);
      const nodot = opts.dot ? NO_DOTS : NO_DOT;
      const slashDot = opts.dot ? NO_DOTS_SLASH : NO_DOT;
      const capture = opts.capture ? "" : "?:";
      const state = { negated: false, prefix: "" };
      let star = opts.bash === true ? ".*?" : STAR2;
      if (opts.capture) {
        star = `(${star})`;
      }
      const globstar = (opts2) => {
        if (opts2.noglobstar === true) return star;
        return `(${capture}(?:(?!${START_ANCHOR}${opts2.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
      };
      const create = (str) => {
        switch (str) {
          case "*":
            return `${nodot}${ONE_CHAR}${star}`;
          case ".*":
            return `${DOT_LITERAL}${ONE_CHAR}${star}`;
          case "*.*":
            return `${nodot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;
          case "*/*":
            return `${nodot}${star}${SLASH_LITERAL}${ONE_CHAR}${slashDot}${star}`;
          case "**":
            return nodot + globstar(opts);
          case "**/*":
            return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${ONE_CHAR}${star}`;
          case "**/*.*":
            return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;
          case "**/.*":
            return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${DOT_LITERAL}${ONE_CHAR}${star}`;
          default: {
            const match = /^(.*?)\.(\w+)$/.exec(str);
            if (!match) return;
            const source2 = create(match[1]);
            if (!source2) return;
            return source2 + DOT_LITERAL + match[2];
          }
        }
      };
      const output = utils2.removePrefix(input, state);
      let source = create(output);
      if (source && opts.strictSlashes !== true) {
        source += `${SLASH_LITERAL}?`;
      }
      return source;
    };
    module.exports = parse4;
  }
});

// node_modules/vite/node_modules/picomatch/lib/picomatch.js
var require_picomatch = __commonJS({
  "node_modules/vite/node_modules/picomatch/lib/picomatch.js"(exports, module) {
    "use strict";
    var scan = require_scan();
    var parse4 = require_parse();
    var utils2 = require_utils();
    var constants2 = require_constants();
    var isObject2 = (val) => val && typeof val === "object" && !Array.isArray(val);
    var picomatch3 = (glob2, options2, returnState = false) => {
      if (Array.isArray(glob2)) {
        const fns = glob2.map((input) => picomatch3(input, options2, returnState));
        const arrayMatcher = (str) => {
          for (const isMatch2 of fns) {
            const state2 = isMatch2(str);
            if (state2) return state2;
          }
          return false;
        };
        return arrayMatcher;
      }
      const isState = isObject2(glob2) && glob2.tokens && glob2.input;
      if (glob2 === "" || typeof glob2 !== "string" && !isState) {
        throw new TypeError("Expected pattern to be a non-empty string");
      }
      const opts = options2 || {};
      const posix3 = opts.windows;
      const regex = isState ? picomatch3.compileRe(glob2, options2) : picomatch3.makeRe(glob2, options2, false, true);
      const state = regex.state;
      delete regex.state;
      let isIgnored = () => false;
      if (opts.ignore) {
        const ignoreOpts = { ...options2, ignore: null, onMatch: null, onResult: null };
        isIgnored = picomatch3(opts.ignore, ignoreOpts, returnState);
      }
      const matcher = (input, returnObject = false) => {
        const { isMatch: isMatch2, match, output } = picomatch3.test(input, regex, options2, { glob: glob2, posix: posix3 });
        const result = { glob: glob2, state, regex, posix: posix3, input, output, match, isMatch: isMatch2 };
        if (typeof opts.onResult === "function") {
          opts.onResult(result);
        }
        if (isMatch2 === false) {
          result.isMatch = false;
          return returnObject ? result : false;
        }
        if (isIgnored(input)) {
          if (typeof opts.onIgnore === "function") {
            opts.onIgnore(result);
          }
          result.isMatch = false;
          return returnObject ? result : false;
        }
        if (typeof opts.onMatch === "function") {
          opts.onMatch(result);
        }
        return returnObject ? result : true;
      };
      if (returnState) {
        matcher.state = state;
      }
      return matcher;
    };
    picomatch3.test = (input, regex, options2, { glob: glob2, posix: posix3 } = {}) => {
      if (typeof input !== "string") {
        throw new TypeError("Expected input to be a string");
      }
      if (input === "") {
        return { isMatch: false, output: "" };
      }
      const opts = options2 || {};
      const format2 = opts.format || (posix3 ? utils2.toPosixSlashes : null);
      let match = input === glob2;
      let output = match && format2 ? format2(input) : input;
      if (match === false) {
        output = format2 ? format2(input) : input;
        match = output === glob2;
      }
      if (match === false || opts.capture === true) {
        if (opts.matchBase === true || opts.basename === true) {
          match = picomatch3.matchBase(input, regex, options2, posix3);
        } else {
          match = regex.exec(output);
        }
      }
      return { isMatch: Boolean(match), match, output };
    };
    picomatch3.matchBase = (input, glob2, options2) => {
      const regex = glob2 instanceof RegExp ? glob2 : picomatch3.makeRe(glob2, options2);
      return regex.test(utils2.basename(input));
    };
    picomatch3.isMatch = (str, patterns, options2) => picomatch3(patterns, options2)(str);
    picomatch3.parse = (pattern, options2) => {
      if (Array.isArray(pattern)) return pattern.map((p2) => picomatch3.parse(p2, options2));
      return parse4(pattern, { ...options2, fastpaths: false });
    };
    picomatch3.scan = (input, options2) => scan(input, options2);
    picomatch3.compileRe = (state, options2, returnOutput = false, returnState = false) => {
      if (returnOutput === true) {
        return state.output;
      }
      const opts = options2 || {};
      const prepend = opts.contains ? "" : "^";
      const append2 = opts.contains ? "" : "$";
      let source = `${prepend}(?:${state.output})${append2}`;
      if (state && state.negated === true) {
        source = `^(?!${source}).*$`;
      }
      const regex = picomatch3.toRegex(source, options2);
      if (returnState === true) {
        regex.state = state;
      }
      return regex;
    };
    picomatch3.makeRe = (input, options2 = {}, returnOutput = false, returnState = false) => {
      if (!input || typeof input !== "string") {
        throw new TypeError("Expected a non-empty string");
      }
      let parsed = { negated: false, fastpaths: true };
      if (options2.fastpaths !== false && (input[0] === "." || input[0] === "*")) {
        parsed.output = parse4.fastpaths(input, options2);
      }
      if (!parsed.output) {
        parsed = parse4(input, options2);
      }
      return picomatch3.compileRe(parsed, options2, returnOutput, returnState);
    };
    picomatch3.toRegex = (source, options2) => {
      try {
        const opts = options2 || {};
        return new RegExp(source, opts.flags || (opts.nocase ? "i" : ""));
      } catch (err2) {
        if (options2 && options2.debug === true) throw err2;
        return /$^/;
      }
    };
    picomatch3.constants = constants2;
    module.exports = picomatch3;
  }
});

// node_modules/vite/node_modules/picomatch/index.js
var require_picomatch2 = __commonJS({
  "node_modules/vite/node_modules/picomatch/index.js"(exports, module) {
    "use strict";
    var pico = require_picomatch();
    var utils2 = require_utils();
    function picomatch3(glob2, options2, returnState = false) {
      if (options2 && (options2.windows === null || options2.windows === void 0)) {
        options2 = { ...options2, windows: utils2.isWindows() };
      }
      return pico(glob2, options2, returnState);
    }
    Object.assign(picomatch3, pico);
    module.exports = picomatch3;
  }
});

// browser-external:child_process
var require_child_process = __commonJS({
  "browser-external:child_process"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "child_process" has been externalized for browser compatibility. Cannot access "child_process.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:worker_threads
var require_worker_threads = __commonJS({
  "browser-external:worker_threads"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "worker_threads" has been externalized for browser compatibility. Cannot access "worker_threads.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/esbuild/lib/main.js
var require_main = __commonJS({
  "node_modules/esbuild/lib/main.js"(exports, module) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var node_exports = {};
    __export(node_exports, {
      analyzeMetafile: () => analyzeMetafile,
      analyzeMetafileSync: () => analyzeMetafileSync,
      build: () => build2,
      buildSync: () => buildSync,
      context: () => context,
      default: () => node_default,
      formatMessages: () => formatMessages2,
      formatMessagesSync: () => formatMessagesSync,
      initialize: () => initialize,
      stop: () => stop,
      transform: () => transform2,
      transformSync: () => transformSync,
      version: () => version3
    });
    module.exports = __toCommonJS(node_exports);
    function encodePacket(packet) {
      let visit = (value2) => {
        if (value2 === null) {
          bb.write8(0);
        } else if (typeof value2 === "boolean") {
          bb.write8(1);
          bb.write8(+value2);
        } else if (typeof value2 === "number") {
          bb.write8(2);
          bb.write32(value2 | 0);
        } else if (typeof value2 === "string") {
          bb.write8(3);
          bb.write(encodeUTF8(value2));
        } else if (value2 instanceof Uint8Array) {
          bb.write8(4);
          bb.write(value2);
        } else if (value2 instanceof Array) {
          bb.write8(5);
          bb.write32(value2.length);
          for (let item of value2) {
            visit(item);
          }
        } else {
          let keys = Object.keys(value2);
          bb.write8(6);
          bb.write32(keys.length);
          for (let key of keys) {
            bb.write(encodeUTF8(key));
            visit(value2[key]);
          }
        }
      };
      let bb = new ByteBuffer();
      bb.write32(0);
      bb.write32(packet.id << 1 | +!packet.isRequest);
      visit(packet.value);
      writeUInt32LE(bb.buf, bb.len - 4, 0);
      return bb.buf.subarray(0, bb.len);
    }
    function decodePacket(bytes) {
      let visit = () => {
        switch (bb.read8()) {
          case 0:
            return null;
          case 1:
            return !!bb.read8();
          case 2:
            return bb.read32();
          case 3:
            return decodeUTF8(bb.read());
          case 4:
            return bb.read();
          case 5: {
            let count = bb.read32();
            let value22 = [];
            for (let i = 0; i < count; i++) {
              value22.push(visit());
            }
            return value22;
          }
          case 6: {
            let count = bb.read32();
            let value22 = {};
            for (let i = 0; i < count; i++) {
              value22[decodeUTF8(bb.read())] = visit();
            }
            return value22;
          }
          default:
            throw new Error("Invalid packet");
        }
      };
      let bb = new ByteBuffer(bytes);
      let id = bb.read32();
      let isRequest = (id & 1) === 0;
      id >>>= 1;
      let value2 = visit();
      if (bb.ptr !== bytes.length) {
        throw new Error("Invalid packet");
      }
      return { id, isRequest, value: value2 };
    }
    var ByteBuffer = class {
      constructor(buf = new Uint8Array(1024)) {
        this.buf = buf;
        this.len = 0;
        this.ptr = 0;
      }
      _write(delta) {
        if (this.len + delta > this.buf.length) {
          let clone2 = new Uint8Array((this.len + delta) * 2);
          clone2.set(this.buf);
          this.buf = clone2;
        }
        this.len += delta;
        return this.len - delta;
      }
      write8(value2) {
        let offset2 = this._write(1);
        this.buf[offset2] = value2;
      }
      write32(value2) {
        let offset2 = this._write(4);
        writeUInt32LE(this.buf, value2, offset2);
      }
      write(bytes) {
        let offset2 = this._write(4 + bytes.length);
        writeUInt32LE(this.buf, bytes.length, offset2);
        this.buf.set(bytes, offset2 + 4);
      }
      _read(delta) {
        if (this.ptr + delta > this.buf.length) {
          throw new Error("Invalid packet");
        }
        this.ptr += delta;
        return this.ptr - delta;
      }
      read8() {
        return this.buf[this._read(1)];
      }
      read32() {
        return readUInt32LE(this.buf, this._read(4));
      }
      read() {
        let length = this.read32();
        let bytes = new Uint8Array(length);
        let ptr = this._read(bytes.length);
        bytes.set(this.buf.subarray(ptr, ptr + length));
        return bytes;
      }
    };
    var encodeUTF8;
    var decodeUTF8;
    var encodeInvariant;
    if (typeof TextEncoder !== "undefined" && typeof TextDecoder !== "undefined") {
      let encoder = new TextEncoder();
      let decoder2 = new TextDecoder();
      encodeUTF8 = (text) => encoder.encode(text);
      decodeUTF8 = (bytes) => decoder2.decode(bytes);
      encodeInvariant = 'new TextEncoder().encode("")';
    } else if (typeof Buffer !== "undefined") {
      encodeUTF8 = (text) => Buffer.from(text);
      decodeUTF8 = (bytes) => {
        let { buffer, byteOffset, byteLength } = bytes;
        return Buffer.from(buffer, byteOffset, byteLength).toString();
      };
      encodeInvariant = 'Buffer.from("")';
    } else {
      throw new Error("No UTF-8 codec found");
    }
    if (!(encodeUTF8("") instanceof Uint8Array))
      throw new Error(`Invariant violation: "${encodeInvariant} instanceof Uint8Array" is incorrectly false

This indicates that your JavaScript environment is broken. You cannot use
esbuild in this environment because esbuild relies on this invariant. This
is not a problem with esbuild. You need to fix your environment instead.
`);
    function readUInt32LE(buffer, offset2) {
      return buffer[offset2++] | buffer[offset2++] << 8 | buffer[offset2++] << 16 | buffer[offset2++] << 24;
    }
    function writeUInt32LE(buffer, value2, offset2) {
      buffer[offset2++] = value2;
      buffer[offset2++] = value2 >> 8;
      buffer[offset2++] = value2 >> 16;
      buffer[offset2++] = value2 >> 24;
    }
    var quote3 = JSON.stringify;
    var buildLogLevelDefault = "warning";
    var transformLogLevelDefault = "silent";
    function validateTarget(target) {
      validateStringValue(target, "target");
      if (target.indexOf(",") >= 0) throw new Error(`Invalid target: ${target}`);
      return target;
    }
    var canBeAnything = () => null;
    var mustBeBoolean = (value2) => typeof value2 === "boolean" ? null : "a boolean";
    var mustBeString = (value2) => typeof value2 === "string" ? null : "a string";
    var mustBeRegExp = (value2) => value2 instanceof RegExp ? null : "a RegExp object";
    var mustBeInteger = (value2) => typeof value2 === "number" && value2 === (value2 | 0) ? null : "an integer";
    var mustBeValidPortNumber = (value2) => typeof value2 === "number" && value2 === (value2 | 0) && value2 >= 0 && value2 <= 65535 ? null : "a valid port number";
    var mustBeFunction = (value2) => typeof value2 === "function" ? null : "a function";
    var mustBeArray = (value2) => Array.isArray(value2) ? null : "an array";
    var mustBeObject = (value2) => typeof value2 === "object" && value2 !== null && !Array.isArray(value2) ? null : "an object";
    var mustBeEntryPoints = (value2) => typeof value2 === "object" && value2 !== null ? null : "an array or an object";
    var mustBeWebAssemblyModule = (value2) => value2 instanceof WebAssembly.Module ? null : "a WebAssembly.Module";
    var mustBeObjectOrNull = (value2) => typeof value2 === "object" && !Array.isArray(value2) ? null : "an object or null";
    var mustBeStringOrBoolean = (value2) => typeof value2 === "string" || typeof value2 === "boolean" ? null : "a string or a boolean";
    var mustBeStringOrObject = (value2) => typeof value2 === "string" || typeof value2 === "object" && value2 !== null && !Array.isArray(value2) ? null : "a string or an object";
    var mustBeStringOrArray = (value2) => typeof value2 === "string" || Array.isArray(value2) ? null : "a string or an array";
    var mustBeStringOrUint8Array = (value2) => typeof value2 === "string" || value2 instanceof Uint8Array ? null : "a string or a Uint8Array";
    var mustBeStringOrURL = (value2) => typeof value2 === "string" || value2 instanceof URL ? null : "a string or a URL";
    function getFlag(object, keys, key, mustBeFn) {
      let value2 = object[key];
      keys[key + ""] = true;
      if (value2 === void 0) return void 0;
      let mustBe = mustBeFn(value2);
      if (mustBe !== null) throw new Error(`${quote3(key)} must be ${mustBe}`);
      return value2;
    }
    function checkForInvalidFlags(object, keys, where) {
      for (let key in object) {
        if (!(key in keys)) {
          throw new Error(`Invalid option ${where}: ${quote3(key)}`);
        }
      }
    }
    function validateInitializeOptions(options2) {
      let keys = /* @__PURE__ */ Object.create(null);
      let wasmURL = getFlag(options2, keys, "wasmURL", mustBeStringOrURL);
      let wasmModule = getFlag(options2, keys, "wasmModule", mustBeWebAssemblyModule);
      let worker = getFlag(options2, keys, "worker", mustBeBoolean);
      checkForInvalidFlags(options2, keys, "in initialize() call");
      return {
        wasmURL,
        wasmModule,
        worker
      };
    }
    function validateMangleCache(mangleCache) {
      let validated;
      if (mangleCache !== void 0) {
        validated = /* @__PURE__ */ Object.create(null);
        for (let key in mangleCache) {
          let value2 = mangleCache[key];
          if (typeof value2 === "string" || value2 === false) {
            validated[key] = value2;
          } else {
            throw new Error(`Expected ${quote3(key)} in mangle cache to map to either a string or false`);
          }
        }
      }
      return validated;
    }
    function pushLogFlags(flags, options2, keys, isTTY2, logLevelDefault) {
      let color = getFlag(options2, keys, "color", mustBeBoolean);
      let logLevel = getFlag(options2, keys, "logLevel", mustBeString);
      let logLimit = getFlag(options2, keys, "logLimit", mustBeInteger);
      if (color !== void 0) flags.push(`--color=${color}`);
      else if (isTTY2) flags.push(`--color=true`);
      flags.push(`--log-level=${logLevel || logLevelDefault}`);
      flags.push(`--log-limit=${logLimit || 0}`);
    }
    function validateStringValue(value2, what, key) {
      if (typeof value2 !== "string") {
        throw new Error(`Expected value for ${what}${key !== void 0 ? " " + quote3(key) : ""} to be a string, got ${typeof value2} instead`);
      }
      return value2;
    }
    function pushCommonFlags(flags, options2, keys) {
      let legalComments = getFlag(options2, keys, "legalComments", mustBeString);
      let sourceRoot = getFlag(options2, keys, "sourceRoot", mustBeString);
      let sourcesContent = getFlag(options2, keys, "sourcesContent", mustBeBoolean);
      let target = getFlag(options2, keys, "target", mustBeStringOrArray);
      let format2 = getFlag(options2, keys, "format", mustBeString);
      let globalName = getFlag(options2, keys, "globalName", mustBeString);
      let mangleProps = getFlag(options2, keys, "mangleProps", mustBeRegExp);
      let reserveProps = getFlag(options2, keys, "reserveProps", mustBeRegExp);
      let mangleQuoted = getFlag(options2, keys, "mangleQuoted", mustBeBoolean);
      let minify = getFlag(options2, keys, "minify", mustBeBoolean);
      let minifySyntax = getFlag(options2, keys, "minifySyntax", mustBeBoolean);
      let minifyWhitespace = getFlag(options2, keys, "minifyWhitespace", mustBeBoolean);
      let minifyIdentifiers = getFlag(options2, keys, "minifyIdentifiers", mustBeBoolean);
      let lineLimit = getFlag(options2, keys, "lineLimit", mustBeInteger);
      let drop = getFlag(options2, keys, "drop", mustBeArray);
      let dropLabels = getFlag(options2, keys, "dropLabels", mustBeArray);
      let charset = getFlag(options2, keys, "charset", mustBeString);
      let treeShaking = getFlag(options2, keys, "treeShaking", mustBeBoolean);
      let ignoreAnnotations = getFlag(options2, keys, "ignoreAnnotations", mustBeBoolean);
      let jsx = getFlag(options2, keys, "jsx", mustBeString);
      let jsxFactory = getFlag(options2, keys, "jsxFactory", mustBeString);
      let jsxFragment = getFlag(options2, keys, "jsxFragment", mustBeString);
      let jsxImportSource = getFlag(options2, keys, "jsxImportSource", mustBeString);
      let jsxDev = getFlag(options2, keys, "jsxDev", mustBeBoolean);
      let jsxSideEffects = getFlag(options2, keys, "jsxSideEffects", mustBeBoolean);
      let define = getFlag(options2, keys, "define", mustBeObject);
      let logOverride = getFlag(options2, keys, "logOverride", mustBeObject);
      let supported = getFlag(options2, keys, "supported", mustBeObject);
      let pure = getFlag(options2, keys, "pure", mustBeArray);
      let keepNames = getFlag(options2, keys, "keepNames", mustBeBoolean);
      let platform2 = getFlag(options2, keys, "platform", mustBeString);
      let tsconfigRaw = getFlag(options2, keys, "tsconfigRaw", mustBeStringOrObject);
      if (legalComments) flags.push(`--legal-comments=${legalComments}`);
      if (sourceRoot !== void 0) flags.push(`--source-root=${sourceRoot}`);
      if (sourcesContent !== void 0) flags.push(`--sources-content=${sourcesContent}`);
      if (target) {
        if (Array.isArray(target)) flags.push(`--target=${Array.from(target).map(validateTarget).join(",")}`);
        else flags.push(`--target=${validateTarget(target)}`);
      }
      if (format2) flags.push(`--format=${format2}`);
      if (globalName) flags.push(`--global-name=${globalName}`);
      if (platform2) flags.push(`--platform=${platform2}`);
      if (tsconfigRaw) flags.push(`--tsconfig-raw=${typeof tsconfigRaw === "string" ? tsconfigRaw : JSON.stringify(tsconfigRaw)}`);
      if (minify) flags.push("--minify");
      if (minifySyntax) flags.push("--minify-syntax");
      if (minifyWhitespace) flags.push("--minify-whitespace");
      if (minifyIdentifiers) flags.push("--minify-identifiers");
      if (lineLimit) flags.push(`--line-limit=${lineLimit}`);
      if (charset) flags.push(`--charset=${charset}`);
      if (treeShaking !== void 0) flags.push(`--tree-shaking=${treeShaking}`);
      if (ignoreAnnotations) flags.push(`--ignore-annotations`);
      if (drop) for (let what of drop) flags.push(`--drop:${validateStringValue(what, "drop")}`);
      if (dropLabels) flags.push(`--drop-labels=${Array.from(dropLabels).map((what) => validateStringValue(what, "dropLabels")).join(",")}`);
      if (mangleProps) flags.push(`--mangle-props=${mangleProps.source}`);
      if (reserveProps) flags.push(`--reserve-props=${reserveProps.source}`);
      if (mangleQuoted !== void 0) flags.push(`--mangle-quoted=${mangleQuoted}`);
      if (jsx) flags.push(`--jsx=${jsx}`);
      if (jsxFactory) flags.push(`--jsx-factory=${jsxFactory}`);
      if (jsxFragment) flags.push(`--jsx-fragment=${jsxFragment}`);
      if (jsxImportSource) flags.push(`--jsx-import-source=${jsxImportSource}`);
      if (jsxDev) flags.push(`--jsx-dev`);
      if (jsxSideEffects) flags.push(`--jsx-side-effects`);
      if (define) {
        for (let key in define) {
          if (key.indexOf("=") >= 0) throw new Error(`Invalid define: ${key}`);
          flags.push(`--define:${key}=${validateStringValue(define[key], "define", key)}`);
        }
      }
      if (logOverride) {
        for (let key in logOverride) {
          if (key.indexOf("=") >= 0) throw new Error(`Invalid log override: ${key}`);
          flags.push(`--log-override:${key}=${validateStringValue(logOverride[key], "log override", key)}`);
        }
      }
      if (supported) {
        for (let key in supported) {
          if (key.indexOf("=") >= 0) throw new Error(`Invalid supported: ${key}`);
          const value2 = supported[key];
          if (typeof value2 !== "boolean") throw new Error(`Expected value for supported ${quote3(key)} to be a boolean, got ${typeof value2} instead`);
          flags.push(`--supported:${key}=${value2}`);
        }
      }
      if (pure) for (let fn of pure) flags.push(`--pure:${validateStringValue(fn, "pure")}`);
      if (keepNames) flags.push(`--keep-names`);
    }
    function flagsForBuildOptions(callName, options2, isTTY2, logLevelDefault, writeDefault) {
      var _a22;
      let flags = [];
      let entries = [];
      let keys = /* @__PURE__ */ Object.create(null);
      let stdinContents = null;
      let stdinResolveDir = null;
      pushLogFlags(flags, options2, keys, isTTY2, logLevelDefault);
      pushCommonFlags(flags, options2, keys);
      let sourcemap = getFlag(options2, keys, "sourcemap", mustBeStringOrBoolean);
      let bundle = getFlag(options2, keys, "bundle", mustBeBoolean);
      let splitting = getFlag(options2, keys, "splitting", mustBeBoolean);
      let preserveSymlinks = getFlag(options2, keys, "preserveSymlinks", mustBeBoolean);
      let metafile = getFlag(options2, keys, "metafile", mustBeBoolean);
      let outfile = getFlag(options2, keys, "outfile", mustBeString);
      let outdir = getFlag(options2, keys, "outdir", mustBeString);
      let outbase = getFlag(options2, keys, "outbase", mustBeString);
      let tsconfig = getFlag(options2, keys, "tsconfig", mustBeString);
      let resolveExtensions2 = getFlag(options2, keys, "resolveExtensions", mustBeArray);
      let nodePathsInput = getFlag(options2, keys, "nodePaths", mustBeArray);
      let mainFields = getFlag(options2, keys, "mainFields", mustBeArray);
      let conditions = getFlag(options2, keys, "conditions", mustBeArray);
      let external = getFlag(options2, keys, "external", mustBeArray);
      let packages = getFlag(options2, keys, "packages", mustBeString);
      let alias2 = getFlag(options2, keys, "alias", mustBeObject);
      let loader2 = getFlag(options2, keys, "loader", mustBeObject);
      let outExtension = getFlag(options2, keys, "outExtension", mustBeObject);
      let publicPath = getFlag(options2, keys, "publicPath", mustBeString);
      let entryNames = getFlag(options2, keys, "entryNames", mustBeString);
      let chunkNames = getFlag(options2, keys, "chunkNames", mustBeString);
      let assetNames = getFlag(options2, keys, "assetNames", mustBeString);
      let inject = getFlag(options2, keys, "inject", mustBeArray);
      let banner = getFlag(options2, keys, "banner", mustBeObject);
      let footer = getFlag(options2, keys, "footer", mustBeObject);
      let entryPoints = getFlag(options2, keys, "entryPoints", mustBeEntryPoints);
      let absWorkingDir = getFlag(options2, keys, "absWorkingDir", mustBeString);
      let stdin = getFlag(options2, keys, "stdin", mustBeObject);
      let write = (_a22 = getFlag(options2, keys, "write", mustBeBoolean)) != null ? _a22 : writeDefault;
      let allowOverwrite = getFlag(options2, keys, "allowOverwrite", mustBeBoolean);
      let mangleCache = getFlag(options2, keys, "mangleCache", mustBeObject);
      keys.plugins = true;
      checkForInvalidFlags(options2, keys, `in ${callName}() call`);
      if (sourcemap) flags.push(`--sourcemap${sourcemap === true ? "" : `=${sourcemap}`}`);
      if (bundle) flags.push("--bundle");
      if (allowOverwrite) flags.push("--allow-overwrite");
      if (splitting) flags.push("--splitting");
      if (preserveSymlinks) flags.push("--preserve-symlinks");
      if (metafile) flags.push(`--metafile`);
      if (outfile) flags.push(`--outfile=${outfile}`);
      if (outdir) flags.push(`--outdir=${outdir}`);
      if (outbase) flags.push(`--outbase=${outbase}`);
      if (tsconfig) flags.push(`--tsconfig=${tsconfig}`);
      if (packages) flags.push(`--packages=${packages}`);
      if (resolveExtensions2) {
        let values = [];
        for (let value2 of resolveExtensions2) {
          validateStringValue(value2, "resolve extension");
          if (value2.indexOf(",") >= 0) throw new Error(`Invalid resolve extension: ${value2}`);
          values.push(value2);
        }
        flags.push(`--resolve-extensions=${values.join(",")}`);
      }
      if (publicPath) flags.push(`--public-path=${publicPath}`);
      if (entryNames) flags.push(`--entry-names=${entryNames}`);
      if (chunkNames) flags.push(`--chunk-names=${chunkNames}`);
      if (assetNames) flags.push(`--asset-names=${assetNames}`);
      if (mainFields) {
        let values = [];
        for (let value2 of mainFields) {
          validateStringValue(value2, "main field");
          if (value2.indexOf(",") >= 0) throw new Error(`Invalid main field: ${value2}`);
          values.push(value2);
        }
        flags.push(`--main-fields=${values.join(",")}`);
      }
      if (conditions) {
        let values = [];
        for (let value2 of conditions) {
          validateStringValue(value2, "condition");
          if (value2.indexOf(",") >= 0) throw new Error(`Invalid condition: ${value2}`);
          values.push(value2);
        }
        flags.push(`--conditions=${values.join(",")}`);
      }
      if (external) for (let name of external) flags.push(`--external:${validateStringValue(name, "external")}`);
      if (alias2) {
        for (let old in alias2) {
          if (old.indexOf("=") >= 0) throw new Error(`Invalid package name in alias: ${old}`);
          flags.push(`--alias:${old}=${validateStringValue(alias2[old], "alias", old)}`);
        }
      }
      if (banner) {
        for (let type in banner) {
          if (type.indexOf("=") >= 0) throw new Error(`Invalid banner file type: ${type}`);
          flags.push(`--banner:${type}=${validateStringValue(banner[type], "banner", type)}`);
        }
      }
      if (footer) {
        for (let type in footer) {
          if (type.indexOf("=") >= 0) throw new Error(`Invalid footer file type: ${type}`);
          flags.push(`--footer:${type}=${validateStringValue(footer[type], "footer", type)}`);
        }
      }
      if (inject) for (let path32 of inject) flags.push(`--inject:${validateStringValue(path32, "inject")}`);
      if (loader2) {
        for (let ext in loader2) {
          if (ext.indexOf("=") >= 0) throw new Error(`Invalid loader extension: ${ext}`);
          flags.push(`--loader:${ext}=${validateStringValue(loader2[ext], "loader", ext)}`);
        }
      }
      if (outExtension) {
        for (let ext in outExtension) {
          if (ext.indexOf("=") >= 0) throw new Error(`Invalid out extension: ${ext}`);
          flags.push(`--out-extension:${ext}=${validateStringValue(outExtension[ext], "out extension", ext)}`);
        }
      }
      if (entryPoints) {
        if (Array.isArray(entryPoints)) {
          for (let i = 0, n2 = entryPoints.length; i < n2; i++) {
            let entryPoint = entryPoints[i];
            if (typeof entryPoint === "object" && entryPoint !== null) {
              let entryPointKeys = /* @__PURE__ */ Object.create(null);
              let input = getFlag(entryPoint, entryPointKeys, "in", mustBeString);
              let output = getFlag(entryPoint, entryPointKeys, "out", mustBeString);
              checkForInvalidFlags(entryPoint, entryPointKeys, "in entry point at index " + i);
              if (input === void 0) throw new Error('Missing property "in" for entry point at index ' + i);
              if (output === void 0) throw new Error('Missing property "out" for entry point at index ' + i);
              entries.push([output, input]);
            } else {
              entries.push(["", validateStringValue(entryPoint, "entry point at index " + i)]);
            }
          }
        } else {
          for (let key in entryPoints) {
            entries.push([key, validateStringValue(entryPoints[key], "entry point", key)]);
          }
        }
      }
      if (stdin) {
        let stdinKeys = /* @__PURE__ */ Object.create(null);
        let contents = getFlag(stdin, stdinKeys, "contents", mustBeStringOrUint8Array);
        let resolveDir = getFlag(stdin, stdinKeys, "resolveDir", mustBeString);
        let sourcefile = getFlag(stdin, stdinKeys, "sourcefile", mustBeString);
        let loader22 = getFlag(stdin, stdinKeys, "loader", mustBeString);
        checkForInvalidFlags(stdin, stdinKeys, 'in "stdin" object');
        if (sourcefile) flags.push(`--sourcefile=${sourcefile}`);
        if (loader22) flags.push(`--loader=${loader22}`);
        if (resolveDir) stdinResolveDir = resolveDir;
        if (typeof contents === "string") stdinContents = encodeUTF8(contents);
        else if (contents instanceof Uint8Array) stdinContents = contents;
      }
      let nodePaths = [];
      if (nodePathsInput) {
        for (let value2 of nodePathsInput) {
          value2 += "";
          nodePaths.push(value2);
        }
      }
      return {
        entries,
        flags,
        write,
        stdinContents,
        stdinResolveDir,
        absWorkingDir,
        nodePaths,
        mangleCache: validateMangleCache(mangleCache)
      };
    }
    function flagsForTransformOptions(callName, options2, isTTY2, logLevelDefault) {
      let flags = [];
      let keys = /* @__PURE__ */ Object.create(null);
      pushLogFlags(flags, options2, keys, isTTY2, logLevelDefault);
      pushCommonFlags(flags, options2, keys);
      let sourcemap = getFlag(options2, keys, "sourcemap", mustBeStringOrBoolean);
      let sourcefile = getFlag(options2, keys, "sourcefile", mustBeString);
      let loader2 = getFlag(options2, keys, "loader", mustBeString);
      let banner = getFlag(options2, keys, "banner", mustBeString);
      let footer = getFlag(options2, keys, "footer", mustBeString);
      let mangleCache = getFlag(options2, keys, "mangleCache", mustBeObject);
      checkForInvalidFlags(options2, keys, `in ${callName}() call`);
      if (sourcemap) flags.push(`--sourcemap=${sourcemap === true ? "external" : sourcemap}`);
      if (sourcefile) flags.push(`--sourcefile=${sourcefile}`);
      if (loader2) flags.push(`--loader=${loader2}`);
      if (banner) flags.push(`--banner=${banner}`);
      if (footer) flags.push(`--footer=${footer}`);
      return {
        flags,
        mangleCache: validateMangleCache(mangleCache)
      };
    }
    function createChannel(streamIn) {
      const requestCallbacksByKey = {};
      const closeData = { didClose: false, reason: "" };
      let responseCallbacks = {};
      let nextRequestID = 0;
      let nextBuildKey = 0;
      let stdout = new Uint8Array(16 * 1024);
      let stdoutUsed = 0;
      let readFromStdout = (chunk) => {
        let limit = stdoutUsed + chunk.length;
        if (limit > stdout.length) {
          let swap = new Uint8Array(limit * 2);
          swap.set(stdout);
          stdout = swap;
        }
        stdout.set(chunk, stdoutUsed);
        stdoutUsed += chunk.length;
        let offset2 = 0;
        while (offset2 + 4 <= stdoutUsed) {
          let length = readUInt32LE(stdout, offset2);
          if (offset2 + 4 + length > stdoutUsed) {
            break;
          }
          offset2 += 4;
          handleIncomingPacket(stdout.subarray(offset2, offset2 + length));
          offset2 += length;
        }
        if (offset2 > 0) {
          stdout.copyWithin(0, offset2, stdoutUsed);
          stdoutUsed -= offset2;
        }
      };
      let afterClose = (error2) => {
        closeData.didClose = true;
        if (error2) closeData.reason = ": " + (error2.message || error2);
        const text = "The service was stopped" + closeData.reason;
        for (let id in responseCallbacks) {
          responseCallbacks[id](text, null);
        }
        responseCallbacks = {};
      };
      let sendRequest = (refs, value2, callback) => {
        if (closeData.didClose) return callback("The service is no longer running" + closeData.reason, null);
        let id = nextRequestID++;
        responseCallbacks[id] = (error2, response) => {
          try {
            callback(error2, response);
          } finally {
            if (refs) refs.unref();
          }
        };
        if (refs) refs.ref();
        streamIn.writeToStdin(encodePacket({ id, isRequest: true, value: value2 }));
      };
      let sendResponse = (id, value2) => {
        if (closeData.didClose) throw new Error("The service is no longer running" + closeData.reason);
        streamIn.writeToStdin(encodePacket({ id, isRequest: false, value: value2 }));
      };
      let handleRequest = async (id, request) => {
        try {
          if (request.command === "ping") {
            sendResponse(id, {});
            return;
          }
          if (typeof request.key === "number") {
            const requestCallbacks = requestCallbacksByKey[request.key];
            if (!requestCallbacks) {
              return;
            }
            const callback = requestCallbacks[request.command];
            if (callback) {
              await callback(id, request);
              return;
            }
          }
          throw new Error(`Invalid command: ` + request.command);
        } catch (e2) {
          const errors = [extractErrorMessageV8(e2, streamIn, null, void 0, "")];
          try {
            sendResponse(id, { errors });
          } catch {
          }
        }
      };
      let isFirstPacket = true;
      let handleIncomingPacket = (bytes) => {
        if (isFirstPacket) {
          isFirstPacket = false;
          let binaryVersion = String.fromCharCode(...bytes);
          if (binaryVersion !== "0.25.1") {
            throw new Error(`Cannot start service: Host version "${"0.25.1"}" does not match binary version ${quote3(binaryVersion)}`);
          }
          return;
        }
        let packet = decodePacket(bytes);
        if (packet.isRequest) {
          handleRequest(packet.id, packet.value);
        } else {
          let callback = responseCallbacks[packet.id];
          delete responseCallbacks[packet.id];
          if (packet.value.error) callback(packet.value.error, {});
          else callback(null, packet.value);
        }
      };
      let buildOrContext = ({ callName, refs, options: options2, isTTY: isTTY2, defaultWD: defaultWD2, callback }) => {
        let refCount = 0;
        const buildKey = nextBuildKey++;
        const requestCallbacks = {};
        const buildRefs = {
          ref() {
            if (++refCount === 1) {
              if (refs) refs.ref();
            }
          },
          unref() {
            if (--refCount === 0) {
              delete requestCallbacksByKey[buildKey];
              if (refs) refs.unref();
            }
          }
        };
        requestCallbacksByKey[buildKey] = requestCallbacks;
        buildRefs.ref();
        buildOrContextImpl(
          callName,
          buildKey,
          sendRequest,
          sendResponse,
          buildRefs,
          streamIn,
          requestCallbacks,
          options2,
          isTTY2,
          defaultWD2,
          (err2, res) => {
            try {
              callback(err2, res);
            } finally {
              buildRefs.unref();
            }
          }
        );
      };
      let transform22 = ({ callName, refs, input, options: options2, isTTY: isTTY2, fs: fs3, callback }) => {
        const details = createObjectStash();
        let start = (inputPath) => {
          try {
            if (typeof input !== "string" && !(input instanceof Uint8Array))
              throw new Error('The input to "transform" must be a string or a Uint8Array');
            let {
              flags,
              mangleCache
            } = flagsForTransformOptions(callName, options2, isTTY2, transformLogLevelDefault);
            let request = {
              command: "transform",
              flags,
              inputFS: inputPath !== null,
              input: inputPath !== null ? encodeUTF8(inputPath) : typeof input === "string" ? encodeUTF8(input) : input
            };
            if (mangleCache) request.mangleCache = mangleCache;
            sendRequest(refs, request, (error2, response) => {
              if (error2) return callback(new Error(error2), null);
              let errors = replaceDetailsInMessages(response.errors, details);
              let warnings = replaceDetailsInMessages(response.warnings, details);
              let outstanding = 1;
              let next = () => {
                if (--outstanding === 0) {
                  let result = {
                    warnings,
                    code: response.code,
                    map: response.map,
                    mangleCache: void 0,
                    legalComments: void 0
                  };
                  if ("legalComments" in response) result.legalComments = response == null ? void 0 : response.legalComments;
                  if (response.mangleCache) result.mangleCache = response == null ? void 0 : response.mangleCache;
                  callback(null, result);
                }
              };
              if (errors.length > 0) return callback(failureErrorWithLog("Transform failed", errors, warnings), null);
              if (response.codeFS) {
                outstanding++;
                fs3.readFile(response.code, (err2, contents) => {
                  if (err2 !== null) {
                    callback(err2, null);
                  } else {
                    response.code = contents;
                    next();
                  }
                });
              }
              if (response.mapFS) {
                outstanding++;
                fs3.readFile(response.map, (err2, contents) => {
                  if (err2 !== null) {
                    callback(err2, null);
                  } else {
                    response.map = contents;
                    next();
                  }
                });
              }
              next();
            });
          } catch (e2) {
            let flags = [];
            try {
              pushLogFlags(flags, options2, {}, isTTY2, transformLogLevelDefault);
            } catch {
            }
            const error2 = extractErrorMessageV8(e2, streamIn, details, void 0, "");
            sendRequest(refs, { command: "error", flags, error: error2 }, () => {
              error2.detail = details.load(error2.detail);
              callback(failureErrorWithLog("Transform failed", [error2], []), null);
            });
          }
        };
        if ((typeof input === "string" || input instanceof Uint8Array) && input.length > 1024 * 1024) {
          let next = start;
          start = () => fs3.writeFile(input, next);
        }
        start(null);
      };
      let formatMessages22 = ({ callName, refs, messages: messages2, options: options2, callback }) => {
        if (!options2) throw new Error(`Missing second argument in ${callName}() call`);
        let keys = {};
        let kind = getFlag(options2, keys, "kind", mustBeString);
        let color = getFlag(options2, keys, "color", mustBeBoolean);
        let terminalWidth = getFlag(options2, keys, "terminalWidth", mustBeInteger);
        checkForInvalidFlags(options2, keys, `in ${callName}() call`);
        if (kind === void 0) throw new Error(`Missing "kind" in ${callName}() call`);
        if (kind !== "error" && kind !== "warning") throw new Error(`Expected "kind" to be "error" or "warning" in ${callName}() call`);
        let request = {
          command: "format-msgs",
          messages: sanitizeMessages(messages2, "messages", null, "", terminalWidth),
          isWarning: kind === "warning"
        };
        if (color !== void 0) request.color = color;
        if (terminalWidth !== void 0) request.terminalWidth = terminalWidth;
        sendRequest(refs, request, (error2, response) => {
          if (error2) return callback(new Error(error2), null);
          callback(null, response.messages);
        });
      };
      let analyzeMetafile2 = ({ callName, refs, metafile, options: options2, callback }) => {
        if (options2 === void 0) options2 = {};
        let keys = {};
        let color = getFlag(options2, keys, "color", mustBeBoolean);
        let verbose = getFlag(options2, keys, "verbose", mustBeBoolean);
        checkForInvalidFlags(options2, keys, `in ${callName}() call`);
        let request = {
          command: "analyze-metafile",
          metafile
        };
        if (color !== void 0) request.color = color;
        if (verbose !== void 0) request.verbose = verbose;
        sendRequest(refs, request, (error2, response) => {
          if (error2) return callback(new Error(error2), null);
          callback(null, response.result);
        });
      };
      return {
        readFromStdout,
        afterClose,
        service: {
          buildOrContext,
          transform: transform22,
          formatMessages: formatMessages22,
          analyzeMetafile: analyzeMetafile2
        }
      };
    }
    function buildOrContextImpl(callName, buildKey, sendRequest, sendResponse, refs, streamIn, requestCallbacks, options2, isTTY2, defaultWD2, callback) {
      const details = createObjectStash();
      const isContext = callName === "context";
      const handleError = (e2, pluginName) => {
        const flags = [];
        try {
          pushLogFlags(flags, options2, {}, isTTY2, buildLogLevelDefault);
        } catch {
        }
        const message = extractErrorMessageV8(e2, streamIn, details, void 0, pluginName);
        sendRequest(refs, { command: "error", flags, error: message }, () => {
          message.detail = details.load(message.detail);
          callback(failureErrorWithLog(isContext ? "Context failed" : "Build failed", [message], []), null);
        });
      };
      let plugins2;
      if (typeof options2 === "object") {
        const value2 = options2.plugins;
        if (value2 !== void 0) {
          if (!Array.isArray(value2)) return handleError(new Error(`"plugins" must be an array`), "");
          plugins2 = value2;
        }
      }
      if (plugins2 && plugins2.length > 0) {
        if (streamIn.isSync) return handleError(new Error("Cannot use plugins in synchronous API calls"), "");
        handlePlugins(
          buildKey,
          sendRequest,
          sendResponse,
          refs,
          streamIn,
          requestCallbacks,
          options2,
          plugins2,
          details
        ).then(
          (result) => {
            if (!result.ok) return handleError(result.error, result.pluginName);
            try {
              buildOrContextContinue(result.requestPlugins, result.runOnEndCallbacks, result.scheduleOnDisposeCallbacks);
            } catch (e2) {
              handleError(e2, "");
            }
          },
          (e2) => handleError(e2, "")
        );
        return;
      }
      try {
        buildOrContextContinue(null, (result, done) => done([], []), () => {
        });
      } catch (e2) {
        handleError(e2, "");
      }
      function buildOrContextContinue(requestPlugins, runOnEndCallbacks, scheduleOnDisposeCallbacks) {
        const writeDefault = streamIn.hasFS;
        const {
          entries,
          flags,
          write,
          stdinContents,
          stdinResolveDir,
          absWorkingDir,
          nodePaths,
          mangleCache
        } = flagsForBuildOptions(callName, options2, isTTY2, buildLogLevelDefault, writeDefault);
        if (write && !streamIn.hasFS) throw new Error(`The "write" option is unavailable in this environment`);
        const request = {
          command: "build",
          key: buildKey,
          entries,
          flags,
          write,
          stdinContents,
          stdinResolveDir,
          absWorkingDir: absWorkingDir || defaultWD2,
          nodePaths,
          context: isContext
        };
        if (requestPlugins) request.plugins = requestPlugins;
        if (mangleCache) request.mangleCache = mangleCache;
        const buildResponseToResult = (response, callback2) => {
          const result = {
            errors: replaceDetailsInMessages(response.errors, details),
            warnings: replaceDetailsInMessages(response.warnings, details),
            outputFiles: void 0,
            metafile: void 0,
            mangleCache: void 0
          };
          const originalErrors = result.errors.slice();
          const originalWarnings = result.warnings.slice();
          if (response.outputFiles) result.outputFiles = response.outputFiles.map(convertOutputFiles);
          if (response.metafile) result.metafile = JSON.parse(response.metafile);
          if (response.mangleCache) result.mangleCache = response.mangleCache;
          if (response.writeToStdout !== void 0) console.log(decodeUTF8(response.writeToStdout).replace(/\n$/, ""));
          runOnEndCallbacks(result, (onEndErrors, onEndWarnings) => {
            if (originalErrors.length > 0 || onEndErrors.length > 0) {
              const error2 = failureErrorWithLog("Build failed", originalErrors.concat(onEndErrors), originalWarnings.concat(onEndWarnings));
              return callback2(error2, null, onEndErrors, onEndWarnings);
            }
            callback2(null, result, onEndErrors, onEndWarnings);
          });
        };
        let latestResultPromise;
        let provideLatestResult;
        if (isContext)
          requestCallbacks["on-end"] = (id, request2) => new Promise((resolve4) => {
            buildResponseToResult(request2, (err2, result, onEndErrors, onEndWarnings) => {
              const response = {
                errors: onEndErrors,
                warnings: onEndWarnings
              };
              if (provideLatestResult) provideLatestResult(err2, result);
              latestResultPromise = void 0;
              provideLatestResult = void 0;
              sendResponse(id, response);
              resolve4();
            });
          });
        sendRequest(refs, request, (error2, response) => {
          if (error2) return callback(new Error(error2), null);
          if (!isContext) {
            return buildResponseToResult(response, (err2, res) => {
              scheduleOnDisposeCallbacks();
              return callback(err2, res);
            });
          }
          if (response.errors.length > 0) {
            return callback(failureErrorWithLog("Context failed", response.errors, response.warnings), null);
          }
          let didDispose = false;
          const result = {
            rebuild: () => {
              if (!latestResultPromise) latestResultPromise = new Promise((resolve4, reject) => {
                let settlePromise;
                provideLatestResult = (err2, result2) => {
                  if (!settlePromise) settlePromise = () => err2 ? reject(err2) : resolve4(result2);
                };
                const triggerAnotherBuild = () => {
                  const request2 = {
                    command: "rebuild",
                    key: buildKey
                  };
                  sendRequest(refs, request2, (error22, response2) => {
                    if (error22) {
                      reject(new Error(error22));
                    } else if (settlePromise) {
                      settlePromise();
                    } else {
                      triggerAnotherBuild();
                    }
                  });
                };
                triggerAnotherBuild();
              });
              return latestResultPromise;
            },
            watch: (options22 = {}) => new Promise((resolve4, reject) => {
              if (!streamIn.hasFS) throw new Error(`Cannot use the "watch" API in this environment`);
              const keys = {};
              checkForInvalidFlags(options22, keys, `in watch() call`);
              const request2 = {
                command: "watch",
                key: buildKey
              };
              sendRequest(refs, request2, (error22) => {
                if (error22) reject(new Error(error22));
                else resolve4(void 0);
              });
            }),
            serve: (options22 = {}) => new Promise((resolve4, reject) => {
              if (!streamIn.hasFS) throw new Error(`Cannot use the "serve" API in this environment`);
              const keys = {};
              const port = getFlag(options22, keys, "port", mustBeValidPortNumber);
              const host = getFlag(options22, keys, "host", mustBeString);
              const servedir = getFlag(options22, keys, "servedir", mustBeString);
              const keyfile = getFlag(options22, keys, "keyfile", mustBeString);
              const certfile = getFlag(options22, keys, "certfile", mustBeString);
              const fallback = getFlag(options22, keys, "fallback", mustBeString);
              const onRequest = getFlag(options22, keys, "onRequest", mustBeFunction);
              checkForInvalidFlags(options22, keys, `in serve() call`);
              const request2 = {
                command: "serve",
                key: buildKey,
                onRequest: !!onRequest
              };
              if (port !== void 0) request2.port = port;
              if (host !== void 0) request2.host = host;
              if (servedir !== void 0) request2.servedir = servedir;
              if (keyfile !== void 0) request2.keyfile = keyfile;
              if (certfile !== void 0) request2.certfile = certfile;
              if (fallback !== void 0) request2.fallback = fallback;
              sendRequest(refs, request2, (error22, response2) => {
                if (error22) return reject(new Error(error22));
                if (onRequest) {
                  requestCallbacks["serve-request"] = (id, request3) => {
                    onRequest(request3.args);
                    sendResponse(id, {});
                  };
                }
                resolve4(response2);
              });
            }),
            cancel: () => new Promise((resolve4) => {
              if (didDispose) return resolve4();
              const request2 = {
                command: "cancel",
                key: buildKey
              };
              sendRequest(refs, request2, () => {
                resolve4();
              });
            }),
            dispose: () => new Promise((resolve4) => {
              if (didDispose) return resolve4();
              didDispose = true;
              const request2 = {
                command: "dispose",
                key: buildKey
              };
              sendRequest(refs, request2, () => {
                resolve4();
                scheduleOnDisposeCallbacks();
                refs.unref();
              });
            })
          };
          refs.ref();
          callback(null, result);
        });
      }
    }
    var handlePlugins = async (buildKey, sendRequest, sendResponse, refs, streamIn, requestCallbacks, initialOptions, plugins2, details) => {
      let onStartCallbacks = [];
      let onEndCallbacks = [];
      let onResolveCallbacks = {};
      let onLoadCallbacks = {};
      let onDisposeCallbacks = [];
      let nextCallbackID = 0;
      let i = 0;
      let requestPlugins = [];
      let isSetupDone = false;
      plugins2 = [...plugins2];
      for (let item of plugins2) {
        let keys = {};
        if (typeof item !== "object") throw new Error(`Plugin at index ${i} must be an object`);
        const name = getFlag(item, keys, "name", mustBeString);
        if (typeof name !== "string" || name === "") throw new Error(`Plugin at index ${i} is missing a name`);
        try {
          let setup = getFlag(item, keys, "setup", mustBeFunction);
          if (typeof setup !== "function") throw new Error(`Plugin is missing a setup function`);
          checkForInvalidFlags(item, keys, `on plugin ${quote3(name)}`);
          let plugin = {
            name,
            onStart: false,
            onEnd: false,
            onResolve: [],
            onLoad: []
          };
          i++;
          let resolve4 = (path32, options2 = {}) => {
            if (!isSetupDone) throw new Error('Cannot call "resolve" before plugin setup has completed');
            if (typeof path32 !== "string") throw new Error(`The path to resolve must be a string`);
            let keys2 = /* @__PURE__ */ Object.create(null);
            let pluginName = getFlag(options2, keys2, "pluginName", mustBeString);
            let importer = getFlag(options2, keys2, "importer", mustBeString);
            let namespace = getFlag(options2, keys2, "namespace", mustBeString);
            let resolveDir = getFlag(options2, keys2, "resolveDir", mustBeString);
            let kind = getFlag(options2, keys2, "kind", mustBeString);
            let pluginData = getFlag(options2, keys2, "pluginData", canBeAnything);
            let importAttributes = getFlag(options2, keys2, "with", mustBeObject);
            checkForInvalidFlags(options2, keys2, "in resolve() call");
            return new Promise((resolve22, reject) => {
              const request = {
                command: "resolve",
                path: path32,
                key: buildKey,
                pluginName: name
              };
              if (pluginName != null) request.pluginName = pluginName;
              if (importer != null) request.importer = importer;
              if (namespace != null) request.namespace = namespace;
              if (resolveDir != null) request.resolveDir = resolveDir;
              if (kind != null) request.kind = kind;
              else throw new Error(`Must specify "kind" when calling "resolve"`);
              if (pluginData != null) request.pluginData = details.store(pluginData);
              if (importAttributes != null) request.with = sanitizeStringMap(importAttributes, "with");
              sendRequest(refs, request, (error2, response) => {
                if (error2 !== null) reject(new Error(error2));
                else resolve22({
                  errors: replaceDetailsInMessages(response.errors, details),
                  warnings: replaceDetailsInMessages(response.warnings, details),
                  path: response.path,
                  external: response.external,
                  sideEffects: response.sideEffects,
                  namespace: response.namespace,
                  suffix: response.suffix,
                  pluginData: details.load(response.pluginData)
                });
              });
            });
          };
          let promise = setup({
            initialOptions,
            resolve: resolve4,
            onStart(callback) {
              let registeredText = `This error came from the "onStart" callback registered here:`;
              let registeredNote = extractCallerV8(new Error(registeredText), streamIn, "onStart");
              onStartCallbacks.push({ name, callback, note: registeredNote });
              plugin.onStart = true;
            },
            onEnd(callback) {
              let registeredText = `This error came from the "onEnd" callback registered here:`;
              let registeredNote = extractCallerV8(new Error(registeredText), streamIn, "onEnd");
              onEndCallbacks.push({ name, callback, note: registeredNote });
              plugin.onEnd = true;
            },
            onResolve(options2, callback) {
              let registeredText = `This error came from the "onResolve" callback registered here:`;
              let registeredNote = extractCallerV8(new Error(registeredText), streamIn, "onResolve");
              let keys2 = {};
              let filter2 = getFlag(options2, keys2, "filter", mustBeRegExp);
              let namespace = getFlag(options2, keys2, "namespace", mustBeString);
              checkForInvalidFlags(options2, keys2, `in onResolve() call for plugin ${quote3(name)}`);
              if (filter2 == null) throw new Error(`onResolve() call is missing a filter`);
              let id = nextCallbackID++;
              onResolveCallbacks[id] = { name, callback, note: registeredNote };
              plugin.onResolve.push({ id, filter: filter2.source, namespace: namespace || "" });
            },
            onLoad(options2, callback) {
              let registeredText = `This error came from the "onLoad" callback registered here:`;
              let registeredNote = extractCallerV8(new Error(registeredText), streamIn, "onLoad");
              let keys2 = {};
              let filter2 = getFlag(options2, keys2, "filter", mustBeRegExp);
              let namespace = getFlag(options2, keys2, "namespace", mustBeString);
              checkForInvalidFlags(options2, keys2, `in onLoad() call for plugin ${quote3(name)}`);
              if (filter2 == null) throw new Error(`onLoad() call is missing a filter`);
              let id = nextCallbackID++;
              onLoadCallbacks[id] = { name, callback, note: registeredNote };
              plugin.onLoad.push({ id, filter: filter2.source, namespace: namespace || "" });
            },
            onDispose(callback) {
              onDisposeCallbacks.push(callback);
            },
            esbuild: streamIn.esbuild
          });
          if (promise) await promise;
          requestPlugins.push(plugin);
        } catch (e2) {
          return { ok: false, error: e2, pluginName: name };
        }
      }
      requestCallbacks["on-start"] = async (id, request) => {
        details.clear();
        let response = { errors: [], warnings: [] };
        await Promise.all(onStartCallbacks.map(async ({ name, callback, note }) => {
          try {
            let result = await callback();
            if (result != null) {
              if (typeof result !== "object") throw new Error(`Expected onStart() callback in plugin ${quote3(name)} to return an object`);
              let keys = {};
              let errors = getFlag(result, keys, "errors", mustBeArray);
              let warnings = getFlag(result, keys, "warnings", mustBeArray);
              checkForInvalidFlags(result, keys, `from onStart() callback in plugin ${quote3(name)}`);
              if (errors != null) response.errors.push(...sanitizeMessages(errors, "errors", details, name, void 0));
              if (warnings != null) response.warnings.push(...sanitizeMessages(warnings, "warnings", details, name, void 0));
            }
          } catch (e2) {
            response.errors.push(extractErrorMessageV8(e2, streamIn, details, note && note(), name));
          }
        }));
        sendResponse(id, response);
      };
      requestCallbacks["on-resolve"] = async (id, request) => {
        let response = {}, name = "", callback, note;
        for (let id2 of request.ids) {
          try {
            ({ name, callback, note } = onResolveCallbacks[id2]);
            let result = await callback({
              path: request.path,
              importer: request.importer,
              namespace: request.namespace,
              resolveDir: request.resolveDir,
              kind: request.kind,
              pluginData: details.load(request.pluginData),
              with: request.with
            });
            if (result != null) {
              if (typeof result !== "object") throw new Error(`Expected onResolve() callback in plugin ${quote3(name)} to return an object`);
              let keys = {};
              let pluginName = getFlag(result, keys, "pluginName", mustBeString);
              let path32 = getFlag(result, keys, "path", mustBeString);
              let namespace = getFlag(result, keys, "namespace", mustBeString);
              let suffix = getFlag(result, keys, "suffix", mustBeString);
              let external = getFlag(result, keys, "external", mustBeBoolean);
              let sideEffects = getFlag(result, keys, "sideEffects", mustBeBoolean);
              let pluginData = getFlag(result, keys, "pluginData", canBeAnything);
              let errors = getFlag(result, keys, "errors", mustBeArray);
              let warnings = getFlag(result, keys, "warnings", mustBeArray);
              let watchFiles = getFlag(result, keys, "watchFiles", mustBeArray);
              let watchDirs = getFlag(result, keys, "watchDirs", mustBeArray);
              checkForInvalidFlags(result, keys, `from onResolve() callback in plugin ${quote3(name)}`);
              response.id = id2;
              if (pluginName != null) response.pluginName = pluginName;
              if (path32 != null) response.path = path32;
              if (namespace != null) response.namespace = namespace;
              if (suffix != null) response.suffix = suffix;
              if (external != null) response.external = external;
              if (sideEffects != null) response.sideEffects = sideEffects;
              if (pluginData != null) response.pluginData = details.store(pluginData);
              if (errors != null) response.errors = sanitizeMessages(errors, "errors", details, name, void 0);
              if (warnings != null) response.warnings = sanitizeMessages(warnings, "warnings", details, name, void 0);
              if (watchFiles != null) response.watchFiles = sanitizeStringArray(watchFiles, "watchFiles");
              if (watchDirs != null) response.watchDirs = sanitizeStringArray(watchDirs, "watchDirs");
              break;
            }
          } catch (e2) {
            response = { id: id2, errors: [extractErrorMessageV8(e2, streamIn, details, note && note(), name)] };
            break;
          }
        }
        sendResponse(id, response);
      };
      requestCallbacks["on-load"] = async (id, request) => {
        let response = {}, name = "", callback, note;
        for (let id2 of request.ids) {
          try {
            ({ name, callback, note } = onLoadCallbacks[id2]);
            let result = await callback({
              path: request.path,
              namespace: request.namespace,
              suffix: request.suffix,
              pluginData: details.load(request.pluginData),
              with: request.with
            });
            if (result != null) {
              if (typeof result !== "object") throw new Error(`Expected onLoad() callback in plugin ${quote3(name)} to return an object`);
              let keys = {};
              let pluginName = getFlag(result, keys, "pluginName", mustBeString);
              let contents = getFlag(result, keys, "contents", mustBeStringOrUint8Array);
              let resolveDir = getFlag(result, keys, "resolveDir", mustBeString);
              let pluginData = getFlag(result, keys, "pluginData", canBeAnything);
              let loader2 = getFlag(result, keys, "loader", mustBeString);
              let errors = getFlag(result, keys, "errors", mustBeArray);
              let warnings = getFlag(result, keys, "warnings", mustBeArray);
              let watchFiles = getFlag(result, keys, "watchFiles", mustBeArray);
              let watchDirs = getFlag(result, keys, "watchDirs", mustBeArray);
              checkForInvalidFlags(result, keys, `from onLoad() callback in plugin ${quote3(name)}`);
              response.id = id2;
              if (pluginName != null) response.pluginName = pluginName;
              if (contents instanceof Uint8Array) response.contents = contents;
              else if (contents != null) response.contents = encodeUTF8(contents);
              if (resolveDir != null) response.resolveDir = resolveDir;
              if (pluginData != null) response.pluginData = details.store(pluginData);
              if (loader2 != null) response.loader = loader2;
              if (errors != null) response.errors = sanitizeMessages(errors, "errors", details, name, void 0);
              if (warnings != null) response.warnings = sanitizeMessages(warnings, "warnings", details, name, void 0);
              if (watchFiles != null) response.watchFiles = sanitizeStringArray(watchFiles, "watchFiles");
              if (watchDirs != null) response.watchDirs = sanitizeStringArray(watchDirs, "watchDirs");
              break;
            }
          } catch (e2) {
            response = { id: id2, errors: [extractErrorMessageV8(e2, streamIn, details, note && note(), name)] };
            break;
          }
        }
        sendResponse(id, response);
      };
      let runOnEndCallbacks = (result, done) => done([], []);
      if (onEndCallbacks.length > 0) {
        runOnEndCallbacks = (result, done) => {
          (async () => {
            const onEndErrors = [];
            const onEndWarnings = [];
            for (const { name, callback, note } of onEndCallbacks) {
              let newErrors;
              let newWarnings;
              try {
                const value2 = await callback(result);
                if (value2 != null) {
                  if (typeof value2 !== "object") throw new Error(`Expected onEnd() callback in plugin ${quote3(name)} to return an object`);
                  let keys = {};
                  let errors = getFlag(value2, keys, "errors", mustBeArray);
                  let warnings = getFlag(value2, keys, "warnings", mustBeArray);
                  checkForInvalidFlags(value2, keys, `from onEnd() callback in plugin ${quote3(name)}`);
                  if (errors != null) newErrors = sanitizeMessages(errors, "errors", details, name, void 0);
                  if (warnings != null) newWarnings = sanitizeMessages(warnings, "warnings", details, name, void 0);
                }
              } catch (e2) {
                newErrors = [extractErrorMessageV8(e2, streamIn, details, note && note(), name)];
              }
              if (newErrors) {
                onEndErrors.push(...newErrors);
                try {
                  result.errors.push(...newErrors);
                } catch {
                }
              }
              if (newWarnings) {
                onEndWarnings.push(...newWarnings);
                try {
                  result.warnings.push(...newWarnings);
                } catch {
                }
              }
            }
            done(onEndErrors, onEndWarnings);
          })();
        };
      }
      let scheduleOnDisposeCallbacks = () => {
        for (const cb of onDisposeCallbacks) {
          setTimeout(() => cb(), 0);
        }
      };
      isSetupDone = true;
      return {
        ok: true,
        requestPlugins,
        runOnEndCallbacks,
        scheduleOnDisposeCallbacks
      };
    };
    function createObjectStash() {
      const map2 = /* @__PURE__ */ new Map();
      let nextID = 0;
      return {
        clear() {
          map2.clear();
        },
        load(id) {
          return map2.get(id);
        },
        store(value2) {
          if (value2 === void 0) return -1;
          const id = nextID++;
          map2.set(id, value2);
          return id;
        }
      };
    }
    function extractCallerV8(e2, streamIn, ident) {
      let note;
      let tried = false;
      return () => {
        if (tried) return note;
        tried = true;
        try {
          let lines = (e2.stack + "").split("\n");
          lines.splice(1, 1);
          let location2 = parseStackLinesV8(streamIn, lines, ident);
          if (location2) {
            note = { text: e2.message, location: location2 };
            return note;
          }
        } catch {
        }
      };
    }
    function extractErrorMessageV8(e2, streamIn, stash, note, pluginName) {
      let text = "Internal error";
      let location2 = null;
      try {
        text = (e2 && e2.message || e2) + "";
      } catch {
      }
      try {
        location2 = parseStackLinesV8(streamIn, (e2.stack + "").split("\n"), "");
      } catch {
      }
      return { id: "", pluginName, text, location: location2, notes: note ? [note] : [], detail: stash ? stash.store(e2) : -1 };
    }
    function parseStackLinesV8(streamIn, lines, ident) {
      let at = "    at ";
      if (streamIn.readFileSync && !lines[0].startsWith(at) && lines[1].startsWith(at)) {
        for (let i = 1; i < lines.length; i++) {
          let line = lines[i];
          if (!line.startsWith(at)) continue;
          line = line.slice(at.length);
          while (true) {
            let match = /^(?:new |async )?\S+ \((.*)\)$/.exec(line);
            if (match) {
              line = match[1];
              continue;
            }
            match = /^eval at \S+ \((.*)\)(?:, \S+:\d+:\d+)?$/.exec(line);
            if (match) {
              line = match[1];
              continue;
            }
            match = /^(\S+):(\d+):(\d+)$/.exec(line);
            if (match) {
              let contents;
              try {
                contents = streamIn.readFileSync(match[1], "utf8");
              } catch {
                break;
              }
              let lineText = contents.split(/\r\n|\r|\n|\u2028|\u2029/)[+match[2] - 1] || "";
              let column = +match[3] - 1;
              let length = lineText.slice(column, column + ident.length) === ident ? ident.length : 0;
              return {
                file: match[1],
                namespace: "file",
                line: +match[2],
                column: encodeUTF8(lineText.slice(0, column)).length,
                length: encodeUTF8(lineText.slice(column, column + length)).length,
                lineText: lineText + "\n" + lines.slice(1).join("\n"),
                suggestion: ""
              };
            }
            break;
          }
        }
      }
      return null;
    }
    function failureErrorWithLog(text, errors, warnings) {
      let limit = 5;
      text += errors.length < 1 ? "" : ` with ${errors.length} error${errors.length < 2 ? "" : "s"}:` + errors.slice(0, limit + 1).map((e2, i) => {
        if (i === limit) return "\n...";
        if (!e2.location) return `
error: ${e2.text}`;
        let { file, line, column } = e2.location;
        let pluginText = e2.pluginName ? `[plugin: ${e2.pluginName}] ` : "";
        return `
${file}:${line}:${column}: ERROR: ${pluginText}${e2.text}`;
      }).join("");
      let error2 = new Error(text);
      for (const [key, value2] of [["errors", errors], ["warnings", warnings]]) {
        Object.defineProperty(error2, key, {
          configurable: true,
          enumerable: true,
          get: () => value2,
          set: (value22) => Object.defineProperty(error2, key, {
            configurable: true,
            enumerable: true,
            value: value22
          })
        });
      }
      return error2;
    }
    function replaceDetailsInMessages(messages2, stash) {
      for (const message of messages2) {
        message.detail = stash.load(message.detail);
      }
      return messages2;
    }
    function sanitizeLocation(location2, where, terminalWidth) {
      if (location2 == null) return null;
      let keys = {};
      let file = getFlag(location2, keys, "file", mustBeString);
      let namespace = getFlag(location2, keys, "namespace", mustBeString);
      let line = getFlag(location2, keys, "line", mustBeInteger);
      let column = getFlag(location2, keys, "column", mustBeInteger);
      let length = getFlag(location2, keys, "length", mustBeInteger);
      let lineText = getFlag(location2, keys, "lineText", mustBeString);
      let suggestion = getFlag(location2, keys, "suggestion", mustBeString);
      checkForInvalidFlags(location2, keys, where);
      if (lineText) {
        const relevantASCII = lineText.slice(
          0,
          (column && column > 0 ? column : 0) + (length && length > 0 ? length : 0) + (terminalWidth && terminalWidth > 0 ? terminalWidth : 80)
        );
        if (!/[\x7F-\uFFFF]/.test(relevantASCII) && !/\n/.test(lineText)) {
          lineText = relevantASCII;
        }
      }
      return {
        file: file || "",
        namespace: namespace || "",
        line: line || 0,
        column: column || 0,
        length: length || 0,
        lineText: lineText || "",
        suggestion: suggestion || ""
      };
    }
    function sanitizeMessages(messages2, property, stash, fallbackPluginName, terminalWidth) {
      let messagesClone = [];
      let index = 0;
      for (const message of messages2) {
        let keys = {};
        let id = getFlag(message, keys, "id", mustBeString);
        let pluginName = getFlag(message, keys, "pluginName", mustBeString);
        let text = getFlag(message, keys, "text", mustBeString);
        let location2 = getFlag(message, keys, "location", mustBeObjectOrNull);
        let notes = getFlag(message, keys, "notes", mustBeArray);
        let detail = getFlag(message, keys, "detail", canBeAnything);
        let where = `in element ${index} of "${property}"`;
        checkForInvalidFlags(message, keys, where);
        let notesClone = [];
        if (notes) {
          for (const note of notes) {
            let noteKeys = {};
            let noteText = getFlag(note, noteKeys, "text", mustBeString);
            let noteLocation = getFlag(note, noteKeys, "location", mustBeObjectOrNull);
            checkForInvalidFlags(note, noteKeys, where);
            notesClone.push({
              text: noteText || "",
              location: sanitizeLocation(noteLocation, where, terminalWidth)
            });
          }
        }
        messagesClone.push({
          id: id || "",
          pluginName: pluginName || fallbackPluginName,
          text: text || "",
          location: sanitizeLocation(location2, where, terminalWidth),
          notes: notesClone,
          detail: stash ? stash.store(detail) : -1
        });
        index++;
      }
      return messagesClone;
    }
    function sanitizeStringArray(values, property) {
      const result = [];
      for (const value2 of values) {
        if (typeof value2 !== "string") throw new Error(`${quote3(property)} must be an array of strings`);
        result.push(value2);
      }
      return result;
    }
    function sanitizeStringMap(map2, property) {
      const result = /* @__PURE__ */ Object.create(null);
      for (const key in map2) {
        const value2 = map2[key];
        if (typeof value2 !== "string") throw new Error(`key ${quote3(key)} in object ${quote3(property)} must be a string`);
        result[key] = value2;
      }
      return result;
    }
    function convertOutputFiles({ path: path32, contents, hash: hash2 }) {
      let text = null;
      return {
        path: path32,
        contents,
        hash: hash2,
        get text() {
          const binary = this.contents;
          if (text === null || binary !== contents) {
            contents = binary;
            text = decodeUTF8(binary);
          }
          return text;
        }
      };
    }
    var fs2 = require_fs();
    var os2 = require_os();
    var path4 = require_path();
    var ESBUILD_BINARY_PATH = process.env.ESBUILD_BINARY_PATH || ESBUILD_BINARY_PATH;
    var isValidBinaryPath = (x) => !!x && x !== "/usr/bin/esbuild";
    var packageDarwin_arm64 = "@esbuild/darwin-arm64";
    var packageDarwin_x64 = "@esbuild/darwin-x64";
    var knownWindowsPackages = {
      "win32 arm64 LE": "@esbuild/win32-arm64",
      "win32 ia32 LE": "@esbuild/win32-ia32",
      "win32 x64 LE": "@esbuild/win32-x64"
    };
    var knownUnixlikePackages = {
      "aix ppc64 BE": "@esbuild/aix-ppc64",
      "android arm64 LE": "@esbuild/android-arm64",
      "darwin arm64 LE": "@esbuild/darwin-arm64",
      "darwin x64 LE": "@esbuild/darwin-x64",
      "freebsd arm64 LE": "@esbuild/freebsd-arm64",
      "freebsd x64 LE": "@esbuild/freebsd-x64",
      "linux arm LE": "@esbuild/linux-arm",
      "linux arm64 LE": "@esbuild/linux-arm64",
      "linux ia32 LE": "@esbuild/linux-ia32",
      "linux mips64el LE": "@esbuild/linux-mips64el",
      "linux ppc64 LE": "@esbuild/linux-ppc64",
      "linux riscv64 LE": "@esbuild/linux-riscv64",
      "linux s390x BE": "@esbuild/linux-s390x",
      "linux x64 LE": "@esbuild/linux-x64",
      "linux loong64 LE": "@esbuild/linux-loong64",
      "netbsd arm64 LE": "@esbuild/netbsd-arm64",
      "netbsd x64 LE": "@esbuild/netbsd-x64",
      "openbsd arm64 LE": "@esbuild/openbsd-arm64",
      "openbsd x64 LE": "@esbuild/openbsd-x64",
      "sunos x64 LE": "@esbuild/sunos-x64"
    };
    var knownWebAssemblyFallbackPackages = {
      "android arm LE": "@esbuild/android-arm",
      "android x64 LE": "@esbuild/android-x64"
    };
    function pkgAndSubpathForCurrentPlatform() {
      let pkg;
      let subpath;
      let isWASM = false;
      let platformKey = `${process.platform} ${os2.arch()} ${os2.endianness()}`;
      if (platformKey in knownWindowsPackages) {
        pkg = knownWindowsPackages[platformKey];
        subpath = "esbuild.exe";
      } else if (platformKey in knownUnixlikePackages) {
        pkg = knownUnixlikePackages[platformKey];
        subpath = "bin/esbuild";
      } else if (platformKey in knownWebAssemblyFallbackPackages) {
        pkg = knownWebAssemblyFallbackPackages[platformKey];
        subpath = "bin/esbuild";
        isWASM = true;
      } else {
        throw new Error(`Unsupported platform: ${platformKey}`);
      }
      return { pkg, subpath, isWASM };
    }
    function pkgForSomeOtherPlatform() {
      const libMainJS = __require.resolve("esbuild");
      const nodeModulesDirectory = path4.dirname(path4.dirname(path4.dirname(libMainJS)));
      if (path4.basename(nodeModulesDirectory) === "node_modules") {
        for (const unixKey in knownUnixlikePackages) {
          try {
            const pkg = knownUnixlikePackages[unixKey];
            if (fs2.existsSync(path4.join(nodeModulesDirectory, pkg))) return pkg;
          } catch {
          }
        }
        for (const windowsKey in knownWindowsPackages) {
          try {
            const pkg = knownWindowsPackages[windowsKey];
            if (fs2.existsSync(path4.join(nodeModulesDirectory, pkg))) return pkg;
          } catch {
          }
        }
      }
      return null;
    }
    function downloadedBinPath(pkg, subpath) {
      const esbuildLibDir = path4.dirname(__require.resolve("esbuild"));
      return path4.join(esbuildLibDir, `downloaded-${pkg.replace("/", "-")}-${path4.basename(subpath)}`);
    }
    function generateBinPath() {
      if (isValidBinaryPath(ESBUILD_BINARY_PATH)) {
        if (!fs2.existsSync(ESBUILD_BINARY_PATH)) {
          console.warn(`[esbuild] Ignoring bad configuration: ESBUILD_BINARY_PATH=${ESBUILD_BINARY_PATH}`);
        } else {
          return { binPath: ESBUILD_BINARY_PATH, isWASM: false };
        }
      }
      const { pkg, subpath, isWASM } = pkgAndSubpathForCurrentPlatform();
      let binPath;
      try {
        binPath = __require.resolve(`${pkg}/${subpath}`);
      } catch (e2) {
        binPath = downloadedBinPath(pkg, subpath);
        if (!fs2.existsSync(binPath)) {
          try {
            __require.resolve(pkg);
          } catch {
            const otherPkg = pkgForSomeOtherPlatform();
            if (otherPkg) {
              let suggestions = `
Specifically the "${otherPkg}" package is present but this platform
needs the "${pkg}" package instead. People often get into this
situation by installing esbuild on Windows or macOS and copying "node_modules"
into a Docker image that runs Linux, or by copying "node_modules" between
Windows and WSL environments.

If you are installing with npm, you can try not copying the "node_modules"
directory when you copy the files over, and running "npm ci" or "npm install"
on the destination platform after the copy. Or you could consider using yarn
instead of npm which has built-in support for installing a package on multiple
platforms simultaneously.

If you are installing with yarn, you can try listing both this platform and the
other platform in your ".yarnrc.yml" file using the "supportedArchitectures"
feature: https://yarnpkg.com/configuration/yarnrc/#supportedArchitectures
Keep in mind that this means multiple copies of esbuild will be present.
`;
              if (pkg === packageDarwin_x64 && otherPkg === packageDarwin_arm64 || pkg === packageDarwin_arm64 && otherPkg === packageDarwin_x64) {
                suggestions = `
Specifically the "${otherPkg}" package is present but this platform
needs the "${pkg}" package instead. People often get into this
situation by installing esbuild with npm running inside of Rosetta 2 and then
trying to use it with node running outside of Rosetta 2, or vice versa (Rosetta
2 is Apple's on-the-fly x86_64-to-arm64 translation service).

If you are installing with npm, you can try ensuring that both npm and node are
not running under Rosetta 2 and then reinstalling esbuild. This likely involves
changing how you installed npm and/or node. For example, installing node with
the universal installer here should work: https://nodejs.org/en/download/. Or
you could consider using yarn instead of npm which has built-in support for
installing a package on multiple platforms simultaneously.

If you are installing with yarn, you can try listing both "arm64" and "x64"
in your ".yarnrc.yml" file using the "supportedArchitectures" feature:
https://yarnpkg.com/configuration/yarnrc/#supportedArchitectures
Keep in mind that this means multiple copies of esbuild will be present.
`;
              }
              throw new Error(`
You installed esbuild for another platform than the one you're currently using.
This won't work because esbuild is written with native code and needs to
install a platform-specific binary executable.
${suggestions}
Another alternative is to use the "esbuild-wasm" package instead, which works
the same way on all platforms. But it comes with a heavy performance cost and
can sometimes be 10x slower than the "esbuild" package, so you may also not
want to do that.
`);
            }
            throw new Error(`The package "${pkg}" could not be found, and is needed by esbuild.

If you are installing esbuild with npm, make sure that you don't specify the
"--no-optional" or "--omit=optional" flags. The "optionalDependencies" feature
of "package.json" is used by esbuild to install the correct binary executable
for your current platform.`);
          }
          throw e2;
        }
      }
      if (/\.zip\//.test(binPath)) {
        let pnpapi;
        try {
          pnpapi = __require("pnpapi");
        } catch (e2) {
        }
        if (pnpapi) {
          const root = pnpapi.getPackageInformation(pnpapi.topLevel).packageLocation;
          const binTargetPath = path4.join(
            root,
            "node_modules",
            ".cache",
            "esbuild",
            `pnpapi-${pkg.replace("/", "-")}-${"0.25.1"}-${path4.basename(subpath)}`
          );
          if (!fs2.existsSync(binTargetPath)) {
            fs2.mkdirSync(path4.dirname(binTargetPath), { recursive: true });
            fs2.copyFileSync(binPath, binTargetPath);
            fs2.chmodSync(binTargetPath, 493);
          }
          return { binPath: binTargetPath, isWASM };
        }
      }
      return { binPath, isWASM };
    }
    var child_process = require_child_process();
    var crypto2 = require_crypto();
    var path22 = require_path();
    var fs22 = require_fs();
    var os22 = require_os();
    var tty = require_tty();
    var worker_threads;
    if (process.env.ESBUILD_WORKER_THREADS !== "0") {
      try {
        worker_threads = require_worker_threads();
      } catch {
      }
      let [major, minor] = process.versions.node.split(".");
      if (
        // <v12.17.0 does not work
        +major < 12 || +major === 12 && +minor < 17 || +major === 13 && +minor < 13
      ) {
        worker_threads = void 0;
      }
    }
    var _a2;
    var isInternalWorkerThread = ((_a2 = worker_threads == null ? void 0 : worker_threads.workerData) == null ? void 0 : _a2.esbuildVersion) === "0.25.1";
    var esbuildCommandAndArgs = () => {
      if ((!ESBUILD_BINARY_PATH || false) && (path22.basename(__filename) !== "main.js" || path22.basename(__dirname) !== "lib")) {
        throw new Error(
          `The esbuild JavaScript API cannot be bundled. Please mark the "esbuild" package as external so it's not included in the bundle.

More information: The file containing the code for esbuild's JavaScript API (${__filename}) does not appear to be inside the esbuild package on the file system, which usually means that the esbuild package was bundled into another file. This is problematic because the API needs to run a binary executable inside the esbuild package which is located using a relative path from the API code to the executable. If the esbuild package is bundled, the relative path will be incorrect and the executable won't be found.`
        );
      }
      if (false) {
        return ["node", [path22.join(__dirname, "..", "bin", "esbuild")]];
      } else {
        const { binPath, isWASM } = generateBinPath();
        if (isWASM) {
          return ["node", [binPath]];
        } else {
          return [binPath, []];
        }
      }
    };
    var isTTY = () => tty.isatty(2);
    var fsSync = {
      readFile(tempFile, callback) {
        try {
          let contents = fs22.readFileSync(tempFile, "utf8");
          try {
            fs22.unlinkSync(tempFile);
          } catch {
          }
          callback(null, contents);
        } catch (err2) {
          callback(err2, null);
        }
      },
      writeFile(contents, callback) {
        try {
          let tempFile = randomFileName();
          fs22.writeFileSync(tempFile, contents);
          callback(tempFile);
        } catch {
          callback(null);
        }
      }
    };
    var fsAsync = {
      readFile(tempFile, callback) {
        try {
          fs22.readFile(tempFile, "utf8", (err2, contents) => {
            try {
              fs22.unlink(tempFile, () => callback(err2, contents));
            } catch {
              callback(err2, contents);
            }
          });
        } catch (err2) {
          callback(err2, null);
        }
      },
      writeFile(contents, callback) {
        try {
          let tempFile = randomFileName();
          fs22.writeFile(tempFile, contents, (err2) => err2 !== null ? callback(null) : callback(tempFile));
        } catch {
          callback(null);
        }
      }
    };
    var version3 = "0.25.1";
    var build2 = (options2) => ensureServiceIsRunning().build(options2);
    var context = (buildOptions) => ensureServiceIsRunning().context(buildOptions);
    var transform2 = (input, options2) => ensureServiceIsRunning().transform(input, options2);
    var formatMessages2 = (messages2, options2) => ensureServiceIsRunning().formatMessages(messages2, options2);
    var analyzeMetafile = (messages2, options2) => ensureServiceIsRunning().analyzeMetafile(messages2, options2);
    var buildSync = (options2) => {
      if (worker_threads && !isInternalWorkerThread) {
        if (!workerThreadService) workerThreadService = startWorkerThreadService(worker_threads);
        return workerThreadService.buildSync(options2);
      }
      let result;
      runServiceSync((service) => service.buildOrContext({
        callName: "buildSync",
        refs: null,
        options: options2,
        isTTY: isTTY(),
        defaultWD,
        callback: (err2, res) => {
          if (err2) throw err2;
          result = res;
        }
      }));
      return result;
    };
    var transformSync = (input, options2) => {
      if (worker_threads && !isInternalWorkerThread) {
        if (!workerThreadService) workerThreadService = startWorkerThreadService(worker_threads);
        return workerThreadService.transformSync(input, options2);
      }
      let result;
      runServiceSync((service) => service.transform({
        callName: "transformSync",
        refs: null,
        input,
        options: options2 || {},
        isTTY: isTTY(),
        fs: fsSync,
        callback: (err2, res) => {
          if (err2) throw err2;
          result = res;
        }
      }));
      return result;
    };
    var formatMessagesSync = (messages2, options2) => {
      if (worker_threads && !isInternalWorkerThread) {
        if (!workerThreadService) workerThreadService = startWorkerThreadService(worker_threads);
        return workerThreadService.formatMessagesSync(messages2, options2);
      }
      let result;
      runServiceSync((service) => service.formatMessages({
        callName: "formatMessagesSync",
        refs: null,
        messages: messages2,
        options: options2,
        callback: (err2, res) => {
          if (err2) throw err2;
          result = res;
        }
      }));
      return result;
    };
    var analyzeMetafileSync = (metafile, options2) => {
      if (worker_threads && !isInternalWorkerThread) {
        if (!workerThreadService) workerThreadService = startWorkerThreadService(worker_threads);
        return workerThreadService.analyzeMetafileSync(metafile, options2);
      }
      let result;
      runServiceSync((service) => service.analyzeMetafile({
        callName: "analyzeMetafileSync",
        refs: null,
        metafile: typeof metafile === "string" ? metafile : JSON.stringify(metafile),
        options: options2,
        callback: (err2, res) => {
          if (err2) throw err2;
          result = res;
        }
      }));
      return result;
    };
    var stop = () => {
      if (stopService) stopService();
      if (workerThreadService) workerThreadService.stop();
      return Promise.resolve();
    };
    var initializeWasCalled = false;
    var initialize = (options2) => {
      options2 = validateInitializeOptions(options2 || {});
      if (options2.wasmURL) throw new Error(`The "wasmURL" option only works in the browser`);
      if (options2.wasmModule) throw new Error(`The "wasmModule" option only works in the browser`);
      if (options2.worker) throw new Error(`The "worker" option only works in the browser`);
      if (initializeWasCalled) throw new Error('Cannot call "initialize" more than once');
      ensureServiceIsRunning();
      initializeWasCalled = true;
      return Promise.resolve();
    };
    var defaultWD = process.cwd();
    var longLivedService;
    var stopService;
    var ensureServiceIsRunning = () => {
      if (longLivedService) return longLivedService;
      let [command, args] = esbuildCommandAndArgs();
      let child = child_process.spawn(command, args.concat(`--service=${"0.25.1"}`, "--ping"), {
        windowsHide: true,
        stdio: ["pipe", "pipe", "inherit"],
        cwd: defaultWD
      });
      let { readFromStdout, afterClose, service } = createChannel({
        writeToStdin(bytes) {
          child.stdin.write(bytes, (err2) => {
            if (err2) afterClose(err2);
          });
        },
        readFileSync: fs22.readFileSync,
        isSync: false,
        hasFS: true,
        esbuild: node_exports
      });
      child.stdin.on("error", afterClose);
      child.on("error", afterClose);
      const stdin = child.stdin;
      const stdout = child.stdout;
      stdout.on("data", readFromStdout);
      stdout.on("end", afterClose);
      stopService = () => {
        stdin.destroy();
        stdout.destroy();
        child.kill();
        initializeWasCalled = false;
        longLivedService = void 0;
        stopService = void 0;
      };
      let refCount = 0;
      child.unref();
      if (stdin.unref) {
        stdin.unref();
      }
      if (stdout.unref) {
        stdout.unref();
      }
      const refs = {
        ref() {
          if (++refCount === 1) child.ref();
        },
        unref() {
          if (--refCount === 0) child.unref();
        }
      };
      longLivedService = {
        build: (options2) => new Promise((resolve4, reject) => {
          service.buildOrContext({
            callName: "build",
            refs,
            options: options2,
            isTTY: isTTY(),
            defaultWD,
            callback: (err2, res) => err2 ? reject(err2) : resolve4(res)
          });
        }),
        context: (options2) => new Promise((resolve4, reject) => service.buildOrContext({
          callName: "context",
          refs,
          options: options2,
          isTTY: isTTY(),
          defaultWD,
          callback: (err2, res) => err2 ? reject(err2) : resolve4(res)
        })),
        transform: (input, options2) => new Promise((resolve4, reject) => service.transform({
          callName: "transform",
          refs,
          input,
          options: options2 || {},
          isTTY: isTTY(),
          fs: fsAsync,
          callback: (err2, res) => err2 ? reject(err2) : resolve4(res)
        })),
        formatMessages: (messages2, options2) => new Promise((resolve4, reject) => service.formatMessages({
          callName: "formatMessages",
          refs,
          messages: messages2,
          options: options2,
          callback: (err2, res) => err2 ? reject(err2) : resolve4(res)
        })),
        analyzeMetafile: (metafile, options2) => new Promise((resolve4, reject) => service.analyzeMetafile({
          callName: "analyzeMetafile",
          refs,
          metafile: typeof metafile === "string" ? metafile : JSON.stringify(metafile),
          options: options2,
          callback: (err2, res) => err2 ? reject(err2) : resolve4(res)
        }))
      };
      return longLivedService;
    };
    var runServiceSync = (callback) => {
      let [command, args] = esbuildCommandAndArgs();
      let stdin = new Uint8Array();
      let { readFromStdout, afterClose, service } = createChannel({
        writeToStdin(bytes) {
          if (stdin.length !== 0) throw new Error("Must run at most one command");
          stdin = bytes;
        },
        isSync: true,
        hasFS: true,
        esbuild: node_exports
      });
      callback(service);
      let stdout = child_process.execFileSync(command, args.concat(`--service=${"0.25.1"}`), {
        cwd: defaultWD,
        windowsHide: true,
        input: stdin,
        // We don't know how large the output could be. If it's too large, the
        // command will fail with ENOBUFS. Reserve 16mb for now since that feels
        // like it should be enough. Also allow overriding this with an environment
        // variable.
        maxBuffer: +process.env.ESBUILD_MAX_BUFFER || 16 * 1024 * 1024
      });
      readFromStdout(stdout);
      afterClose(null);
    };
    var randomFileName = () => {
      return path22.join(os22.tmpdir(), `esbuild-${crypto2.randomBytes(32).toString("hex")}`);
    };
    var workerThreadService = null;
    var startWorkerThreadService = (worker_threads2) => {
      let { port1: mainPort, port2: workerPort } = new worker_threads2.MessageChannel();
      let worker = new worker_threads2.Worker(__filename, {
        workerData: { workerPort, defaultWD, esbuildVersion: "0.25.1" },
        transferList: [workerPort],
        // From node's documentation: https://nodejs.org/api/worker_threads.html
        //
        //   Take care when launching worker threads from preload scripts (scripts loaded
        //   and run using the `-r` command line flag). Unless the `execArgv` option is
        //   explicitly set, new Worker threads automatically inherit the command line flags
        //   from the running process and will preload the same preload scripts as the main
        //   thread. If the preload script unconditionally launches a worker thread, every
        //   thread spawned will spawn another until the application crashes.
        //
        execArgv: []
      });
      let nextID = 0;
      let fakeBuildError = (text) => {
        let error2 = new Error(`Build failed with 1 error:
error: ${text}`);
        let errors = [{ id: "", pluginName: "", text, location: null, notes: [], detail: void 0 }];
        error2.errors = errors;
        error2.warnings = [];
        return error2;
      };
      let validateBuildSyncOptions = (options2) => {
        if (!options2) return;
        let plugins2 = options2.plugins;
        if (plugins2 && plugins2.length > 0) throw fakeBuildError(`Cannot use plugins in synchronous API calls`);
      };
      let applyProperties = (object, properties) => {
        for (let key in properties) {
          object[key] = properties[key];
        }
      };
      let runCallSync = (command, args) => {
        let id = nextID++;
        let sharedBuffer = new SharedArrayBuffer(8);
        let sharedBufferView = new Int32Array(sharedBuffer);
        let msg = { sharedBuffer, id, command, args };
        worker.postMessage(msg);
        let status2 = Atomics.wait(sharedBufferView, 0, 0);
        if (status2 !== "ok" && status2 !== "not-equal") throw new Error("Internal error: Atomics.wait() failed: " + status2);
        let { message: { id: id2, resolve: resolve4, reject, properties } } = worker_threads2.receiveMessageOnPort(mainPort);
        if (id !== id2) throw new Error(`Internal error: Expected id ${id} but got id ${id2}`);
        if (reject) {
          applyProperties(reject, properties);
          throw reject;
        }
        return resolve4;
      };
      worker.unref();
      return {
        buildSync(options2) {
          validateBuildSyncOptions(options2);
          return runCallSync("build", [options2]);
        },
        transformSync(input, options2) {
          return runCallSync("transform", [input, options2]);
        },
        formatMessagesSync(messages2, options2) {
          return runCallSync("formatMessages", [messages2, options2]);
        },
        analyzeMetafileSync(metafile, options2) {
          return runCallSync("analyzeMetafile", [metafile, options2]);
        },
        stop() {
          worker.terminate();
          workerThreadService = null;
        }
      };
    };
    var startSyncServiceWorker = () => {
      let workerPort = worker_threads.workerData.workerPort;
      let parentPort = worker_threads.parentPort;
      let extractProperties = (object) => {
        let properties = {};
        if (object && typeof object === "object") {
          for (let key in object) {
            properties[key] = object[key];
          }
        }
        return properties;
      };
      try {
        let service = ensureServiceIsRunning();
        defaultWD = worker_threads.workerData.defaultWD;
        parentPort.on("message", (msg) => {
          (async () => {
            let { sharedBuffer, id, command, args } = msg;
            let sharedBufferView = new Int32Array(sharedBuffer);
            try {
              switch (command) {
                case "build":
                  workerPort.postMessage({ id, resolve: await service.build(args[0]) });
                  break;
                case "transform":
                  workerPort.postMessage({ id, resolve: await service.transform(args[0], args[1]) });
                  break;
                case "formatMessages":
                  workerPort.postMessage({ id, resolve: await service.formatMessages(args[0], args[1]) });
                  break;
                case "analyzeMetafile":
                  workerPort.postMessage({ id, resolve: await service.analyzeMetafile(args[0], args[1]) });
                  break;
                default:
                  throw new Error(`Invalid command: ${command}`);
              }
            } catch (reject) {
              workerPort.postMessage({ id, reject, properties: extractProperties(reject) });
            }
            Atomics.add(sharedBufferView, 0, 1);
            Atomics.notify(sharedBufferView, 0, Infinity);
          })();
        });
      } catch (reject) {
        parentPort.on("message", (msg) => {
          let { sharedBuffer, id } = msg;
          let sharedBufferView = new Int32Array(sharedBuffer);
          workerPort.postMessage({ id, reject, properties: extractProperties(reject) });
          Atomics.add(sharedBufferView, 0, 1);
          Atomics.notify(sharedBufferView, 0, Infinity);
        });
      }
    };
    if (isInternalWorkerThread) {
      startSyncServiceWorker();
    }
    var node_default = node_exports;
  }
});

// node_modules/vite/node_modules/fdir/dist/utils.js
var require_utils2 = __commonJS({
  "node_modules/vite/node_modules/fdir/dist/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cleanPath = cleanPath;
    exports.convertSlashes = convertSlashes;
    exports.isRootDirectory = isRootDirectory;
    exports.normalizePath = normalizePath3;
    var path_1 = require_path();
    function cleanPath(path4) {
      let normalized = (0, path_1.normalize)(path4);
      if (normalized.length > 1 && normalized[normalized.length - 1] === path_1.sep)
        normalized = normalized.substring(0, normalized.length - 1);
      return normalized;
    }
    var SLASHES_REGEX = /[\\/]/g;
    function convertSlashes(path4, separator) {
      return path4.replace(SLASHES_REGEX, separator);
    }
    var WINDOWS_ROOT_DIR_REGEX = /^[a-z]:[\\/]$/i;
    function isRootDirectory(path4) {
      return path4 === "/" || WINDOWS_ROOT_DIR_REGEX.test(path4);
    }
    function normalizePath3(path4, options2) {
      const { resolvePaths, normalizePath: normalizePath4, pathSeparator } = options2;
      const pathNeedsCleaning = process.platform === "win32" && path4.includes("/") || path4.startsWith(".");
      if (resolvePaths)
        path4 = (0, path_1.resolve)(path4);
      if (normalizePath4 || pathNeedsCleaning)
        path4 = cleanPath(path4);
      if (path4 === ".")
        return "";
      const needsSeperator = path4[path4.length - 1] !== pathSeparator;
      return convertSlashes(needsSeperator ? path4 + pathSeparator : path4, pathSeparator);
    }
  }
});

// node_modules/vite/node_modules/fdir/dist/api/functions/join-path.js
var require_join_path = __commonJS({
  "node_modules/vite/node_modules/fdir/dist/api/functions/join-path.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.joinPathWithBasePath = joinPathWithBasePath;
    exports.joinDirectoryPath = joinDirectoryPath;
    exports.build = build2;
    var path_1 = require_path();
    var utils_1 = require_utils2();
    function joinPathWithBasePath(filename, directoryPath) {
      return directoryPath + filename;
    }
    function joinPathWithRelativePath(root, options2) {
      return function(filename, directoryPath) {
        const sameRoot = directoryPath.startsWith(root);
        if (sameRoot)
          return directoryPath.replace(root, "") + filename;
        else
          return (0, utils_1.convertSlashes)((0, path_1.relative)(root, directoryPath), options2.pathSeparator) + options2.pathSeparator + filename;
      };
    }
    function joinPath(filename) {
      return filename;
    }
    function joinDirectoryPath(filename, directoryPath, separator) {
      return directoryPath + filename + separator;
    }
    function build2(root, options2) {
      const { relativePaths, includeBasePath } = options2;
      return relativePaths && root ? joinPathWithRelativePath(root, options2) : includeBasePath ? joinPathWithBasePath : joinPath;
    }
  }
});

// node_modules/vite/node_modules/fdir/dist/api/functions/push-directory.js
var require_push_directory = __commonJS({
  "node_modules/vite/node_modules/fdir/dist/api/functions/push-directory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.build = build2;
    function pushDirectoryWithRelativePath(root) {
      return function(directoryPath, paths) {
        paths.push(directoryPath.substring(root.length) || ".");
      };
    }
    function pushDirectoryFilterWithRelativePath(root) {
      return function(directoryPath, paths, filters) {
        const relativePath = directoryPath.substring(root.length) || ".";
        if (filters.every((filter2) => filter2(relativePath, true))) {
          paths.push(relativePath);
        }
      };
    }
    var pushDirectory = (directoryPath, paths) => {
      paths.push(directoryPath || ".");
    };
    var pushDirectoryFilter = (directoryPath, paths, filters) => {
      const path4 = directoryPath || ".";
      if (filters.every((filter2) => filter2(path4, true))) {
        paths.push(path4);
      }
    };
    var empty = () => {
    };
    function build2(root, options2) {
      const { includeDirs, filters, relativePaths } = options2;
      if (!includeDirs)
        return empty;
      if (relativePaths)
        return filters && filters.length ? pushDirectoryFilterWithRelativePath(root) : pushDirectoryWithRelativePath(root);
      return filters && filters.length ? pushDirectoryFilter : pushDirectory;
    }
  }
});

// node_modules/vite/node_modules/fdir/dist/api/functions/push-file.js
var require_push_file = __commonJS({
  "node_modules/vite/node_modules/fdir/dist/api/functions/push-file.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.build = build2;
    var pushFileFilterAndCount = (filename, _paths, counts, filters) => {
      if (filters.every((filter2) => filter2(filename, false)))
        counts.files++;
    };
    var pushFileFilter = (filename, paths, _counts, filters) => {
      if (filters.every((filter2) => filter2(filename, false)))
        paths.push(filename);
    };
    var pushFileCount = (_filename, _paths, counts, _filters) => {
      counts.files++;
    };
    var pushFile = (filename, paths) => {
      paths.push(filename);
    };
    var empty = () => {
    };
    function build2(options2) {
      const { excludeFiles, filters, onlyCounts } = options2;
      if (excludeFiles)
        return empty;
      if (filters && filters.length) {
        return onlyCounts ? pushFileFilterAndCount : pushFileFilter;
      } else if (onlyCounts) {
        return pushFileCount;
      } else {
        return pushFile;
      }
    }
  }
});

// node_modules/vite/node_modules/fdir/dist/api/functions/get-array.js
var require_get_array = __commonJS({
  "node_modules/vite/node_modules/fdir/dist/api/functions/get-array.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.build = build2;
    var getArray = (paths) => {
      return paths;
    };
    var getArrayGroup = () => {
      return [""].slice(0, 0);
    };
    function build2(options2) {
      return options2.group ? getArrayGroup : getArray;
    }
  }
});

// node_modules/vite/node_modules/fdir/dist/api/functions/group-files.js
var require_group_files = __commonJS({
  "node_modules/vite/node_modules/fdir/dist/api/functions/group-files.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.build = build2;
    var groupFiles = (groups2, directory, files) => {
      groups2.push({ directory, files, dir: directory });
    };
    var empty = () => {
    };
    function build2(options2) {
      return options2.group ? groupFiles : empty;
    }
  }
});

// node_modules/vite/node_modules/fdir/dist/api/functions/resolve-symlink.js
var require_resolve_symlink = __commonJS({
  "node_modules/vite/node_modules/fdir/dist/api/functions/resolve-symlink.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.build = build2;
    var fs_1 = __importDefault(require_fs());
    var path_1 = require_path();
    var resolveSymlinksAsync = function(path4, state, callback) {
      const { queue, options: { suppressErrors } } = state;
      queue.enqueue();
      fs_1.default.realpath(path4, (error2, resolvedPath) => {
        if (error2)
          return queue.dequeue(suppressErrors ? null : error2, state);
        fs_1.default.stat(resolvedPath, (error3, stat2) => {
          if (error3)
            return queue.dequeue(suppressErrors ? null : error3, state);
          if (stat2.isDirectory() && isRecursive(path4, resolvedPath, state))
            return queue.dequeue(null, state);
          callback(stat2, resolvedPath);
          queue.dequeue(null, state);
        });
      });
    };
    var resolveSymlinks = function(path4, state, callback) {
      const { queue, options: { suppressErrors } } = state;
      queue.enqueue();
      try {
        const resolvedPath = fs_1.default.realpathSync(path4);
        const stat2 = fs_1.default.statSync(resolvedPath);
        if (stat2.isDirectory() && isRecursive(path4, resolvedPath, state))
          return;
        callback(stat2, resolvedPath);
      } catch (e2) {
        if (!suppressErrors)
          throw e2;
      }
    };
    function build2(options2, isSynchronous) {
      if (!options2.resolveSymlinks || options2.excludeSymlinks)
        return null;
      return isSynchronous ? resolveSymlinks : resolveSymlinksAsync;
    }
    function isRecursive(path4, resolved, state) {
      if (state.options.useRealPaths)
        return isRecursiveUsingRealPaths(resolved, state);
      let parent = (0, path_1.dirname)(path4);
      let depth = 1;
      while (parent !== state.root && depth < 2) {
        const resolvedPath = state.symlinks.get(parent);
        const isSameRoot = !!resolvedPath && (resolvedPath === resolved || resolvedPath.startsWith(resolved) || resolved.startsWith(resolvedPath));
        if (isSameRoot)
          depth++;
        else
          parent = (0, path_1.dirname)(parent);
      }
      state.symlinks.set(path4, resolved);
      return depth > 1;
    }
    function isRecursiveUsingRealPaths(resolved, state) {
      return state.visited.includes(resolved + state.options.pathSeparator);
    }
  }
});

// node_modules/vite/node_modules/fdir/dist/api/functions/invoke-callback.js
var require_invoke_callback = __commonJS({
  "node_modules/vite/node_modules/fdir/dist/api/functions/invoke-callback.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.build = build2;
    var onlyCountsSync = (state) => {
      return state.counts;
    };
    var groupsSync = (state) => {
      return state.groups;
    };
    var defaultSync = (state) => {
      return state.paths;
    };
    var limitFilesSync = (state) => {
      return state.paths.slice(0, state.options.maxFiles);
    };
    var onlyCountsAsync = (state, error2, callback) => {
      report(error2, callback, state.counts, state.options.suppressErrors);
      return null;
    };
    var defaultAsync = (state, error2, callback) => {
      report(error2, callback, state.paths, state.options.suppressErrors);
      return null;
    };
    var limitFilesAsync = (state, error2, callback) => {
      report(error2, callback, state.paths.slice(0, state.options.maxFiles), state.options.suppressErrors);
      return null;
    };
    var groupsAsync = (state, error2, callback) => {
      report(error2, callback, state.groups, state.options.suppressErrors);
      return null;
    };
    function report(error2, callback, output, suppressErrors) {
      if (error2 && !suppressErrors)
        callback(error2, output);
      else
        callback(null, output);
    }
    function build2(options2, isSynchronous) {
      const { onlyCounts, group, maxFiles } = options2;
      if (onlyCounts)
        return isSynchronous ? onlyCountsSync : onlyCountsAsync;
      else if (group)
        return isSynchronous ? groupsSync : groupsAsync;
      else if (maxFiles)
        return isSynchronous ? limitFilesSync : limitFilesAsync;
      else
        return isSynchronous ? defaultSync : defaultAsync;
    }
  }
});

// node_modules/vite/node_modules/fdir/dist/api/functions/walk-directory.js
var require_walk_directory = __commonJS({
  "node_modules/vite/node_modules/fdir/dist/api/functions/walk-directory.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.build = build2;
    var fs_1 = __importDefault(require_fs());
    var readdirOpts = { withFileTypes: true };
    var walkAsync = (state, crawlPath, directoryPath, currentDepth, callback) => {
      state.queue.enqueue();
      if (currentDepth <= 0)
        return state.queue.dequeue(null, state);
      state.visited.push(crawlPath);
      state.counts.directories++;
      fs_1.default.readdir(crawlPath || ".", readdirOpts, (error2, entries = []) => {
        callback(entries, directoryPath, currentDepth);
        state.queue.dequeue(state.options.suppressErrors ? null : error2, state);
      });
    };
    var walkSync = (state, crawlPath, directoryPath, currentDepth, callback) => {
      if (currentDepth <= 0)
        return;
      state.visited.push(crawlPath);
      state.counts.directories++;
      let entries = [];
      try {
        entries = fs_1.default.readdirSync(crawlPath || ".", readdirOpts);
      } catch (e2) {
        if (!state.options.suppressErrors)
          throw e2;
      }
      callback(entries, directoryPath, currentDepth);
    };
    function build2(isSynchronous) {
      return isSynchronous ? walkSync : walkAsync;
    }
  }
});

// node_modules/vite/node_modules/fdir/dist/api/queue.js
var require_queue = __commonJS({
  "node_modules/vite/node_modules/fdir/dist/api/queue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Queue = void 0;
    var Queue2 = class {
      constructor(onQueueEmpty) {
        __publicField(this, "onQueueEmpty");
        __publicField(this, "count", 0);
        this.onQueueEmpty = onQueueEmpty;
      }
      enqueue() {
        this.count++;
        return this.count;
      }
      dequeue(error2, output) {
        if (this.onQueueEmpty && (--this.count <= 0 || error2)) {
          this.onQueueEmpty(error2, output);
          if (error2) {
            output.controller.abort();
            this.onQueueEmpty = void 0;
          }
        }
      }
    };
    exports.Queue = Queue2;
  }
});

// node_modules/vite/node_modules/fdir/dist/api/counter.js
var require_counter = __commonJS({
  "node_modules/vite/node_modules/fdir/dist/api/counter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Counter = void 0;
    var Counter = class {
      constructor() {
        __publicField(this, "_files", 0);
        __publicField(this, "_directories", 0);
      }
      set files(num) {
        this._files = num;
      }
      get files() {
        return this._files;
      }
      set directories(num) {
        this._directories = num;
      }
      get directories() {
        return this._directories;
      }
      /**
       * @deprecated use `directories` instead
       */
      /* c8 ignore next 3 */
      get dirs() {
        return this._directories;
      }
    };
    exports.Counter = Counter;
  }
});

// node_modules/vite/node_modules/fdir/dist/api/walker.js
var require_walker = __commonJS({
  "node_modules/vite/node_modules/fdir/dist/api/walker.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m2, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m2, k);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m2, k, k2) {
      if (k2 === void 0) k2 = k;
      o2[k2] = m2[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys = function(o2) {
        ownKeys = Object.getOwnPropertyNames || function(o3) {
          var ar = [];
          for (var k in o3) if (Object.prototype.hasOwnProperty.call(o3, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys(o2);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Walker = void 0;
    var path_1 = require_path();
    var utils_1 = require_utils2();
    var joinPath = __importStar(require_join_path());
    var pushDirectory = __importStar(require_push_directory());
    var pushFile = __importStar(require_push_file());
    var getArray = __importStar(require_get_array());
    var groupFiles = __importStar(require_group_files());
    var resolveSymlink = __importStar(require_resolve_symlink());
    var invokeCallback = __importStar(require_invoke_callback());
    var walkDirectory = __importStar(require_walk_directory());
    var queue_1 = require_queue();
    var counter_1 = require_counter();
    var Walker = class {
      constructor(root, options2, callback) {
        __publicField(this, "root");
        __publicField(this, "isSynchronous");
        __publicField(this, "state");
        __publicField(this, "joinPath");
        __publicField(this, "pushDirectory");
        __publicField(this, "pushFile");
        __publicField(this, "getArray");
        __publicField(this, "groupFiles");
        __publicField(this, "resolveSymlink");
        __publicField(this, "walkDirectory");
        __publicField(this, "callbackInvoker");
        __publicField(this, "walk", (entries, directoryPath, depth) => {
          const { paths, options: { filters, resolveSymlinks, excludeSymlinks, exclude, maxFiles, signal, useRealPaths, pathSeparator }, controller } = this.state;
          if (controller.signal.aborted || signal && signal.aborted || maxFiles && paths.length > maxFiles)
            return;
          const files = this.getArray(this.state.paths);
          for (let i = 0; i < entries.length; ++i) {
            const entry = entries[i];
            if (entry.isFile() || entry.isSymbolicLink() && !resolveSymlinks && !excludeSymlinks) {
              const filename = this.joinPath(entry.name, directoryPath);
              this.pushFile(filename, files, this.state.counts, filters);
            } else if (entry.isDirectory()) {
              let path4 = joinPath.joinDirectoryPath(entry.name, directoryPath, this.state.options.pathSeparator);
              if (exclude && exclude(entry.name, path4))
                continue;
              this.pushDirectory(path4, paths, filters);
              this.walkDirectory(this.state, path4, path4, depth - 1, this.walk);
            } else if (this.resolveSymlink && entry.isSymbolicLink()) {
              let path4 = joinPath.joinPathWithBasePath(entry.name, directoryPath);
              this.resolveSymlink(path4, this.state, (stat2, resolvedPath) => {
                if (stat2.isDirectory()) {
                  resolvedPath = (0, utils_1.normalizePath)(resolvedPath, this.state.options);
                  if (exclude && exclude(entry.name, useRealPaths ? resolvedPath : path4 + pathSeparator))
                    return;
                  this.walkDirectory(this.state, resolvedPath, useRealPaths ? resolvedPath : path4 + pathSeparator, depth - 1, this.walk);
                } else {
                  resolvedPath = useRealPaths ? resolvedPath : path4;
                  const filename = (0, path_1.basename)(resolvedPath);
                  const directoryPath2 = (0, utils_1.normalizePath)((0, path_1.dirname)(resolvedPath), this.state.options);
                  resolvedPath = this.joinPath(filename, directoryPath2);
                  this.pushFile(resolvedPath, files, this.state.counts, filters);
                }
              });
            }
          }
          this.groupFiles(this.state.groups, directoryPath, files);
        });
        this.isSynchronous = !callback;
        this.callbackInvoker = invokeCallback.build(options2, this.isSynchronous);
        this.root = (0, utils_1.normalizePath)(root, options2);
        this.state = {
          root: (0, utils_1.isRootDirectory)(this.root) ? this.root : this.root.slice(0, -1),
          // Perf: we explicitly tell the compiler to optimize for String arrays
          paths: [""].slice(0, 0),
          groups: [],
          counts: new counter_1.Counter(),
          options: options2,
          queue: new queue_1.Queue((error2, state) => this.callbackInvoker(state, error2, callback)),
          symlinks: /* @__PURE__ */ new Map(),
          visited: [""].slice(0, 0),
          controller: new AbortController()
        };
        this.joinPath = joinPath.build(this.root, options2);
        this.pushDirectory = pushDirectory.build(this.root, options2);
        this.pushFile = pushFile.build(options2);
        this.getArray = getArray.build(options2);
        this.groupFiles = groupFiles.build(options2);
        this.resolveSymlink = resolveSymlink.build(options2, this.isSynchronous);
        this.walkDirectory = walkDirectory.build(this.isSynchronous);
      }
      start() {
        this.pushDirectory(this.root, this.state.paths, this.state.options.filters);
        this.walkDirectory(this.state, this.root, this.root, this.state.options.maxDepth, this.walk);
        return this.isSynchronous ? this.callbackInvoker(this.state, null) : null;
      }
    };
    exports.Walker = Walker;
  }
});

// node_modules/vite/node_modules/fdir/dist/api/async.js
var require_async = __commonJS({
  "node_modules/vite/node_modules/fdir/dist/api/async.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.promise = promise;
    exports.callback = callback;
    var walker_1 = require_walker();
    function promise(root, options2) {
      return new Promise((resolve4, reject) => {
        callback(root, options2, (err2, output) => {
          if (err2)
            return reject(err2);
          resolve4(output);
        });
      });
    }
    function callback(root, options2, callback2) {
      let walker = new walker_1.Walker(root, options2, callback2);
      walker.start();
    }
  }
});

// node_modules/vite/node_modules/fdir/dist/api/sync.js
var require_sync = __commonJS({
  "node_modules/vite/node_modules/fdir/dist/api/sync.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sync = sync2;
    var walker_1 = require_walker();
    function sync2(root, options2) {
      const walker = new walker_1.Walker(root, options2);
      return walker.start();
    }
  }
});

// node_modules/vite/node_modules/fdir/dist/builder/api-builder.js
var require_api_builder = __commonJS({
  "node_modules/vite/node_modules/fdir/dist/builder/api-builder.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.APIBuilder = void 0;
    var async_1 = require_async();
    var sync_1 = require_sync();
    var APIBuilder = class {
      constructor(root, options2) {
        __publicField(this, "root");
        __publicField(this, "options");
        this.root = root;
        this.options = options2;
      }
      withPromise() {
        return (0, async_1.promise)(this.root, this.options);
      }
      withCallback(cb) {
        (0, async_1.callback)(this.root, this.options, cb);
      }
      sync() {
        return (0, sync_1.sync)(this.root, this.options);
      }
    };
    exports.APIBuilder = APIBuilder;
  }
});

// node_modules/vite/node_modules/fdir/dist/builder/index.js
var require_builder = __commonJS({
  "node_modules/vite/node_modules/fdir/dist/builder/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Builder = void 0;
    var path_1 = require_path();
    var api_builder_1 = require_api_builder();
    var pm = null;
    try {
      __require.resolve("picomatch");
      pm = require_picomatch2();
    } catch (_e) {
    }
    var Builder = class {
      constructor(options2) {
        __publicField(this, "globCache", {});
        __publicField(this, "options", {
          maxDepth: Infinity,
          suppressErrors: true,
          pathSeparator: path_1.sep,
          filters: []
        });
        __publicField(this, "globFunction");
        this.options = { ...this.options, ...options2 };
        this.globFunction = this.options.globFunction;
      }
      group() {
        this.options.group = true;
        return this;
      }
      withPathSeparator(separator) {
        this.options.pathSeparator = separator;
        return this;
      }
      withBasePath() {
        this.options.includeBasePath = true;
        return this;
      }
      withRelativePaths() {
        this.options.relativePaths = true;
        return this;
      }
      withDirs() {
        this.options.includeDirs = true;
        return this;
      }
      withMaxDepth(depth) {
        this.options.maxDepth = depth;
        return this;
      }
      withMaxFiles(limit) {
        this.options.maxFiles = limit;
        return this;
      }
      withFullPaths() {
        this.options.resolvePaths = true;
        this.options.includeBasePath = true;
        return this;
      }
      withErrors() {
        this.options.suppressErrors = false;
        return this;
      }
      withSymlinks({ resolvePaths = true } = {}) {
        this.options.resolveSymlinks = true;
        this.options.useRealPaths = resolvePaths;
        return this.withFullPaths();
      }
      withAbortSignal(signal) {
        this.options.signal = signal;
        return this;
      }
      normalize() {
        this.options.normalizePath = true;
        return this;
      }
      filter(predicate) {
        this.options.filters.push(predicate);
        return this;
      }
      onlyDirs() {
        this.options.excludeFiles = true;
        this.options.includeDirs = true;
        return this;
      }
      exclude(predicate) {
        this.options.exclude = predicate;
        return this;
      }
      onlyCounts() {
        this.options.onlyCounts = true;
        return this;
      }
      crawl(root) {
        return new api_builder_1.APIBuilder(root || ".", this.options);
      }
      withGlobFunction(fn) {
        this.globFunction = fn;
        return this;
      }
      /**
       * @deprecated Pass options using the constructor instead:
       * ```ts
       * new fdir(options).crawl("/path/to/root");
       * ```
       * This method will be removed in v7.0
       */
      /* c8 ignore next 4 */
      crawlWithOptions(root, options2) {
        this.options = { ...this.options, ...options2 };
        return new api_builder_1.APIBuilder(root || ".", this.options);
      }
      glob(...patterns) {
        if (this.globFunction) {
          return this.globWithOptions(patterns);
        }
        return this.globWithOptions(patterns, ...[{ dot: true }]);
      }
      globWithOptions(patterns, ...options2) {
        const globFn = this.globFunction || pm;
        if (!globFn) {
          throw new Error("Please specify a glob function to use glob matching.");
        }
        var isMatch2 = this.globCache[patterns.join("\0")];
        if (!isMatch2) {
          isMatch2 = globFn(patterns, ...options2);
          this.globCache[patterns.join("\0")] = isMatch2;
        }
        this.options.filters.push((path4) => isMatch2(path4));
        return this;
      }
    };
    exports.Builder = Builder;
  }
});

// node_modules/vite/node_modules/fdir/dist/types.js
var require_types = __commonJS({
  "node_modules/vite/node_modules/fdir/dist/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/vite/node_modules/fdir/dist/index.js
var require_dist = __commonJS({
  "node_modules/vite/node_modules/fdir/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m2, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m2, k);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m2, k, k2) {
      if (k2 === void 0) k2 = k;
      o2[k2] = m2[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m2, exports2) {
      for (var p2 in m2) if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2)) __createBinding(exports2, m2, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fdir = void 0;
    var builder_1 = require_builder();
    Object.defineProperty(exports, "fdir", { enumerable: true, get: function() {
      return builder_1.Builder;
    } });
    __exportStar(require_types(), exports);
  }
});

// browser-external:node:child_process
var require_node_child_process = __commonJS({
  "browser-external:node:child_process"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "node:child_process" has been externalized for browser compatibility. Cannot access "node:child_process.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:net
var require_net = __commonJS({
  "browser-external:net"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "net" has been externalized for browser compatibility. Cannot access "net.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:http
var require_http = __commonJS({
  "browser-external:http"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "http" has been externalized for browser compatibility. Cannot access "http.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:node:net
var require_node_net = __commonJS({
  "browser-external:node:net"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "node:net" has been externalized for browser compatibility. Cannot access "node:net.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:node:dns
var require_node_dns = __commonJS({
  "browser-external:node:dns"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "node:dns" has been externalized for browser compatibility. Cannot access "node:dns.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:node:buffer
var require_node_buffer = __commonJS({
  "browser-external:node:buffer"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "node:buffer" has been externalized for browser compatibility. Cannot access "node:buffer.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:node:readline
var require_node_readline = __commonJS({
  "browser-external:node:readline"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "node:readline" has been externalized for browser compatibility. Cannot access "node:readline.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:node:events
var require_node_events = __commonJS({
  "browser-external:node:events"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "node:events" has been externalized for browser compatibility. Cannot access "node:events.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/tinyglobby/node_modules/fdir/dist/utils.js
var require_utils3 = __commonJS({
  "node_modules/tinyglobby/node_modules/fdir/dist/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cleanPath = cleanPath;
    exports.convertSlashes = convertSlashes;
    exports.isRootDirectory = isRootDirectory;
    exports.normalizePath = normalizePath3;
    var path_1 = require_path();
    function cleanPath(path4) {
      let normalized = (0, path_1.normalize)(path4);
      if (normalized.length > 1 && normalized[normalized.length - 1] === path_1.sep)
        normalized = normalized.substring(0, normalized.length - 1);
      return normalized;
    }
    var SLASHES_REGEX = /[\\/]/g;
    function convertSlashes(path4, separator) {
      return path4.replace(SLASHES_REGEX, separator);
    }
    var WINDOWS_ROOT_DIR_REGEX = /^[a-z]:[\\/]$/i;
    function isRootDirectory(path4) {
      return path4 === "/" || WINDOWS_ROOT_DIR_REGEX.test(path4);
    }
    function normalizePath3(path4, options2) {
      const { resolvePaths, normalizePath: normalizePath4, pathSeparator } = options2;
      const pathNeedsCleaning = process.platform === "win32" && path4.includes("/") || path4.startsWith(".");
      if (resolvePaths)
        path4 = (0, path_1.resolve)(path4);
      if (normalizePath4 || pathNeedsCleaning)
        path4 = cleanPath(path4);
      if (path4 === ".")
        return "";
      const needsSeperator = path4[path4.length - 1] !== pathSeparator;
      return convertSlashes(needsSeperator ? path4 + pathSeparator : path4, pathSeparator);
    }
  }
});

// node_modules/tinyglobby/node_modules/fdir/dist/api/functions/join-path.js
var require_join_path2 = __commonJS({
  "node_modules/tinyglobby/node_modules/fdir/dist/api/functions/join-path.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.joinPathWithBasePath = joinPathWithBasePath;
    exports.joinDirectoryPath = joinDirectoryPath;
    exports.build = build2;
    var path_1 = require_path();
    var utils_1 = require_utils3();
    function joinPathWithBasePath(filename, directoryPath) {
      return directoryPath + filename;
    }
    function joinPathWithRelativePath(root, options2) {
      return function(filename, directoryPath) {
        const sameRoot = directoryPath.startsWith(root);
        if (sameRoot)
          return directoryPath.replace(root, "") + filename;
        else
          return (0, utils_1.convertSlashes)((0, path_1.relative)(root, directoryPath), options2.pathSeparator) + options2.pathSeparator + filename;
      };
    }
    function joinPath(filename) {
      return filename;
    }
    function joinDirectoryPath(filename, directoryPath, separator) {
      return directoryPath + filename + separator;
    }
    function build2(root, options2) {
      const { relativePaths, includeBasePath } = options2;
      return relativePaths && root ? joinPathWithRelativePath(root, options2) : includeBasePath ? joinPathWithBasePath : joinPath;
    }
  }
});

// node_modules/tinyglobby/node_modules/fdir/dist/api/functions/push-directory.js
var require_push_directory2 = __commonJS({
  "node_modules/tinyglobby/node_modules/fdir/dist/api/functions/push-directory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.build = build2;
    function pushDirectoryWithRelativePath(root) {
      return function(directoryPath, paths) {
        paths.push(directoryPath.substring(root.length) || ".");
      };
    }
    function pushDirectoryFilterWithRelativePath(root) {
      return function(directoryPath, paths, filters) {
        const relativePath = directoryPath.substring(root.length) || ".";
        if (filters.every((filter2) => filter2(relativePath, true))) {
          paths.push(relativePath);
        }
      };
    }
    var pushDirectory = (directoryPath, paths) => {
      paths.push(directoryPath || ".");
    };
    var pushDirectoryFilter = (directoryPath, paths, filters) => {
      const path4 = directoryPath || ".";
      if (filters.every((filter2) => filter2(path4, true))) {
        paths.push(path4);
      }
    };
    var empty = () => {
    };
    function build2(root, options2) {
      const { includeDirs, filters, relativePaths } = options2;
      if (!includeDirs)
        return empty;
      if (relativePaths)
        return filters && filters.length ? pushDirectoryFilterWithRelativePath(root) : pushDirectoryWithRelativePath(root);
      return filters && filters.length ? pushDirectoryFilter : pushDirectory;
    }
  }
});

// node_modules/tinyglobby/node_modules/fdir/dist/api/functions/push-file.js
var require_push_file2 = __commonJS({
  "node_modules/tinyglobby/node_modules/fdir/dist/api/functions/push-file.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.build = build2;
    var pushFileFilterAndCount = (filename, _paths, counts, filters) => {
      if (filters.every((filter2) => filter2(filename, false)))
        counts.files++;
    };
    var pushFileFilter = (filename, paths, _counts, filters) => {
      if (filters.every((filter2) => filter2(filename, false)))
        paths.push(filename);
    };
    var pushFileCount = (_filename, _paths, counts, _filters) => {
      counts.files++;
    };
    var pushFile = (filename, paths) => {
      paths.push(filename);
    };
    var empty = () => {
    };
    function build2(options2) {
      const { excludeFiles, filters, onlyCounts } = options2;
      if (excludeFiles)
        return empty;
      if (filters && filters.length) {
        return onlyCounts ? pushFileFilterAndCount : pushFileFilter;
      } else if (onlyCounts) {
        return pushFileCount;
      } else {
        return pushFile;
      }
    }
  }
});

// node_modules/tinyglobby/node_modules/fdir/dist/api/functions/get-array.js
var require_get_array2 = __commonJS({
  "node_modules/tinyglobby/node_modules/fdir/dist/api/functions/get-array.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.build = build2;
    var getArray = (paths) => {
      return paths;
    };
    var getArrayGroup = () => {
      return [""].slice(0, 0);
    };
    function build2(options2) {
      return options2.group ? getArrayGroup : getArray;
    }
  }
});

// node_modules/tinyglobby/node_modules/fdir/dist/api/functions/group-files.js
var require_group_files2 = __commonJS({
  "node_modules/tinyglobby/node_modules/fdir/dist/api/functions/group-files.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.build = build2;
    var groupFiles = (groups2, directory, files) => {
      groups2.push({ directory, files, dir: directory });
    };
    var empty = () => {
    };
    function build2(options2) {
      return options2.group ? groupFiles : empty;
    }
  }
});

// node_modules/tinyglobby/node_modules/fdir/dist/api/functions/resolve-symlink.js
var require_resolve_symlink2 = __commonJS({
  "node_modules/tinyglobby/node_modules/fdir/dist/api/functions/resolve-symlink.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.build = build2;
    var fs_1 = __importDefault(require_fs());
    var path_1 = require_path();
    var resolveSymlinksAsync = function(path4, state, callback) {
      const { queue, options: { suppressErrors } } = state;
      queue.enqueue();
      fs_1.default.realpath(path4, (error2, resolvedPath) => {
        if (error2)
          return queue.dequeue(suppressErrors ? null : error2, state);
        fs_1.default.stat(resolvedPath, (error3, stat2) => {
          if (error3)
            return queue.dequeue(suppressErrors ? null : error3, state);
          if (stat2.isDirectory() && isRecursive(path4, resolvedPath, state))
            return queue.dequeue(null, state);
          callback(stat2, resolvedPath);
          queue.dequeue(null, state);
        });
      });
    };
    var resolveSymlinks = function(path4, state, callback) {
      const { queue, options: { suppressErrors } } = state;
      queue.enqueue();
      try {
        const resolvedPath = fs_1.default.realpathSync(path4);
        const stat2 = fs_1.default.statSync(resolvedPath);
        if (stat2.isDirectory() && isRecursive(path4, resolvedPath, state))
          return;
        callback(stat2, resolvedPath);
      } catch (e2) {
        if (!suppressErrors)
          throw e2;
      }
    };
    function build2(options2, isSynchronous) {
      if (!options2.resolveSymlinks || options2.excludeSymlinks)
        return null;
      return isSynchronous ? resolveSymlinks : resolveSymlinksAsync;
    }
    function isRecursive(path4, resolved, state) {
      if (state.options.useRealPaths)
        return isRecursiveUsingRealPaths(resolved, state);
      let parent = (0, path_1.dirname)(path4);
      let depth = 1;
      while (parent !== state.root && depth < 2) {
        const resolvedPath = state.symlinks.get(parent);
        const isSameRoot = !!resolvedPath && (resolvedPath === resolved || resolvedPath.startsWith(resolved) || resolved.startsWith(resolvedPath));
        if (isSameRoot)
          depth++;
        else
          parent = (0, path_1.dirname)(parent);
      }
      state.symlinks.set(path4, resolved);
      return depth > 1;
    }
    function isRecursiveUsingRealPaths(resolved, state) {
      return state.visited.includes(resolved + state.options.pathSeparator);
    }
  }
});

// node_modules/tinyglobby/node_modules/fdir/dist/api/functions/invoke-callback.js
var require_invoke_callback2 = __commonJS({
  "node_modules/tinyglobby/node_modules/fdir/dist/api/functions/invoke-callback.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.build = build2;
    var onlyCountsSync = (state) => {
      return state.counts;
    };
    var groupsSync = (state) => {
      return state.groups;
    };
    var defaultSync = (state) => {
      return state.paths;
    };
    var limitFilesSync = (state) => {
      return state.paths.slice(0, state.options.maxFiles);
    };
    var onlyCountsAsync = (state, error2, callback) => {
      report(error2, callback, state.counts, state.options.suppressErrors);
      return null;
    };
    var defaultAsync = (state, error2, callback) => {
      report(error2, callback, state.paths, state.options.suppressErrors);
      return null;
    };
    var limitFilesAsync = (state, error2, callback) => {
      report(error2, callback, state.paths.slice(0, state.options.maxFiles), state.options.suppressErrors);
      return null;
    };
    var groupsAsync = (state, error2, callback) => {
      report(error2, callback, state.groups, state.options.suppressErrors);
      return null;
    };
    function report(error2, callback, output, suppressErrors) {
      if (error2 && !suppressErrors)
        callback(error2, output);
      else
        callback(null, output);
    }
    function build2(options2, isSynchronous) {
      const { onlyCounts, group, maxFiles } = options2;
      if (onlyCounts)
        return isSynchronous ? onlyCountsSync : onlyCountsAsync;
      else if (group)
        return isSynchronous ? groupsSync : groupsAsync;
      else if (maxFiles)
        return isSynchronous ? limitFilesSync : limitFilesAsync;
      else
        return isSynchronous ? defaultSync : defaultAsync;
    }
  }
});

// node_modules/tinyglobby/node_modules/fdir/dist/api/functions/walk-directory.js
var require_walk_directory2 = __commonJS({
  "node_modules/tinyglobby/node_modules/fdir/dist/api/functions/walk-directory.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.build = build2;
    var fs_1 = __importDefault(require_fs());
    var readdirOpts = { withFileTypes: true };
    var walkAsync = (state, crawlPath, directoryPath, currentDepth, callback) => {
      state.queue.enqueue();
      if (currentDepth <= 0)
        return state.queue.dequeue(null, state);
      state.visited.push(crawlPath);
      state.counts.directories++;
      fs_1.default.readdir(crawlPath || ".", readdirOpts, (error2, entries = []) => {
        callback(entries, directoryPath, currentDepth);
        state.queue.dequeue(state.options.suppressErrors ? null : error2, state);
      });
    };
    var walkSync = (state, crawlPath, directoryPath, currentDepth, callback) => {
      if (currentDepth <= 0)
        return;
      state.visited.push(crawlPath);
      state.counts.directories++;
      let entries = [];
      try {
        entries = fs_1.default.readdirSync(crawlPath || ".", readdirOpts);
      } catch (e2) {
        if (!state.options.suppressErrors)
          throw e2;
      }
      callback(entries, directoryPath, currentDepth);
    };
    function build2(isSynchronous) {
      return isSynchronous ? walkSync : walkAsync;
    }
  }
});

// node_modules/tinyglobby/node_modules/fdir/dist/api/queue.js
var require_queue2 = __commonJS({
  "node_modules/tinyglobby/node_modules/fdir/dist/api/queue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Queue = void 0;
    var Queue2 = class {
      constructor(onQueueEmpty) {
        __publicField(this, "onQueueEmpty");
        __publicField(this, "count", 0);
        this.onQueueEmpty = onQueueEmpty;
      }
      enqueue() {
        this.count++;
        return this.count;
      }
      dequeue(error2, output) {
        if (this.onQueueEmpty && (--this.count <= 0 || error2)) {
          this.onQueueEmpty(error2, output);
          if (error2) {
            output.controller.abort();
            this.onQueueEmpty = void 0;
          }
        }
      }
    };
    exports.Queue = Queue2;
  }
});

// node_modules/tinyglobby/node_modules/fdir/dist/api/counter.js
var require_counter2 = __commonJS({
  "node_modules/tinyglobby/node_modules/fdir/dist/api/counter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Counter = void 0;
    var Counter = class {
      constructor() {
        __publicField(this, "_files", 0);
        __publicField(this, "_directories", 0);
      }
      set files(num) {
        this._files = num;
      }
      get files() {
        return this._files;
      }
      set directories(num) {
        this._directories = num;
      }
      get directories() {
        return this._directories;
      }
      /**
       * @deprecated use `directories` instead
       */
      /* c8 ignore next 3 */
      get dirs() {
        return this._directories;
      }
    };
    exports.Counter = Counter;
  }
});

// node_modules/tinyglobby/node_modules/fdir/dist/api/walker.js
var require_walker2 = __commonJS({
  "node_modules/tinyglobby/node_modules/fdir/dist/api/walker.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m2, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m2, k);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m2, k, k2) {
      if (k2 === void 0) k2 = k;
      o2[k2] = m2[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys = function(o2) {
        ownKeys = Object.getOwnPropertyNames || function(o3) {
          var ar = [];
          for (var k in o3) if (Object.prototype.hasOwnProperty.call(o3, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys(o2);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Walker = void 0;
    var path_1 = require_path();
    var utils_1 = require_utils3();
    var joinPath = __importStar(require_join_path2());
    var pushDirectory = __importStar(require_push_directory2());
    var pushFile = __importStar(require_push_file2());
    var getArray = __importStar(require_get_array2());
    var groupFiles = __importStar(require_group_files2());
    var resolveSymlink = __importStar(require_resolve_symlink2());
    var invokeCallback = __importStar(require_invoke_callback2());
    var walkDirectory = __importStar(require_walk_directory2());
    var queue_1 = require_queue2();
    var counter_1 = require_counter2();
    var Walker = class {
      constructor(root, options2, callback) {
        __publicField(this, "root");
        __publicField(this, "isSynchronous");
        __publicField(this, "state");
        __publicField(this, "joinPath");
        __publicField(this, "pushDirectory");
        __publicField(this, "pushFile");
        __publicField(this, "getArray");
        __publicField(this, "groupFiles");
        __publicField(this, "resolveSymlink");
        __publicField(this, "walkDirectory");
        __publicField(this, "callbackInvoker");
        __publicField(this, "walk", (entries, directoryPath, depth) => {
          const { paths, options: { filters, resolveSymlinks, excludeSymlinks, exclude, maxFiles, signal, useRealPaths, pathSeparator }, controller } = this.state;
          if (controller.signal.aborted || signal && signal.aborted || maxFiles && paths.length > maxFiles)
            return;
          const files = this.getArray(this.state.paths);
          for (let i = 0; i < entries.length; ++i) {
            const entry = entries[i];
            if (entry.isFile() || entry.isSymbolicLink() && !resolveSymlinks && !excludeSymlinks) {
              const filename = this.joinPath(entry.name, directoryPath);
              this.pushFile(filename, files, this.state.counts, filters);
            } else if (entry.isDirectory()) {
              let path4 = joinPath.joinDirectoryPath(entry.name, directoryPath, this.state.options.pathSeparator);
              if (exclude && exclude(entry.name, path4))
                continue;
              this.pushDirectory(path4, paths, filters);
              this.walkDirectory(this.state, path4, path4, depth - 1, this.walk);
            } else if (this.resolveSymlink && entry.isSymbolicLink()) {
              let path4 = joinPath.joinPathWithBasePath(entry.name, directoryPath);
              this.resolveSymlink(path4, this.state, (stat2, resolvedPath) => {
                if (stat2.isDirectory()) {
                  resolvedPath = (0, utils_1.normalizePath)(resolvedPath, this.state.options);
                  if (exclude && exclude(entry.name, useRealPaths ? resolvedPath : path4 + pathSeparator))
                    return;
                  this.walkDirectory(this.state, resolvedPath, useRealPaths ? resolvedPath : path4 + pathSeparator, depth - 1, this.walk);
                } else {
                  resolvedPath = useRealPaths ? resolvedPath : path4;
                  const filename = (0, path_1.basename)(resolvedPath);
                  const directoryPath2 = (0, utils_1.normalizePath)((0, path_1.dirname)(resolvedPath), this.state.options);
                  resolvedPath = this.joinPath(filename, directoryPath2);
                  this.pushFile(resolvedPath, files, this.state.counts, filters);
                }
              });
            }
          }
          this.groupFiles(this.state.groups, directoryPath, files);
        });
        this.isSynchronous = !callback;
        this.callbackInvoker = invokeCallback.build(options2, this.isSynchronous);
        this.root = (0, utils_1.normalizePath)(root, options2);
        this.state = {
          root: (0, utils_1.isRootDirectory)(this.root) ? this.root : this.root.slice(0, -1),
          // Perf: we explicitly tell the compiler to optimize for String arrays
          paths: [""].slice(0, 0),
          groups: [],
          counts: new counter_1.Counter(),
          options: options2,
          queue: new queue_1.Queue((error2, state) => this.callbackInvoker(state, error2, callback)),
          symlinks: /* @__PURE__ */ new Map(),
          visited: [""].slice(0, 0),
          controller: new AbortController()
        };
        this.joinPath = joinPath.build(this.root, options2);
        this.pushDirectory = pushDirectory.build(this.root, options2);
        this.pushFile = pushFile.build(options2);
        this.getArray = getArray.build(options2);
        this.groupFiles = groupFiles.build(options2);
        this.resolveSymlink = resolveSymlink.build(options2, this.isSynchronous);
        this.walkDirectory = walkDirectory.build(this.isSynchronous);
      }
      start() {
        this.pushDirectory(this.root, this.state.paths, this.state.options.filters);
        this.walkDirectory(this.state, this.root, this.root, this.state.options.maxDepth, this.walk);
        return this.isSynchronous ? this.callbackInvoker(this.state, null) : null;
      }
    };
    exports.Walker = Walker;
  }
});

// node_modules/tinyglobby/node_modules/fdir/dist/api/async.js
var require_async2 = __commonJS({
  "node_modules/tinyglobby/node_modules/fdir/dist/api/async.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.promise = promise;
    exports.callback = callback;
    var walker_1 = require_walker2();
    function promise(root, options2) {
      return new Promise((resolve4, reject) => {
        callback(root, options2, (err2, output) => {
          if (err2)
            return reject(err2);
          resolve4(output);
        });
      });
    }
    function callback(root, options2, callback2) {
      let walker = new walker_1.Walker(root, options2, callback2);
      walker.start();
    }
  }
});

// node_modules/tinyglobby/node_modules/fdir/dist/api/sync.js
var require_sync2 = __commonJS({
  "node_modules/tinyglobby/node_modules/fdir/dist/api/sync.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sync = sync2;
    var walker_1 = require_walker2();
    function sync2(root, options2) {
      const walker = new walker_1.Walker(root, options2);
      return walker.start();
    }
  }
});

// node_modules/tinyglobby/node_modules/fdir/dist/builder/api-builder.js
var require_api_builder2 = __commonJS({
  "node_modules/tinyglobby/node_modules/fdir/dist/builder/api-builder.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.APIBuilder = void 0;
    var async_1 = require_async2();
    var sync_1 = require_sync2();
    var APIBuilder = class {
      constructor(root, options2) {
        __publicField(this, "root");
        __publicField(this, "options");
        this.root = root;
        this.options = options2;
      }
      withPromise() {
        return (0, async_1.promise)(this.root, this.options);
      }
      withCallback(cb) {
        (0, async_1.callback)(this.root, this.options, cb);
      }
      sync() {
        return (0, sync_1.sync)(this.root, this.options);
      }
    };
    exports.APIBuilder = APIBuilder;
  }
});

// node_modules/tinyglobby/node_modules/picomatch/lib/constants.js
var require_constants2 = __commonJS({
  "node_modules/tinyglobby/node_modules/picomatch/lib/constants.js"(exports, module) {
    "use strict";
    var WIN_SLASH = "\\\\/";
    var WIN_NO_SLASH = `[^${WIN_SLASH}]`;
    var DOT_LITERAL = "\\.";
    var PLUS_LITERAL = "\\+";
    var QMARK_LITERAL = "\\?";
    var SLASH_LITERAL = "\\/";
    var ONE_CHAR = "(?=.)";
    var QMARK = "[^/]";
    var END_ANCHOR = `(?:${SLASH_LITERAL}|$)`;
    var START_ANCHOR = `(?:^|${SLASH_LITERAL})`;
    var DOTS_SLASH = `${DOT_LITERAL}{1,2}${END_ANCHOR}`;
    var NO_DOT = `(?!${DOT_LITERAL})`;
    var NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`;
    var NO_DOT_SLASH = `(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`;
    var NO_DOTS_SLASH = `(?!${DOTS_SLASH})`;
    var QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`;
    var STAR2 = `${QMARK}*?`;
    var SEP = "/";
    var POSIX_CHARS = {
      DOT_LITERAL,
      PLUS_LITERAL,
      QMARK_LITERAL,
      SLASH_LITERAL,
      ONE_CHAR,
      QMARK,
      END_ANCHOR,
      DOTS_SLASH,
      NO_DOT,
      NO_DOTS,
      NO_DOT_SLASH,
      NO_DOTS_SLASH,
      QMARK_NO_DOT,
      STAR: STAR2,
      START_ANCHOR,
      SEP
    };
    var WINDOWS_CHARS = {
      ...POSIX_CHARS,
      SLASH_LITERAL: `[${WIN_SLASH}]`,
      QMARK: WIN_NO_SLASH,
      STAR: `${WIN_NO_SLASH}*?`,
      DOTS_SLASH: `${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,
      NO_DOT: `(?!${DOT_LITERAL})`,
      NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
      NO_DOT_SLASH: `(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,
      NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
      QMARK_NO_DOT: `[^.${WIN_SLASH}]`,
      START_ANCHOR: `(?:^|[${WIN_SLASH}])`,
      END_ANCHOR: `(?:[${WIN_SLASH}]|$)`,
      SEP: "\\"
    };
    var POSIX_REGEX_SOURCE = {
      alnum: "a-zA-Z0-9",
      alpha: "a-zA-Z",
      ascii: "\\x00-\\x7F",
      blank: " \\t",
      cntrl: "\\x00-\\x1F\\x7F",
      digit: "0-9",
      graph: "\\x21-\\x7E",
      lower: "a-z",
      print: "\\x20-\\x7E ",
      punct: "\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",
      space: " \\t\\r\\n\\v\\f",
      upper: "A-Z",
      word: "A-Za-z0-9_",
      xdigit: "A-Fa-f0-9"
    };
    module.exports = {
      MAX_LENGTH: 1024 * 64,
      POSIX_REGEX_SOURCE,
      // regular expressions
      REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g,
      REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/,
      REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/,
      REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g,
      REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g,
      REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g,
      // Replace globs with equivalent patterns to reduce parsing time.
      REPLACEMENTS: {
        "***": "*",
        "**/**": "**",
        "**/**/**": "**"
      },
      // Digits
      CHAR_0: 48,
      /* 0 */
      CHAR_9: 57,
      /* 9 */
      // Alphabet chars.
      CHAR_UPPERCASE_A: 65,
      /* A */
      CHAR_LOWERCASE_A: 97,
      /* a */
      CHAR_UPPERCASE_Z: 90,
      /* Z */
      CHAR_LOWERCASE_Z: 122,
      /* z */
      CHAR_LEFT_PARENTHESES: 40,
      /* ( */
      CHAR_RIGHT_PARENTHESES: 41,
      /* ) */
      CHAR_ASTERISK: 42,
      /* * */
      // Non-alphabetic chars.
      CHAR_AMPERSAND: 38,
      /* & */
      CHAR_AT: 64,
      /* @ */
      CHAR_BACKWARD_SLASH: 92,
      /* \ */
      CHAR_CARRIAGE_RETURN: 13,
      /* \r */
      CHAR_CIRCUMFLEX_ACCENT: 94,
      /* ^ */
      CHAR_COLON: 58,
      /* : */
      CHAR_COMMA: 44,
      /* , */
      CHAR_DOT: 46,
      /* . */
      CHAR_DOUBLE_QUOTE: 34,
      /* " */
      CHAR_EQUAL: 61,
      /* = */
      CHAR_EXCLAMATION_MARK: 33,
      /* ! */
      CHAR_FORM_FEED: 12,
      /* \f */
      CHAR_FORWARD_SLASH: 47,
      /* / */
      CHAR_GRAVE_ACCENT: 96,
      /* ` */
      CHAR_HASH: 35,
      /* # */
      CHAR_HYPHEN_MINUS: 45,
      /* - */
      CHAR_LEFT_ANGLE_BRACKET: 60,
      /* < */
      CHAR_LEFT_CURLY_BRACE: 123,
      /* { */
      CHAR_LEFT_SQUARE_BRACKET: 91,
      /* [ */
      CHAR_LINE_FEED: 10,
      /* \n */
      CHAR_NO_BREAK_SPACE: 160,
      /* \u00A0 */
      CHAR_PERCENT: 37,
      /* % */
      CHAR_PLUS: 43,
      /* + */
      CHAR_QUESTION_MARK: 63,
      /* ? */
      CHAR_RIGHT_ANGLE_BRACKET: 62,
      /* > */
      CHAR_RIGHT_CURLY_BRACE: 125,
      /* } */
      CHAR_RIGHT_SQUARE_BRACKET: 93,
      /* ] */
      CHAR_SEMICOLON: 59,
      /* ; */
      CHAR_SINGLE_QUOTE: 39,
      /* ' */
      CHAR_SPACE: 32,
      /*   */
      CHAR_TAB: 9,
      /* \t */
      CHAR_UNDERSCORE: 95,
      /* _ */
      CHAR_VERTICAL_LINE: 124,
      /* | */
      CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279,
      /* \uFEFF */
      /**
       * Create EXTGLOB_CHARS
       */
      extglobChars(chars3) {
        return {
          "!": { type: "negate", open: "(?:(?!(?:", close: `))${chars3.STAR})` },
          "?": { type: "qmark", open: "(?:", close: ")?" },
          "+": { type: "plus", open: "(?:", close: ")+" },
          "*": { type: "star", open: "(?:", close: ")*" },
          "@": { type: "at", open: "(?:", close: ")" }
        };
      },
      /**
       * Create GLOB_CHARS
       */
      globChars(win322) {
        return win322 === true ? WINDOWS_CHARS : POSIX_CHARS;
      }
    };
  }
});

// node_modules/tinyglobby/node_modules/picomatch/lib/utils.js
var require_utils4 = __commonJS({
  "node_modules/tinyglobby/node_modules/picomatch/lib/utils.js"(exports) {
    "use strict";
    var {
      REGEX_BACKSLASH,
      REGEX_REMOVE_BACKSLASH,
      REGEX_SPECIAL_CHARS,
      REGEX_SPECIAL_CHARS_GLOBAL
    } = require_constants2();
    exports.isObject = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
    exports.hasRegexChars = (str) => REGEX_SPECIAL_CHARS.test(str);
    exports.isRegexChar = (str) => str.length === 1 && exports.hasRegexChars(str);
    exports.escapeRegex = (str) => str.replace(REGEX_SPECIAL_CHARS_GLOBAL, "\\$1");
    exports.toPosixSlashes = (str) => str.replace(REGEX_BACKSLASH, "/");
    exports.isWindows = () => {
      if (typeof navigator !== "undefined" && navigator.platform) {
        const platform2 = navigator.platform.toLowerCase();
        return platform2 === "win32" || platform2 === "windows";
      }
      if (typeof process !== "undefined" && process.platform) {
        return process.platform === "win32";
      }
      return false;
    };
    exports.removeBackslashes = (str) => {
      return str.replace(REGEX_REMOVE_BACKSLASH, (match) => {
        return match === "\\" ? "" : match;
      });
    };
    exports.escapeLast = (input, char, lastIdx) => {
      const idx = input.lastIndexOf(char, lastIdx);
      if (idx === -1) return input;
      if (input[idx - 1] === "\\") return exports.escapeLast(input, char, idx - 1);
      return `${input.slice(0, idx)}\\${input.slice(idx)}`;
    };
    exports.removePrefix = (input, state = {}) => {
      let output = input;
      if (output.startsWith("./")) {
        output = output.slice(2);
        state.prefix = "./";
      }
      return output;
    };
    exports.wrapOutput = (input, state = {}, options2 = {}) => {
      const prepend = options2.contains ? "" : "^";
      const append2 = options2.contains ? "" : "$";
      let output = `${prepend}(?:${input})${append2}`;
      if (state.negated === true) {
        output = `(?:^(?!${output}).*$)`;
      }
      return output;
    };
    exports.basename = (path4, { windows: windows2 } = {}) => {
      const segs = path4.split(windows2 ? /[\\/]/ : "/");
      const last = segs[segs.length - 1];
      if (last === "") {
        return segs[segs.length - 2];
      }
      return last;
    };
  }
});

// node_modules/tinyglobby/node_modules/picomatch/lib/scan.js
var require_scan2 = __commonJS({
  "node_modules/tinyglobby/node_modules/picomatch/lib/scan.js"(exports, module) {
    "use strict";
    var utils2 = require_utils4();
    var {
      CHAR_ASTERISK,
      /* * */
      CHAR_AT,
      /* @ */
      CHAR_BACKWARD_SLASH: CHAR_BACKWARD_SLASH2,
      /* \ */
      CHAR_COMMA: CHAR_COMMA2,
      /* , */
      CHAR_DOT: CHAR_DOT2,
      /* . */
      CHAR_EXCLAMATION_MARK,
      /* ! */
      CHAR_FORWARD_SLASH: CHAR_FORWARD_SLASH2,
      /* / */
      CHAR_LEFT_CURLY_BRACE: CHAR_LEFT_CURLY_BRACE2,
      /* { */
      CHAR_LEFT_PARENTHESES: CHAR_LEFT_PARENTHESES2,
      /* ( */
      CHAR_LEFT_SQUARE_BRACKET: CHAR_LEFT_SQUARE_BRACKET2,
      /* [ */
      CHAR_PLUS,
      /* + */
      CHAR_QUESTION_MARK,
      /* ? */
      CHAR_RIGHT_CURLY_BRACE: CHAR_RIGHT_CURLY_BRACE2,
      /* } */
      CHAR_RIGHT_PARENTHESES: CHAR_RIGHT_PARENTHESES2,
      /* ) */
      CHAR_RIGHT_SQUARE_BRACKET: CHAR_RIGHT_SQUARE_BRACKET2
      /* ] */
    } = require_constants2();
    var isPathSeparator = (code) => {
      return code === CHAR_FORWARD_SLASH2 || code === CHAR_BACKWARD_SLASH2;
    };
    var depth = (token) => {
      if (token.isPrefix !== true) {
        token.depth = token.isGlobstar ? Infinity : 1;
      }
    };
    var scan = (input, options2) => {
      const opts = options2 || {};
      const length = input.length - 1;
      const scanToEnd = opts.parts === true || opts.scanToEnd === true;
      const slashes = [];
      const tokens = [];
      const parts = [];
      let str = input;
      let index = -1;
      let start = 0;
      let lastIndex = 0;
      let isBrace = false;
      let isBracket = false;
      let isGlob3 = false;
      let isExtglob3 = false;
      let isGlobstar = false;
      let braceEscaped = false;
      let backslashes = false;
      let negated = false;
      let negatedExtglob = false;
      let finished = false;
      let braces2 = 0;
      let prev;
      let code;
      let token = { value: "", depth: 0, isGlob: false };
      const eos = () => index >= length;
      const peek = () => str.charCodeAt(index + 1);
      const advance = () => {
        prev = code;
        return str.charCodeAt(++index);
      };
      while (index < length) {
        code = advance();
        let next;
        if (code === CHAR_BACKWARD_SLASH2) {
          backslashes = token.backslashes = true;
          code = advance();
          if (code === CHAR_LEFT_CURLY_BRACE2) {
            braceEscaped = true;
          }
          continue;
        }
        if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE2) {
          braces2++;
          while (eos() !== true && (code = advance())) {
            if (code === CHAR_BACKWARD_SLASH2) {
              backslashes = token.backslashes = true;
              advance();
              continue;
            }
            if (code === CHAR_LEFT_CURLY_BRACE2) {
              braces2++;
              continue;
            }
            if (braceEscaped !== true && code === CHAR_DOT2 && (code = advance()) === CHAR_DOT2) {
              isBrace = token.isBrace = true;
              isGlob3 = token.isGlob = true;
              finished = true;
              if (scanToEnd === true) {
                continue;
              }
              break;
            }
            if (braceEscaped !== true && code === CHAR_COMMA2) {
              isBrace = token.isBrace = true;
              isGlob3 = token.isGlob = true;
              finished = true;
              if (scanToEnd === true) {
                continue;
              }
              break;
            }
            if (code === CHAR_RIGHT_CURLY_BRACE2) {
              braces2--;
              if (braces2 === 0) {
                braceEscaped = false;
                isBrace = token.isBrace = true;
                finished = true;
                break;
              }
            }
          }
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (code === CHAR_FORWARD_SLASH2) {
          slashes.push(index);
          tokens.push(token);
          token = { value: "", depth: 0, isGlob: false };
          if (finished === true) continue;
          if (prev === CHAR_DOT2 && index === start + 1) {
            start += 2;
            continue;
          }
          lastIndex = index + 1;
          continue;
        }
        if (opts.noext !== true) {
          const isExtglobChar = code === CHAR_PLUS || code === CHAR_AT || code === CHAR_ASTERISK || code === CHAR_QUESTION_MARK || code === CHAR_EXCLAMATION_MARK;
          if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES2) {
            isGlob3 = token.isGlob = true;
            isExtglob3 = token.isExtglob = true;
            finished = true;
            if (code === CHAR_EXCLAMATION_MARK && index === start) {
              negatedExtglob = true;
            }
            if (scanToEnd === true) {
              while (eos() !== true && (code = advance())) {
                if (code === CHAR_BACKWARD_SLASH2) {
                  backslashes = token.backslashes = true;
                  code = advance();
                  continue;
                }
                if (code === CHAR_RIGHT_PARENTHESES2) {
                  isGlob3 = token.isGlob = true;
                  finished = true;
                  break;
                }
              }
              continue;
            }
            break;
          }
        }
        if (code === CHAR_ASTERISK) {
          if (prev === CHAR_ASTERISK) isGlobstar = token.isGlobstar = true;
          isGlob3 = token.isGlob = true;
          finished = true;
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (code === CHAR_QUESTION_MARK) {
          isGlob3 = token.isGlob = true;
          finished = true;
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (code === CHAR_LEFT_SQUARE_BRACKET2) {
          while (eos() !== true && (next = advance())) {
            if (next === CHAR_BACKWARD_SLASH2) {
              backslashes = token.backslashes = true;
              advance();
              continue;
            }
            if (next === CHAR_RIGHT_SQUARE_BRACKET2) {
              isBracket = token.isBracket = true;
              isGlob3 = token.isGlob = true;
              finished = true;
              break;
            }
          }
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index === start) {
          negated = token.negated = true;
          start++;
          continue;
        }
        if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES2) {
          isGlob3 = token.isGlob = true;
          if (scanToEnd === true) {
            while (eos() !== true && (code = advance())) {
              if (code === CHAR_LEFT_PARENTHESES2) {
                backslashes = token.backslashes = true;
                code = advance();
                continue;
              }
              if (code === CHAR_RIGHT_PARENTHESES2) {
                finished = true;
                break;
              }
            }
            continue;
          }
          break;
        }
        if (isGlob3 === true) {
          finished = true;
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
      }
      if (opts.noext === true) {
        isExtglob3 = false;
        isGlob3 = false;
      }
      let base = str;
      let prefix = "";
      let glob2 = "";
      if (start > 0) {
        prefix = str.slice(0, start);
        str = str.slice(start);
        lastIndex -= start;
      }
      if (base && isGlob3 === true && lastIndex > 0) {
        base = str.slice(0, lastIndex);
        glob2 = str.slice(lastIndex);
      } else if (isGlob3 === true) {
        base = "";
        glob2 = str;
      } else {
        base = str;
      }
      if (base && base !== "" && base !== "/" && base !== str) {
        if (isPathSeparator(base.charCodeAt(base.length - 1))) {
          base = base.slice(0, -1);
        }
      }
      if (opts.unescape === true) {
        if (glob2) glob2 = utils2.removeBackslashes(glob2);
        if (base && backslashes === true) {
          base = utils2.removeBackslashes(base);
        }
      }
      const state = {
        prefix,
        input,
        start,
        base,
        glob: glob2,
        isBrace,
        isBracket,
        isGlob: isGlob3,
        isExtglob: isExtglob3,
        isGlobstar,
        negated,
        negatedExtglob
      };
      if (opts.tokens === true) {
        state.maxDepth = 0;
        if (!isPathSeparator(code)) {
          tokens.push(token);
        }
        state.tokens = tokens;
      }
      if (opts.parts === true || opts.tokens === true) {
        let prevIndex;
        for (let idx = 0; idx < slashes.length; idx++) {
          const n2 = prevIndex ? prevIndex + 1 : start;
          const i = slashes[idx];
          const value2 = input.slice(n2, i);
          if (opts.tokens) {
            if (idx === 0 && start !== 0) {
              tokens[idx].isPrefix = true;
              tokens[idx].value = prefix;
            } else {
              tokens[idx].value = value2;
            }
            depth(tokens[idx]);
            state.maxDepth += tokens[idx].depth;
          }
          if (idx !== 0 || value2 !== "") {
            parts.push(value2);
          }
          prevIndex = i;
        }
        if (prevIndex && prevIndex + 1 < input.length) {
          const value2 = input.slice(prevIndex + 1);
          parts.push(value2);
          if (opts.tokens) {
            tokens[tokens.length - 1].value = value2;
            depth(tokens[tokens.length - 1]);
            state.maxDepth += tokens[tokens.length - 1].depth;
          }
        }
        state.slashes = slashes;
        state.parts = parts;
      }
      return state;
    };
    module.exports = scan;
  }
});

// node_modules/tinyglobby/node_modules/picomatch/lib/parse.js
var require_parse2 = __commonJS({
  "node_modules/tinyglobby/node_modules/picomatch/lib/parse.js"(exports, module) {
    "use strict";
    var constants2 = require_constants2();
    var utils2 = require_utils4();
    var {
      MAX_LENGTH: MAX_LENGTH2,
      POSIX_REGEX_SOURCE,
      REGEX_NON_SPECIAL_CHARS,
      REGEX_SPECIAL_CHARS_BACKREF,
      REPLACEMENTS
    } = constants2;
    var expandRange = (args, options2) => {
      if (typeof options2.expandRange === "function") {
        return options2.expandRange(...args, options2);
      }
      args.sort();
      const value2 = `[${args.join("-")}]`;
      try {
        new RegExp(value2);
      } catch (ex) {
        return args.map((v) => utils2.escapeRegex(v)).join("..");
      }
      return value2;
    };
    var syntaxError = (type, char) => {
      return `Missing ${type}: "${char}" - use "\\\\${char}" to match literal characters`;
    };
    var parse4 = (input, options2) => {
      if (typeof input !== "string") {
        throw new TypeError("Expected a string");
      }
      input = REPLACEMENTS[input] || input;
      const opts = { ...options2 };
      const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH2, opts.maxLength) : MAX_LENGTH2;
      let len = input.length;
      if (len > max) {
        throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
      }
      const bos = { type: "bos", value: "", output: opts.prepend || "" };
      const tokens = [bos];
      const capture = opts.capture ? "" : "?:";
      const PLATFORM_CHARS = constants2.globChars(opts.windows);
      const EXTGLOB_CHARS = constants2.extglobChars(PLATFORM_CHARS);
      const {
        DOT_LITERAL,
        PLUS_LITERAL,
        SLASH_LITERAL,
        ONE_CHAR,
        DOTS_SLASH,
        NO_DOT,
        NO_DOT_SLASH,
        NO_DOTS_SLASH,
        QMARK,
        QMARK_NO_DOT,
        STAR: STAR2,
        START_ANCHOR
      } = PLATFORM_CHARS;
      const globstar = (opts2) => {
        return `(${capture}(?:(?!${START_ANCHOR}${opts2.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
      };
      const nodot = opts.dot ? "" : NO_DOT;
      const qmarkNoDot = opts.dot ? QMARK : QMARK_NO_DOT;
      let star = opts.bash === true ? globstar(opts) : STAR2;
      if (opts.capture) {
        star = `(${star})`;
      }
      if (typeof opts.noext === "boolean") {
        opts.noextglob = opts.noext;
      }
      const state = {
        input,
        index: -1,
        start: 0,
        dot: opts.dot === true,
        consumed: "",
        output: "",
        prefix: "",
        backtrack: false,
        negated: false,
        brackets: 0,
        braces: 0,
        parens: 0,
        quotes: 0,
        globstar: false,
        tokens
      };
      input = utils2.removePrefix(input, state);
      len = input.length;
      const extglobs = [];
      const braces2 = [];
      const stack = [];
      let prev = bos;
      let value2;
      const eos = () => state.index === len - 1;
      const peek = state.peek = (n2 = 1) => input[state.index + n2];
      const advance = state.advance = () => input[++state.index] || "";
      const remaining = () => input.slice(state.index + 1);
      const consume = (value3 = "", num = 0) => {
        state.consumed += value3;
        state.index += num;
      };
      const append2 = (token) => {
        state.output += token.output != null ? token.output : token.value;
        consume(token.value);
      };
      const negate = () => {
        let count = 1;
        while (peek() === "!" && (peek(2) !== "(" || peek(3) === "?")) {
          advance();
          state.start++;
          count++;
        }
        if (count % 2 === 0) {
          return false;
        }
        state.negated = true;
        state.start++;
        return true;
      };
      const increment = (type) => {
        state[type]++;
        stack.push(type);
      };
      const decrement = (type) => {
        state[type]--;
        stack.pop();
      };
      const push2 = (tok) => {
        if (prev.type === "globstar") {
          const isBrace = state.braces > 0 && (tok.type === "comma" || tok.type === "brace");
          const isExtglob3 = tok.extglob === true || extglobs.length && (tok.type === "pipe" || tok.type === "paren");
          if (tok.type !== "slash" && tok.type !== "paren" && !isBrace && !isExtglob3) {
            state.output = state.output.slice(0, -prev.output.length);
            prev.type = "star";
            prev.value = "*";
            prev.output = star;
            state.output += prev.output;
          }
        }
        if (extglobs.length && tok.type !== "paren") {
          extglobs[extglobs.length - 1].inner += tok.value;
        }
        if (tok.value || tok.output) append2(tok);
        if (prev && prev.type === "text" && tok.type === "text") {
          prev.output = (prev.output || prev.value) + tok.value;
          prev.value += tok.value;
          return;
        }
        tok.prev = prev;
        tokens.push(tok);
        prev = tok;
      };
      const extglobOpen = (type, value3) => {
        const token = { ...EXTGLOB_CHARS[value3], conditions: 1, inner: "" };
        token.prev = prev;
        token.parens = state.parens;
        token.output = state.output;
        const output = (opts.capture ? "(" : "") + token.open;
        increment("parens");
        push2({ type, value: value3, output: state.output ? "" : ONE_CHAR });
        push2({ type: "paren", extglob: true, value: advance(), output });
        extglobs.push(token);
      };
      const extglobClose = (token) => {
        let output = token.close + (opts.capture ? ")" : "");
        let rest;
        if (token.type === "negate") {
          let extglobStar = star;
          if (token.inner && token.inner.length > 1 && token.inner.includes("/")) {
            extglobStar = globstar(opts);
          }
          if (extglobStar !== star || eos() || /^\)+$/.test(remaining())) {
            output = token.close = `)$))${extglobStar}`;
          }
          if (token.inner.includes("*") && (rest = remaining()) && /^\.[^\\/.]+$/.test(rest)) {
            const expression = parse4(rest, { ...options2, fastpaths: false }).output;
            output = token.close = `)${expression})${extglobStar})`;
          }
          if (token.prev.type === "bos") {
            state.negatedExtglob = true;
          }
        }
        push2({ type: "paren", extglob: true, value: value2, output });
        decrement("parens");
      };
      if (opts.fastpaths !== false && !/(^[*!]|[/()[\]{}"])/.test(input)) {
        let backslashes = false;
        let output = input.replace(REGEX_SPECIAL_CHARS_BACKREF, (m2, esc, chars3, first2, rest, index) => {
          if (first2 === "\\") {
            backslashes = true;
            return m2;
          }
          if (first2 === "?") {
            if (esc) {
              return esc + first2 + (rest ? QMARK.repeat(rest.length) : "");
            }
            if (index === 0) {
              return qmarkNoDot + (rest ? QMARK.repeat(rest.length) : "");
            }
            return QMARK.repeat(chars3.length);
          }
          if (first2 === ".") {
            return DOT_LITERAL.repeat(chars3.length);
          }
          if (first2 === "*") {
            if (esc) {
              return esc + first2 + (rest ? star : "");
            }
            return star;
          }
          return esc ? m2 : `\\${m2}`;
        });
        if (backslashes === true) {
          if (opts.unescape === true) {
            output = output.replace(/\\/g, "");
          } else {
            output = output.replace(/\\+/g, (m2) => {
              return m2.length % 2 === 0 ? "\\\\" : m2 ? "\\" : "";
            });
          }
        }
        if (output === input && opts.contains === true) {
          state.output = input;
          return state;
        }
        state.output = utils2.wrapOutput(output, state, options2);
        return state;
      }
      while (!eos()) {
        value2 = advance();
        if (value2 === "\0") {
          continue;
        }
        if (value2 === "\\") {
          const next = peek();
          if (next === "/" && opts.bash !== true) {
            continue;
          }
          if (next === "." || next === ";") {
            continue;
          }
          if (!next) {
            value2 += "\\";
            push2({ type: "text", value: value2 });
            continue;
          }
          const match = /^\\+/.exec(remaining());
          let slashes = 0;
          if (match && match[0].length > 2) {
            slashes = match[0].length;
            state.index += slashes;
            if (slashes % 2 !== 0) {
              value2 += "\\";
            }
          }
          if (opts.unescape === true) {
            value2 = advance();
          } else {
            value2 += advance();
          }
          if (state.brackets === 0) {
            push2({ type: "text", value: value2 });
            continue;
          }
        }
        if (state.brackets > 0 && (value2 !== "]" || prev.value === "[" || prev.value === "[^")) {
          if (opts.posix !== false && value2 === ":") {
            const inner = prev.value.slice(1);
            if (inner.includes("[")) {
              prev.posix = true;
              if (inner.includes(":")) {
                const idx = prev.value.lastIndexOf("[");
                const pre = prev.value.slice(0, idx);
                const rest2 = prev.value.slice(idx + 2);
                const posix3 = POSIX_REGEX_SOURCE[rest2];
                if (posix3) {
                  prev.value = pre + posix3;
                  state.backtrack = true;
                  advance();
                  if (!bos.output && tokens.indexOf(prev) === 1) {
                    bos.output = ONE_CHAR;
                  }
                  continue;
                }
              }
            }
          }
          if (value2 === "[" && peek() !== ":" || value2 === "-" && peek() === "]") {
            value2 = `\\${value2}`;
          }
          if (value2 === "]" && (prev.value === "[" || prev.value === "[^")) {
            value2 = `\\${value2}`;
          }
          if (opts.posix === true && value2 === "!" && prev.value === "[") {
            value2 = "^";
          }
          prev.value += value2;
          append2({ value: value2 });
          continue;
        }
        if (state.quotes === 1 && value2 !== '"') {
          value2 = utils2.escapeRegex(value2);
          prev.value += value2;
          append2({ value: value2 });
          continue;
        }
        if (value2 === '"') {
          state.quotes = state.quotes === 1 ? 0 : 1;
          if (opts.keepQuotes === true) {
            push2({ type: "text", value: value2 });
          }
          continue;
        }
        if (value2 === "(") {
          increment("parens");
          push2({ type: "paren", value: value2 });
          continue;
        }
        if (value2 === ")") {
          if (state.parens === 0 && opts.strictBrackets === true) {
            throw new SyntaxError(syntaxError("opening", "("));
          }
          const extglob = extglobs[extglobs.length - 1];
          if (extglob && state.parens === extglob.parens + 1) {
            extglobClose(extglobs.pop());
            continue;
          }
          push2({ type: "paren", value: value2, output: state.parens ? ")" : "\\)" });
          decrement("parens");
          continue;
        }
        if (value2 === "[") {
          if (opts.nobracket === true || !remaining().includes("]")) {
            if (opts.nobracket !== true && opts.strictBrackets === true) {
              throw new SyntaxError(syntaxError("closing", "]"));
            }
            value2 = `\\${value2}`;
          } else {
            increment("brackets");
          }
          push2({ type: "bracket", value: value2 });
          continue;
        }
        if (value2 === "]") {
          if (opts.nobracket === true || prev && prev.type === "bracket" && prev.value.length === 1) {
            push2({ type: "text", value: value2, output: `\\${value2}` });
            continue;
          }
          if (state.brackets === 0) {
            if (opts.strictBrackets === true) {
              throw new SyntaxError(syntaxError("opening", "["));
            }
            push2({ type: "text", value: value2, output: `\\${value2}` });
            continue;
          }
          decrement("brackets");
          const prevValue = prev.value.slice(1);
          if (prev.posix !== true && prevValue[0] === "^" && !prevValue.includes("/")) {
            value2 = `/${value2}`;
          }
          prev.value += value2;
          append2({ value: value2 });
          if (opts.literalBrackets === false || utils2.hasRegexChars(prevValue)) {
            continue;
          }
          const escaped2 = utils2.escapeRegex(prev.value);
          state.output = state.output.slice(0, -prev.value.length);
          if (opts.literalBrackets === true) {
            state.output += escaped2;
            prev.value = escaped2;
            continue;
          }
          prev.value = `(${capture}${escaped2}|${prev.value})`;
          state.output += prev.value;
          continue;
        }
        if (value2 === "{" && opts.nobrace !== true) {
          increment("braces");
          const open2 = {
            type: "brace",
            value: value2,
            output: "(",
            outputIndex: state.output.length,
            tokensIndex: state.tokens.length
          };
          braces2.push(open2);
          push2(open2);
          continue;
        }
        if (value2 === "}") {
          const brace = braces2[braces2.length - 1];
          if (opts.nobrace === true || !brace) {
            push2({ type: "text", value: value2, output: value2 });
            continue;
          }
          let output = ")";
          if (brace.dots === true) {
            const arr = tokens.slice();
            const range2 = [];
            for (let i = arr.length - 1; i >= 0; i--) {
              tokens.pop();
              if (arr[i].type === "brace") {
                break;
              }
              if (arr[i].type !== "dots") {
                range2.unshift(arr[i].value);
              }
            }
            output = expandRange(range2, opts);
            state.backtrack = true;
          }
          if (brace.comma !== true && brace.dots !== true) {
            const out = state.output.slice(0, brace.outputIndex);
            const toks = state.tokens.slice(brace.tokensIndex);
            brace.value = brace.output = "\\{";
            value2 = output = "\\}";
            state.output = out;
            for (const t2 of toks) {
              state.output += t2.output || t2.value;
            }
          }
          push2({ type: "brace", value: value2, output });
          decrement("braces");
          braces2.pop();
          continue;
        }
        if (value2 === "|") {
          if (extglobs.length > 0) {
            extglobs[extglobs.length - 1].conditions++;
          }
          push2({ type: "text", value: value2 });
          continue;
        }
        if (value2 === ",") {
          let output = value2;
          const brace = braces2[braces2.length - 1];
          if (brace && stack[stack.length - 1] === "braces") {
            brace.comma = true;
            output = "|";
          }
          push2({ type: "comma", value: value2, output });
          continue;
        }
        if (value2 === "/") {
          if (prev.type === "dot" && state.index === state.start + 1) {
            state.start = state.index + 1;
            state.consumed = "";
            state.output = "";
            tokens.pop();
            prev = bos;
            continue;
          }
          push2({ type: "slash", value: value2, output: SLASH_LITERAL });
          continue;
        }
        if (value2 === ".") {
          if (state.braces > 0 && prev.type === "dot") {
            if (prev.value === ".") prev.output = DOT_LITERAL;
            const brace = braces2[braces2.length - 1];
            prev.type = "dots";
            prev.output += value2;
            prev.value += value2;
            brace.dots = true;
            continue;
          }
          if (state.braces + state.parens === 0 && prev.type !== "bos" && prev.type !== "slash") {
            push2({ type: "text", value: value2, output: DOT_LITERAL });
            continue;
          }
          push2({ type: "dot", value: value2, output: DOT_LITERAL });
          continue;
        }
        if (value2 === "?") {
          const isGroup = prev && prev.value === "(";
          if (!isGroup && opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
            extglobOpen("qmark", value2);
            continue;
          }
          if (prev && prev.type === "paren") {
            const next = peek();
            let output = value2;
            if (prev.value === "(" && !/[!=<:]/.test(next) || next === "<" && !/<([!=]|\w+>)/.test(remaining())) {
              output = `\\${value2}`;
            }
            push2({ type: "text", value: value2, output });
            continue;
          }
          if (opts.dot !== true && (prev.type === "slash" || prev.type === "bos")) {
            push2({ type: "qmark", value: value2, output: QMARK_NO_DOT });
            continue;
          }
          push2({ type: "qmark", value: value2, output: QMARK });
          continue;
        }
        if (value2 === "!") {
          if (opts.noextglob !== true && peek() === "(") {
            if (peek(2) !== "?" || !/[!=<:]/.test(peek(3))) {
              extglobOpen("negate", value2);
              continue;
            }
          }
          if (opts.nonegate !== true && state.index === 0) {
            negate();
            continue;
          }
        }
        if (value2 === "+") {
          if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
            extglobOpen("plus", value2);
            continue;
          }
          if (prev && prev.value === "(" || opts.regex === false) {
            push2({ type: "plus", value: value2, output: PLUS_LITERAL });
            continue;
          }
          if (prev && (prev.type === "bracket" || prev.type === "paren" || prev.type === "brace") || state.parens > 0) {
            push2({ type: "plus", value: value2 });
            continue;
          }
          push2({ type: "plus", value: PLUS_LITERAL });
          continue;
        }
        if (value2 === "@") {
          if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
            push2({ type: "at", extglob: true, value: value2, output: "" });
            continue;
          }
          push2({ type: "text", value: value2 });
          continue;
        }
        if (value2 !== "*") {
          if (value2 === "$" || value2 === "^") {
            value2 = `\\${value2}`;
          }
          const match = REGEX_NON_SPECIAL_CHARS.exec(remaining());
          if (match) {
            value2 += match[0];
            state.index += match[0].length;
          }
          push2({ type: "text", value: value2 });
          continue;
        }
        if (prev && (prev.type === "globstar" || prev.star === true)) {
          prev.type = "star";
          prev.star = true;
          prev.value += value2;
          prev.output = star;
          state.backtrack = true;
          state.globstar = true;
          consume(value2);
          continue;
        }
        let rest = remaining();
        if (opts.noextglob !== true && /^\([^?]/.test(rest)) {
          extglobOpen("star", value2);
          continue;
        }
        if (prev.type === "star") {
          if (opts.noglobstar === true) {
            consume(value2);
            continue;
          }
          const prior = prev.prev;
          const before = prior.prev;
          const isStart = prior.type === "slash" || prior.type === "bos";
          const afterStar = before && (before.type === "star" || before.type === "globstar");
          if (opts.bash === true && (!isStart || rest[0] && rest[0] !== "/")) {
            push2({ type: "star", value: value2, output: "" });
            continue;
          }
          const isBrace = state.braces > 0 && (prior.type === "comma" || prior.type === "brace");
          const isExtglob3 = extglobs.length && (prior.type === "pipe" || prior.type === "paren");
          if (!isStart && prior.type !== "paren" && !isBrace && !isExtglob3) {
            push2({ type: "star", value: value2, output: "" });
            continue;
          }
          while (rest.slice(0, 3) === "/**") {
            const after = input[state.index + 4];
            if (after && after !== "/") {
              break;
            }
            rest = rest.slice(3);
            consume("/**", 3);
          }
          if (prior.type === "bos" && eos()) {
            prev.type = "globstar";
            prev.value += value2;
            prev.output = globstar(opts);
            state.output = prev.output;
            state.globstar = true;
            consume(value2);
            continue;
          }
          if (prior.type === "slash" && prior.prev.type !== "bos" && !afterStar && eos()) {
            state.output = state.output.slice(0, -(prior.output + prev.output).length);
            prior.output = `(?:${prior.output}`;
            prev.type = "globstar";
            prev.output = globstar(opts) + (opts.strictSlashes ? ")" : "|$)");
            prev.value += value2;
            state.globstar = true;
            state.output += prior.output + prev.output;
            consume(value2);
            continue;
          }
          if (prior.type === "slash" && prior.prev.type !== "bos" && rest[0] === "/") {
            const end = rest[1] !== void 0 ? "|$" : "";
            state.output = state.output.slice(0, -(prior.output + prev.output).length);
            prior.output = `(?:${prior.output}`;
            prev.type = "globstar";
            prev.output = `${globstar(opts)}${SLASH_LITERAL}|${SLASH_LITERAL}${end})`;
            prev.value += value2;
            state.output += prior.output + prev.output;
            state.globstar = true;
            consume(value2 + advance());
            push2({ type: "slash", value: "/", output: "" });
            continue;
          }
          if (prior.type === "bos" && rest[0] === "/") {
            prev.type = "globstar";
            prev.value += value2;
            prev.output = `(?:^|${SLASH_LITERAL}|${globstar(opts)}${SLASH_LITERAL})`;
            state.output = prev.output;
            state.globstar = true;
            consume(value2 + advance());
            push2({ type: "slash", value: "/", output: "" });
            continue;
          }
          state.output = state.output.slice(0, -prev.output.length);
          prev.type = "globstar";
          prev.output = globstar(opts);
          prev.value += value2;
          state.output += prev.output;
          state.globstar = true;
          consume(value2);
          continue;
        }
        const token = { type: "star", value: value2, output: star };
        if (opts.bash === true) {
          token.output = ".*?";
          if (prev.type === "bos" || prev.type === "slash") {
            token.output = nodot + token.output;
          }
          push2(token);
          continue;
        }
        if (prev && (prev.type === "bracket" || prev.type === "paren") && opts.regex === true) {
          token.output = value2;
          push2(token);
          continue;
        }
        if (state.index === state.start || prev.type === "slash" || prev.type === "dot") {
          if (prev.type === "dot") {
            state.output += NO_DOT_SLASH;
            prev.output += NO_DOT_SLASH;
          } else if (opts.dot === true) {
            state.output += NO_DOTS_SLASH;
            prev.output += NO_DOTS_SLASH;
          } else {
            state.output += nodot;
            prev.output += nodot;
          }
          if (peek() !== "*") {
            state.output += ONE_CHAR;
            prev.output += ONE_CHAR;
          }
        }
        push2(token);
      }
      while (state.brackets > 0) {
        if (opts.strictBrackets === true) throw new SyntaxError(syntaxError("closing", "]"));
        state.output = utils2.escapeLast(state.output, "[");
        decrement("brackets");
      }
      while (state.parens > 0) {
        if (opts.strictBrackets === true) throw new SyntaxError(syntaxError("closing", ")"));
        state.output = utils2.escapeLast(state.output, "(");
        decrement("parens");
      }
      while (state.braces > 0) {
        if (opts.strictBrackets === true) throw new SyntaxError(syntaxError("closing", "}"));
        state.output = utils2.escapeLast(state.output, "{");
        decrement("braces");
      }
      if (opts.strictSlashes !== true && (prev.type === "star" || prev.type === "bracket")) {
        push2({ type: "maybe_slash", value: "", output: `${SLASH_LITERAL}?` });
      }
      if (state.backtrack === true) {
        state.output = "";
        for (const token of state.tokens) {
          state.output += token.output != null ? token.output : token.value;
          if (token.suffix) {
            state.output += token.suffix;
          }
        }
      }
      return state;
    };
    parse4.fastpaths = (input, options2) => {
      const opts = { ...options2 };
      const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH2, opts.maxLength) : MAX_LENGTH2;
      const len = input.length;
      if (len > max) {
        throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
      }
      input = REPLACEMENTS[input] || input;
      const {
        DOT_LITERAL,
        SLASH_LITERAL,
        ONE_CHAR,
        DOTS_SLASH,
        NO_DOT,
        NO_DOTS,
        NO_DOTS_SLASH,
        STAR: STAR2,
        START_ANCHOR
      } = constants2.globChars(opts.windows);
      const nodot = opts.dot ? NO_DOTS : NO_DOT;
      const slashDot = opts.dot ? NO_DOTS_SLASH : NO_DOT;
      const capture = opts.capture ? "" : "?:";
      const state = { negated: false, prefix: "" };
      let star = opts.bash === true ? ".*?" : STAR2;
      if (opts.capture) {
        star = `(${star})`;
      }
      const globstar = (opts2) => {
        if (opts2.noglobstar === true) return star;
        return `(${capture}(?:(?!${START_ANCHOR}${opts2.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
      };
      const create = (str) => {
        switch (str) {
          case "*":
            return `${nodot}${ONE_CHAR}${star}`;
          case ".*":
            return `${DOT_LITERAL}${ONE_CHAR}${star}`;
          case "*.*":
            return `${nodot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;
          case "*/*":
            return `${nodot}${star}${SLASH_LITERAL}${ONE_CHAR}${slashDot}${star}`;
          case "**":
            return nodot + globstar(opts);
          case "**/*":
            return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${ONE_CHAR}${star}`;
          case "**/*.*":
            return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;
          case "**/.*":
            return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${DOT_LITERAL}${ONE_CHAR}${star}`;
          default: {
            const match = /^(.*?)\.(\w+)$/.exec(str);
            if (!match) return;
            const source2 = create(match[1]);
            if (!source2) return;
            return source2 + DOT_LITERAL + match[2];
          }
        }
      };
      const output = utils2.removePrefix(input, state);
      let source = create(output);
      if (source && opts.strictSlashes !== true) {
        source += `${SLASH_LITERAL}?`;
      }
      return source;
    };
    module.exports = parse4;
  }
});

// node_modules/tinyglobby/node_modules/picomatch/lib/picomatch.js
var require_picomatch3 = __commonJS({
  "node_modules/tinyglobby/node_modules/picomatch/lib/picomatch.js"(exports, module) {
    "use strict";
    var scan = require_scan2();
    var parse4 = require_parse2();
    var utils2 = require_utils4();
    var constants2 = require_constants2();
    var isObject2 = (val) => val && typeof val === "object" && !Array.isArray(val);
    var picomatch3 = (glob2, options2, returnState = false) => {
      if (Array.isArray(glob2)) {
        const fns = glob2.map((input) => picomatch3(input, options2, returnState));
        const arrayMatcher = (str) => {
          for (const isMatch2 of fns) {
            const state2 = isMatch2(str);
            if (state2) return state2;
          }
          return false;
        };
        return arrayMatcher;
      }
      const isState = isObject2(glob2) && glob2.tokens && glob2.input;
      if (glob2 === "" || typeof glob2 !== "string" && !isState) {
        throw new TypeError("Expected pattern to be a non-empty string");
      }
      const opts = options2 || {};
      const posix3 = opts.windows;
      const regex = isState ? picomatch3.compileRe(glob2, options2) : picomatch3.makeRe(glob2, options2, false, true);
      const state = regex.state;
      delete regex.state;
      let isIgnored = () => false;
      if (opts.ignore) {
        const ignoreOpts = { ...options2, ignore: null, onMatch: null, onResult: null };
        isIgnored = picomatch3(opts.ignore, ignoreOpts, returnState);
      }
      const matcher = (input, returnObject = false) => {
        const { isMatch: isMatch2, match, output } = picomatch3.test(input, regex, options2, { glob: glob2, posix: posix3 });
        const result = { glob: glob2, state, regex, posix: posix3, input, output, match, isMatch: isMatch2 };
        if (typeof opts.onResult === "function") {
          opts.onResult(result);
        }
        if (isMatch2 === false) {
          result.isMatch = false;
          return returnObject ? result : false;
        }
        if (isIgnored(input)) {
          if (typeof opts.onIgnore === "function") {
            opts.onIgnore(result);
          }
          result.isMatch = false;
          return returnObject ? result : false;
        }
        if (typeof opts.onMatch === "function") {
          opts.onMatch(result);
        }
        return returnObject ? result : true;
      };
      if (returnState) {
        matcher.state = state;
      }
      return matcher;
    };
    picomatch3.test = (input, regex, options2, { glob: glob2, posix: posix3 } = {}) => {
      if (typeof input !== "string") {
        throw new TypeError("Expected input to be a string");
      }
      if (input === "") {
        return { isMatch: false, output: "" };
      }
      const opts = options2 || {};
      const format2 = opts.format || (posix3 ? utils2.toPosixSlashes : null);
      let match = input === glob2;
      let output = match && format2 ? format2(input) : input;
      if (match === false) {
        output = format2 ? format2(input) : input;
        match = output === glob2;
      }
      if (match === false || opts.capture === true) {
        if (opts.matchBase === true || opts.basename === true) {
          match = picomatch3.matchBase(input, regex, options2, posix3);
        } else {
          match = regex.exec(output);
        }
      }
      return { isMatch: Boolean(match), match, output };
    };
    picomatch3.matchBase = (input, glob2, options2) => {
      const regex = glob2 instanceof RegExp ? glob2 : picomatch3.makeRe(glob2, options2);
      return regex.test(utils2.basename(input));
    };
    picomatch3.isMatch = (str, patterns, options2) => picomatch3(patterns, options2)(str);
    picomatch3.parse = (pattern, options2) => {
      if (Array.isArray(pattern)) return pattern.map((p2) => picomatch3.parse(p2, options2));
      return parse4(pattern, { ...options2, fastpaths: false });
    };
    picomatch3.scan = (input, options2) => scan(input, options2);
    picomatch3.compileRe = (state, options2, returnOutput = false, returnState = false) => {
      if (returnOutput === true) {
        return state.output;
      }
      const opts = options2 || {};
      const prepend = opts.contains ? "" : "^";
      const append2 = opts.contains ? "" : "$";
      let source = `${prepend}(?:${state.output})${append2}`;
      if (state && state.negated === true) {
        source = `^(?!${source}).*$`;
      }
      const regex = picomatch3.toRegex(source, options2);
      if (returnState === true) {
        regex.state = state;
      }
      return regex;
    };
    picomatch3.makeRe = (input, options2 = {}, returnOutput = false, returnState = false) => {
      if (!input || typeof input !== "string") {
        throw new TypeError("Expected a non-empty string");
      }
      let parsed = { negated: false, fastpaths: true };
      if (options2.fastpaths !== false && (input[0] === "." || input[0] === "*")) {
        parsed.output = parse4.fastpaths(input, options2);
      }
      if (!parsed.output) {
        parsed = parse4(input, options2);
      }
      return picomatch3.compileRe(parsed, options2, returnOutput, returnState);
    };
    picomatch3.toRegex = (source, options2) => {
      try {
        const opts = options2 || {};
        return new RegExp(source, opts.flags || (opts.nocase ? "i" : ""));
      } catch (err2) {
        if (options2 && options2.debug === true) throw err2;
        return /$^/;
      }
    };
    picomatch3.constants = constants2;
    module.exports = picomatch3;
  }
});

// node_modules/tinyglobby/node_modules/picomatch/index.js
var require_picomatch4 = __commonJS({
  "node_modules/tinyglobby/node_modules/picomatch/index.js"(exports, module) {
    "use strict";
    var pico = require_picomatch3();
    var utils2 = require_utils4();
    function picomatch3(glob2, options2, returnState = false) {
      if (options2 && (options2.windows === null || options2.windows === void 0)) {
        options2 = { ...options2, windows: utils2.isWindows() };
      }
      return pico(glob2, options2, returnState);
    }
    Object.assign(picomatch3, pico);
    module.exports = picomatch3;
  }
});

// node_modules/tinyglobby/node_modules/fdir/dist/builder/index.js
var require_builder2 = __commonJS({
  "node_modules/tinyglobby/node_modules/fdir/dist/builder/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Builder = void 0;
    var path_1 = require_path();
    var api_builder_1 = require_api_builder2();
    var pm = null;
    try {
      __require.resolve("picomatch");
      pm = require_picomatch4();
    } catch (_e) {
    }
    var Builder = class {
      constructor(options2) {
        __publicField(this, "globCache", {});
        __publicField(this, "options", {
          maxDepth: Infinity,
          suppressErrors: true,
          pathSeparator: path_1.sep,
          filters: []
        });
        __publicField(this, "globFunction");
        this.options = { ...this.options, ...options2 };
        this.globFunction = this.options.globFunction;
      }
      group() {
        this.options.group = true;
        return this;
      }
      withPathSeparator(separator) {
        this.options.pathSeparator = separator;
        return this;
      }
      withBasePath() {
        this.options.includeBasePath = true;
        return this;
      }
      withRelativePaths() {
        this.options.relativePaths = true;
        return this;
      }
      withDirs() {
        this.options.includeDirs = true;
        return this;
      }
      withMaxDepth(depth) {
        this.options.maxDepth = depth;
        return this;
      }
      withMaxFiles(limit) {
        this.options.maxFiles = limit;
        return this;
      }
      withFullPaths() {
        this.options.resolvePaths = true;
        this.options.includeBasePath = true;
        return this;
      }
      withErrors() {
        this.options.suppressErrors = false;
        return this;
      }
      withSymlinks({ resolvePaths = true } = {}) {
        this.options.resolveSymlinks = true;
        this.options.useRealPaths = resolvePaths;
        return this.withFullPaths();
      }
      withAbortSignal(signal) {
        this.options.signal = signal;
        return this;
      }
      normalize() {
        this.options.normalizePath = true;
        return this;
      }
      filter(predicate) {
        this.options.filters.push(predicate);
        return this;
      }
      onlyDirs() {
        this.options.excludeFiles = true;
        this.options.includeDirs = true;
        return this;
      }
      exclude(predicate) {
        this.options.exclude = predicate;
        return this;
      }
      onlyCounts() {
        this.options.onlyCounts = true;
        return this;
      }
      crawl(root) {
        return new api_builder_1.APIBuilder(root || ".", this.options);
      }
      withGlobFunction(fn) {
        this.globFunction = fn;
        return this;
      }
      /**
       * @deprecated Pass options using the constructor instead:
       * ```ts
       * new fdir(options).crawl("/path/to/root");
       * ```
       * This method will be removed in v7.0
       */
      /* c8 ignore next 4 */
      crawlWithOptions(root, options2) {
        this.options = { ...this.options, ...options2 };
        return new api_builder_1.APIBuilder(root || ".", this.options);
      }
      glob(...patterns) {
        if (this.globFunction) {
          return this.globWithOptions(patterns);
        }
        return this.globWithOptions(patterns, ...[{ dot: true }]);
      }
      globWithOptions(patterns, ...options2) {
        const globFn = this.globFunction || pm;
        if (!globFn) {
          throw new Error("Please specify a glob function to use glob matching.");
        }
        var isMatch2 = this.globCache[patterns.join("\0")];
        if (!isMatch2) {
          isMatch2 = globFn(patterns, ...options2);
          this.globCache[patterns.join("\0")] = isMatch2;
        }
        this.options.filters.push((path4) => isMatch2(path4));
        return this;
      }
    };
    exports.Builder = Builder;
  }
});

// node_modules/tinyglobby/node_modules/fdir/dist/types.js
var require_types2 = __commonJS({
  "node_modules/tinyglobby/node_modules/fdir/dist/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/tinyglobby/node_modules/fdir/dist/index.js
var require_dist2 = __commonJS({
  "node_modules/tinyglobby/node_modules/fdir/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m2, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m2, k);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m2, k, k2) {
      if (k2 === void 0) k2 = k;
      o2[k2] = m2[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m2, exports2) {
      for (var p2 in m2) if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2)) __createBinding(exports2, m2, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fdir = void 0;
    var builder_1 = require_builder2();
    Object.defineProperty(exports, "fdir", { enumerable: true, get: function() {
      return builder_1.Builder;
    } });
    __exportStar(require_types2(), exports);
  }
});

// browser-external:node:assert
var require_node_assert = __commonJS({
  "browser-external:node:assert"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "node:assert" has been externalized for browser compatibility. Cannot access "node:assert.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:node:v8
var require_node_v8 = __commonJS({
  "browser-external:node:v8"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "node:v8" has been externalized for browser compatibility. Cannot access "node:v8.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:node:worker_threads
var require_node_worker_threads = __commonJS({
  "browser-external:node:worker_threads"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "node:worker_threads" has been externalized for browser compatibility. Cannot access "node:worker_threads.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:https
var require_https = __commonJS({
  "browser-external:https"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "https" has been externalized for browser compatibility. Cannot access "https.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:tls
var require_tls = __commonJS({
  "browser-external:tls"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "tls" has been externalized for browser compatibility. Cannot access "tls.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:zlib
var require_zlib = __commonJS({
  "browser-external:zlib"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "zlib" has been externalized for browser compatibility. Cannot access "zlib.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:buffer
var require_buffer = __commonJS({
  "browser-external:buffer"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "buffer" has been externalized for browser compatibility. Cannot access "buffer.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:node:querystring
var require_node_querystring = __commonJS({
  "browser-external:node:querystring"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "node:querystring" has been externalized for browser compatibility. Cannot access "node:querystring.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:node:zlib
var require_node_zlib = __commonJS({
  "browser-external:node:zlib"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "node:zlib" has been externalized for browser compatibility. Cannot access "node:zlib.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/rollup/dist/es/parseAst.js
var import_native = __toESM(require_native());
var import_node_path = __toESM(require_node_path());

// node_modules/vite/dist/node/constants.js
var import_node_path2 = __toESM(require_node_path(), 1);
var import_node_url = __toESM(require_node_url(), 1);
var import_node_fs = __toESM(require_node_fs(), 1);
var { version } = JSON.parse(
  (0, import_node_fs.readFileSync)(new URL("../../package.json", import.meta.url)).toString()
);
var ROLLUP_HOOKS = [
  "options",
  "buildStart",
  "buildEnd",
  "renderStart",
  "renderError",
  "renderChunk",
  "writeBundle",
  "generateBundle",
  "banner",
  "footer",
  "augmentChunkHash",
  "outputOptions",
  "renderDynamicImport",
  "resolveFileUrl",
  "resolveImportMeta",
  "intro",
  "outro",
  "closeBundle",
  "closeWatcher",
  "load",
  "moduleParsed",
  "watchChange",
  "resolveDynamicImport",
  "resolveId",
  "shouldTransformCachedModule",
  "transform",
  "onLog"
];
var VERSION = version;
var DEFAULT_MAIN_FIELDS = [
  "browser",
  "module",
  "jsnext:main",
  // moment still uses this...
  "jsnext"
];
var DEFAULT_CLIENT_MAIN_FIELDS = Object.freeze(DEFAULT_MAIN_FIELDS);
var DEFAULT_SERVER_MAIN_FIELDS = Object.freeze(
  DEFAULT_MAIN_FIELDS.filter((f2) => f2 !== "browser")
);
var DEV_PROD_CONDITION = `development|production`;
var DEFAULT_CONDITIONS = ["module", "browser", "node", DEV_PROD_CONDITION];
var DEFAULT_CLIENT_CONDITIONS = Object.freeze(
  DEFAULT_CONDITIONS.filter((c) => c !== "node")
);
var DEFAULT_SERVER_CONDITIONS = Object.freeze(
  DEFAULT_CONDITIONS.filter((c) => c !== "browser")
);
var ESBUILD_MODULES_TARGET = [
  "es2020",
  "edge88",
  "firefox78",
  "chrome87",
  "safari14"
];
var DEFAULT_CONFIG_FILES = [
  "vite.config.js",
  "vite.config.mjs",
  "vite.config.ts",
  "vite.config.cjs",
  "vite.config.mts",
  "vite.config.cts"
];
var JS_TYPES_RE = /\.(?:j|t)sx?$|\.mjs$/;
var CSS_LANGS_RE = /\.(css|less|sass|scss|styl|stylus|pcss|postcss|sss)(?:$|\?)/;
var OPTIMIZABLE_ENTRY_RE = /\.[cm]?[jt]s$/;
var SPECIAL_QUERY_RE = /[?&](?:worker|sharedworker|raw|url)\b/;
var FS_PREFIX = `/@fs/`;
var CLIENT_PUBLIC_PATH = `/@vite/client`;
var ENV_PUBLIC_PATH = `/@vite/env`;
var VITE_PACKAGE_DIR = (0, import_node_path2.resolve)(
  // import.meta.url is `dist/node/constants.js` after bundle
  (0, import_node_url.fileURLToPath)(import.meta.url),
  "../../.."
);
var CLIENT_ENTRY = (0, import_node_path2.resolve)(VITE_PACKAGE_DIR, "dist/client/client.mjs");
var ENV_ENTRY = (0, import_node_path2.resolve)(VITE_PACKAGE_DIR, "dist/client/env.mjs");
var CLIENT_DIR = import_node_path2.default.dirname(CLIENT_ENTRY);
var KNOWN_ASSET_TYPES = [
  // images
  "apng",
  "bmp",
  "png",
  "jpe?g",
  "jfif",
  "pjpeg",
  "pjp",
  "gif",
  "svg",
  "ico",
  "webp",
  "avif",
  "cur",
  "jxl",
  // media
  "mp4",
  "webm",
  "ogg",
  "mp3",
  "wav",
  "flac",
  "aac",
  "opus",
  "mov",
  "m4a",
  "vtt",
  // fonts
  "woff2?",
  "eot",
  "ttf",
  "otf",
  // other
  "webmanifest",
  "pdf",
  "txt"
];
var DEFAULT_ASSETS_RE = new RegExp(
  `\\.(` + KNOWN_ASSET_TYPES.join("|") + `)(\\?.*)?$`,
  "i"
);
var DEP_VERSION_RE = /[?&](v=[\w.-]+)\b/;
var loopbackHosts = /* @__PURE__ */ new Set([
  "localhost",
  "127.0.0.1",
  "::1",
  "0000:0000:0000:0000:0000:0000:0000:0001"
]);
var wildcardHosts = /* @__PURE__ */ new Set([
  "0.0.0.0",
  "::",
  "0000:0000:0000:0000:0000:0000:0000:0000"
]);
var DEFAULT_DEV_PORT = 5173;
var DEFAULT_PREVIEW_PORT = 4173;
var DEFAULT_ASSETS_INLINE_LIMIT = 4096;
var defaultAllowedOrigins = /^https?:\/\/(?:(?:[^:]+\.)?localhost|127\.0\.0\.1|\[::1\])(?::\d+)?$/;
var METADATA_FILENAME = "_metadata.json";
var ERR_OPTIMIZE_DEPS_PROCESSING_ERROR = "ERR_OPTIMIZE_DEPS_PROCESSING_ERROR";
var ERR_FILE_NOT_FOUND_IN_OPTIMIZED_DEP_DIR = "ERR_FILE_NOT_FOUND_IN_OPTIMIZED_DEP_DIR";

// node_modules/vite/dist/node/module-runner.js
var VALID_ID_PREFIX = "/@id/";
var NULL_BYTE_PLACEHOLDER = "__x00__";
var SOURCEMAPPING_URL = "sourceMa";
SOURCEMAPPING_URL += "ppingURL";
var ERR_OUTDATED_OPTIMIZED_DEP = "ERR_OUTDATED_OPTIMIZED_DEP";
var isWindows = typeof process < "u" && process.platform === "win32";
function unwrapId(id) {
  return id.startsWith(VALID_ID_PREFIX) ? id.slice(VALID_ID_PREFIX.length).replace(NULL_BYTE_PLACEHOLDER, "\0") : id;
}
var windowsSlashRE = /\\/g;
function slash(p2) {
  return p2.replace(windowsSlashRE, "/");
}
var postfixRE = /[?#].*$/;
function cleanUrl(url2) {
  return url2.replace(postfixRE, "");
}
function isPrimitive(value2) {
  return !value2 || typeof value2 != "object" && typeof value2 != "function";
}
var AsyncFunction = (async function() {
}).constructor;
var asyncFunctionDeclarationPaddingLineCount;
function getAsyncFunctionDeclarationPaddingLineCount() {
  if (typeof asyncFunctionDeclarationPaddingLineCount > "u") {
    const body = "/*code*/", source = new AsyncFunction("a", "b", body).toString();
    asyncFunctionDeclarationPaddingLineCount = source.slice(0, source.indexOf(body)).split(`
`).length - 1;
  }
  return asyncFunctionDeclarationPaddingLineCount;
}
function promiseWithResolvers() {
  let resolve22, reject;
  return { promise: new Promise((_resolve, _reject) => {
    resolve22 = _resolve, reject = _reject;
  }), resolve: resolve22, reject };
}
var _DRIVE_LETTER_START_RE = /^[A-Za-z]:\//;
function normalizeWindowsPath(input = "") {
  return input && input.replace(/\\/g, "/").replace(_DRIVE_LETTER_START_RE, (r2) => r2.toUpperCase());
}
var _IS_ABSOLUTE_RE = /^[/\\](?![/\\])|^[/\\]{2}(?!\.)|^[A-Za-z]:[/\\]/;
var _DRIVE_LETTER_RE = /^[A-Za-z]:$/;
function cwd() {
  return typeof process < "u" && typeof process.cwd == "function" ? process.cwd().replace(/\\/g, "/") : "/";
}
var resolve2 = function(...arguments_) {
  arguments_ = arguments_.map((argument) => normalizeWindowsPath(argument));
  let resolvedPath = "", resolvedAbsolute = false;
  for (let index = arguments_.length - 1; index >= -1 && !resolvedAbsolute; index--) {
    const path4 = index >= 0 ? arguments_[index] : cwd();
    !path4 || path4.length === 0 || (resolvedPath = `${path4}/${resolvedPath}`, resolvedAbsolute = isAbsolute(path4));
  }
  return resolvedPath = normalizeString(resolvedPath, !resolvedAbsolute), resolvedAbsolute && !isAbsolute(resolvedPath) ? `/${resolvedPath}` : resolvedPath.length > 0 ? resolvedPath : ".";
};
function normalizeString(path4, allowAboveRoot) {
  let res = "", lastSegmentLength = 0, lastSlash = -1, dots = 0, char = null;
  for (let index = 0; index <= path4.length; ++index) {
    if (index < path4.length)
      char = path4[index];
    else {
      if (char === "/")
        break;
      char = "/";
    }
    if (char === "/") {
      if (!(lastSlash === index - 1 || dots === 1)) if (dots === 2) {
        if (res.length < 2 || lastSegmentLength !== 2 || res[res.length - 1] !== "." || res[res.length - 2] !== ".") {
          if (res.length > 2) {
            const lastSlashIndex = res.lastIndexOf("/");
            lastSlashIndex === -1 ? (res = "", lastSegmentLength = 0) : (res = res.slice(0, lastSlashIndex), lastSegmentLength = res.length - 1 - res.lastIndexOf("/")), lastSlash = index, dots = 0;
            continue;
          } else if (res.length > 0) {
            res = "", lastSegmentLength = 0, lastSlash = index, dots = 0;
            continue;
          }
        }
        allowAboveRoot && (res += res.length > 0 ? "/.." : "..", lastSegmentLength = 2);
      } else
        res.length > 0 ? res += `/${path4.slice(lastSlash + 1, index)}` : res = path4.slice(lastSlash + 1, index), lastSegmentLength = index - lastSlash - 1;
      lastSlash = index, dots = 0;
    } else char === "." && dots !== -1 ? ++dots : dots = -1;
  }
  return res;
}
var isAbsolute = function(p2) {
  return _IS_ABSOLUTE_RE.test(p2);
};
var dirname = function(p2) {
  const segments = normalizeWindowsPath(p2).replace(/\/$/, "").split("/").slice(0, -1);
  return segments.length === 1 && _DRIVE_LETTER_RE.test(segments[0]) && (segments[0] += "/"), segments.join("/") || (isAbsolute(p2) ? "/" : ".");
};
var decodeBase64 = typeof atob < "u" ? atob : (str) => Buffer.from(str, "base64").toString("utf-8");
var CHAR_FORWARD_SLASH = 47;
var CHAR_BACKWARD_SLASH = 92;
var percentRegEx = /%/g;
var backslashRegEx = /\\/g;
var newlineRegEx = /\n/g;
var carriageReturnRegEx = /\r/g;
var tabRegEx = /\t/g;
var questionRegex = /\?/g;
var hashRegex = /#/g;
function encodePathChars(filepath) {
  return filepath.indexOf("%") !== -1 && (filepath = filepath.replace(percentRegEx, "%25")), !isWindows && filepath.indexOf("\\") !== -1 && (filepath = filepath.replace(backslashRegEx, "%5C")), filepath.indexOf(`
`) !== -1 && (filepath = filepath.replace(newlineRegEx, "%0A")), filepath.indexOf("\r") !== -1 && (filepath = filepath.replace(carriageReturnRegEx, "%0D")), filepath.indexOf("	") !== -1 && (filepath = filepath.replace(tabRegEx, "%09")), filepath;
}
var posixDirname = dirname;
var posixResolve = resolve2;
function posixPathToFileHref(posixPath) {
  let resolved = posixResolve(posixPath);
  const filePathLast = posixPath.charCodeAt(posixPath.length - 1);
  return (filePathLast === CHAR_FORWARD_SLASH || isWindows && filePathLast === CHAR_BACKWARD_SLASH) && resolved[resolved.length - 1] !== "/" && (resolved += "/"), resolved = encodePathChars(resolved), resolved.indexOf("?") !== -1 && (resolved = resolved.replace(questionRegex, "%3F")), resolved.indexOf("#") !== -1 && (resolved = resolved.replace(hashRegex, "%23")), new URL(`file://${resolved}`).href;
}
function toWindowsPath(path4) {
  return path4.replace(/\//g, "\\");
}
var comma = 44;
var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
var intToChar = new Uint8Array(64);
var charToInt = new Uint8Array(128);
for (let i = 0; i < chars.length; i++) {
  const c = chars.charCodeAt(i);
  intToChar[i] = c, charToInt[c] = i;
}
function decodeInteger(reader, relative2) {
  let value2 = 0, shift = 0, integer = 0;
  do {
    const c = reader.next();
    integer = charToInt[c], value2 |= (integer & 31) << shift, shift += 5;
  } while (integer & 32);
  const shouldNegate = value2 & 1;
  return value2 >>>= 1, shouldNegate && (value2 = -2147483648 | -value2), relative2 + value2;
}
function hasMoreVlq(reader, max) {
  return reader.pos >= max ? false : reader.peek() !== comma;
}
var StringReader = class {
  constructor(buffer) {
    this.pos = 0, this.buffer = buffer;
  }
  next() {
    return this.buffer.charCodeAt(this.pos++);
  }
  peek() {
    return this.buffer.charCodeAt(this.pos);
  }
  indexOf(char) {
    const { buffer, pos } = this, idx = buffer.indexOf(char, pos);
    return idx === -1 ? buffer.length : idx;
  }
};
function decode(mappings) {
  const { length } = mappings, reader = new StringReader(mappings), decoded = [];
  let genColumn = 0, sourcesIndex = 0, sourceLine = 0, sourceColumn = 0, namesIndex = 0;
  do {
    const semi = reader.indexOf(";"), line = [];
    let sorted = true, lastCol = 0;
    for (genColumn = 0; reader.pos < semi; ) {
      let seg;
      genColumn = decodeInteger(reader, genColumn), genColumn < lastCol && (sorted = false), lastCol = genColumn, hasMoreVlq(reader, semi) ? (sourcesIndex = decodeInteger(reader, sourcesIndex), sourceLine = decodeInteger(reader, sourceLine), sourceColumn = decodeInteger(reader, sourceColumn), hasMoreVlq(reader, semi) ? (namesIndex = decodeInteger(reader, namesIndex), seg = [genColumn, sourcesIndex, sourceLine, sourceColumn, namesIndex]) : seg = [genColumn, sourcesIndex, sourceLine, sourceColumn]) : seg = [genColumn], line.push(seg), reader.pos++;
    }
    sorted || sort(line), decoded.push(line), reader.pos = semi + 1;
  } while (reader.pos <= length);
  return decoded;
}
function sort(line) {
  line.sort(sortComparator);
}
function sortComparator(a, b) {
  return a[0] - b[0];
}
var COLUMN = 0;
var SOURCES_INDEX = 1;
var SOURCE_LINE = 2;
var SOURCE_COLUMN = 3;
var NAMES_INDEX = 4;
var found = false;
function binarySearch(haystack, needle, low, high) {
  for (; low <= high; ) {
    const mid = low + (high - low >> 1), cmp = haystack[mid][COLUMN] - needle;
    if (cmp === 0)
      return found = true, mid;
    cmp < 0 ? low = mid + 1 : high = mid - 1;
  }
  return found = false, low - 1;
}
function upperBound(haystack, needle, index) {
  for (let i = index + 1; i < haystack.length && haystack[i][COLUMN] === needle; index = i++)
    ;
  return index;
}
function lowerBound(haystack, needle, index) {
  for (let i = index - 1; i >= 0 && haystack[i][COLUMN] === needle; index = i--)
    ;
  return index;
}
function memoizedBinarySearch(haystack, needle, state, key) {
  const { lastKey, lastNeedle, lastIndex } = state;
  let low = 0, high = haystack.length - 1;
  if (key === lastKey) {
    if (needle === lastNeedle)
      return found = lastIndex !== -1 && haystack[lastIndex][COLUMN] === needle, lastIndex;
    needle >= lastNeedle ? low = lastIndex === -1 ? 0 : lastIndex : high = lastIndex;
  }
  return state.lastKey = key, state.lastNeedle = needle, state.lastIndex = binarySearch(haystack, needle, low, high);
}
var LINE_GTR_ZERO = "`line` must be greater than 0 (lines start at line 1)";
var COL_GTR_EQ_ZERO = "`column` must be greater than or equal to 0 (columns start at column 0)";
var LEAST_UPPER_BOUND = -1;
var GREATEST_LOWER_BOUND = 1;
function decodedMappings(map2) {
  var _a2;
  return (_a2 = map2)._decoded || (_a2._decoded = decode(map2._encoded));
}
function originalPositionFor(map2, needle) {
  let { line, column, bias } = needle;
  if (line--, line < 0)
    throw new Error(LINE_GTR_ZERO);
  if (column < 0)
    throw new Error(COL_GTR_EQ_ZERO);
  const decoded = decodedMappings(map2);
  if (line >= decoded.length)
    return OMapping(null, null, null, null);
  const segments = decoded[line], index = traceSegmentInternal(segments, map2._decodedMemo, line, column, bias || GREATEST_LOWER_BOUND);
  if (index === -1)
    return OMapping(null, null, null, null);
  const segment = segments[index];
  if (segment.length === 1)
    return OMapping(null, null, null, null);
  const { names, resolvedSources } = map2;
  return OMapping(resolvedSources[segment[SOURCES_INDEX]], segment[SOURCE_LINE] + 1, segment[SOURCE_COLUMN], segment.length === 5 ? names[segment[NAMES_INDEX]] : null);
}
function OMapping(source, line, column, name) {
  return { source, line, column, name };
}
function traceSegmentInternal(segments, memo, line, column, bias) {
  let index = memoizedBinarySearch(segments, column, memo, line);
  return found ? index = (bias === LEAST_UPPER_BOUND ? upperBound : lowerBound)(segments, column, index) : bias === LEAST_UPPER_BOUND && index++, index === -1 || index === segments.length ? -1 : index;
}
var DecodedMap = class {
  constructor(map2, from) {
    __publicField(this, "_encoded");
    __publicField(this, "_decoded");
    __publicField(this, "_decodedMemo");
    __publicField(this, "url");
    __publicField(this, "version");
    __publicField(this, "names", []);
    __publicField(this, "resolvedSources");
    this.map = map2;
    const { mappings, names, sources } = map2;
    this.version = map2.version, this.names = names || [], this._encoded = mappings || "", this._decodedMemo = memoizedState(), this.url = from, this.resolvedSources = (sources || []).map(
      (s2) => posixResolve(s2 || "", from)
    );
  }
};
function memoizedState() {
  return {
    lastKey: -1,
    lastNeedle: -1,
    lastIndex: -1
  };
}
function getOriginalPosition(map2, needle) {
  const result = originalPositionFor(map2, needle);
  return result.column == null ? null : result;
}
var MODULE_RUNNER_SOURCEMAPPING_REGEXP = new RegExp(
  `//# ${SOURCEMAPPING_URL}=data:application/json;base64,(.+)`
);
var EvaluatedModuleNode = class {
  constructor(id, url2) {
    __publicField(this, "importers", /* @__PURE__ */ new Set());
    __publicField(this, "imports", /* @__PURE__ */ new Set());
    __publicField(this, "evaluated", false);
    __publicField(this, "meta");
    __publicField(this, "promise");
    __publicField(this, "exports");
    __publicField(this, "file");
    __publicField(this, "map");
    this.id = id, this.url = url2, this.file = cleanUrl(id);
  }
};
var EvaluatedModules = class {
  constructor() {
    __publicField(this, "idToModuleMap", /* @__PURE__ */ new Map());
    __publicField(this, "fileToModulesMap", /* @__PURE__ */ new Map());
    __publicField(this, "urlToIdModuleMap", /* @__PURE__ */ new Map());
  }
  /**
   * Returns the module node by the resolved module ID. Usually, module ID is
   * the file system path with query and/or hash. It can also be a virtual module.
   *
   * Module runner graph will have 1 to 1 mapping with the server module graph.
   * @param id Resolved module ID
   */
  getModuleById(id) {
    return this.idToModuleMap.get(id);
  }
  /**
   * Returns all modules related to the file system path. Different modules
   * might have different query parameters or hash, so it's possible to have
   * multiple modules for the same file.
   * @param file The file system path of the module
   */
  getModulesByFile(file) {
    return this.fileToModulesMap.get(file);
  }
  /**
   * Returns the module node by the URL that was used in the import statement.
   * Unlike module graph on the server, the URL is not resolved and is used as is.
   * @param url Server URL that was used in the import statement
   */
  getModuleByUrl(url2) {
    return this.urlToIdModuleMap.get(unwrapId(url2));
  }
  /**
   * Ensure that module is in the graph. If the module is already in the graph,
   * it will return the existing module node. Otherwise, it will create a new
   * module node and add it to the graph.
   * @param id Resolved module ID
   * @param url URL that was used in the import statement
   */
  ensureModule(id, url2) {
    if (id = normalizeModuleId(id), this.idToModuleMap.has(id)) {
      const moduleNode2 = this.idToModuleMap.get(id);
      return this.urlToIdModuleMap.set(url2, moduleNode2), moduleNode2;
    }
    const moduleNode = new EvaluatedModuleNode(id, url2);
    this.idToModuleMap.set(id, moduleNode), this.urlToIdModuleMap.set(url2, moduleNode);
    const fileModules = this.fileToModulesMap.get(moduleNode.file) || /* @__PURE__ */ new Set();
    return fileModules.add(moduleNode), this.fileToModulesMap.set(moduleNode.file, fileModules), moduleNode;
  }
  invalidateModule(node2) {
    node2.evaluated = false, node2.meta = void 0, node2.map = void 0, node2.promise = void 0, node2.exports = void 0, node2.imports.clear();
  }
  /**
   * Extracts the inlined source map from the module code and returns the decoded
   * source map. If the source map is not inlined, it will return null.
   * @param id Resolved module ID
   */
  getModuleSourceMapById(id) {
    var _a2;
    const mod = this.getModuleById(id);
    if (!mod) return null;
    if (mod.map) return mod.map;
    if (!mod.meta || !("code" in mod.meta)) return null;
    const mapString = (_a2 = MODULE_RUNNER_SOURCEMAPPING_REGEXP.exec(
      mod.meta.code
    )) == null ? void 0 : _a2[1];
    return mapString ? (mod.map = new DecodedMap(JSON.parse(decodeBase64(mapString)), mod.file), mod.map) : null;
  }
  clear() {
    this.idToModuleMap.clear(), this.fileToModulesMap.clear(), this.urlToIdModuleMap.clear();
  }
};
var prefixedBuiltins = /* @__PURE__ */ new Set([
  "node:sea",
  "node:sqlite",
  "node:test",
  "node:test/reporters"
]);
function normalizeModuleId(file) {
  return prefixedBuiltins.has(file) ? file : slash(file).replace(/^\/@fs\//, isWindows ? "" : "/").replace(/^node:/, "").replace(/^\/+/, "/").replace(/^file:\//, "/");
}
var HMRContext = class {
  constructor(hmrClient, ownerPath) {
    __publicField(this, "newListeners");
    this.hmrClient = hmrClient, this.ownerPath = ownerPath, hmrClient.dataMap.has(ownerPath) || hmrClient.dataMap.set(ownerPath, {});
    const mod = hmrClient.hotModulesMap.get(ownerPath);
    mod && (mod.callbacks = []);
    const staleListeners = hmrClient.ctxToListenersMap.get(ownerPath);
    if (staleListeners)
      for (const [event, staleFns] of staleListeners) {
        const listeners = hmrClient.customListenersMap.get(event);
        listeners && hmrClient.customListenersMap.set(
          event,
          listeners.filter((l) => !staleFns.includes(l))
        );
      }
    this.newListeners = /* @__PURE__ */ new Map(), hmrClient.ctxToListenersMap.set(ownerPath, this.newListeners);
  }
  get data() {
    return this.hmrClient.dataMap.get(this.ownerPath);
  }
  accept(deps, callback) {
    if (typeof deps == "function" || !deps)
      this.acceptDeps([this.ownerPath], ([mod]) => deps == null ? void 0 : deps(mod));
    else if (typeof deps == "string")
      this.acceptDeps([deps], ([mod]) => callback == null ? void 0 : callback(mod));
    else if (Array.isArray(deps))
      this.acceptDeps(deps, callback);
    else
      throw new Error("invalid hot.accept() usage.");
  }
  // export names (first arg) are irrelevant on the client side, they're
  // extracted in the server for propagation
  acceptExports(_, callback) {
    this.acceptDeps([this.ownerPath], ([mod]) => callback == null ? void 0 : callback(mod));
  }
  dispose(cb) {
    this.hmrClient.disposeMap.set(this.ownerPath, cb);
  }
  prune(cb) {
    this.hmrClient.pruneMap.set(this.ownerPath, cb);
  }
  // Kept for backward compatibility (#11036)
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  decline() {
  }
  invalidate(message) {
    const firstInvalidatedBy = this.hmrClient.currentFirstInvalidatedBy ?? this.ownerPath;
    this.hmrClient.notifyListeners("vite:invalidate", {
      path: this.ownerPath,
      message,
      firstInvalidatedBy
    }), this.send("vite:invalidate", {
      path: this.ownerPath,
      message,
      firstInvalidatedBy
    }), this.hmrClient.logger.debug(
      `invalidate ${this.ownerPath}${message ? `: ${message}` : ""}`
    );
  }
  on(event, cb) {
    const addToMap = (map2) => {
      const existing = map2.get(event) || [];
      existing.push(cb), map2.set(event, existing);
    };
    addToMap(this.hmrClient.customListenersMap), addToMap(this.newListeners);
  }
  off(event, cb) {
    const removeFromMap = (map2) => {
      const existing = map2.get(event);
      if (existing === void 0)
        return;
      const pruned = existing.filter((l) => l !== cb);
      if (pruned.length === 0) {
        map2.delete(event);
        return;
      }
      map2.set(event, pruned);
    };
    removeFromMap(this.hmrClient.customListenersMap), removeFromMap(this.newListeners);
  }
  send(event, data) {
    this.hmrClient.send({ type: "custom", event, data });
  }
  acceptDeps(deps, callback = () => {
  }) {
    const mod = this.hmrClient.hotModulesMap.get(this.ownerPath) || {
      id: this.ownerPath,
      callbacks: []
    };
    mod.callbacks.push({
      deps,
      fn: callback
    }), this.hmrClient.hotModulesMap.set(this.ownerPath, mod);
  }
};
var HMRClient = class {
  constructor(logger, transport, importUpdatedModule) {
    __publicField(this, "hotModulesMap", /* @__PURE__ */ new Map());
    __publicField(this, "disposeMap", /* @__PURE__ */ new Map());
    __publicField(this, "pruneMap", /* @__PURE__ */ new Map());
    __publicField(this, "dataMap", /* @__PURE__ */ new Map());
    __publicField(this, "customListenersMap", /* @__PURE__ */ new Map());
    __publicField(this, "ctxToListenersMap", /* @__PURE__ */ new Map());
    __publicField(this, "currentFirstInvalidatedBy");
    __publicField(this, "updateQueue", []);
    __publicField(this, "pendingUpdateQueue", false);
    this.logger = logger, this.transport = transport, this.importUpdatedModule = importUpdatedModule;
  }
  async notifyListeners(event, data) {
    const cbs = this.customListenersMap.get(event);
    cbs && await Promise.allSettled(cbs.map((cb) => cb(data)));
  }
  send(payload) {
    this.transport.send(payload).catch((err2) => {
      this.logger.error(err2);
    });
  }
  clear() {
    this.hotModulesMap.clear(), this.disposeMap.clear(), this.pruneMap.clear(), this.dataMap.clear(), this.customListenersMap.clear(), this.ctxToListenersMap.clear();
  }
  // After an HMR update, some modules are no longer imported on the page
  // but they may have left behind side effects that need to be cleaned up
  // (e.g. style injections)
  async prunePaths(paths) {
    await Promise.all(
      paths.map((path4) => {
        const disposer = this.disposeMap.get(path4);
        if (disposer) return disposer(this.dataMap.get(path4));
      })
    ), paths.forEach((path4) => {
      const fn = this.pruneMap.get(path4);
      fn && fn(this.dataMap.get(path4));
    });
  }
  warnFailedUpdate(err2, path4) {
    (!(err2 instanceof Error) || !err2.message.includes("fetch")) && this.logger.error(err2), this.logger.error(
      `Failed to reload ${path4}. This could be due to syntax errors or importing non-existent modules. (see errors above)`
    );
  }
  /**
   * buffer multiple hot updates triggered by the same src change
   * so that they are invoked in the same order they were sent.
   * (otherwise the order may be inconsistent because of the http request round trip)
   */
  async queueUpdate(payload) {
    if (this.updateQueue.push(this.fetchUpdate(payload)), !this.pendingUpdateQueue) {
      this.pendingUpdateQueue = true, await Promise.resolve(), this.pendingUpdateQueue = false;
      const loading = [...this.updateQueue];
      this.updateQueue = [], (await Promise.all(loading)).forEach((fn) => fn && fn());
    }
  }
  async fetchUpdate(update) {
    const { path: path4, acceptedPath, firstInvalidatedBy } = update, mod = this.hotModulesMap.get(path4);
    if (!mod)
      return;
    let fetchedModule;
    const isSelfUpdate = path4 === acceptedPath, qualifiedCallbacks = mod.callbacks.filter(
      ({ deps }) => deps.includes(acceptedPath)
    );
    if (isSelfUpdate || qualifiedCallbacks.length > 0) {
      const disposer = this.disposeMap.get(acceptedPath);
      disposer && await disposer(this.dataMap.get(acceptedPath));
      try {
        fetchedModule = await this.importUpdatedModule(update);
      } catch (e2) {
        this.warnFailedUpdate(e2, acceptedPath);
      }
    }
    return () => {
      try {
        this.currentFirstInvalidatedBy = firstInvalidatedBy;
        for (const { deps, fn } of qualifiedCallbacks)
          fn(
            deps.map(
              (dep) => dep === acceptedPath ? fetchedModule : void 0
            )
          );
        const loggedPath = isSelfUpdate ? path4 : `${acceptedPath} via ${path4}`;
        this.logger.debug(`hot updated: ${loggedPath}`);
      } finally {
        this.currentFirstInvalidatedBy = void 0;
      }
    };
  }
};
function analyzeImportedModDifference(mod, rawId, moduleType, metadata) {
  var _a2;
  if (!(metadata == null ? void 0 : metadata.isDynamicImport) && ((_a2 = metadata == null ? void 0 : metadata.importedNames) == null ? void 0 : _a2.length)) {
    const missingBindings = metadata.importedNames.filter((s2) => !(s2 in mod));
    if (missingBindings.length) {
      const lastBinding = missingBindings[missingBindings.length - 1];
      throw moduleType === "module" ? new SyntaxError(
        `[vite] The requested module '${rawId}' does not provide an export named '${lastBinding}'`
      ) : new SyntaxError(`[vite] Named export '${lastBinding}' not found. The requested module '${rawId}' is a CommonJS module, which may not support all module.exports as named exports.
CommonJS modules can always be imported via the default export, for example using:

import pkg from '${rawId}';
const {${missingBindings.join(", ")}} = pkg;
`);
    }
  }
}
var urlAlphabet = "useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict";
var nanoid = (size = 21) => {
  let id = "", i = size | 0;
  for (; i--; )
    id += urlAlphabet[Math.random() * 64 | 0];
  return id;
};
function reviveInvokeError(e2) {
  const error2 = new Error(e2.message || "Unknown invoke error");
  return Object.assign(error2, e2, {
    // pass the whole error instead of just the stacktrace
    // so that it gets formatted nicely with console.log
    runnerError: new Error("RunnerError")
  }), error2;
}
var createInvokeableTransport = (transport) => {
  if (transport.invoke)
    return {
      ...transport,
      async invoke(name, data) {
        const result = await transport.invoke({
          type: "custom",
          event: "vite:invoke",
          data: {
            id: "send",
            name,
            data
          }
        });
        if ("error" in result)
          throw reviveInvokeError(result.error);
        return result.result;
      }
    };
  if (!transport.send || !transport.connect)
    throw new Error(
      "transport must implement send and connect when invoke is not implemented"
    );
  const rpcPromises = /* @__PURE__ */ new Map();
  return {
    ...transport,
    connect({ onMessage, onDisconnection }) {
      return transport.connect({
        onMessage(payload) {
          if (payload.type === "custom" && payload.event === "vite:invoke") {
            const data = payload.data;
            if (data.id.startsWith("response:")) {
              const invokeId = data.id.slice(9), promise = rpcPromises.get(invokeId);
              if (!promise) return;
              promise.timeoutId && clearTimeout(promise.timeoutId), rpcPromises.delete(invokeId);
              const { error: error2, result } = data.data;
              error2 ? promise.reject(error2) : promise.resolve(result);
              return;
            }
          }
          onMessage(payload);
        },
        onDisconnection
      });
    },
    disconnect() {
      var _a2;
      return rpcPromises.forEach((promise) => {
        promise.reject(
          new Error(
            `transport was disconnected, cannot call ${JSON.stringify(promise.name)}`
          )
        );
      }), rpcPromises.clear(), (_a2 = transport.disconnect) == null ? void 0 : _a2.call(transport);
    },
    send(data) {
      return transport.send(data);
    },
    async invoke(name, data) {
      var _a2;
      const promiseId = nanoid(), wrappedData = {
        type: "custom",
        event: "vite:invoke",
        data: {
          name,
          id: `send:${promiseId}`,
          data
        }
      }, sendPromise = transport.send(wrappedData), { promise, resolve: resolve22, reject } = promiseWithResolvers(), timeout2 = transport.timeout ?? 6e4;
      let timeoutId;
      timeout2 > 0 && (timeoutId = setTimeout(() => {
        rpcPromises.delete(promiseId), reject(
          new Error(
            `transport invoke timed out after ${timeout2}ms (data: ${JSON.stringify(wrappedData)})`
          )
        );
      }, timeout2), (_a2 = timeoutId == null ? void 0 : timeoutId.unref) == null ? void 0 : _a2.call(timeoutId)), rpcPromises.set(promiseId, { resolve: resolve22, reject, name, timeoutId }), sendPromise && sendPromise.catch((err2) => {
        clearTimeout(timeoutId), rpcPromises.delete(promiseId), reject(err2);
      });
      try {
        return await promise;
      } catch (err2) {
        throw reviveInvokeError(err2);
      }
    }
  };
};
var normalizeModuleRunnerTransport = (transport) => {
  const invokeableTransport = createInvokeableTransport(transport);
  let isConnected = !invokeableTransport.connect, connectingPromise;
  return {
    ...transport,
    ...invokeableTransport.connect ? {
      async connect(onMessage) {
        if (isConnected) return;
        if (connectingPromise) {
          await connectingPromise;
          return;
        }
        const maybePromise = invokeableTransport.connect({
          onMessage: onMessage ?? (() => {
          }),
          onDisconnection() {
            isConnected = false;
          }
        });
        maybePromise && (connectingPromise = maybePromise, await connectingPromise, connectingPromise = void 0), isConnected = true;
      }
    } : {},
    ...invokeableTransport.disconnect ? {
      async disconnect() {
        isConnected && (connectingPromise && await connectingPromise, isConnected = false, await invokeableTransport.disconnect());
      }
    } : {},
    async send(data) {
      if (invokeableTransport.send) {
        if (!isConnected)
          if (connectingPromise)
            await connectingPromise;
          else
            throw new Error("send was called before connect");
        await invokeableTransport.send(data);
      }
    },
    async invoke(name, data) {
      if (!isConnected)
        if (connectingPromise)
          await connectingPromise;
        else
          throw new Error("invoke was called before connect");
      return invokeableTransport.invoke(name, data);
    }
  };
};
var ssrModuleExportsKey = "__vite_ssr_exports__";
var ssrImportKey = "__vite_ssr_import__";
var ssrDynamicImportKey = "__vite_ssr_dynamic_import__";
var ssrExportAllKey = "__vite_ssr_exportAll__";
var ssrImportMetaKey = "__vite_ssr_import_meta__";
var noop = () => {
};
var silentConsole = {
  debug: noop,
  error: noop
};
var hmrLogger = {
  debug: (...msg) => console.log("[vite]", ...msg),
  error: (error2) => console.log("[vite]", error2)
};
function createHMRHandler(handler) {
  const queue = new Queue();
  return (payload) => queue.enqueue(() => handler(payload));
}
var Queue = class {
  constructor() {
    __publicField(this, "queue", []);
    __publicField(this, "pending", false);
  }
  enqueue(promise) {
    return new Promise((resolve22, reject) => {
      this.queue.push({
        promise,
        resolve: resolve22,
        reject
      }), this.dequeue();
    });
  }
  dequeue() {
    if (this.pending)
      return false;
    const item = this.queue.shift();
    return item ? (this.pending = true, item.promise().then(item.resolve).catch(item.reject).finally(() => {
      this.pending = false, this.dequeue();
    }), true) : false;
  }
};
function createHMRHandlerForRunner(runner) {
  return createHMRHandler(async (payload) => {
    const hmrClient = runner.hmrClient;
    if (!(!hmrClient || runner.isClosed()))
      switch (payload.type) {
        case "connected":
          hmrClient.logger.debug("connected.");
          break;
        case "update":
          await hmrClient.notifyListeners("vite:beforeUpdate", payload), await Promise.all(
            payload.updates.map(async (update) => {
              if (update.type === "js-update")
                return update.acceptedPath = unwrapId(update.acceptedPath), update.path = unwrapId(update.path), hmrClient.queueUpdate(update);
              hmrClient.logger.error("css hmr is not supported in runner mode.");
            })
          ), await hmrClient.notifyListeners("vite:afterUpdate", payload);
          break;
        case "custom": {
          await hmrClient.notifyListeners(payload.event, payload.data);
          break;
        }
        case "full-reload": {
          const { triggeredBy } = payload, clearEntrypointUrls = triggeredBy ? getModulesEntrypoints(
            runner,
            getModulesByFile(runner, slash(triggeredBy))
          ) : findAllEntrypoints(runner);
          if (!clearEntrypointUrls.size) break;
          hmrClient.logger.debug("program reload"), await hmrClient.notifyListeners("vite:beforeFullReload", payload), runner.evaluatedModules.clear();
          for (const url2 of clearEntrypointUrls)
            try {
              await runner.import(url2);
            } catch (err2) {
              err2.code !== ERR_OUTDATED_OPTIMIZED_DEP && hmrClient.logger.error(
                `An error happened during full reload
${err2.message}
${err2.stack}`
              );
            }
          break;
        }
        case "prune":
          await hmrClient.notifyListeners("vite:beforePrune", payload), await hmrClient.prunePaths(payload.paths);
          break;
        case "error": {
          await hmrClient.notifyListeners("vite:error", payload);
          const err2 = payload.err;
          hmrClient.logger.error(
            `Internal Server Error
${err2.message}
${err2.stack}`
          );
          break;
        }
        case "ping":
          break;
        default:
          return payload;
      }
  });
}
function getModulesByFile(runner, file) {
  const nodes = runner.evaluatedModules.getModulesByFile(file);
  return nodes ? [...nodes].map((node2) => node2.id) : [];
}
function getModulesEntrypoints(runner, modules, visited = /* @__PURE__ */ new Set(), entrypoints = /* @__PURE__ */ new Set()) {
  for (const moduleId of modules) {
    if (visited.has(moduleId)) continue;
    visited.add(moduleId);
    const module = runner.evaluatedModules.getModuleById(moduleId);
    if (module) {
      if (!module.importers.size) {
        entrypoints.add(module.url);
        continue;
      }
      for (const importer of module.importers)
        getModulesEntrypoints(runner, [importer], visited, entrypoints);
    }
  }
  return entrypoints;
}
function findAllEntrypoints(runner, entrypoints = /* @__PURE__ */ new Set()) {
  for (const mod of runner.evaluatedModules.idToModuleMap.values())
    mod.importers.size || entrypoints.add(mod.url);
  return entrypoints;
}
var sourceMapCache = {};
var fileContentsCache = {};
var evaluatedModulesCache = /* @__PURE__ */ new Set();
var retrieveFileHandlers = /* @__PURE__ */ new Set();
var retrieveSourceMapHandlers = /* @__PURE__ */ new Set();
var createExecHandlers = (handlers) => (...args) => {
  for (const handler of handlers) {
    const result = handler(...args);
    if (result) return result;
  }
  return null;
};
var retrieveFileFromHandlers = createExecHandlers(retrieveFileHandlers);
var retrieveSourceMapFromHandlers = createExecHandlers(
  retrieveSourceMapHandlers
);
var overridden = false;
var originalPrepare = Error.prepareStackTrace;
function resetInterceptor(runner, options2) {
  evaluatedModulesCache.delete(runner.evaluatedModules), options2.retrieveFile && retrieveFileHandlers.delete(options2.retrieveFile), options2.retrieveSourceMap && retrieveSourceMapHandlers.delete(options2.retrieveSourceMap), evaluatedModulesCache.size === 0 && (Error.prepareStackTrace = originalPrepare, overridden = false);
}
function interceptStackTrace(runner, options2 = {}) {
  return overridden || (Error.prepareStackTrace = prepareStackTrace, overridden = true), evaluatedModulesCache.add(runner.evaluatedModules), options2.retrieveFile && retrieveFileHandlers.add(options2.retrieveFile), options2.retrieveSourceMap && retrieveSourceMapHandlers.add(options2.retrieveSourceMap), () => resetInterceptor(runner, options2);
}
function supportRelativeURL(file, url2) {
  if (!file) return url2;
  const dir = posixDirname(slash(file)), match = /^\w+:\/\/[^/]*/.exec(dir);
  let protocol = match ? match[0] : "";
  const startPath = dir.slice(protocol.length);
  return protocol && /^\/\w:/.test(startPath) ? (protocol += "/", protocol + slash(posixResolve(startPath, url2))) : protocol + posixResolve(startPath, url2);
}
function getRunnerSourceMap(position) {
  for (const moduleGraph of evaluatedModulesCache) {
    const sourceMap = moduleGraph.getModuleSourceMapById(position.source);
    if (sourceMap)
      return {
        url: position.source,
        map: sourceMap,
        vite: true
      };
  }
  return null;
}
function retrieveFile(path4) {
  if (path4 in fileContentsCache) return fileContentsCache[path4];
  const content = retrieveFileFromHandlers(path4);
  return typeof content == "string" ? (fileContentsCache[path4] = content, content) : null;
}
function retrieveSourceMapURL(source) {
  const fileData = retrieveFile(source);
  if (!fileData) return null;
  const re = /\/\/[@#]\s*sourceMappingURL=([^\s'"]+)\s*$|\/\*[@#]\s*sourceMappingURL=[^\s*'"]+\s*\*\/\s*$/gm;
  let lastMatch, match;
  for (; match = re.exec(fileData); ) lastMatch = match;
  return lastMatch ? lastMatch[1] : null;
}
var reSourceMap = /^data:application\/json[^,]+base64,/;
function retrieveSourceMap(source) {
  const urlAndMap = retrieveSourceMapFromHandlers(source);
  if (urlAndMap) return urlAndMap;
  let sourceMappingURL = retrieveSourceMapURL(source);
  if (!sourceMappingURL) return null;
  let sourceMapData;
  if (reSourceMap.test(sourceMappingURL)) {
    const rawData = sourceMappingURL.slice(sourceMappingURL.indexOf(",") + 1);
    sourceMapData = Buffer.from(rawData, "base64").toString(), sourceMappingURL = source;
  } else
    sourceMappingURL = supportRelativeURL(source, sourceMappingURL), sourceMapData = retrieveFile(sourceMappingURL);
  return sourceMapData ? {
    url: sourceMappingURL,
    map: sourceMapData
  } : null;
}
function mapSourcePosition(position) {
  var _a2;
  if (!position.source) return position;
  let sourceMap = getRunnerSourceMap(position);
  if (sourceMap || (sourceMap = sourceMapCache[position.source]), !sourceMap) {
    const urlAndMap = retrieveSourceMap(position.source);
    if (urlAndMap && urlAndMap.map) {
      const url2 = urlAndMap.url;
      sourceMap = sourceMapCache[position.source] = {
        url: url2,
        map: new DecodedMap(
          typeof urlAndMap.map == "string" ? JSON.parse(urlAndMap.map) : urlAndMap.map,
          url2
        )
      };
      const contents = (_a2 = sourceMap.map) == null ? void 0 : _a2.map.sourcesContent;
      sourceMap.map && contents && sourceMap.map.resolvedSources.forEach((source, i) => {
        const content = contents[i];
        if (content && source && url2) {
          const contentUrl = supportRelativeURL(url2, source);
          fileContentsCache[contentUrl] = content;
        }
      });
    } else
      sourceMap = sourceMapCache[position.source] = {
        url: null,
        map: null
      };
  }
  if (sourceMap.map && sourceMap.url) {
    const originalPosition = getOriginalPosition(sourceMap.map, position);
    if (originalPosition && originalPosition.source != null)
      return originalPosition.source = supportRelativeURL(
        sourceMap.url,
        originalPosition.source
      ), sourceMap.vite && (originalPosition._vite = true), originalPosition;
  }
  return position;
}
function mapEvalOrigin(origin) {
  let match = /^eval at ([^(]+) \((.+):(\d+):(\d+)\)$/.exec(origin);
  if (match) {
    const position = mapSourcePosition({
      name: null,
      source: match[2],
      line: +match[3],
      column: +match[4] - 1
    });
    return `eval at ${match[1]} (${position.source}:${position.line}:${position.column + 1})`;
  }
  return match = /^eval at ([^(]+) \((.+)\)$/.exec(origin), match ? `eval at ${match[1]} (${mapEvalOrigin(match[2])})` : origin;
}
function CallSiteToString() {
  let fileName, fileLocation = "";
  if (this.isNative())
    fileLocation = "native";
  else {
    fileName = this.getScriptNameOrSourceURL(), !fileName && this.isEval() && (fileLocation = this.getEvalOrigin(), fileLocation += ", "), fileName ? fileLocation += fileName : fileLocation += "<anonymous>";
    const lineNumber = this.getLineNumber();
    if (lineNumber != null) {
      fileLocation += `:${lineNumber}`;
      const columnNumber = this.getColumnNumber();
      columnNumber && (fileLocation += `:${columnNumber}`);
    }
  }
  let line = "";
  const functionName = this.getFunctionName();
  let addSuffix = true;
  const isConstructor = this.isConstructor();
  if (this.isToplevel() || isConstructor)
    isConstructor ? line += `new ${functionName || "<anonymous>"}` : functionName ? line += functionName : (line += fileLocation, addSuffix = false);
  else {
    let typeName = this.getTypeName();
    typeName === "[object Object]" && (typeName = "null");
    const methodName = this.getMethodName();
    functionName ? (typeName && functionName.indexOf(typeName) !== 0 && (line += `${typeName}.`), line += functionName, methodName && functionName.indexOf(`.${methodName}`) !== functionName.length - methodName.length - 1 && (line += ` [as ${methodName}]`)) : line += `${typeName}.${methodName || "<anonymous>"}`;
  }
  return addSuffix && (line += ` (${fileLocation})`), line;
}
function cloneCallSite(frame) {
  const object = {};
  return Object.getOwnPropertyNames(Object.getPrototypeOf(frame)).forEach((name) => {
    const key = name;
    object[key] = /^(?:is|get)/.test(name) ? function() {
      return frame[key].call(frame);
    } : frame[key];
  }), object.toString = CallSiteToString, object;
}
function wrapCallSite(frame, state) {
  if (state === void 0 && (state = { nextPosition: null, curPosition: null }), frame.isNative())
    return state.curPosition = null, frame;
  const source = frame.getFileName() || frame.getScriptNameOrSourceURL();
  if (source) {
    const line = frame.getLineNumber();
    let column = frame.getColumnNumber() - 1;
    const headerLength = 62;
    line === 1 && column > headerLength && !frame.isEval() && (column -= headerLength);
    const position = mapSourcePosition({
      name: null,
      source,
      line,
      column
    });
    state.curPosition = position, frame = cloneCallSite(frame);
    const originalFunctionName = frame.getFunctionName;
    return frame.getFunctionName = function() {
      const name = state.nextPosition == null ? originalFunctionName() : state.nextPosition.name || originalFunctionName();
      return name === "eval" && "_vite" in position ? null : name;
    }, frame.getFileName = function() {
      return position.source ?? void 0;
    }, frame.getLineNumber = function() {
      return position.line;
    }, frame.getColumnNumber = function() {
      return position.column + 1;
    }, frame.getScriptNameOrSourceURL = function() {
      return position.source;
    }, frame;
  }
  let origin = frame.isEval() && frame.getEvalOrigin();
  return origin && (origin = mapEvalOrigin(origin), frame = cloneCallSite(frame), frame.getEvalOrigin = function() {
    return origin || void 0;
  }), frame;
}
function prepareStackTrace(error2, stack) {
  const name = error2.name || "Error", message = error2.message || "", errorString = `${name}: ${message}`, state = { nextPosition: null, curPosition: null }, processedStack = [];
  for (let i = stack.length - 1; i >= 0; i--)
    processedStack.push(`
    at ${wrapCallSite(stack[i], state)}`), state.nextPosition = state.curPosition;
  return state.curPosition = state.nextPosition = null, errorString + processedStack.reverse().join("");
}
function enableSourceMapSupport(runner) {
  if (runner.options.sourcemapInterceptor === "node") {
    if (typeof process > "u")
      throw new TypeError(
        `Cannot use "sourcemapInterceptor: 'node'" because global "process" variable is not available.`
      );
    if (typeof process.setSourceMapsEnabled != "function")
      throw new TypeError(
        `Cannot use "sourcemapInterceptor: 'node'" because "process.setSourceMapsEnabled" function is not available. Please use Node >= 16.6.0.`
      );
    const isEnabledAlready = process.sourceMapsEnabled ?? false;
    return process.setSourceMapsEnabled(true), () => !isEnabledAlready && process.setSourceMapsEnabled(false);
  }
  return interceptStackTrace(
    runner,
    typeof runner.options.sourcemapInterceptor == "object" ? runner.options.sourcemapInterceptor : void 0
  );
}
var ESModulesEvaluator = class {
  constructor() {
    __publicField(this, "startOffset", getAsyncFunctionDeclarationPaddingLineCount());
  }
  async runInlinedModule(context, code) {
    await new AsyncFunction(
      ssrModuleExportsKey,
      ssrImportMetaKey,
      ssrImportKey,
      ssrDynamicImportKey,
      ssrExportAllKey,
      // source map should already be inlined by Vite
      '"use strict";' + code
    )(
      context[ssrModuleExportsKey],
      context[ssrImportMetaKey],
      context[ssrImportKey],
      context[ssrDynamicImportKey],
      context[ssrExportAllKey]
    ), Object.seal(context[ssrModuleExportsKey]);
  }
  runExternalModule(filepath) {
    return import(filepath);
  }
};
var ModuleRunner = class {
  constructor(options2, evaluator = new ESModulesEvaluator(), debug2) {
    __publicField(this, "evaluatedModules");
    __publicField(this, "hmrClient");
    __publicField(this, "envProxy", new Proxy({}, {
      get(_, p2) {
        throw new Error(
          `[module runner] Dynamic access of "import.meta.env" is not supported. Please, use "import.meta.env.${String(p2)}" instead.`
        );
      }
    }));
    __publicField(this, "transport");
    __publicField(this, "resetSourceMapSupport");
    __publicField(this, "concurrentModuleNodePromises", /* @__PURE__ */ new Map());
    __publicField(this, "closed", false);
    var _a2, _b;
    if (this.options = options2, this.evaluator = evaluator, this.debug = debug2, this.evaluatedModules = options2.evaluatedModules ?? new EvaluatedModules(), this.transport = normalizeModuleRunnerTransport(options2.transport), options2.hmr !== false) {
      const optionsHmr = options2.hmr ?? true, resolvedHmrLogger = optionsHmr === true || optionsHmr.logger === void 0 ? hmrLogger : optionsHmr.logger === false ? silentConsole : optionsHmr.logger;
      if (this.hmrClient = new HMRClient(
        resolvedHmrLogger,
        this.transport,
        ({ acceptedPath }) => this.import(acceptedPath)
      ), !this.transport.connect)
        throw new Error(
          "HMR is not supported by this runner transport, but `hmr` option was set to true"
        );
      this.transport.connect(createHMRHandlerForRunner(this));
    } else
      (_b = (_a2 = this.transport).connect) == null ? void 0 : _b.call(_a2);
    options2.sourcemapInterceptor !== false && (this.resetSourceMapSupport = enableSourceMapSupport(this));
  }
  /**
   * URL to execute. Accepts file path, server path or id relative to the root.
   */
  async import(url2) {
    const fetchedModule = await this.cachedModule(url2);
    return await this.cachedRequest(url2, fetchedModule);
  }
  /**
   * Clear all caches including HMR listeners.
   */
  clearCache() {
    var _a2;
    this.evaluatedModules.clear(), (_a2 = this.hmrClient) == null ? void 0 : _a2.clear();
  }
  /**
   * Clears all caches, removes all HMR listeners, and resets source map support.
   * This method doesn't stop the HMR connection.
   */
  async close() {
    var _a2, _b, _c;
    (_a2 = this.resetSourceMapSupport) == null ? void 0 : _a2.call(this), this.clearCache(), this.hmrClient = void 0, this.closed = true, await ((_c = (_b = this.transport).disconnect) == null ? void 0 : _c.call(_b));
  }
  /**
   * Returns `true` if the runtime has been closed by calling `close()` method.
   */
  isClosed() {
    return this.closed;
  }
  processImport(exports, fetchResult, metadata) {
    if (!("externalize" in fetchResult))
      return exports;
    const { url: url2, type } = fetchResult;
    return type !== "module" && type !== "commonjs" || analyzeImportedModDifference(exports, url2, type, metadata), exports;
  }
  isCircularModule(mod) {
    for (const importedFile of mod.imports)
      if (mod.importers.has(importedFile))
        return true;
    return false;
  }
  isCircularImport(importers, moduleUrl, visited = /* @__PURE__ */ new Set()) {
    for (const importer of importers) {
      if (visited.has(importer))
        continue;
      if (visited.add(importer), importer === moduleUrl)
        return true;
      const mod = this.evaluatedModules.getModuleById(importer);
      if (mod && mod.importers.size && this.isCircularImport(mod.importers, moduleUrl, visited))
        return true;
    }
    return false;
  }
  async cachedRequest(url2, mod, callstack = [], metadata) {
    const meta = mod.meta, moduleId = meta.id, { importers } = mod, importee = callstack[callstack.length - 1];
    if (importee && importers.add(importee), (callstack.includes(moduleId) || this.isCircularModule(mod) || this.isCircularImport(importers, moduleId)) && mod.exports)
      return this.processImport(mod.exports, meta, metadata);
    let debugTimer;
    this.debug && (debugTimer = setTimeout(() => {
      const getStack = () => `stack:
${[...callstack, moduleId].reverse().map((p2) => `  - ${p2}`).join(`
`)}`;
      this.debug(
        `[module runner] module ${moduleId} takes over 2s to load.
${getStack()}`
      );
    }, 2e3));
    try {
      if (mod.promise)
        return this.processImport(await mod.promise, meta, metadata);
      const promise = this.directRequest(url2, mod, callstack);
      return mod.promise = promise, mod.evaluated = false, this.processImport(await promise, meta, metadata);
    } finally {
      mod.evaluated = true, debugTimer && clearTimeout(debugTimer);
    }
  }
  async cachedModule(url2, importer) {
    var _a2;
    let cached = this.concurrentModuleNodePromises.get(url2);
    if (cached)
      (_a2 = this.debug) == null ? void 0 : _a2.call(this, "[module runner] using cached module info for", url2);
    else {
      const cachedModule = this.evaluatedModules.getModuleByUrl(url2);
      cached = this.getModuleInformation(url2, importer, cachedModule).finally(
        () => {
          this.concurrentModuleNodePromises.delete(url2);
        }
      ), this.concurrentModuleNodePromises.set(url2, cached);
    }
    return cached;
  }
  async getModuleInformation(url2, importer, cachedModule) {
    var _a2;
    if (this.closed)
      throw new Error("Vite module runner has been closed.");
    (_a2 = this.debug) == null ? void 0 : _a2.call(this, "[module runner] fetching", url2);
    const isCached = !!(typeof cachedModule == "object" && cachedModule.meta), fetchedModule = (
      // fast return for established externalized pattern
      url2.startsWith("data:") ? { externalize: url2, type: "builtin" } : await this.transport.invoke("fetchModule", [
        url2,
        importer,
        {
          cached: isCached,
          startOffset: this.evaluator.startOffset
        }
      ])
    );
    if ("cache" in fetchedModule) {
      if (!cachedModule || !cachedModule.meta)
        throw new Error(
          `Module "${url2}" was mistakenly invalidated during fetch phase.`
        );
      return cachedModule;
    }
    const moduleId = "externalize" in fetchedModule ? fetchedModule.externalize : fetchedModule.id, moduleUrl = "url" in fetchedModule ? fetchedModule.url : url2, module = this.evaluatedModules.ensureModule(moduleId, moduleUrl);
    return "invalidate" in fetchedModule && fetchedModule.invalidate && this.evaluatedModules.invalidateModule(module), fetchedModule.url = moduleUrl, fetchedModule.id = moduleId, module.meta = fetchedModule, module;
  }
  // override is allowed, consider this a public API
  async directRequest(url2, mod, _callstack) {
    var _a2, _b;
    const fetchResult = mod.meta, moduleId = fetchResult.id, callstack = [..._callstack, moduleId], request = async (dep, metadata) => {
      const importer = "file" in fetchResult && fetchResult.file || moduleId, depMod = await this.cachedModule(dep, importer);
      return depMod.importers.add(moduleId), mod.imports.add(depMod.id), this.cachedRequest(dep, depMod, callstack, metadata);
    }, dynamicRequest = async (dep) => (dep = String(dep), dep[0] === "." && (dep = posixResolve(posixDirname(url2), dep)), request(dep, { isDynamicImport: true }));
    if ("externalize" in fetchResult) {
      const { externalize } = fetchResult;
      (_a2 = this.debug) == null ? void 0 : _a2.call(this, "[module runner] externalizing", externalize);
      const exports2 = await this.evaluator.runExternalModule(externalize);
      return mod.exports = exports2, exports2;
    }
    const { code, file } = fetchResult;
    if (code == null) {
      const importer = callstack[callstack.length - 2];
      throw new Error(
        `[module runner] Failed to load "${url2}"${importer ? ` imported from ${importer}` : ""}`
      );
    }
    const modulePath = cleanUrl(file || moduleId), href = posixPathToFileHref(modulePath), filename = modulePath, dirname22 = posixDirname(modulePath), meta = {
      filename: isWindows ? toWindowsPath(filename) : filename,
      dirname: isWindows ? toWindowsPath(dirname22) : dirname22,
      url: href,
      env: this.envProxy,
      resolve(_id, _parent) {
        throw new Error(
          '[module runner] "import.meta.resolve" is not supported.'
        );
      },
      // should be replaced during transformation
      glob() {
        throw new Error(
          '[module runner] "import.meta.glob" is statically replaced during file transformation. Make sure to reference it by the full name.'
        );
      }
    }, exports = /* @__PURE__ */ Object.create(null);
    Object.defineProperty(exports, Symbol.toStringTag, {
      value: "Module",
      enumerable: false,
      configurable: false
    }), mod.exports = exports;
    let hotContext;
    this.hmrClient && Object.defineProperty(meta, "hot", {
      enumerable: true,
      get: () => {
        var _a3;
        if (!this.hmrClient)
          throw new Error("[module runner] HMR client was closed.");
        return (_a3 = this.debug) == null ? void 0 : _a3.call(this, "[module runner] creating hmr context for", mod.url), hotContext || (hotContext = new HMRContext(this.hmrClient, mod.url)), hotContext;
      },
      set: (value2) => {
        hotContext = value2;
      }
    });
    const context = {
      [ssrImportKey]: request,
      [ssrDynamicImportKey]: dynamicRequest,
      [ssrModuleExportsKey]: exports,
      [ssrExportAllKey]: (obj) => exportAll(exports, obj),
      [ssrImportMetaKey]: meta
    };
    return (_b = this.debug) == null ? void 0 : _b.call(this, "[module runner] executing", href), await this.evaluator.runInlinedModule(context, code, mod), exports;
  }
};
function exportAll(exports, sourceModule) {
  if (exports !== sourceModule && !(isPrimitive(sourceModule) || Array.isArray(sourceModule) || sourceModule instanceof Promise)) {
    for (const key in sourceModule)
      if (key !== "default" && key !== "__esModule" && !(key in exports))
        try {
          Object.defineProperty(exports, key, {
            enumerable: true,
            configurable: true,
            get: () => sourceModule[key]
          });
        } catch {
        }
  }
}

// node_modules/tinyglobby/dist/index.mjs
var import_path = __toESM(require_path(), 1);
var import_fdir = __toESM(require_dist2(), 1);
var import_picomatch = __toESM(require_picomatch4(), 1);
var ONLY_PARENT_DIRECTORIES = /^(\/?\.\.)+$/;
function getPartialMatcher(patterns, options2) {
  const patternsCount = patterns.length;
  const patternsParts = Array(patternsCount);
  const regexes = Array(patternsCount);
  for (let i = 0; i < patternsCount; i++) {
    const parts = splitPattern(patterns[i]);
    patternsParts[i] = parts;
    const partsCount = parts.length;
    const partRegexes = Array(partsCount);
    for (let j = 0; j < partsCount; j++) partRegexes[j] = import_picomatch.default.makeRe(parts[j], options2);
    regexes[i] = partRegexes;
  }
  return (input) => {
    const inputParts = input.split("/");
    if (inputParts[0] === ".." && ONLY_PARENT_DIRECTORIES.test(input)) return true;
    for (let i = 0; i < patterns.length; i++) {
      const patternParts = patternsParts[i];
      const regex = regexes[i];
      const inputPatternCount = inputParts.length;
      const minParts = Math.min(inputPatternCount, patternParts.length);
      let j = 0;
      while (j < minParts) {
        const part = patternParts[j];
        if (part.includes("/")) return true;
        const match = regex[j].test(inputParts[j]);
        if (!match) break;
        if (part === "**") return true;
        j++;
      }
      if (j === inputPatternCount) return true;
    }
    return false;
  };
}
var splitPatternOptions = { parts: true };
function splitPattern(path$12) {
  var _result$parts;
  const result = import_picomatch.default.scan(path$12, splitPatternOptions);
  return ((_result$parts = result.parts) === null || _result$parts === void 0 ? void 0 : _result$parts.length) ? result.parts : [path$12];
}
var isWin = process.platform === "win32";
var POSIX_UNESCAPED_GLOB_SYMBOLS = new RegExp("(?<!\\\\)([()[\\]{}*?|]|^!|[!+@](?=\\()|\\\\(?![()[\\]{}!*+?@|]))", "g");
var WIN32_UNESCAPED_GLOB_SYMBOLS = new RegExp("(?<!\\\\)([()[\\]{}]|^!|[!+@](?=\\())", "g");
var escapePosixPath = (path$12) => path$12.replace(POSIX_UNESCAPED_GLOB_SYMBOLS, "\\$&");
var escapeWin32Path = (path$12) => path$12.replace(WIN32_UNESCAPED_GLOB_SYMBOLS, "\\$&");
var escapePath = isWin ? escapeWin32Path : escapePosixPath;
function isDynamicPattern(pattern, options2) {
  if ((options2 === null || options2 === void 0 ? void 0 : options2.caseSensitiveMatch) === false) return true;
  const scan = import_picomatch.default.scan(pattern);
  return scan.isGlob || scan.negated;
}
function log(...tasks) {
  console.log(`[tinyglobby ${(/* @__PURE__ */ new Date()).toLocaleTimeString("es")}]`, ...tasks);
}
var PARENT_DIRECTORY = /^(\/?\.\.)+/;
var ESCAPING_BACKSLASHES = /\\(?=[()[\]{}!*+?@|])/g;
var BACKSLASHES = /\\/g;
function normalizePattern(pattern, expandDirectories, cwd2, props, isIgnore) {
  let result = pattern;
  if (pattern.endsWith("/")) result = pattern.slice(0, -1);
  if (!result.endsWith("*") && expandDirectories) result += "/**";
  const escapedCwd = escapePath(cwd2);
  if (import_path.default.isAbsolute(result.replace(ESCAPING_BACKSLASHES, ""))) result = import_path.posix.relative(escapedCwd, result);
  else result = import_path.posix.normalize(result);
  const parentDirectoryMatch = PARENT_DIRECTORY.exec(result);
  const parts = splitPattern(result);
  if (parentDirectoryMatch === null || parentDirectoryMatch === void 0 ? void 0 : parentDirectoryMatch[0]) {
    const n2 = (parentDirectoryMatch[0].length + 1) / 3;
    let i = 0;
    const cwdParts = escapedCwd.split("/");
    while (i < n2 && parts[i + n2] === cwdParts[cwdParts.length + i - n2]) {
      result = result.slice(0, (n2 - i - 1) * 3) + result.slice((n2 - i) * 3 + parts[i + n2].length + 1) || ".";
      i++;
    }
    const potentialRoot = import_path.posix.join(cwd2, parentDirectoryMatch[0].slice(i * 3));
    if (!potentialRoot.startsWith(".") && props.root.length > potentialRoot.length) {
      props.root = potentialRoot;
      props.depthOffset = -n2 + i;
    }
  }
  if (!isIgnore && props.depthOffset >= 0) {
    var _props$commonPath;
    (_props$commonPath = props.commonPath) !== null && _props$commonPath !== void 0 || (props.commonPath = parts);
    const newCommonPath = [];
    const length = Math.min(props.commonPath.length, parts.length);
    for (let i = 0; i < length; i++) {
      const part = parts[i];
      if (part === "**" && !parts[i + 1]) {
        newCommonPath.pop();
        break;
      }
      if (part !== props.commonPath[i] || isDynamicPattern(part) || i === parts.length - 1) break;
      newCommonPath.push(part);
    }
    props.depthOffset = newCommonPath.length;
    props.commonPath = newCommonPath;
    props.root = newCommonPath.length > 0 ? import_path.default.posix.join(cwd2, ...newCommonPath) : cwd2;
  }
  return result;
}
function processPatterns({ patterns, ignore = [], expandDirectories = true }, cwd2, props) {
  if (typeof patterns === "string") patterns = [patterns];
  else if (!patterns) patterns = ["**/*"];
  if (typeof ignore === "string") ignore = [ignore];
  const matchPatterns2 = [];
  const ignorePatterns = [];
  for (const pattern of ignore) {
    if (!pattern) continue;
    if (pattern[0] !== "!" || pattern[1] === "(") ignorePatterns.push(normalizePattern(pattern, expandDirectories, cwd2, props, true));
  }
  for (const pattern of patterns) {
    if (!pattern) continue;
    if (pattern[0] !== "!" || pattern[1] === "(") matchPatterns2.push(normalizePattern(pattern, expandDirectories, cwd2, props, false));
    else if (pattern[1] !== "!" || pattern[2] === "(") ignorePatterns.push(normalizePattern(pattern.slice(1), expandDirectories, cwd2, props, true));
  }
  return {
    match: matchPatterns2,
    ignore: ignorePatterns
  };
}
function getRelativePath(path$12, cwd2, root) {
  return import_path.posix.relative(cwd2, `${root}/${path$12}`) || ".";
}
function processPath(path$12, cwd2, root, isDirectory2, absolute) {
  const relativePath = absolute ? path$12.slice(root === "/" ? 1 : root.length + 1) || "." : path$12;
  if (root === cwd2) return isDirectory2 && relativePath !== "." ? relativePath.slice(0, -1) : relativePath;
  return getRelativePath(relativePath, cwd2, root);
}
function formatPaths(paths, cwd2, root) {
  for (let i = paths.length - 1; i >= 0; i--) {
    const path$12 = paths[i];
    paths[i] = getRelativePath(path$12, cwd2, root) + (!path$12 || path$12.endsWith("/") ? "/" : "");
  }
  return paths;
}
function crawl(options2, cwd2, sync2) {
  if (process.env.TINYGLOBBY_DEBUG) options2.debug = true;
  if (options2.debug) log("globbing with options:", options2, "cwd:", cwd2);
  if (Array.isArray(options2.patterns) && options2.patterns.length === 0) return sync2 ? [] : Promise.resolve([]);
  const props = {
    root: cwd2,
    commonPath: null,
    depthOffset: 0
  };
  const processed = processPatterns(options2, cwd2, props);
  const nocase = options2.caseSensitiveMatch === false;
  if (options2.debug) log("internal processing patterns:", processed);
  const matcher = (0, import_picomatch.default)(processed.match, {
    dot: options2.dot,
    nocase,
    ignore: processed.ignore
  });
  const ignore = (0, import_picomatch.default)(processed.ignore, {
    dot: options2.dot,
    nocase
  });
  const partialMatcher = getPartialMatcher(processed.match, {
    dot: options2.dot,
    nocase
  });
  const fdirOptions = {
    filters: [options2.debug ? (p2, isDirectory2) => {
      const path$12 = processPath(p2, cwd2, props.root, isDirectory2, options2.absolute);
      const matches2 = matcher(path$12);
      if (matches2) log(`matched ${path$12}`);
      return matches2;
    } : (p2, isDirectory2) => matcher(processPath(p2, cwd2, props.root, isDirectory2, options2.absolute))],
    exclude: options2.debug ? (_, p2) => {
      const relativePath = processPath(p2, cwd2, props.root, true, true);
      const skipped = relativePath !== "." && !partialMatcher(relativePath) || ignore(relativePath);
      if (skipped) log(`skipped ${p2}`);
      else log(`crawling ${p2}`);
      return skipped;
    } : (_, p2) => {
      const relativePath = processPath(p2, cwd2, props.root, true, true);
      return relativePath !== "." && !partialMatcher(relativePath) || ignore(relativePath);
    },
    pathSeparator: "/",
    relativePaths: true,
    resolveSymlinks: true
  };
  if (options2.deep !== void 0) fdirOptions.maxDepth = Math.round(options2.deep - props.depthOffset);
  if (options2.absolute) {
    fdirOptions.relativePaths = false;
    fdirOptions.resolvePaths = true;
    fdirOptions.includeBasePath = true;
  }
  if (options2.followSymbolicLinks === false) {
    fdirOptions.resolveSymlinks = false;
    fdirOptions.excludeSymlinks = true;
  }
  if (options2.onlyDirectories) {
    fdirOptions.excludeFiles = true;
    fdirOptions.includeDirs = true;
  } else if (options2.onlyFiles === false) fdirOptions.includeDirs = true;
  props.root = props.root.replace(BACKSLASHES, "");
  const root = props.root;
  if (options2.debug) log("internal properties:", props);
  const api = new import_fdir.fdir(fdirOptions).crawl(root);
  if (cwd2 === root || options2.absolute) return sync2 ? api.sync() : api.withPromise();
  return sync2 ? formatPaths(api.sync(), cwd2, root) : api.withPromise().then((paths) => formatPaths(paths, cwd2, root));
}
async function glob(patternsOrOptions, options2) {
  if (patternsOrOptions && (options2 === null || options2 === void 0 ? void 0 : options2.patterns)) throw new Error("Cannot pass patterns as both an argument and an option");
  const opts = Array.isArray(patternsOrOptions) || typeof patternsOrOptions === "string" ? {
    ...options2,
    patterns: patternsOrOptions
  } : patternsOrOptions;
  const cwd2 = opts.cwd ? import_path.default.resolve(opts.cwd).replace(BACKSLASHES, "/") : process.cwd().replace(BACKSLASHES, "/");
  return crawl(opts, cwd2, false);
}
function globSync(patternsOrOptions, options2) {
  if (patternsOrOptions && (options2 === null || options2 === void 0 ? void 0 : options2.patterns)) throw new Error("Cannot pass patterns as both an argument and an option");
  const opts = Array.isArray(patternsOrOptions) || typeof patternsOrOptions === "string" ? {
    ...options2,
    patterns: patternsOrOptions
  } : patternsOrOptions;
  const cwd2 = opts.cwd ? import_path.default.resolve(opts.cwd).replace(BACKSLASHES, "/") : process.cwd().replace(BACKSLASHES, "/");
  return crawl(opts, cwd2, true);
}

// node_modules/vite/dist/node/chunks/dep-DBxKXgDP.js
var fs$8 = __toESM(require_node_fs(), 1);
var import_node_fs2 = __toESM(require_node_fs(), 1);
var import_node_path3 = __toESM(require_node_path(), 1);
var import_promises = __toESM(require_promises(), 1);
var import_node_url2 = __toESM(require_node_url(), 1);
var import_node_util = __toESM(require_node_util(), 1);
var import_node_perf_hooks = __toESM(require_node_perf_hooks(), 1);
var import_node_module = __toESM(require_node_module(), 1);
var import_node_crypto = __toESM(require_node_crypto(), 1);
var import_picomatch2 = __toESM(require_picomatch2(), 1);
var import_esbuild = __toESM(require_main(), 1);
var import_path2 = __toESM(require_path(), 1);
var import_fs = __toESM(require_fs(), 1);
var import_fdir2 = __toESM(require_dist(), 1);
var import_node_child_process = __toESM(require_node_child_process(), 1);
var import_node_http = __toESM(require_node_http(), 1);
var import_node_https = __toESM(require_node_https(), 1);
var import_tty = __toESM(require_tty(), 1);
var import_util = __toESM(require_util(), 1);
var import_net = __toESM(require_net(), 1);
var import_events = __toESM(require_events(), 1);
var import_url = __toESM(require_url(), 1);
var import_http = __toESM(require_http(), 1);
var import_stream = __toESM(require_stream(), 1);
var import_os = __toESM(require_os(), 1);
var import_child_process = __toESM(require_child_process(), 1);
var import_node_os = __toESM(require_node_os(), 1);
var import_node_net = __toESM(require_node_net(), 1);
var import_node_dns = __toESM(require_node_dns(), 1);
var import_node_buffer = __toESM(require_node_buffer(), 1);
var import_module = __toESM(require_module(), 1);
var import_node_readline = __toESM(require_node_readline(), 1);
var import_node_process = __toESM(require_node_process(), 1);
var import_node_events = __toESM(require_node_events(), 1);
var import_crypto = __toESM(require_crypto(), 1);
var import_node_assert = __toESM(require_node_assert(), 1);
var import_node_v8 = __toESM(require_node_v8(), 1);
var import_node_worker_threads = __toESM(require_node_worker_threads(), 1);
var import_https = __toESM(require_https(), 1);
var import_tls = __toESM(require_tls(), 1);
var import_zlib = __toESM(require_zlib(), 1);
var import_buffer = __toESM(require_buffer(), 1);
var import_assert = __toESM(require_assert(), 1);
var qs = __toESM(require_node_querystring(), 1);
var import_node_zlib = __toESM(require_node_zlib(), 1);
var import_node_module2 = __toESM(require_node_module(), 1);
var __require2 = (0, import_node_module2.createRequire)(import.meta.url);
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getDefaultExportFromCjs(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
}
var picocolors = { exports: {} };
var p = process || {};
var argv = p.argv || [];
var env$1 = p.env || {};
var isColorSupported = !(!!env$1.NO_COLOR || argv.includes("--no-color")) && (!!env$1.FORCE_COLOR || argv.includes("--color") || p.platform === "win32" || (p.stdout || {}).isTTY && env$1.TERM !== "dumb" || !!env$1.CI);
var formatter = (open2, close2, replace = open2) => (input) => {
  let string = "" + input, index = string.indexOf(close2, open2.length);
  return ~index ? open2 + replaceClose(string, close2, replace, index) + close2 : open2 + string + close2;
};
var replaceClose = (string, close2, replace, index) => {
  let result = "", cursor = 0;
  do {
    result += string.substring(cursor, index) + replace;
    cursor = index + close2.length;
    index = string.indexOf(close2, cursor);
  } while (~index);
  return result + string.substring(cursor);
};
var createColors = (enabled = isColorSupported) => {
  let f2 = enabled ? formatter : () => String;
  return {
    isColorSupported: enabled,
    reset: f2("\x1B[0m", "\x1B[0m"),
    bold: f2("\x1B[1m", "\x1B[22m", "\x1B[22m\x1B[1m"),
    dim: f2("\x1B[2m", "\x1B[22m", "\x1B[22m\x1B[2m"),
    italic: f2("\x1B[3m", "\x1B[23m"),
    underline: f2("\x1B[4m", "\x1B[24m"),
    inverse: f2("\x1B[7m", "\x1B[27m"),
    hidden: f2("\x1B[8m", "\x1B[28m"),
    strikethrough: f2("\x1B[9m", "\x1B[29m"),
    black: f2("\x1B[30m", "\x1B[39m"),
    red: f2("\x1B[31m", "\x1B[39m"),
    green: f2("\x1B[32m", "\x1B[39m"),
    yellow: f2("\x1B[33m", "\x1B[39m"),
    blue: f2("\x1B[34m", "\x1B[39m"),
    magenta: f2("\x1B[35m", "\x1B[39m"),
    cyan: f2("\x1B[36m", "\x1B[39m"),
    white: f2("\x1B[37m", "\x1B[39m"),
    gray: f2("\x1B[90m", "\x1B[39m"),
    bgBlack: f2("\x1B[40m", "\x1B[49m"),
    bgRed: f2("\x1B[41m", "\x1B[49m"),
    bgGreen: f2("\x1B[42m", "\x1B[49m"),
    bgYellow: f2("\x1B[43m", "\x1B[49m"),
    bgBlue: f2("\x1B[44m", "\x1B[49m"),
    bgMagenta: f2("\x1B[45m", "\x1B[49m"),
    bgCyan: f2("\x1B[46m", "\x1B[49m"),
    bgWhite: f2("\x1B[47m", "\x1B[49m"),
    blackBright: f2("\x1B[90m", "\x1B[39m"),
    redBright: f2("\x1B[91m", "\x1B[39m"),
    greenBright: f2("\x1B[92m", "\x1B[39m"),
    yellowBright: f2("\x1B[93m", "\x1B[39m"),
    blueBright: f2("\x1B[94m", "\x1B[39m"),
    magentaBright: f2("\x1B[95m", "\x1B[39m"),
    cyanBright: f2("\x1B[96m", "\x1B[39m"),
    whiteBright: f2("\x1B[97m", "\x1B[39m"),
    bgBlackBright: f2("\x1B[100m", "\x1B[49m"),
    bgRedBright: f2("\x1B[101m", "\x1B[49m"),
    bgGreenBright: f2("\x1B[102m", "\x1B[49m"),
    bgYellowBright: f2("\x1B[103m", "\x1B[49m"),
    bgBlueBright: f2("\x1B[104m", "\x1B[49m"),
    bgMagentaBright: f2("\x1B[105m", "\x1B[49m"),
    bgCyanBright: f2("\x1B[106m", "\x1B[49m"),
    bgWhiteBright: f2("\x1B[107m", "\x1B[49m")
  };
};
picocolors.exports = createColors();
picocolors.exports.createColors = createColors;
var picocolorsExports = picocolors.exports;
var colors$1 = getDefaultExportFromCjs(picocolorsExports);
var VALID_ID_PREFIX2 = `/@id/`;
var NULL_BYTE_PLACEHOLDER2 = `__x00__`;
var SOURCEMAPPING_URL2 = "sourceMa";
SOURCEMAPPING_URL2 += "ppingURL";
var MODULE_RUNNER_SOURCEMAPPING_SOURCE = "//# sourceMappingSource=vite-generated";
var ERR_OUTDATED_OPTIMIZED_DEP2 = "ERR_OUTDATED_OPTIMIZED_DEP";
var isWindows$3 = typeof process !== "undefined" && process.platform === "win32";
function wrapId$1(id) {
  return id.startsWith(VALID_ID_PREFIX2) ? id : VALID_ID_PREFIX2 + id.replace("\0", NULL_BYTE_PLACEHOLDER2);
}
function unwrapId$1(id) {
  return id.startsWith(VALID_ID_PREFIX2) ? id.slice(VALID_ID_PREFIX2.length).replace(NULL_BYTE_PLACEHOLDER2, "\0") : id;
}
var windowsSlashRE2 = /\\/g;
function slash$1(p2) {
  return p2.replace(windowsSlashRE2, "/");
}
var postfixRE2 = /[?#].*$/;
function cleanUrl2(url2) {
  return url2.replace(postfixRE2, "");
}
function splitFileAndPostfix(path4) {
  const file = cleanUrl2(path4);
  return { file, postfix: path4.slice(file.length) };
}
function withTrailingSlash(path4) {
  if (path4[path4.length - 1] !== "/") {
    return `${path4}/`;
  }
  return path4;
}
function promiseWithResolvers2() {
  let resolve4;
  let reject;
  const promise = new Promise((_resolve, _reject) => {
    resolve4 = _resolve;
    reject = _reject;
  });
  return { promise, resolve: resolve4, reject };
}
var WalkerBase$1 = class WalkerBase {
  constructor() {
    this.should_skip = false;
    this.should_remove = false;
    this.replacement = null;
    this.context = {
      skip: () => this.should_skip = true,
      remove: () => this.should_remove = true,
      replace: (node2) => this.replacement = node2
    };
  }
  /**
   *
   * @param {any} parent
   * @param {string} prop
   * @param {number} index
   * @param {BaseNode} node
   */
  replace(parent, prop, index, node2) {
    if (parent) {
      if (index !== null) {
        parent[prop][index] = node2;
      } else {
        parent[prop] = node2;
      }
    }
  }
  /**
   *
   * @param {any} parent
   * @param {string} prop
   * @param {number} index
   */
  remove(parent, prop, index) {
    if (parent) {
      if (index !== null) {
        parent[prop].splice(index, 1);
      } else {
        delete parent[prop];
      }
    }
  }
};
var SyncWalker$1 = class SyncWalker extends WalkerBase$1 {
  /**
   *
   * @param {SyncHandler} enter
   * @param {SyncHandler} leave
   */
  constructor(enter, leave) {
    super();
    this.enter = enter;
    this.leave = leave;
  }
  /**
   *
   * @param {BaseNode} node
   * @param {BaseNode} parent
   * @param {string} [prop]
   * @param {number} [index]
   * @returns {BaseNode}
   */
  visit(node2, parent, prop, index) {
    if (node2) {
      if (this.enter) {
        const _should_skip = this.should_skip;
        const _should_remove = this.should_remove;
        const _replacement = this.replacement;
        this.should_skip = false;
        this.should_remove = false;
        this.replacement = null;
        this.enter.call(this.context, node2, parent, prop, index);
        if (this.replacement) {
          node2 = this.replacement;
          this.replace(parent, prop, index, node2);
        }
        if (this.should_remove) {
          this.remove(parent, prop, index);
        }
        const skipped = this.should_skip;
        const removed = this.should_remove;
        this.should_skip = _should_skip;
        this.should_remove = _should_remove;
        this.replacement = _replacement;
        if (skipped) return node2;
        if (removed) return null;
      }
      for (const key in node2) {
        const value2 = node2[key];
        if (typeof value2 !== "object") {
          continue;
        } else if (Array.isArray(value2)) {
          for (let i = 0; i < value2.length; i += 1) {
            if (value2[i] !== null && typeof value2[i].type === "string") {
              if (!this.visit(value2[i], node2, key, i)) {
                i--;
              }
            }
          }
        } else if (value2 !== null && typeof value2.type === "string") {
          this.visit(value2, node2, key, null);
        }
      }
      if (this.leave) {
        const _replacement = this.replacement;
        const _should_remove = this.should_remove;
        this.replacement = null;
        this.should_remove = false;
        this.leave.call(this.context, node2, parent, prop, index);
        if (this.replacement) {
          node2 = this.replacement;
          this.replace(parent, prop, index, node2);
        }
        if (this.should_remove) {
          this.remove(parent, prop, index);
        }
        const removed = this.should_remove;
        this.replacement = _replacement;
        this.should_remove = _should_remove;
        if (removed) return null;
      }
    }
    return node2;
  }
};
function walk$2(ast, { enter, leave }) {
  const instance = new SyncWalker$1(enter, leave);
  return instance.visit(ast, null);
}
var extractors = {
  ArrayPattern(names, param) {
    for (const element of param.elements) {
      if (element)
        extractors[element.type](names, element);
    }
  },
  AssignmentPattern(names, param) {
    extractors[param.left.type](names, param.left);
  },
  Identifier(names, param) {
    names.push(param.name);
  },
  MemberExpression() {
  },
  ObjectPattern(names, param) {
    for (const prop of param.properties) {
      if (prop.type === "RestElement") {
        extractors.RestElement(names, prop);
      } else {
        extractors[prop.value.type](names, prop.value);
      }
    }
  },
  RestElement(names, param) {
    extractors[param.argument.type](names, param.argument);
  }
};
var extractAssignedNames = function extractAssignedNames2(param) {
  const names = [];
  extractors[param.type](names, param);
  return names;
};
var blockDeclarations = {
  const: true,
  let: true
};
var Scope = class {
  constructor(options2 = {}) {
    this.parent = options2.parent;
    this.isBlockScope = !!options2.block;
    this.declarations = /* @__PURE__ */ Object.create(null);
    if (options2.params) {
      options2.params.forEach((param) => {
        extractAssignedNames(param).forEach((name) => {
          this.declarations[name] = true;
        });
      });
    }
  }
  addDeclaration(node2, isBlockDeclaration, isVar) {
    if (!isBlockDeclaration && this.isBlockScope) {
      this.parent.addDeclaration(node2, isBlockDeclaration, isVar);
    } else if (node2.id) {
      extractAssignedNames(node2.id).forEach((name) => {
        this.declarations[name] = true;
      });
    }
  }
  contains(name) {
    return this.declarations[name] || (this.parent ? this.parent.contains(name) : false);
  }
};
var attachScopes = function attachScopes2(ast, propertyName = "scope") {
  let scope = new Scope();
  walk$2(ast, {
    enter(n2, parent) {
      const node2 = n2;
      if (/(?:Function|Class)Declaration/.test(node2.type)) {
        scope.addDeclaration(node2, false, false);
      }
      if (node2.type === "VariableDeclaration") {
        const { kind } = node2;
        const isBlockDeclaration = blockDeclarations[kind];
        node2.declarations.forEach((declaration) => {
          scope.addDeclaration(declaration, isBlockDeclaration, true);
        });
      }
      let newScope;
      if (node2.type.includes("Function")) {
        const func = node2;
        newScope = new Scope({
          parent: scope,
          block: false,
          params: func.params
        });
        if (func.type === "FunctionExpression" && func.id) {
          newScope.addDeclaration(func, false, false);
        }
      }
      if (/For(?:In|Of)?Statement/.test(node2.type)) {
        newScope = new Scope({
          parent: scope,
          block: true
        });
      }
      if (node2.type === "BlockStatement" && !parent.type.includes("Function")) {
        newScope = new Scope({
          parent: scope,
          block: true
        });
      }
      if (node2.type === "CatchClause") {
        newScope = new Scope({
          parent: scope,
          params: node2.param ? [node2.param] : [],
          block: true
        });
      }
      if (newScope) {
        Object.defineProperty(node2, propertyName, {
          value: newScope,
          configurable: true
        });
        scope = newScope;
      }
    },
    leave(n2) {
      const node2 = n2;
      if (node2[propertyName])
        scope = scope.parent;
    }
  });
  return scope;
};
function isArray(arg) {
  return Array.isArray(arg);
}
function ensureArray(thing) {
  if (isArray(thing))
    return thing;
  if (thing == null)
    return [];
  return [thing];
}
var normalizePathRegExp = new RegExp(`\\${import_path2.win32.sep}`, "g");
var normalizePath$5 = function normalizePath(filename) {
  return filename.replace(normalizePathRegExp, import_path2.posix.sep);
};
function getMatcherString$1(id, resolutionBase) {
  if (resolutionBase === false || (0, import_path2.isAbsolute)(id) || id.startsWith("**")) {
    return normalizePath$5(id);
  }
  const basePath = normalizePath$5((0, import_path2.resolve)(resolutionBase || "")).replace(/[-^$*+?.()|[\]{}]/g, "\\$&");
  return import_path2.posix.join(basePath, normalizePath$5(id));
}
var createFilter$2 = function createFilter(include, exclude, options2) {
  const resolutionBase = options2 && options2.resolve;
  const getMatcher = (id) => id instanceof RegExp ? id : {
    test: (what) => {
      const pattern = getMatcherString$1(id, resolutionBase);
      const fn = (0, import_picomatch2.default)(pattern, { dot: true });
      const result = fn(what);
      return result;
    }
  };
  const includeMatchers = ensureArray(include).map(getMatcher);
  const excludeMatchers = ensureArray(exclude).map(getMatcher);
  if (!includeMatchers.length && !excludeMatchers.length)
    return (id) => typeof id === "string" && !id.includes("\0");
  return function result(id) {
    if (typeof id !== "string")
      return false;
    if (id.includes("\0"))
      return false;
    const pathId = normalizePath$5(id);
    for (let i = 0; i < excludeMatchers.length; ++i) {
      const matcher = excludeMatchers[i];
      if (matcher instanceof RegExp) {
        matcher.lastIndex = 0;
      }
      if (matcher.test(pathId))
        return false;
    }
    for (let i = 0; i < includeMatchers.length; ++i) {
      const matcher = includeMatchers[i];
      if (matcher instanceof RegExp) {
        matcher.lastIndex = 0;
      }
      if (matcher.test(pathId))
        return true;
    }
    return !includeMatchers.length;
  };
};
var reservedWords = "break case class catch const continue debugger default delete do else export extends finally for function if import in instanceof let new return super switch this throw try typeof var void while with yield enum await implements package protected static interface private public";
var builtins = "arguments Infinity NaN undefined null true false eval uneval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent encodeURI encodeURIComponent escape unescape Object Function Boolean Symbol Error EvalError InternalError RangeError ReferenceError SyntaxError TypeError URIError Number Math Date String RegExp Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array Map Set WeakMap WeakSet SIMD ArrayBuffer DataView JSON Promise Generator GeneratorFunction Reflect Proxy Intl";
var forbiddenIdentifiers = new Set(`${reservedWords} ${builtins}`.split(" "));
forbiddenIdentifiers.add("");
var makeLegalIdentifier = function makeLegalIdentifier2(str) {
  let identifier = str.replace(/-(\w)/g, (_, letter) => letter.toUpperCase()).replace(/[^$_a-zA-Z0-9]/g, "_");
  if (/\d/.test(identifier[0]) || forbiddenIdentifiers.has(identifier)) {
    identifier = `_${identifier}`;
  }
  return identifier || "_";
};
function stringify$5(obj) {
  return (JSON.stringify(obj) || "undefined").replace(/[\u2028\u2029]/g, (char) => `\\u${`000${char.charCodeAt(0).toString(16)}`.slice(-4)}`);
}
function serializeArray(arr, indent, baseIndent) {
  let output = "[";
  const separator = indent ? `
${baseIndent}${indent}` : "";
  for (let i = 0; i < arr.length; i++) {
    const key = arr[i];
    output += `${i > 0 ? "," : ""}${separator}${serialize(key, indent, baseIndent + indent)}`;
  }
  return `${output}${indent ? `
${baseIndent}` : ""}]`;
}
function serializeObject(obj, indent, baseIndent) {
  let output = "{";
  const separator = indent ? `
${baseIndent}${indent}` : "";
  const entries = Object.entries(obj);
  for (let i = 0; i < entries.length; i++) {
    const [key, value2] = entries[i];
    const stringKey = makeLegalIdentifier(key) === key ? key : stringify$5(key);
    output += `${i > 0 ? "," : ""}${separator}${stringKey}:${indent ? " " : ""}${serialize(value2, indent, baseIndent + indent)}`;
  }
  return `${output}${indent ? `
${baseIndent}` : ""}}`;
}
function serialize(obj, indent, baseIndent) {
  if (typeof obj === "object" && obj !== null) {
    if (Array.isArray(obj))
      return serializeArray(obj, indent, baseIndent);
    if (obj instanceof Date)
      return `new Date(${obj.getTime()})`;
    if (obj instanceof RegExp)
      return obj.toString();
    return serializeObject(obj, indent, baseIndent);
  }
  if (typeof obj === "number") {
    if (obj === Infinity)
      return "Infinity";
    if (obj === -Infinity)
      return "-Infinity";
    if (obj === 0)
      return 1 / obj === Infinity ? "0" : "-0";
    if (obj !== obj)
      return "NaN";
  }
  if (typeof obj === "symbol") {
    const key = Symbol.keyFor(obj);
    if (key !== void 0)
      return `Symbol.for(${stringify$5(key)})`;
  }
  if (typeof obj === "bigint")
    return `${obj}n`;
  return stringify$5(obj);
}
var hasStringIsWellFormed = "isWellFormed" in String.prototype;
function isWellFormedString(input) {
  if (hasStringIsWellFormed)
    return input.isWellFormed();
  return !new RegExp("\\p{Surrogate}", "u").test(input);
}
var dataToEsm = function dataToEsm2(data, options2 = {}) {
  var _a2, _b;
  const t2 = options2.compact ? "" : "indent" in options2 ? options2.indent : "	";
  const _ = options2.compact ? "" : " ";
  const n2 = options2.compact ? "" : "\n";
  const declarationType = options2.preferConst ? "const" : "var";
  if (options2.namedExports === false || typeof data !== "object" || Array.isArray(data) || data instanceof Date || data instanceof RegExp || data === null) {
    const code = serialize(data, options2.compact ? null : t2, "");
    const magic = _ || (/^[{[\-\/]/.test(code) ? "" : " ");
    return `export default${magic}${code};`;
  }
  let maxUnderbarPrefixLength = 0;
  for (const key of Object.keys(data)) {
    const underbarPrefixLength = (_b = (_a2 = /^(_+)/.exec(key)) === null || _a2 === void 0 ? void 0 : _a2[0].length) !== null && _b !== void 0 ? _b : 0;
    if (underbarPrefixLength > maxUnderbarPrefixLength) {
      maxUnderbarPrefixLength = underbarPrefixLength;
    }
  }
  const arbitraryNamePrefix = `${"_".repeat(maxUnderbarPrefixLength + 1)}arbitrary`;
  let namedExportCode = "";
  const defaultExportRows = [];
  const arbitraryNameExportRows = [];
  for (const [key, value2] of Object.entries(data)) {
    if (key === makeLegalIdentifier(key)) {
      if (options2.objectShorthand)
        defaultExportRows.push(key);
      else
        defaultExportRows.push(`${key}:${_}${key}`);
      namedExportCode += `export ${declarationType} ${key}${_}=${_}${serialize(value2, options2.compact ? null : t2, "")};${n2}`;
    } else {
      defaultExportRows.push(`${stringify$5(key)}:${_}${serialize(value2, options2.compact ? null : t2, "")}`);
      if (options2.includeArbitraryNames && isWellFormedString(key)) {
        const variableName = `${arbitraryNamePrefix}${arbitraryNameExportRows.length}`;
        namedExportCode += `${declarationType} ${variableName}${_}=${_}${serialize(value2, options2.compact ? null : t2, "")};${n2}`;
        arbitraryNameExportRows.push(`${variableName} as ${JSON.stringify(key)}`);
      }
    }
  }
  const arbitraryExportCode = arbitraryNameExportRows.length > 0 ? `export${_}{${n2}${t2}${arbitraryNameExportRows.join(`,${n2}${t2}`)}${n2}};${n2}` : "";
  const defaultExportCode = `export default${_}{${n2}${t2}${defaultExportRows.join(`,${n2}${t2}`)}${n2}};${n2}`;
  return `${namedExportCode}${arbitraryExportCode}${defaultExportCode}`;
};
var path$a = import_path2.default;
var commondir = function(basedir, relfiles) {
  if (relfiles) {
    var files = relfiles.map(function(r2) {
      return path$a.resolve(basedir, r2);
    });
  } else {
    var files = basedir;
  }
  var res = files.slice(1).reduce(function(ps, file) {
    if (!file.match(/^([A-Za-z]:)?\/|\\/)) {
      throw new Error("relative path without a basedir");
    }
    var xs = file.split(/\/+|\\+/);
    for (var i = 0; ps[i] === xs[i] && i < Math.min(ps.length, xs.length); i++) ;
    return ps.slice(0, i);
  }, files[0].split(/\/+|\\+/));
  return res.length > 1 ? res.join("/") : "/";
};
var getCommonDir = getDefaultExportFromCjs(commondir);
var comma2 = ",".charCodeAt(0);
var semicolon = ";".charCodeAt(0);
var chars$1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
var intToChar2 = new Uint8Array(64);
var charToInt2 = new Uint8Array(128);
for (let i = 0; i < chars$1.length; i++) {
  const c = chars$1.charCodeAt(i);
  intToChar2[i] = c;
  charToInt2[c] = i;
}
function decodeInteger2(reader, relative2) {
  let value2 = 0;
  let shift = 0;
  let integer = 0;
  do {
    const c = reader.next();
    integer = charToInt2[c];
    value2 |= (integer & 31) << shift;
    shift += 5;
  } while (integer & 32);
  const shouldNegate = value2 & 1;
  value2 >>>= 1;
  if (shouldNegate) {
    value2 = -2147483648 | -value2;
  }
  return relative2 + value2;
}
function encodeInteger(builder, num, relative2) {
  let delta = num - relative2;
  delta = delta < 0 ? -delta << 1 | 1 : delta << 1;
  do {
    let clamped = delta & 31;
    delta >>>= 5;
    if (delta > 0)
      clamped |= 32;
    builder.write(intToChar2[clamped]);
  } while (delta > 0);
  return num;
}
function hasMoreVlq2(reader, max) {
  if (reader.pos >= max)
    return false;
  return reader.peek() !== comma2;
}
var bufLength = 1024 * 16;
var td = typeof TextDecoder !== "undefined" ? new TextDecoder() : typeof Buffer !== "undefined" ? {
  decode(buf) {
    const out = Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength);
    return out.toString();
  }
} : {
  decode(buf) {
    let out = "";
    for (let i = 0; i < buf.length; i++) {
      out += String.fromCharCode(buf[i]);
    }
    return out;
  }
};
var StringWriter = class {
  constructor() {
    this.pos = 0;
    this.out = "";
    this.buffer = new Uint8Array(bufLength);
  }
  write(v) {
    const { buffer } = this;
    buffer[this.pos++] = v;
    if (this.pos === bufLength) {
      this.out += td.decode(buffer);
      this.pos = 0;
    }
  }
  flush() {
    const { buffer, out, pos } = this;
    return pos > 0 ? out + td.decode(buffer.subarray(0, pos)) : out;
  }
};
var StringReader2 = class {
  constructor(buffer) {
    this.pos = 0;
    this.buffer = buffer;
  }
  next() {
    return this.buffer.charCodeAt(this.pos++);
  }
  peek() {
    return this.buffer.charCodeAt(this.pos);
  }
  indexOf(char) {
    const { buffer, pos } = this;
    const idx = buffer.indexOf(char, pos);
    return idx === -1 ? buffer.length : idx;
  }
};
function decode2(mappings) {
  const { length } = mappings;
  const reader = new StringReader2(mappings);
  const decoded = [];
  let genColumn = 0;
  let sourcesIndex = 0;
  let sourceLine = 0;
  let sourceColumn = 0;
  let namesIndex = 0;
  do {
    const semi = reader.indexOf(";");
    const line = [];
    let sorted = true;
    let lastCol = 0;
    genColumn = 0;
    while (reader.pos < semi) {
      let seg;
      genColumn = decodeInteger2(reader, genColumn);
      if (genColumn < lastCol)
        sorted = false;
      lastCol = genColumn;
      if (hasMoreVlq2(reader, semi)) {
        sourcesIndex = decodeInteger2(reader, sourcesIndex);
        sourceLine = decodeInteger2(reader, sourceLine);
        sourceColumn = decodeInteger2(reader, sourceColumn);
        if (hasMoreVlq2(reader, semi)) {
          namesIndex = decodeInteger2(reader, namesIndex);
          seg = [genColumn, sourcesIndex, sourceLine, sourceColumn, namesIndex];
        } else {
          seg = [genColumn, sourcesIndex, sourceLine, sourceColumn];
        }
      } else {
        seg = [genColumn];
      }
      line.push(seg);
      reader.pos++;
    }
    if (!sorted)
      sort2(line);
    decoded.push(line);
    reader.pos = semi + 1;
  } while (reader.pos <= length);
  return decoded;
}
function sort2(line) {
  line.sort(sortComparator$1);
}
function sortComparator$1(a, b) {
  return a[0] - b[0];
}
function encode$1(decoded) {
  const writer = new StringWriter();
  let sourcesIndex = 0;
  let sourceLine = 0;
  let sourceColumn = 0;
  let namesIndex = 0;
  for (let i = 0; i < decoded.length; i++) {
    const line = decoded[i];
    if (i > 0)
      writer.write(semicolon);
    if (line.length === 0)
      continue;
    let genColumn = 0;
    for (let j = 0; j < line.length; j++) {
      const segment = line[j];
      if (j > 0)
        writer.write(comma2);
      genColumn = encodeInteger(writer, segment[0], genColumn);
      if (segment.length === 1)
        continue;
      sourcesIndex = encodeInteger(writer, segment[1], sourcesIndex);
      sourceLine = encodeInteger(writer, segment[2], sourceLine);
      sourceColumn = encodeInteger(writer, segment[3], sourceColumn);
      if (segment.length === 4)
        continue;
      namesIndex = encodeInteger(writer, segment[4], namesIndex);
    }
  }
  return writer.flush();
}
var BitSet = class _BitSet {
  constructor(arg) {
    this.bits = arg instanceof _BitSet ? arg.bits.slice() : [];
  }
  add(n2) {
    this.bits[n2 >> 5] |= 1 << (n2 & 31);
  }
  has(n2) {
    return !!(this.bits[n2 >> 5] & 1 << (n2 & 31));
  }
};
var Chunk = class _Chunk {
  constructor(start, end, content) {
    this.start = start;
    this.end = end;
    this.original = content;
    this.intro = "";
    this.outro = "";
    this.content = content;
    this.storeName = false;
    this.edited = false;
    {
      this.previous = null;
      this.next = null;
    }
  }
  appendLeft(content) {
    this.outro += content;
  }
  appendRight(content) {
    this.intro = this.intro + content;
  }
  clone() {
    const chunk = new _Chunk(this.start, this.end, this.original);
    chunk.intro = this.intro;
    chunk.outro = this.outro;
    chunk.content = this.content;
    chunk.storeName = this.storeName;
    chunk.edited = this.edited;
    return chunk;
  }
  contains(index) {
    return this.start < index && index < this.end;
  }
  eachNext(fn) {
    let chunk = this;
    while (chunk) {
      fn(chunk);
      chunk = chunk.next;
    }
  }
  eachPrevious(fn) {
    let chunk = this;
    while (chunk) {
      fn(chunk);
      chunk = chunk.previous;
    }
  }
  edit(content, storeName, contentOnly) {
    this.content = content;
    if (!contentOnly) {
      this.intro = "";
      this.outro = "";
    }
    this.storeName = storeName;
    this.edited = true;
    return this;
  }
  prependLeft(content) {
    this.outro = content + this.outro;
  }
  prependRight(content) {
    this.intro = content + this.intro;
  }
  reset() {
    this.intro = "";
    this.outro = "";
    if (this.edited) {
      this.content = this.original;
      this.storeName = false;
      this.edited = false;
    }
  }
  split(index) {
    const sliceIndex = index - this.start;
    const originalBefore = this.original.slice(0, sliceIndex);
    const originalAfter = this.original.slice(sliceIndex);
    this.original = originalBefore;
    const newChunk = new _Chunk(index, this.end, originalAfter);
    newChunk.outro = this.outro;
    this.outro = "";
    this.end = index;
    if (this.edited) {
      newChunk.edit("", false);
      this.content = "";
    } else {
      this.content = originalBefore;
    }
    newChunk.next = this.next;
    if (newChunk.next) newChunk.next.previous = newChunk;
    newChunk.previous = this;
    this.next = newChunk;
    return newChunk;
  }
  toString() {
    return this.intro + this.content + this.outro;
  }
  trimEnd(rx) {
    this.outro = this.outro.replace(rx, "");
    if (this.outro.length) return true;
    const trimmed = this.content.replace(rx, "");
    if (trimmed.length) {
      if (trimmed !== this.content) {
        this.split(this.start + trimmed.length).edit("", void 0, true);
        if (this.edited) {
          this.edit(trimmed, this.storeName, true);
        }
      }
      return true;
    } else {
      this.edit("", void 0, true);
      this.intro = this.intro.replace(rx, "");
      if (this.intro.length) return true;
    }
  }
  trimStart(rx) {
    this.intro = this.intro.replace(rx, "");
    if (this.intro.length) return true;
    const trimmed = this.content.replace(rx, "");
    if (trimmed.length) {
      if (trimmed !== this.content) {
        const newChunk = this.split(this.end - trimmed.length);
        if (this.edited) {
          newChunk.edit(trimmed, this.storeName, true);
        }
        this.edit("", void 0, true);
      }
      return true;
    } else {
      this.edit("", void 0, true);
      this.outro = this.outro.replace(rx, "");
      if (this.outro.length) return true;
    }
  }
};
function getBtoa() {
  if (typeof globalThis !== "undefined" && typeof globalThis.btoa === "function") {
    return (str) => globalThis.btoa(unescape(encodeURIComponent(str)));
  } else if (typeof Buffer === "function") {
    return (str) => Buffer.from(str, "utf-8").toString("base64");
  } else {
    return () => {
      throw new Error("Unsupported environment: `window.btoa` or `Buffer` should be supported.");
    };
  }
}
var btoa$1 = getBtoa();
var SourceMap$1 = class SourceMap {
  constructor(properties) {
    this.version = 3;
    this.file = properties.file;
    this.sources = properties.sources;
    this.sourcesContent = properties.sourcesContent;
    this.names = properties.names;
    this.mappings = encode$1(properties.mappings);
    if (typeof properties.x_google_ignoreList !== "undefined") {
      this.x_google_ignoreList = properties.x_google_ignoreList;
    }
    if (typeof properties.debugId !== "undefined") {
      this.debugId = properties.debugId;
    }
  }
  toString() {
    return JSON.stringify(this);
  }
  toUrl() {
    return "data:application/json;charset=utf-8;base64," + btoa$1(this.toString());
  }
};
function guessIndent(code) {
  const lines = code.split("\n");
  const tabbed = lines.filter((line) => /^\t+/.test(line));
  const spaced = lines.filter((line) => /^ {2,}/.test(line));
  if (tabbed.length === 0 && spaced.length === 0) {
    return null;
  }
  if (tabbed.length >= spaced.length) {
    return "	";
  }
  const min2 = spaced.reduce((previous, current) => {
    const numSpaces = /^ +/.exec(current)[0].length;
    return Math.min(numSpaces, previous);
  }, Infinity);
  return new Array(min2 + 1).join(" ");
}
function getRelativePath2(from, to) {
  const fromParts = from.split(/[/\\]/);
  const toParts = to.split(/[/\\]/);
  fromParts.pop();
  while (fromParts[0] === toParts[0]) {
    fromParts.shift();
    toParts.shift();
  }
  if (fromParts.length) {
    let i = fromParts.length;
    while (i--) fromParts[i] = "..";
  }
  return fromParts.concat(toParts).join("/");
}
var toString$1 = Object.prototype.toString;
function isObject$2(thing) {
  return toString$1.call(thing) === "[object Object]";
}
function getLocator(source) {
  const originalLines = source.split("\n");
  const lineOffsets = [];
  for (let i = 0, pos = 0; i < originalLines.length; i++) {
    lineOffsets.push(pos);
    pos += originalLines[i].length + 1;
  }
  return function locate(index) {
    let i = 0;
    let j = lineOffsets.length;
    while (i < j) {
      const m2 = i + j >> 1;
      if (index < lineOffsets[m2]) {
        j = m2;
      } else {
        i = m2 + 1;
      }
    }
    const line = i - 1;
    const column = index - lineOffsets[line];
    return { line, column };
  };
}
var wordRegex = /\w/;
var Mappings = class {
  constructor(hires) {
    this.hires = hires;
    this.generatedCodeLine = 0;
    this.generatedCodeColumn = 0;
    this.raw = [];
    this.rawSegments = this.raw[this.generatedCodeLine] = [];
    this.pending = null;
  }
  addEdit(sourceIndex, content, loc, nameIndex) {
    if (content.length) {
      const contentLengthMinusOne = content.length - 1;
      let contentLineEnd = content.indexOf("\n", 0);
      let previousContentLineEnd = -1;
      while (contentLineEnd >= 0 && contentLengthMinusOne > contentLineEnd) {
        const segment2 = [this.generatedCodeColumn, sourceIndex, loc.line, loc.column];
        if (nameIndex >= 0) {
          segment2.push(nameIndex);
        }
        this.rawSegments.push(segment2);
        this.generatedCodeLine += 1;
        this.raw[this.generatedCodeLine] = this.rawSegments = [];
        this.generatedCodeColumn = 0;
        previousContentLineEnd = contentLineEnd;
        contentLineEnd = content.indexOf("\n", contentLineEnd + 1);
      }
      const segment = [this.generatedCodeColumn, sourceIndex, loc.line, loc.column];
      if (nameIndex >= 0) {
        segment.push(nameIndex);
      }
      this.rawSegments.push(segment);
      this.advance(content.slice(previousContentLineEnd + 1));
    } else if (this.pending) {
      this.rawSegments.push(this.pending);
      this.advance(content);
    }
    this.pending = null;
  }
  addUneditedChunk(sourceIndex, chunk, original, loc, sourcemapLocations) {
    let originalCharIndex = chunk.start;
    let first2 = true;
    let charInHiresBoundary = false;
    while (originalCharIndex < chunk.end) {
      if (original[originalCharIndex] === "\n") {
        loc.line += 1;
        loc.column = 0;
        this.generatedCodeLine += 1;
        this.raw[this.generatedCodeLine] = this.rawSegments = [];
        this.generatedCodeColumn = 0;
        first2 = true;
        charInHiresBoundary = false;
      } else {
        if (this.hires || first2 || sourcemapLocations.has(originalCharIndex)) {
          const segment = [this.generatedCodeColumn, sourceIndex, loc.line, loc.column];
          if (this.hires === "boundary") {
            if (wordRegex.test(original[originalCharIndex])) {
              if (!charInHiresBoundary) {
                this.rawSegments.push(segment);
                charInHiresBoundary = true;
              }
            } else {
              this.rawSegments.push(segment);
              charInHiresBoundary = false;
            }
          } else {
            this.rawSegments.push(segment);
          }
        }
        loc.column += 1;
        this.generatedCodeColumn += 1;
        first2 = false;
      }
      originalCharIndex += 1;
    }
    this.pending = null;
  }
  advance(str) {
    if (!str) return;
    const lines = str.split("\n");
    if (lines.length > 1) {
      for (let i = 0; i < lines.length - 1; i++) {
        this.generatedCodeLine++;
        this.raw[this.generatedCodeLine] = this.rawSegments = [];
      }
      this.generatedCodeColumn = 0;
    }
    this.generatedCodeColumn += lines[lines.length - 1].length;
  }
};
var n$1 = "\n";
var warned = {
  insertLeft: false,
  insertRight: false,
  storeName: false
};
var MagicString = class _MagicString {
  constructor(string, options2 = {}) {
    const chunk = new Chunk(0, string.length, string);
    Object.defineProperties(this, {
      original: { writable: true, value: string },
      outro: { writable: true, value: "" },
      intro: { writable: true, value: "" },
      firstChunk: { writable: true, value: chunk },
      lastChunk: { writable: true, value: chunk },
      lastSearchedChunk: { writable: true, value: chunk },
      byStart: { writable: true, value: {} },
      byEnd: { writable: true, value: {} },
      filename: { writable: true, value: options2.filename },
      indentExclusionRanges: { writable: true, value: options2.indentExclusionRanges },
      sourcemapLocations: { writable: true, value: new BitSet() },
      storedNames: { writable: true, value: {} },
      indentStr: { writable: true, value: void 0 },
      ignoreList: { writable: true, value: options2.ignoreList },
      offset: { writable: true, value: options2.offset || 0 }
    });
    this.byStart[0] = chunk;
    this.byEnd[string.length] = chunk;
  }
  addSourcemapLocation(char) {
    this.sourcemapLocations.add(char);
  }
  append(content) {
    if (typeof content !== "string") throw new TypeError("outro content must be a string");
    this.outro += content;
    return this;
  }
  appendLeft(index, content) {
    index = index + this.offset;
    if (typeof content !== "string") throw new TypeError("inserted content must be a string");
    this._split(index);
    const chunk = this.byEnd[index];
    if (chunk) {
      chunk.appendLeft(content);
    } else {
      this.intro += content;
    }
    return this;
  }
  appendRight(index, content) {
    index = index + this.offset;
    if (typeof content !== "string") throw new TypeError("inserted content must be a string");
    this._split(index);
    const chunk = this.byStart[index];
    if (chunk) {
      chunk.appendRight(content);
    } else {
      this.outro += content;
    }
    return this;
  }
  clone() {
    const cloned = new _MagicString(this.original, { filename: this.filename, offset: this.offset });
    let originalChunk = this.firstChunk;
    let clonedChunk = cloned.firstChunk = cloned.lastSearchedChunk = originalChunk.clone();
    while (originalChunk) {
      cloned.byStart[clonedChunk.start] = clonedChunk;
      cloned.byEnd[clonedChunk.end] = clonedChunk;
      const nextOriginalChunk = originalChunk.next;
      const nextClonedChunk = nextOriginalChunk && nextOriginalChunk.clone();
      if (nextClonedChunk) {
        clonedChunk.next = nextClonedChunk;
        nextClonedChunk.previous = clonedChunk;
        clonedChunk = nextClonedChunk;
      }
      originalChunk = nextOriginalChunk;
    }
    cloned.lastChunk = clonedChunk;
    if (this.indentExclusionRanges) {
      cloned.indentExclusionRanges = this.indentExclusionRanges.slice();
    }
    cloned.sourcemapLocations = new BitSet(this.sourcemapLocations);
    cloned.intro = this.intro;
    cloned.outro = this.outro;
    return cloned;
  }
  generateDecodedMap(options2) {
    options2 = options2 || {};
    const sourceIndex = 0;
    const names = Object.keys(this.storedNames);
    const mappings = new Mappings(options2.hires);
    const locate = getLocator(this.original);
    if (this.intro) {
      mappings.advance(this.intro);
    }
    this.firstChunk.eachNext((chunk) => {
      const loc = locate(chunk.start);
      if (chunk.intro.length) mappings.advance(chunk.intro);
      if (chunk.edited) {
        mappings.addEdit(
          sourceIndex,
          chunk.content,
          loc,
          chunk.storeName ? names.indexOf(chunk.original) : -1
        );
      } else {
        mappings.addUneditedChunk(sourceIndex, chunk, this.original, loc, this.sourcemapLocations);
      }
      if (chunk.outro.length) mappings.advance(chunk.outro);
    });
    return {
      file: options2.file ? options2.file.split(/[/\\]/).pop() : void 0,
      sources: [
        options2.source ? getRelativePath2(options2.file || "", options2.source) : options2.file || ""
      ],
      sourcesContent: options2.includeContent ? [this.original] : void 0,
      names,
      mappings: mappings.raw,
      x_google_ignoreList: this.ignoreList ? [sourceIndex] : void 0
    };
  }
  generateMap(options2) {
    return new SourceMap$1(this.generateDecodedMap(options2));
  }
  _ensureindentStr() {
    if (this.indentStr === void 0) {
      this.indentStr = guessIndent(this.original);
    }
  }
  _getRawIndentString() {
    this._ensureindentStr();
    return this.indentStr;
  }
  getIndentString() {
    this._ensureindentStr();
    return this.indentStr === null ? "	" : this.indentStr;
  }
  indent(indentStr, options2) {
    const pattern = /^[^\r\n]/gm;
    if (isObject$2(indentStr)) {
      options2 = indentStr;
      indentStr = void 0;
    }
    if (indentStr === void 0) {
      this._ensureindentStr();
      indentStr = this.indentStr || "	";
    }
    if (indentStr === "") return this;
    options2 = options2 || {};
    const isExcluded = {};
    if (options2.exclude) {
      const exclusions = typeof options2.exclude[0] === "number" ? [options2.exclude] : options2.exclude;
      exclusions.forEach((exclusion) => {
        for (let i = exclusion[0]; i < exclusion[1]; i += 1) {
          isExcluded[i] = true;
        }
      });
    }
    let shouldIndentNextCharacter = options2.indentStart !== false;
    const replacer = (match) => {
      if (shouldIndentNextCharacter) return `${indentStr}${match}`;
      shouldIndentNextCharacter = true;
      return match;
    };
    this.intro = this.intro.replace(pattern, replacer);
    let charIndex = 0;
    let chunk = this.firstChunk;
    while (chunk) {
      const end = chunk.end;
      if (chunk.edited) {
        if (!isExcluded[charIndex]) {
          chunk.content = chunk.content.replace(pattern, replacer);
          if (chunk.content.length) {
            shouldIndentNextCharacter = chunk.content[chunk.content.length - 1] === "\n";
          }
        }
      } else {
        charIndex = chunk.start;
        while (charIndex < end) {
          if (!isExcluded[charIndex]) {
            const char = this.original[charIndex];
            if (char === "\n") {
              shouldIndentNextCharacter = true;
            } else if (char !== "\r" && shouldIndentNextCharacter) {
              shouldIndentNextCharacter = false;
              if (charIndex === chunk.start) {
                chunk.prependRight(indentStr);
              } else {
                this._splitChunk(chunk, charIndex);
                chunk = chunk.next;
                chunk.prependRight(indentStr);
              }
            }
          }
          charIndex += 1;
        }
      }
      charIndex = chunk.end;
      chunk = chunk.next;
    }
    this.outro = this.outro.replace(pattern, replacer);
    return this;
  }
  insert() {
    throw new Error(
      "magicString.insert(...) is deprecated. Use prependRight(...) or appendLeft(...)"
    );
  }
  insertLeft(index, content) {
    if (!warned.insertLeft) {
      console.warn(
        "magicString.insertLeft(...) is deprecated. Use magicString.appendLeft(...) instead"
      );
      warned.insertLeft = true;
    }
    return this.appendLeft(index, content);
  }
  insertRight(index, content) {
    if (!warned.insertRight) {
      console.warn(
        "magicString.insertRight(...) is deprecated. Use magicString.prependRight(...) instead"
      );
      warned.insertRight = true;
    }
    return this.prependRight(index, content);
  }
  move(start, end, index) {
    start = start + this.offset;
    end = end + this.offset;
    index = index + this.offset;
    if (index >= start && index <= end) throw new Error("Cannot move a selection inside itself");
    this._split(start);
    this._split(end);
    this._split(index);
    const first2 = this.byStart[start];
    const last = this.byEnd[end];
    const oldLeft = first2.previous;
    const oldRight = last.next;
    const newRight = this.byStart[index];
    if (!newRight && last === this.lastChunk) return this;
    const newLeft = newRight ? newRight.previous : this.lastChunk;
    if (oldLeft) oldLeft.next = oldRight;
    if (oldRight) oldRight.previous = oldLeft;
    if (newLeft) newLeft.next = first2;
    if (newRight) newRight.previous = last;
    if (!first2.previous) this.firstChunk = last.next;
    if (!last.next) {
      this.lastChunk = first2.previous;
      this.lastChunk.next = null;
    }
    first2.previous = newLeft;
    last.next = newRight || null;
    if (!newLeft) this.firstChunk = first2;
    if (!newRight) this.lastChunk = last;
    return this;
  }
  overwrite(start, end, content, options2) {
    options2 = options2 || {};
    return this.update(start, end, content, { ...options2, overwrite: !options2.contentOnly });
  }
  update(start, end, content, options2) {
    start = start + this.offset;
    end = end + this.offset;
    if (typeof content !== "string") throw new TypeError("replacement content must be a string");
    if (this.original.length !== 0) {
      while (start < 0) start += this.original.length;
      while (end < 0) end += this.original.length;
    }
    if (end > this.original.length) throw new Error("end is out of bounds");
    if (start === end)
      throw new Error(
        "Cannot overwrite a zero-length range – use appendLeft or prependRight instead"
      );
    this._split(start);
    this._split(end);
    if (options2 === true) {
      if (!warned.storeName) {
        console.warn(
          "The final argument to magicString.overwrite(...) should be an options object. See https://github.com/rich-harris/magic-string"
        );
        warned.storeName = true;
      }
      options2 = { storeName: true };
    }
    const storeName = options2 !== void 0 ? options2.storeName : false;
    const overwrite = options2 !== void 0 ? options2.overwrite : false;
    if (storeName) {
      const original = this.original.slice(start, end);
      Object.defineProperty(this.storedNames, original, {
        writable: true,
        value: true,
        enumerable: true
      });
    }
    const first2 = this.byStart[start];
    const last = this.byEnd[end];
    if (first2) {
      let chunk = first2;
      while (chunk !== last) {
        if (chunk.next !== this.byStart[chunk.end]) {
          throw new Error("Cannot overwrite across a split point");
        }
        chunk = chunk.next;
        chunk.edit("", false);
      }
      first2.edit(content, storeName, !overwrite);
    } else {
      const newChunk = new Chunk(start, end, "").edit(content, storeName);
      last.next = newChunk;
      newChunk.previous = last;
    }
    return this;
  }
  prepend(content) {
    if (typeof content !== "string") throw new TypeError("outro content must be a string");
    this.intro = content + this.intro;
    return this;
  }
  prependLeft(index, content) {
    index = index + this.offset;
    if (typeof content !== "string") throw new TypeError("inserted content must be a string");
    this._split(index);
    const chunk = this.byEnd[index];
    if (chunk) {
      chunk.prependLeft(content);
    } else {
      this.intro = content + this.intro;
    }
    return this;
  }
  prependRight(index, content) {
    index = index + this.offset;
    if (typeof content !== "string") throw new TypeError("inserted content must be a string");
    this._split(index);
    const chunk = this.byStart[index];
    if (chunk) {
      chunk.prependRight(content);
    } else {
      this.outro = content + this.outro;
    }
    return this;
  }
  remove(start, end) {
    start = start + this.offset;
    end = end + this.offset;
    if (this.original.length !== 0) {
      while (start < 0) start += this.original.length;
      while (end < 0) end += this.original.length;
    }
    if (start === end) return this;
    if (start < 0 || end > this.original.length) throw new Error("Character is out of bounds");
    if (start > end) throw new Error("end must be greater than start");
    this._split(start);
    this._split(end);
    let chunk = this.byStart[start];
    while (chunk) {
      chunk.intro = "";
      chunk.outro = "";
      chunk.edit("");
      chunk = end > chunk.end ? this.byStart[chunk.end] : null;
    }
    return this;
  }
  reset(start, end) {
    start = start + this.offset;
    end = end + this.offset;
    if (this.original.length !== 0) {
      while (start < 0) start += this.original.length;
      while (end < 0) end += this.original.length;
    }
    if (start === end) return this;
    if (start < 0 || end > this.original.length) throw new Error("Character is out of bounds");
    if (start > end) throw new Error("end must be greater than start");
    this._split(start);
    this._split(end);
    let chunk = this.byStart[start];
    while (chunk) {
      chunk.reset();
      chunk = end > chunk.end ? this.byStart[chunk.end] : null;
    }
    return this;
  }
  lastChar() {
    if (this.outro.length) return this.outro[this.outro.length - 1];
    let chunk = this.lastChunk;
    do {
      if (chunk.outro.length) return chunk.outro[chunk.outro.length - 1];
      if (chunk.content.length) return chunk.content[chunk.content.length - 1];
      if (chunk.intro.length) return chunk.intro[chunk.intro.length - 1];
    } while (chunk = chunk.previous);
    if (this.intro.length) return this.intro[this.intro.length - 1];
    return "";
  }
  lastLine() {
    let lineIndex = this.outro.lastIndexOf(n$1);
    if (lineIndex !== -1) return this.outro.substr(lineIndex + 1);
    let lineStr = this.outro;
    let chunk = this.lastChunk;
    do {
      if (chunk.outro.length > 0) {
        lineIndex = chunk.outro.lastIndexOf(n$1);
        if (lineIndex !== -1) return chunk.outro.substr(lineIndex + 1) + lineStr;
        lineStr = chunk.outro + lineStr;
      }
      if (chunk.content.length > 0) {
        lineIndex = chunk.content.lastIndexOf(n$1);
        if (lineIndex !== -1) return chunk.content.substr(lineIndex + 1) + lineStr;
        lineStr = chunk.content + lineStr;
      }
      if (chunk.intro.length > 0) {
        lineIndex = chunk.intro.lastIndexOf(n$1);
        if (lineIndex !== -1) return chunk.intro.substr(lineIndex + 1) + lineStr;
        lineStr = chunk.intro + lineStr;
      }
    } while (chunk = chunk.previous);
    lineIndex = this.intro.lastIndexOf(n$1);
    if (lineIndex !== -1) return this.intro.substr(lineIndex + 1) + lineStr;
    return this.intro + lineStr;
  }
  slice(start = 0, end = this.original.length - this.offset) {
    start = start + this.offset;
    end = end + this.offset;
    if (this.original.length !== 0) {
      while (start < 0) start += this.original.length;
      while (end < 0) end += this.original.length;
    }
    let result = "";
    let chunk = this.firstChunk;
    while (chunk && (chunk.start > start || chunk.end <= start)) {
      if (chunk.start < end && chunk.end >= end) {
        return result;
      }
      chunk = chunk.next;
    }
    if (chunk && chunk.edited && chunk.start !== start)
      throw new Error(`Cannot use replaced character ${start} as slice start anchor.`);
    const startChunk = chunk;
    while (chunk) {
      if (chunk.intro && (startChunk !== chunk || chunk.start === start)) {
        result += chunk.intro;
      }
      const containsEnd = chunk.start < end && chunk.end >= end;
      if (containsEnd && chunk.edited && chunk.end !== end)
        throw new Error(`Cannot use replaced character ${end} as slice end anchor.`);
      const sliceStart = startChunk === chunk ? start - chunk.start : 0;
      const sliceEnd = containsEnd ? chunk.content.length + end - chunk.end : chunk.content.length;
      result += chunk.content.slice(sliceStart, sliceEnd);
      if (chunk.outro && (!containsEnd || chunk.end === end)) {
        result += chunk.outro;
      }
      if (containsEnd) {
        break;
      }
      chunk = chunk.next;
    }
    return result;
  }
  // TODO deprecate this? not really very useful
  snip(start, end) {
    const clone2 = this.clone();
    clone2.remove(0, start);
    clone2.remove(end, clone2.original.length);
    return clone2;
  }
  _split(index) {
    if (this.byStart[index] || this.byEnd[index]) return;
    let chunk = this.lastSearchedChunk;
    const searchForward = index > chunk.end;
    while (chunk) {
      if (chunk.contains(index)) return this._splitChunk(chunk, index);
      chunk = searchForward ? this.byStart[chunk.end] : this.byEnd[chunk.start];
    }
  }
  _splitChunk(chunk, index) {
    if (chunk.edited && chunk.content.length) {
      const loc = getLocator(this.original)(index);
      throw new Error(
        `Cannot split a chunk that has already been edited (${loc.line}:${loc.column} – "${chunk.original}")`
      );
    }
    const newChunk = chunk.split(index);
    this.byEnd[index] = chunk;
    this.byStart[index] = newChunk;
    this.byEnd[newChunk.end] = newChunk;
    if (chunk === this.lastChunk) this.lastChunk = newChunk;
    this.lastSearchedChunk = chunk;
    return true;
  }
  toString() {
    let str = this.intro;
    let chunk = this.firstChunk;
    while (chunk) {
      str += chunk.toString();
      chunk = chunk.next;
    }
    return str + this.outro;
  }
  isEmpty() {
    let chunk = this.firstChunk;
    do {
      if (chunk.intro.length && chunk.intro.trim() || chunk.content.length && chunk.content.trim() || chunk.outro.length && chunk.outro.trim())
        return false;
    } while (chunk = chunk.next);
    return true;
  }
  length() {
    let chunk = this.firstChunk;
    let length = 0;
    do {
      length += chunk.intro.length + chunk.content.length + chunk.outro.length;
    } while (chunk = chunk.next);
    return length;
  }
  trimLines() {
    return this.trim("[\\r\\n]");
  }
  trim(charType) {
    return this.trimStart(charType).trimEnd(charType);
  }
  trimEndAborted(charType) {
    const rx = new RegExp((charType || "\\s") + "+$");
    this.outro = this.outro.replace(rx, "");
    if (this.outro.length) return true;
    let chunk = this.lastChunk;
    do {
      const end = chunk.end;
      const aborted = chunk.trimEnd(rx);
      if (chunk.end !== end) {
        if (this.lastChunk === chunk) {
          this.lastChunk = chunk.next;
        }
        this.byEnd[chunk.end] = chunk;
        this.byStart[chunk.next.start] = chunk.next;
        this.byEnd[chunk.next.end] = chunk.next;
      }
      if (aborted) return true;
      chunk = chunk.previous;
    } while (chunk);
    return false;
  }
  trimEnd(charType) {
    this.trimEndAborted(charType);
    return this;
  }
  trimStartAborted(charType) {
    const rx = new RegExp("^" + (charType || "\\s") + "+");
    this.intro = this.intro.replace(rx, "");
    if (this.intro.length) return true;
    let chunk = this.firstChunk;
    do {
      const end = chunk.end;
      const aborted = chunk.trimStart(rx);
      if (chunk.end !== end) {
        if (chunk === this.lastChunk) this.lastChunk = chunk.next;
        this.byEnd[chunk.end] = chunk;
        this.byStart[chunk.next.start] = chunk.next;
        this.byEnd[chunk.next.end] = chunk.next;
      }
      if (aborted) return true;
      chunk = chunk.next;
    } while (chunk);
    return false;
  }
  trimStart(charType) {
    this.trimStartAborted(charType);
    return this;
  }
  hasChanged() {
    return this.original !== this.toString();
  }
  _replaceRegexp(searchValue, replacement) {
    function getReplacement(match, str) {
      if (typeof replacement === "string") {
        return replacement.replace(/\$(\$|&|\d+)/g, (_, i) => {
          if (i === "$") return "$";
          if (i === "&") return match[0];
          const num = +i;
          if (num < match.length) return match[+i];
          return `$${i}`;
        });
      } else {
        return replacement(...match, match.index, str, match.groups);
      }
    }
    function matchAll2(re, str) {
      let match;
      const matches2 = [];
      while (match = re.exec(str)) {
        matches2.push(match);
      }
      return matches2;
    }
    if (searchValue.global) {
      const matches2 = matchAll2(searchValue, this.original);
      matches2.forEach((match) => {
        if (match.index != null) {
          const replacement2 = getReplacement(match, this.original);
          if (replacement2 !== match[0]) {
            this.overwrite(match.index, match.index + match[0].length, replacement2);
          }
        }
      });
    } else {
      const match = this.original.match(searchValue);
      if (match && match.index != null) {
        const replacement2 = getReplacement(match, this.original);
        if (replacement2 !== match[0]) {
          this.overwrite(match.index, match.index + match[0].length, replacement2);
        }
      }
    }
    return this;
  }
  _replaceString(string, replacement) {
    const { original } = this;
    const index = original.indexOf(string);
    if (index !== -1) {
      this.overwrite(index, index + string.length, replacement);
    }
    return this;
  }
  replace(searchValue, replacement) {
    if (typeof searchValue === "string") {
      return this._replaceString(searchValue, replacement);
    }
    return this._replaceRegexp(searchValue, replacement);
  }
  _replaceAllString(string, replacement) {
    const { original } = this;
    const stringLength = string.length;
    for (let index = original.indexOf(string); index !== -1; index = original.indexOf(string, index + stringLength)) {
      const previous = original.slice(index, index + stringLength);
      if (previous !== replacement) this.overwrite(index, index + stringLength, replacement);
    }
    return this;
  }
  replaceAll(searchValue, replacement) {
    if (typeof searchValue === "string") {
      return this._replaceAllString(searchValue, replacement);
    }
    if (!searchValue.global) {
      throw new TypeError(
        "MagicString.prototype.replaceAll called with a non-global RegExp argument"
      );
    }
    return this._replaceRegexp(searchValue, replacement);
  }
};
function isReference(node2, parent) {
  if (node2.type === "MemberExpression") {
    return !node2.computed && isReference(node2.object, node2);
  }
  if (node2.type === "Identifier") {
    if (!parent)
      return true;
    switch (parent.type) {
      // disregard `bar` in `foo.bar`
      case "MemberExpression":
        return parent.computed || node2 === parent.object;
      // disregard the `foo` in `class {foo(){}}` but keep it in `class {[foo](){}}`
      case "MethodDefinition":
        return parent.computed;
      // disregard the `foo` in `class {foo=bar}` but keep it in `class {[foo]=bar}` and `class {bar=foo}`
      case "FieldDefinition":
        return parent.computed || node2 === parent.value;
      // disregard the `bar` in `{ bar: foo }`, but keep it in `{ [bar]: foo }`
      case "Property":
        return parent.computed || node2 === parent.value;
      // disregard the `bar` in `export { foo as bar }` or
      // the foo in `import { foo as bar }`
      case "ExportSpecifier":
      case "ImportSpecifier":
        return node2 === parent.local;
      // disregard the `foo` in `foo: while (...) { ... break foo; ... continue foo;}`
      case "LabeledStatement":
      case "BreakStatement":
      case "ContinueStatement":
        return false;
      default:
        return true;
    }
  }
  return false;
}
var version$2 = "28.0.3";
var peerDependencies = {
  rollup: "^2.68.0||^3.0.0||^4.0.0"
};
function tryParse(parse4, code, id) {
  try {
    return parse4(code, { allowReturnOutsideFunction: true });
  } catch (err2) {
    err2.message += ` in ${id}`;
    throw err2;
  }
}
var firstpassGlobal = /\b(?:require|module|exports|global)\b/;
var firstpassNoGlobal = /\b(?:require|module|exports)\b/;
function hasCjsKeywords(code, ignoreGlobal) {
  const firstpass = ignoreGlobal ? firstpassNoGlobal : firstpassGlobal;
  return firstpass.test(code);
}
function analyzeTopLevelStatements(parse4, code, id) {
  const ast = tryParse(parse4, code, id);
  let isEsModule = false;
  let hasDefaultExport = false;
  let hasNamedExports = false;
  for (const node2 of ast.body) {
    switch (node2.type) {
      case "ExportDefaultDeclaration":
        isEsModule = true;
        hasDefaultExport = true;
        break;
      case "ExportNamedDeclaration":
        isEsModule = true;
        if (node2.declaration) {
          hasNamedExports = true;
        } else {
          for (const specifier of node2.specifiers) {
            if (specifier.exported.name === "default") {
              hasDefaultExport = true;
            } else {
              hasNamedExports = true;
            }
          }
        }
        break;
      case "ExportAllDeclaration":
        isEsModule = true;
        if (node2.exported && node2.exported.name === "default") {
          hasDefaultExport = true;
        } else {
          hasNamedExports = true;
        }
        break;
      case "ImportDeclaration":
        isEsModule = true;
        break;
    }
  }
  return { isEsModule, hasDefaultExport, hasNamedExports, ast };
}
function deconflict(scopes, globals, identifier) {
  let i = 1;
  let deconflicted = makeLegalIdentifier(identifier);
  const hasConflicts = () => scopes.some((scope) => scope.contains(deconflicted)) || globals.has(deconflicted);
  while (hasConflicts()) {
    deconflicted = makeLegalIdentifier(`${identifier}_${i}`);
    i += 1;
  }
  for (const scope of scopes) {
    scope.declarations[deconflicted] = true;
  }
  return deconflicted;
}
function getName(id) {
  const name = makeLegalIdentifier((0, import_path2.basename)(id, (0, import_path2.extname)(id)));
  if (name !== "index") {
    return name;
  }
  return makeLegalIdentifier((0, import_path2.basename)((0, import_path2.dirname)(id)));
}
function normalizePathSlashes(path4) {
  return path4.replace(/\\/g, "/");
}
var getVirtualPathForDynamicRequirePath = (path4, commonDir) => `/${normalizePathSlashes((0, import_path2.relative)(commonDir, path4))}`;
function capitalize(name) {
  return name[0].toUpperCase() + name.slice(1);
}
function getStrictRequiresFilter({ strictRequires }) {
  switch (strictRequires) {
    // eslint-disable-next-line no-undefined
    case void 0:
    case true:
      return { strictRequiresFilter: () => true, detectCyclesAndConditional: false };
    case "auto":
    case "debug":
    case null:
      return { strictRequiresFilter: () => false, detectCyclesAndConditional: true };
    case false:
      return { strictRequiresFilter: () => false, detectCyclesAndConditional: false };
    default:
      if (typeof strictRequires === "string" || Array.isArray(strictRequires)) {
        return {
          strictRequiresFilter: createFilter$2(strictRequires),
          detectCyclesAndConditional: false
        };
      }
      throw new Error('Unexpected value for "strictRequires" option.');
  }
}
function getPackageEntryPoint(dirPath) {
  let entryPoint = "index.js";
  try {
    if ((0, import_fs.existsSync)((0, import_path2.join)(dirPath, "package.json"))) {
      entryPoint = JSON.parse((0, import_fs.readFileSync)((0, import_path2.join)(dirPath, "package.json"), { encoding: "utf8" })).main || entryPoint;
    }
  } catch (ignored) {
  }
  return entryPoint;
}
function isDirectory$1(path4) {
  try {
    if ((0, import_fs.statSync)(path4).isDirectory()) return true;
  } catch (ignored) {
  }
  return false;
}
function getDynamicRequireModules(patterns, dynamicRequireRoot) {
  const dynamicRequireModules = /* @__PURE__ */ new Map();
  const dirNames = /* @__PURE__ */ new Set();
  for (const pattern of !patterns || Array.isArray(patterns) ? patterns || [] : [patterns]) {
    const isNegated = pattern.startsWith("!");
    const modifyMap = (targetPath, resolvedPath) => isNegated ? dynamicRequireModules.delete(targetPath) : dynamicRequireModules.set(targetPath, resolvedPath);
    for (const path4 of new import_fdir2.fdir().withBasePath().withDirs().glob(isNegated ? pattern.substr(1) : pattern).crawl().sync().sort((a, b) => a.localeCompare(b, "en"))) {
      const resolvedPath = (0, import_path2.resolve)(path4);
      const requirePath = normalizePathSlashes(resolvedPath);
      if (isDirectory$1(resolvedPath)) {
        dirNames.add(resolvedPath);
        const modulePath = (0, import_path2.resolve)((0, import_path2.join)(resolvedPath, getPackageEntryPoint(path4)));
        modifyMap(requirePath, modulePath);
        modifyMap(normalizePathSlashes(modulePath), modulePath);
      } else {
        dirNames.add((0, import_path2.dirname)(resolvedPath));
        modifyMap(requirePath, resolvedPath);
      }
    }
  }
  return {
    commonDir: dirNames.size ? getCommonDir([...dirNames, dynamicRequireRoot]) : null,
    dynamicRequireModules
  };
}
var FAILED_REQUIRE_ERROR = `throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');`;
var COMMONJS_REQUIRE_EXPORT = "commonjsRequire";
var CREATE_COMMONJS_REQUIRE_EXPORT = "createCommonjsRequire";
function getDynamicModuleRegistry(isDynamicRequireModulesEnabled, dynamicRequireModules, commonDir, ignoreDynamicRequires) {
  if (!isDynamicRequireModulesEnabled) {
    return `export function ${COMMONJS_REQUIRE_EXPORT}(path) {
	${FAILED_REQUIRE_ERROR}
}`;
  }
  const dynamicModuleImports = [...dynamicRequireModules.values()].map(
    (id, index) => `import ${id.endsWith(".json") ? `json${index}` : `{ __require as require${index} }`} from ${JSON.stringify(id)};`
  ).join("\n");
  const dynamicModuleProps = [...dynamicRequireModules.keys()].map(
    (id, index) => `		${JSON.stringify(getVirtualPathForDynamicRequirePath(id, commonDir))}: ${id.endsWith(".json") ? `function () { return json${index}; }` : `require${index}`}`
  ).join(",\n");
  return `${dynamicModuleImports}

var dynamicModules;

function getDynamicModules() {
	return dynamicModules || (dynamicModules = {
${dynamicModuleProps}
	});
}

export function ${CREATE_COMMONJS_REQUIRE_EXPORT}(originalModuleDir) {
	function handleRequire(path) {
		var resolvedPath = commonjsResolve(path, originalModuleDir);
		if (resolvedPath !== null) {
			return getDynamicModules()[resolvedPath]();
		}
		${ignoreDynamicRequires ? "return require(path);" : FAILED_REQUIRE_ERROR}
	}
	handleRequire.resolve = function (path) {
		var resolvedPath = commonjsResolve(path, originalModuleDir);
		if (resolvedPath !== null) {
			return resolvedPath;
		}
		return require.resolve(path);
	}
	return handleRequire;
}

function commonjsResolve (path, originalModuleDir) {
	var shouldTryNodeModules = isPossibleNodeModulesPath(path);
	path = normalize(path);
	var relPath;
	if (path[0] === '/') {
		originalModuleDir = '';
	}
	var modules = getDynamicModules();
	var checkedExtensions = ['', '.js', '.json'];
	while (true) {
		if (!shouldTryNodeModules) {
			relPath = normalize(originalModuleDir + '/' + path);
		} else {
			relPath = normalize(originalModuleDir + '/node_modules/' + path);
		}

		if (relPath.endsWith('/..')) {
			break; // Travelled too far up, avoid infinite loop
		}

		for (var extensionIndex = 0; extensionIndex < checkedExtensions.length; extensionIndex++) {
			var resolvedPath = relPath + checkedExtensions[extensionIndex];
			if (modules[resolvedPath]) {
				return resolvedPath;
			}
		}
		if (!shouldTryNodeModules) break;
		var nextDir = normalize(originalModuleDir + '/..');
		if (nextDir === originalModuleDir) break;
		originalModuleDir = nextDir;
	}
	return null;
}

function isPossibleNodeModulesPath (modulePath) {
	var c0 = modulePath[0];
	if (c0 === '/' || c0 === '\\\\') return false;
	var c1 = modulePath[1], c2 = modulePath[2];
	if ((c0 === '.' && (!c1 || c1 === '/' || c1 === '\\\\')) ||
		(c0 === '.' && c1 === '.' && (!c2 || c2 === '/' || c2 === '\\\\'))) return false;
	if (c1 === ':' && (c2 === '/' || c2 === '\\\\')) return false;
	return true;
}

function normalize (path) {
	path = path.replace(/\\\\/g, '/');
	var parts = path.split('/');
	var slashed = parts[0] === '';
	for (var i = 1; i < parts.length; i++) {
		if (parts[i] === '.' || parts[i] === '') {
			parts.splice(i--, 1);
		}
	}
	for (var i = 1; i < parts.length; i++) {
		if (parts[i] !== '..') continue;
		if (i > 0 && parts[i - 1] !== '..' && parts[i - 1] !== '.') {
			parts.splice(--i, 2);
			i--;
		}
	}
	path = parts.join('/');
	if (slashed && path[0] !== '/') path = '/' + path;
	else if (path.length === 0) path = '.';
	return path;
}`;
}
var isWrappedId = (id, suffix) => id.endsWith(suffix);
var wrapId = (id, suffix) => `\0${id}${suffix}`;
var unwrapId2 = (wrappedId, suffix) => wrappedId.slice(1, -suffix.length);
var PROXY_SUFFIX = "?commonjs-proxy";
var WRAPPED_SUFFIX = "?commonjs-wrapped";
var EXTERNAL_SUFFIX = "?commonjs-external";
var EXPORTS_SUFFIX = "?commonjs-exports";
var MODULE_SUFFIX = "?commonjs-module";
var ENTRY_SUFFIX = "?commonjs-entry";
var ES_IMPORT_SUFFIX = "?commonjs-es-import";
var DYNAMIC_MODULES_ID = "\0commonjs-dynamic-modules";
var HELPERS_ID = "\0commonjsHelpers.js";
var IS_WRAPPED_COMMONJS = "withRequireFunction";
var HELPERS = `
export var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

export function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

export function getDefaultExportFromNamespaceIfPresent (n) {
	return n && Object.prototype.hasOwnProperty.call(n, 'default') ? n['default'] : n;
}

export function getDefaultExportFromNamespaceIfNotNamed (n) {
	return n && Object.prototype.hasOwnProperty.call(n, 'default') && Object.keys(n).length === 1 ? n['default'] : n;
}

export function getAugmentedNamespace(n) {
  if (Object.prototype.hasOwnProperty.call(n, '__esModule')) return n;
  var f = n.default;
	if (typeof f == "function") {
		var a = function a () {
			if (this instanceof a) {
        return Reflect.construct(f, arguments, this.constructor);
			}
			return f.apply(this, arguments);
		};
		a.prototype = f.prototype;
  } else a = {};
  Object.defineProperty(a, '__esModule', {value: true});
	Object.keys(n).forEach(function (k) {
		var d = Object.getOwnPropertyDescriptor(n, k);
		Object.defineProperty(a, k, d.get ? d : {
			enumerable: true,
			get: function () {
				return n[k];
			}
		});
	});
	return a;
}
`;
function getHelpersModule() {
  return HELPERS;
}
function getUnknownRequireProxy(id, requireReturnsDefault) {
  if (requireReturnsDefault === true || id.endsWith(".json")) {
    return `export { default } from ${JSON.stringify(id)};`;
  }
  const name = getName(id);
  const exported = requireReturnsDefault === "auto" ? `import { getDefaultExportFromNamespaceIfNotNamed } from "${HELPERS_ID}"; export default /*@__PURE__*/getDefaultExportFromNamespaceIfNotNamed(${name});` : requireReturnsDefault === "preferred" ? `import { getDefaultExportFromNamespaceIfPresent } from "${HELPERS_ID}"; export default /*@__PURE__*/getDefaultExportFromNamespaceIfPresent(${name});` : !requireReturnsDefault ? `import { getAugmentedNamespace } from "${HELPERS_ID}"; export default /*@__PURE__*/getAugmentedNamespace(${name});` : `export default ${name};`;
  return `import * as ${name} from ${JSON.stringify(id)}; ${exported}`;
}
async function getStaticRequireProxy(id, requireReturnsDefault, loadModule) {
  const name = getName(id);
  const {
    meta: { commonjs: commonjsMeta }
  } = await loadModule({ id });
  if (!commonjsMeta) {
    return getUnknownRequireProxy(id, requireReturnsDefault);
  }
  if (commonjsMeta.isCommonJS) {
    return `export { __moduleExports as default } from ${JSON.stringify(id)};`;
  }
  if (!requireReturnsDefault) {
    return `import { getAugmentedNamespace } from "${HELPERS_ID}"; import * as ${name} from ${JSON.stringify(
      id
    )}; export default /*@__PURE__*/getAugmentedNamespace(${name});`;
  }
  if (requireReturnsDefault !== true && (requireReturnsDefault === "namespace" || !commonjsMeta.hasDefaultExport || requireReturnsDefault === "auto" && commonjsMeta.hasNamedExports)) {
    return `import * as ${name} from ${JSON.stringify(id)}; export default ${name};`;
  }
  return `export { default } from ${JSON.stringify(id)};`;
}
function getEntryProxy(id, defaultIsModuleExports, getModuleInfo, shebang) {
  const {
    meta: { commonjs: commonjsMeta },
    hasDefaultExport
  } = getModuleInfo(id);
  if (!commonjsMeta || commonjsMeta.isCommonJS !== IS_WRAPPED_COMMONJS) {
    const stringifiedId = JSON.stringify(id);
    let code = `export * from ${stringifiedId};`;
    if (hasDefaultExport) {
      code += `export { default } from ${stringifiedId};`;
    }
    return shebang + code;
  }
  const result = getEsImportProxy(id, defaultIsModuleExports, true);
  return {
    ...result,
    code: shebang + result.code
  };
}
function getEsImportProxy(id, defaultIsModuleExports, moduleSideEffects) {
  const name = getName(id);
  const exportsName = `${name}Exports`;
  const requireModule = `require${capitalize(name)}`;
  let code = `import { getDefaultExportFromCjs } from "${HELPERS_ID}";
import { __require as ${requireModule} } from ${JSON.stringify(id)};
var ${exportsName} = ${moduleSideEffects ? "" : "/*@__PURE__*/ "}${requireModule}();
export { ${exportsName} as __moduleExports };`;
  if (defaultIsModuleExports === true) {
    code += `
export { ${exportsName} as default };`;
  } else if (defaultIsModuleExports === false) {
    code += `
export default ${exportsName}.default;`;
  } else {
    code += `
export default /*@__PURE__*/getDefaultExportFromCjs(${exportsName});`;
  }
  return {
    code,
    syntheticNamedExports: "__moduleExports"
  };
}
function getCandidatesForExtension(resolved, extension2) {
  return [resolved + extension2, `${resolved}${import_path2.sep}index${extension2}`];
}
function getCandidates(resolved, extensions2) {
  return extensions2.reduce(
    (paths, extension2) => paths.concat(getCandidatesForExtension(resolved, extension2)),
    [resolved]
  );
}
function resolveExtensions(importee, importer, extensions2) {
  if (importee[0] !== "." || !importer) return void 0;
  const resolved = (0, import_path2.resolve)((0, import_path2.dirname)(importer), importee);
  const candidates = getCandidates(resolved, extensions2);
  for (let i = 0; i < candidates.length; i += 1) {
    try {
      const stats = (0, import_fs.statSync)(candidates[i]);
      if (stats.isFile()) return { id: candidates[i] };
    } catch (err2) {
    }
  }
  return void 0;
}
function getResolveId(extensions2, isPossibleCjsId) {
  const currentlyResolving = /* @__PURE__ */ new Map();
  return {
    /**
     * This is a Maps of importers to Sets of require sources being resolved at
     * the moment by resolveRequireSourcesAndUpdateMeta
     */
    currentlyResolving,
    async resolveId(importee, importer, resolveOptions) {
      var _a2;
      const customOptions = resolveOptions.custom;
      if ((_a2 = customOptions == null ? void 0 : customOptions["node-resolve"]) == null ? void 0 : _a2.isRequire) {
        return null;
      }
      const currentlyResolvingForParent = currentlyResolving.get(importer);
      if (currentlyResolvingForParent && currentlyResolvingForParent.has(importee)) {
        this.warn({
          code: "THIS_RESOLVE_WITHOUT_OPTIONS",
          message: 'It appears a plugin has implemented a "resolveId" hook that uses "this.resolve" without forwarding the third "options" parameter of "resolveId". This is problematic as it can lead to wrong module resolutions especially for the node-resolve plugin and in certain cases cause early exit errors for the commonjs plugin.\nIn rare cases, this warning can appear if the same file is both imported and required from the same mixed ES/CommonJS module, in which case it can be ignored.',
          url: "https://rollupjs.org/guide/en/#resolveid"
        });
        return null;
      }
      if (isWrappedId(importee, WRAPPED_SUFFIX)) {
        return unwrapId2(importee, WRAPPED_SUFFIX);
      }
      if (importee.endsWith(ENTRY_SUFFIX) || isWrappedId(importee, MODULE_SUFFIX) || isWrappedId(importee, EXPORTS_SUFFIX) || isWrappedId(importee, PROXY_SUFFIX) || isWrappedId(importee, ES_IMPORT_SUFFIX) || isWrappedId(importee, EXTERNAL_SUFFIX) || importee.startsWith(HELPERS_ID) || importee === DYNAMIC_MODULES_ID) {
        return importee;
      }
      if (importer) {
        if (importer === DYNAMIC_MODULES_ID || // Proxies are only importing resolved ids, no need to resolve again
        isWrappedId(importer, PROXY_SUFFIX) || isWrappedId(importer, ES_IMPORT_SUFFIX) || importer.endsWith(ENTRY_SUFFIX)) {
          return importee;
        }
        if (isWrappedId(importer, EXTERNAL_SUFFIX)) {
          if (!await this.resolve(
            importee,
            importer,
            Object.assign({ skipSelf: true }, resolveOptions)
          )) {
            return null;
          }
          return { id: importee, external: true };
        }
      }
      if (importee.startsWith("\0")) {
        return null;
      }
      const resolved = await this.resolve(
        importee,
        importer,
        Object.assign({ skipSelf: true }, resolveOptions)
      ) || resolveExtensions(importee, importer, extensions2);
      if (!resolved || resolved.external || resolved.id.endsWith(ENTRY_SUFFIX) || isWrappedId(resolved.id, ES_IMPORT_SUFFIX) || !isPossibleCjsId(resolved.id)) {
        return resolved;
      }
      const moduleInfo = await this.load(resolved);
      const {
        meta: { commonjs: commonjsMeta }
      } = moduleInfo;
      if (commonjsMeta) {
        const { isCommonJS } = commonjsMeta;
        if (isCommonJS) {
          if (resolveOptions.isEntry) {
            moduleInfo.moduleSideEffects = true;
            return resolved.id + ENTRY_SUFFIX;
          }
          if (isCommonJS === IS_WRAPPED_COMMONJS) {
            return { id: wrapId(resolved.id, ES_IMPORT_SUFFIX), meta: { commonjs: { resolved } } };
          }
        }
      }
      return resolved;
    }
  };
}
function getRequireResolver(extensions2, detectCyclesAndConditional, currentlyResolving) {
  const knownCjsModuleTypes = /* @__PURE__ */ Object.create(null);
  const requiredIds = /* @__PURE__ */ Object.create(null);
  const unconditionallyRequiredIds = /* @__PURE__ */ Object.create(null);
  const dependencies = /* @__PURE__ */ Object.create(null);
  const getDependencies = (id) => dependencies[id] || (dependencies[id] = /* @__PURE__ */ new Set());
  const isCyclic = (id) => {
    const dependenciesToCheck = new Set(getDependencies(id));
    for (const dependency of dependenciesToCheck) {
      if (dependency === id) {
        return true;
      }
      for (const childDependency of getDependencies(dependency)) {
        dependenciesToCheck.add(childDependency);
      }
    }
    return false;
  };
  const fullyAnalyzedModules = /* @__PURE__ */ Object.create(null);
  const getTypeForFullyAnalyzedModule = (id) => {
    const knownType = knownCjsModuleTypes[id];
    if (knownType !== true || !detectCyclesAndConditional || fullyAnalyzedModules[id]) {
      return knownType;
    }
    if (isCyclic(id)) {
      return knownCjsModuleTypes[id] = IS_WRAPPED_COMMONJS;
    }
    return knownType;
  };
  const setInitialParentType = (id, initialCommonJSType) => {
    if (fullyAnalyzedModules[id]) {
      return;
    }
    knownCjsModuleTypes[id] = initialCommonJSType;
    if (detectCyclesAndConditional && knownCjsModuleTypes[id] === true && requiredIds[id] && !unconditionallyRequiredIds[id]) {
      knownCjsModuleTypes[id] = IS_WRAPPED_COMMONJS;
    }
  };
  const analyzeRequiredModule = async (parentId, resolved, isConditional, loadModule) => {
    const childId = resolved.id;
    requiredIds[childId] = true;
    if (!(isConditional || knownCjsModuleTypes[parentId] === IS_WRAPPED_COMMONJS)) {
      unconditionallyRequiredIds[childId] = true;
    }
    getDependencies(parentId).add(childId);
    if (!isCyclic(childId)) {
      await loadModule(resolved);
    }
  };
  const getTypeForImportedModule = async (resolved, loadModule) => {
    if (resolved.id in knownCjsModuleTypes) {
      return knownCjsModuleTypes[resolved.id];
    }
    const {
      meta: { commonjs: commonjs2 }
    } = await loadModule(resolved);
    return commonjs2 && commonjs2.isCommonJS || false;
  };
  return {
    getWrappedIds: () => Object.keys(knownCjsModuleTypes).filter(
      (id) => knownCjsModuleTypes[id] === IS_WRAPPED_COMMONJS
    ),
    isRequiredId: (id) => requiredIds[id],
    async shouldTransformCachedModule({
      id: parentId,
      resolvedSources,
      meta: { commonjs: parentMeta }
    }) {
      if (!(parentMeta && parentMeta.isCommonJS)) knownCjsModuleTypes[parentId] = false;
      if (isWrappedId(parentId, ES_IMPORT_SUFFIX)) return false;
      const parentRequires = parentMeta && parentMeta.requires;
      if (parentRequires) {
        setInitialParentType(parentId, parentMeta.initialCommonJSType);
        await Promise.all(
          parentRequires.map(
            ({ resolved, isConditional }) => analyzeRequiredModule(parentId, resolved, isConditional, this.load)
          )
        );
        if (getTypeForFullyAnalyzedModule(parentId) !== parentMeta.isCommonJS) {
          return true;
        }
        for (const {
          resolved: { id }
        } of parentRequires) {
          if (getTypeForFullyAnalyzedModule(id) !== parentMeta.isRequiredCommonJS[id]) {
            return true;
          }
        }
        fullyAnalyzedModules[parentId] = true;
        for (const {
          resolved: { id }
        } of parentRequires) {
          fullyAnalyzedModules[id] = true;
        }
      }
      const parentRequireSet = new Set((parentRequires || []).map(({ resolved: { id } }) => id));
      return (await Promise.all(
        Object.keys(resolvedSources).map((source) => resolvedSources[source]).filter(({ id, external }) => !(external || parentRequireSet.has(id))).map(async (resolved) => {
          if (isWrappedId(resolved.id, ES_IMPORT_SUFFIX)) {
            return await getTypeForImportedModule(
              (await this.load({ id: resolved.id })).meta.commonjs.resolved,
              this.load
            ) !== IS_WRAPPED_COMMONJS;
          }
          return await getTypeForImportedModule(resolved, this.load) === IS_WRAPPED_COMMONJS;
        })
      )).some((shouldTransform) => shouldTransform);
    },
    /* eslint-disable no-param-reassign */
    resolveRequireSourcesAndUpdateMeta: (rollupContext) => async (parentId, isParentCommonJS, parentMeta, sources) => {
      parentMeta.initialCommonJSType = isParentCommonJS;
      parentMeta.requires = [];
      parentMeta.isRequiredCommonJS = /* @__PURE__ */ Object.create(null);
      setInitialParentType(parentId, isParentCommonJS);
      const currentlyResolvingForParent = currentlyResolving.get(parentId) || /* @__PURE__ */ new Set();
      currentlyResolving.set(parentId, currentlyResolvingForParent);
      const requireTargets = await Promise.all(
        sources.map(async ({ source, isConditional }) => {
          if (source.startsWith("\0")) {
            return { id: source, allowProxy: false };
          }
          currentlyResolvingForParent.add(source);
          const resolved = await rollupContext.resolve(source, parentId, {
            skipSelf: false,
            custom: { "node-resolve": { isRequire: true } }
          }) || resolveExtensions(source, parentId, extensions2);
          currentlyResolvingForParent.delete(source);
          if (!resolved) {
            return { id: wrapId(source, EXTERNAL_SUFFIX), allowProxy: false };
          }
          const childId = resolved.id;
          if (resolved.external) {
            return { id: wrapId(childId, EXTERNAL_SUFFIX), allowProxy: false };
          }
          parentMeta.requires.push({ resolved, isConditional });
          await analyzeRequiredModule(parentId, resolved, isConditional, rollupContext.load);
          return { id: childId, allowProxy: true };
        })
      );
      parentMeta.isCommonJS = getTypeForFullyAnalyzedModule(parentId);
      fullyAnalyzedModules[parentId] = true;
      return requireTargets.map(({ id: dependencyId, allowProxy }, index) => {
        const isCommonJS = parentMeta.isRequiredCommonJS[dependencyId] = getTypeForFullyAnalyzedModule(dependencyId);
        const isWrappedCommonJS = isCommonJS === IS_WRAPPED_COMMONJS;
        fullyAnalyzedModules[dependencyId] = true;
        return {
          wrappedModuleSideEffects: isWrappedCommonJS && rollupContext.getModuleInfo(dependencyId).moduleSideEffects,
          source: sources[index].source,
          id: allowProxy ? wrapId(dependencyId, isWrappedCommonJS ? WRAPPED_SUFFIX : PROXY_SUFFIX) : dependencyId,
          isCommonJS
        };
      });
    },
    isCurrentlyResolving(source, parentId) {
      const currentlyResolvingForParent = currentlyResolving.get(parentId);
      return currentlyResolvingForParent && currentlyResolvingForParent.has(source);
    }
  };
}
function validateVersion(actualVersion, peerDependencyVersion, name) {
  const versionRegexp = /\^(\d+\.\d+\.\d+)/g;
  let minMajor = Infinity;
  let minMinor = Infinity;
  let minPatch = Infinity;
  let foundVersion;
  while (foundVersion = versionRegexp.exec(peerDependencyVersion)) {
    const [foundMajor, foundMinor, foundPatch] = foundVersion[1].split(".").map(Number);
    if (foundMajor < minMajor) {
      minMajor = foundMajor;
      minMinor = foundMinor;
      minPatch = foundPatch;
    }
  }
  if (!actualVersion) {
    throw new Error(
      `Insufficient ${name} version: "@rollup/plugin-commonjs" requires at least ${name}@${minMajor}.${minMinor}.${minPatch}.`
    );
  }
  const [major, minor, patch] = actualVersion.split(".").map(Number);
  if (major < minMajor || major === minMajor && (minor < minMinor || minor === minMinor && patch < minPatch)) {
    throw new Error(
      `Insufficient ${name} version: "@rollup/plugin-commonjs" requires at least ${name}@${minMajor}.${minMinor}.${minPatch} but found ${name}@${actualVersion}.`
    );
  }
}
var operators = {
  "==": (x) => equals(x.left, x.right, false),
  "!=": (x) => not(operators["=="](x)),
  "===": (x) => equals(x.left, x.right, true),
  "!==": (x) => not(operators["==="](x)),
  "!": (x) => isFalsy(x.argument),
  "&&": (x) => isTruthy(x.left) && isTruthy(x.right),
  "||": (x) => isTruthy(x.left) || isTruthy(x.right)
};
function not(value2) {
  return value2 === null ? value2 : !value2;
}
function equals(a, b, strict) {
  if (a.type !== b.type) return null;
  if (a.type === "Literal") return strict ? a.value === b.value : a.value == b.value;
  return null;
}
function isTruthy(node2) {
  if (!node2) return false;
  if (node2.type === "Literal") return !!node2.value;
  if (node2.type === "ParenthesizedExpression") return isTruthy(node2.expression);
  if (node2.operator in operators) return operators[node2.operator](node2);
  return null;
}
function isFalsy(node2) {
  return not(isTruthy(node2));
}
function getKeypath(node2) {
  const parts = [];
  while (node2.type === "MemberExpression") {
    if (node2.computed) return null;
    parts.unshift(node2.property.name);
    node2 = node2.object;
  }
  if (node2.type !== "Identifier") return null;
  const { name } = node2;
  parts.unshift(name);
  return { name, keypath: parts.join(".") };
}
var KEY_COMPILED_ESM = "__esModule";
function getDefineCompiledEsmType(node2) {
  const definedPropertyWithExports = getDefinePropertyCallName(node2, "exports");
  const definedProperty = definedPropertyWithExports || getDefinePropertyCallName(node2, "module.exports");
  if (definedProperty && definedProperty.key === KEY_COMPILED_ESM) {
    return isTruthy(definedProperty.value) ? definedPropertyWithExports ? "exports" : "module" : false;
  }
  return false;
}
function getDefinePropertyCallName(node2, targetName) {
  const {
    callee: { object, property }
  } = node2;
  if (!object || object.type !== "Identifier" || object.name !== "Object") return;
  if (!property || property.type !== "Identifier" || property.name !== "defineProperty") return;
  if (node2.arguments.length !== 3) return;
  const targetNames = targetName.split(".");
  const [target, key, value2] = node2.arguments;
  if (targetNames.length === 1) {
    if (target.type !== "Identifier" || target.name !== targetNames[0]) {
      return;
    }
  }
  if (targetNames.length === 2) {
    if (target.type !== "MemberExpression" || target.object.name !== targetNames[0] || target.property.name !== targetNames[1]) {
      return;
    }
  }
  if (value2.type !== "ObjectExpression" || !value2.properties) return;
  const valueProperty = value2.properties.find((p2) => p2.key && p2.key.name === "value");
  if (!valueProperty || !valueProperty.value) return;
  return { key: key.value, value: valueProperty.value };
}
function isShorthandProperty(parent) {
  return parent && parent.type === "Property" && parent.shorthand;
}
function wrapCode(magicString, uses, moduleName, exportsName, indentExclusionRanges) {
  const args = [];
  const passedArgs = [];
  if (uses.module) {
    args.push("module");
    passedArgs.push(moduleName);
  }
  if (uses.exports) {
    args.push("exports");
    passedArgs.push(uses.module ? `${moduleName}.exports` : exportsName);
  }
  magicString.trim().indent("	", { exclude: indentExclusionRanges }).prepend(`(function (${args.join(", ")}) {
`).append(` 
} (${passedArgs.join(", ")}));`);
}
function rewriteExportsAndGetExportsBlock(magicString, moduleName, exportsName, exportedExportsName, wrapped, moduleExportsAssignments, firstTopLevelModuleExportsAssignment, exportsAssignmentsByName, topLevelAssignments, defineCompiledEsmExpressions, deconflictedExportNames, code, HELPERS_NAME, exportMode, defaultIsModuleExports, usesRequireWrapper, requireName) {
  const exports = [];
  const exportDeclarations = [];
  if (usesRequireWrapper) {
    getExportsWhenUsingRequireWrapper(
      magicString,
      wrapped,
      exportMode,
      exports,
      moduleExportsAssignments,
      exportsAssignmentsByName,
      moduleName,
      exportsName,
      requireName,
      defineCompiledEsmExpressions
    );
  } else if (exportMode === "replace") {
    getExportsForReplacedModuleExports(
      magicString,
      exports,
      exportDeclarations,
      moduleExportsAssignments,
      firstTopLevelModuleExportsAssignment,
      exportsName,
      defaultIsModuleExports,
      HELPERS_NAME
    );
  } else {
    if (exportMode === "module") {
      exportDeclarations.push(`var ${exportedExportsName} = ${moduleName}.exports`);
      exports.push(`${exportedExportsName} as __moduleExports`);
    } else {
      exports.push(`${exportsName} as __moduleExports`);
    }
    if (wrapped) {
      exportDeclarations.push(
        getDefaultExportDeclaration(exportedExportsName, defaultIsModuleExports, HELPERS_NAME)
      );
    } else {
      getExports(
        magicString,
        exports,
        exportDeclarations,
        moduleExportsAssignments,
        exportsAssignmentsByName,
        deconflictedExportNames,
        topLevelAssignments,
        moduleName,
        exportsName,
        exportedExportsName,
        defineCompiledEsmExpressions,
        HELPERS_NAME,
        defaultIsModuleExports,
        exportMode
      );
    }
  }
  if (exports.length) {
    exportDeclarations.push(`export { ${exports.join(", ")} }`);
  }
  return `

${exportDeclarations.join(";\n")};`;
}
function getExportsWhenUsingRequireWrapper(magicString, wrapped, exportMode, exports, moduleExportsAssignments, exportsAssignmentsByName, moduleName, exportsName, requireName, defineCompiledEsmExpressions) {
  exports.push(`${requireName} as __require`);
  if (wrapped) return;
  if (exportMode === "replace") {
    rewriteModuleExportsAssignments(magicString, moduleExportsAssignments, exportsName);
  } else {
    rewriteModuleExportsAssignments(magicString, moduleExportsAssignments, `${moduleName}.exports`);
    for (const [exportName, { nodes }] of exportsAssignmentsByName) {
      for (const { node: node2, type } of nodes) {
        magicString.overwrite(
          node2.start,
          node2.left.end,
          `${exportMode === "module" && type === "module" ? `${moduleName}.exports` : exportsName}.${exportName}`
        );
      }
    }
    replaceDefineCompiledEsmExpressionsAndGetIfRestorable(
      defineCompiledEsmExpressions,
      magicString,
      exportMode,
      moduleName,
      exportsName
    );
  }
}
function getExportsForReplacedModuleExports(magicString, exports, exportDeclarations, moduleExportsAssignments, firstTopLevelModuleExportsAssignment, exportsName, defaultIsModuleExports, HELPERS_NAME) {
  for (const { left } of moduleExportsAssignments) {
    magicString.overwrite(left.start, left.end, exportsName);
  }
  magicString.prependRight(firstTopLevelModuleExportsAssignment.left.start, "var ");
  exports.push(`${exportsName} as __moduleExports`);
  exportDeclarations.push(
    getDefaultExportDeclaration(exportsName, defaultIsModuleExports, HELPERS_NAME)
  );
}
function getDefaultExportDeclaration(exportedExportsName, defaultIsModuleExports, HELPERS_NAME) {
  return `export default ${defaultIsModuleExports === true ? exportedExportsName : defaultIsModuleExports === false ? `${exportedExportsName}.default` : `/*@__PURE__*/${HELPERS_NAME}.getDefaultExportFromCjs(${exportedExportsName})`}`;
}
function getExports(magicString, exports, exportDeclarations, moduleExportsAssignments, exportsAssignmentsByName, deconflictedExportNames, topLevelAssignments, moduleName, exportsName, exportedExportsName, defineCompiledEsmExpressions, HELPERS_NAME, defaultIsModuleExports, exportMode) {
  let deconflictedDefaultExportName;
  for (const { left } of moduleExportsAssignments) {
    magicString.overwrite(left.start, left.end, `${moduleName}.exports`);
  }
  for (const [exportName, { nodes }] of exportsAssignmentsByName) {
    const deconflicted = deconflictedExportNames[exportName];
    let needsDeclaration = true;
    for (const { node: node2, type } of nodes) {
      let replacement = `${deconflicted} = ${exportMode === "module" && type === "module" ? `${moduleName}.exports` : exportsName}.${exportName}`;
      if (needsDeclaration && topLevelAssignments.has(node2)) {
        replacement = `var ${replacement}`;
        needsDeclaration = false;
      }
      magicString.overwrite(node2.start, node2.left.end, replacement);
    }
    if (needsDeclaration) {
      magicString.prepend(`var ${deconflicted};
`);
    }
    if (exportName === "default") {
      deconflictedDefaultExportName = deconflicted;
    } else {
      exports.push(exportName === deconflicted ? exportName : `${deconflicted} as ${exportName}`);
    }
  }
  const isRestorableCompiledEsm = replaceDefineCompiledEsmExpressionsAndGetIfRestorable(
    defineCompiledEsmExpressions,
    magicString,
    exportMode,
    moduleName,
    exportsName
  );
  if (defaultIsModuleExports === false || defaultIsModuleExports === "auto" && isRestorableCompiledEsm && moduleExportsAssignments.length === 0) {
    exports.push(`${deconflictedDefaultExportName || exportedExportsName} as default`);
  } else if (defaultIsModuleExports === true || !isRestorableCompiledEsm && moduleExportsAssignments.length === 0) {
    exports.push(`${exportedExportsName} as default`);
  } else {
    exportDeclarations.push(
      getDefaultExportDeclaration(exportedExportsName, defaultIsModuleExports, HELPERS_NAME)
    );
  }
}
function rewriteModuleExportsAssignments(magicString, moduleExportsAssignments, exportsName) {
  for (const { left } of moduleExportsAssignments) {
    magicString.overwrite(left.start, left.end, exportsName);
  }
}
function replaceDefineCompiledEsmExpressionsAndGetIfRestorable(defineCompiledEsmExpressions, magicString, exportMode, moduleName, exportsName) {
  let isRestorableCompiledEsm = false;
  for (const { node: node2, type } of defineCompiledEsmExpressions) {
    isRestorableCompiledEsm = true;
    const moduleExportsExpression = node2.type === "CallExpression" ? node2.arguments[0] : node2.left.object;
    magicString.overwrite(
      moduleExportsExpression.start,
      moduleExportsExpression.end,
      exportMode === "module" && type === "module" ? `${moduleName}.exports` : exportsName
    );
  }
  return isRestorableCompiledEsm;
}
function isRequireExpression(node2, scope) {
  if (!node2) return false;
  if (node2.type !== "CallExpression") return false;
  if (node2.arguments.length === 0) return false;
  return isRequire(node2.callee, scope);
}
function isRequire(node2, scope) {
  return node2.type === "Identifier" && node2.name === "require" && !scope.contains("require") || node2.type === "MemberExpression" && isModuleRequire(node2, scope);
}
function isModuleRequire({ object, property }, scope) {
  return object.type === "Identifier" && object.name === "module" && property.type === "Identifier" && property.name === "require" && !scope.contains("module");
}
function hasDynamicArguments(node2) {
  return node2.arguments.length > 1 || node2.arguments[0].type !== "Literal" && (node2.arguments[0].type !== "TemplateLiteral" || node2.arguments[0].expressions.length > 0);
}
var reservedMethod = { resolve: true, cache: true, main: true };
function isNodeRequirePropertyAccess(parent) {
  return parent && parent.property && reservedMethod[parent.property.name];
}
function getRequireStringArg(node2) {
  return node2.arguments[0].type === "Literal" ? node2.arguments[0].value : node2.arguments[0].quasis[0].value.cooked;
}
function getRequireHandlers() {
  const requireExpressions = [];
  function addRequireExpression(sourceId, node2, scope, usesReturnValue, isInsideTryBlock, isInsideConditional, toBeRemoved) {
    requireExpressions.push({
      sourceId,
      node: node2,
      scope,
      usesReturnValue,
      isInsideTryBlock,
      isInsideConditional,
      toBeRemoved
    });
  }
  async function rewriteRequireExpressionsAndGetImportBlock(magicString, topLevelDeclarations, reassignedNames, helpersName, dynamicRequireName, moduleName, exportsName, id, exportMode, resolveRequireSourcesAndUpdateMeta, needsRequireWrapper, isEsModule, isDynamicRequireModulesEnabled, getIgnoreTryCatchRequireStatementMode, commonjsMeta) {
    const imports = [];
    imports.push(`import * as ${helpersName} from "${HELPERS_ID}"`);
    if (dynamicRequireName) {
      imports.push(
        `import { ${isDynamicRequireModulesEnabled ? CREATE_COMMONJS_REQUIRE_EXPORT : COMMONJS_REQUIRE_EXPORT} as ${dynamicRequireName} } from "${DYNAMIC_MODULES_ID}"`
      );
    }
    if (exportMode === "module") {
      imports.push(
        `import { __module as ${moduleName} } from ${JSON.stringify(wrapId(id, MODULE_SUFFIX))}`,
        `var ${exportsName} = ${moduleName}.exports`
      );
    } else if (exportMode === "exports") {
      imports.push(
        `import { __exports as ${exportsName} } from ${JSON.stringify(wrapId(id, EXPORTS_SUFFIX))}`
      );
    }
    const requiresBySource = collectSources(requireExpressions);
    const requireTargets = await resolveRequireSourcesAndUpdateMeta(
      id,
      needsRequireWrapper ? IS_WRAPPED_COMMONJS : !isEsModule,
      commonjsMeta,
      Object.keys(requiresBySource).map((source) => {
        return {
          source,
          isConditional: requiresBySource[source].every((require2) => require2.isInsideConditional)
        };
      })
    );
    processRequireExpressions(
      imports,
      requireTargets,
      requiresBySource,
      getIgnoreTryCatchRequireStatementMode,
      magicString
    );
    return imports.length ? `${imports.join(";\n")};

` : "";
  }
  return {
    addRequireExpression,
    rewriteRequireExpressionsAndGetImportBlock
  };
}
function collectSources(requireExpressions) {
  const requiresBySource = /* @__PURE__ */ Object.create(null);
  for (const requireExpression of requireExpressions) {
    const { sourceId } = requireExpression;
    if (!requiresBySource[sourceId]) {
      requiresBySource[sourceId] = [];
    }
    const requires = requiresBySource[sourceId];
    requires.push(requireExpression);
  }
  return requiresBySource;
}
function processRequireExpressions(imports, requireTargets, requiresBySource, getIgnoreTryCatchRequireStatementMode, magicString) {
  const generateRequireName = getGenerateRequireName();
  for (const { source, id: resolvedId, isCommonJS, wrappedModuleSideEffects } of requireTargets) {
    const requires = requiresBySource[source];
    const name = generateRequireName(requires);
    let usesRequired = false;
    let needsImport = false;
    for (const { node: node2, usesReturnValue, toBeRemoved, isInsideTryBlock } of requires) {
      const { canConvertRequire, shouldRemoveRequire } = isInsideTryBlock && isWrappedId(resolvedId, EXTERNAL_SUFFIX) ? getIgnoreTryCatchRequireStatementMode(source) : { canConvertRequire: true, shouldRemoveRequire: false };
      if (shouldRemoveRequire) {
        if (usesReturnValue) {
          magicString.overwrite(node2.start, node2.end, "undefined");
        } else {
          magicString.remove(toBeRemoved.start, toBeRemoved.end);
        }
      } else if (canConvertRequire) {
        needsImport = true;
        if (isCommonJS === IS_WRAPPED_COMMONJS) {
          magicString.overwrite(
            node2.start,
            node2.end,
            `${wrappedModuleSideEffects ? "" : "/*@__PURE__*/ "}${name}()`
          );
        } else if (usesReturnValue) {
          usesRequired = true;
          magicString.overwrite(node2.start, node2.end, name);
        } else {
          magicString.remove(toBeRemoved.start, toBeRemoved.end);
        }
      }
    }
    if (needsImport) {
      if (isCommonJS === IS_WRAPPED_COMMONJS) {
        imports.push(`import { __require as ${name} } from ${JSON.stringify(resolvedId)}`);
      } else {
        imports.push(`import ${usesRequired ? `${name} from ` : ""}${JSON.stringify(resolvedId)}`);
      }
    }
  }
}
function getGenerateRequireName() {
  let uid = 0;
  return (requires) => {
    let name;
    const hasNameConflict = ({ scope }) => scope.contains(name);
    do {
      name = `require$$${uid}`;
      uid += 1;
    } while (requires.some(hasNameConflict));
    return name;
  };
}
var exportsPattern = /^(?:module\.)?exports(?:\.([a-zA-Z_$][a-zA-Z_$0-9]*))?$/;
var functionType = /^(?:FunctionDeclaration|FunctionExpression|ArrowFunctionExpression)$/;
async function transformCommonjs(parse4, code, id, isEsModule, ignoreGlobal, ignoreRequire, ignoreDynamicRequires, getIgnoreTryCatchRequireStatementMode, sourceMap, isDynamicRequireModulesEnabled, dynamicRequireModules, commonDir, astCache, defaultIsModuleExports, needsRequireWrapper, resolveRequireSourcesAndUpdateMeta, isRequired, checkDynamicRequire, commonjsMeta) {
  const ast = astCache || tryParse(parse4, code, id);
  const magicString = new MagicString(code);
  const uses = {
    module: false,
    exports: false,
    global: false,
    require: false
  };
  const virtualDynamicRequirePath = isDynamicRequireModulesEnabled && getVirtualPathForDynamicRequirePath((0, import_path2.dirname)(id), commonDir);
  let scope = attachScopes(ast, "scope");
  let lexicalDepth = 0;
  let programDepth = 0;
  let classBodyDepth = 0;
  let currentTryBlockEnd = null;
  let shouldWrap = false;
  const globals = /* @__PURE__ */ new Set();
  let currentConditionalNodeEnd = null;
  const conditionalNodes = /* @__PURE__ */ new Set();
  const { addRequireExpression, rewriteRequireExpressionsAndGetImportBlock } = getRequireHandlers();
  const reassignedNames = /* @__PURE__ */ new Set();
  const topLevelDeclarations = [];
  const skippedNodes = /* @__PURE__ */ new Set();
  const moduleAccessScopes = /* @__PURE__ */ new Set([scope]);
  const exportsAccessScopes = /* @__PURE__ */ new Set([scope]);
  const moduleExportsAssignments = [];
  let firstTopLevelModuleExportsAssignment = null;
  const exportsAssignmentsByName = /* @__PURE__ */ new Map();
  const topLevelAssignments = /* @__PURE__ */ new Set();
  const topLevelDefineCompiledEsmExpressions = [];
  const replacedGlobal = [];
  const replacedThis = [];
  const replacedDynamicRequires = [];
  const importedVariables = /* @__PURE__ */ new Set();
  const indentExclusionRanges = [];
  walk$2(ast, {
    enter(node2, parent) {
      if (skippedNodes.has(node2)) {
        this.skip();
        return;
      }
      if (currentTryBlockEnd !== null && node2.start > currentTryBlockEnd) {
        currentTryBlockEnd = null;
      }
      if (currentConditionalNodeEnd !== null && node2.start > currentConditionalNodeEnd) {
        currentConditionalNodeEnd = null;
      }
      if (currentConditionalNodeEnd === null && conditionalNodes.has(node2)) {
        currentConditionalNodeEnd = node2.end;
      }
      programDepth += 1;
      if (node2.scope) ({ scope } = node2);
      if (functionType.test(node2.type)) lexicalDepth += 1;
      if (sourceMap) {
        magicString.addSourcemapLocation(node2.start);
        magicString.addSourcemapLocation(node2.end);
      }
      switch (node2.type) {
        case "AssignmentExpression":
          if (node2.left.type === "MemberExpression") {
            const flattened = getKeypath(node2.left);
            if (!flattened || scope.contains(flattened.name)) return;
            const exportsPatternMatch = exportsPattern.exec(flattened.keypath);
            if (!exportsPatternMatch || flattened.keypath === "exports") return;
            const [, exportName] = exportsPatternMatch;
            uses[flattened.name] = true;
            if (flattened.keypath === "module.exports") {
              moduleExportsAssignments.push(node2);
              if (programDepth > 3) {
                moduleAccessScopes.add(scope);
              } else if (!firstTopLevelModuleExportsAssignment) {
                firstTopLevelModuleExportsAssignment = node2;
              }
            } else if (exportName === KEY_COMPILED_ESM) {
              if (programDepth > 3) {
                shouldWrap = true;
              } else {
                topLevelDefineCompiledEsmExpressions.push({ node: node2, type: flattened.name });
              }
            } else {
              const exportsAssignments = exportsAssignmentsByName.get(exportName) || {
                nodes: [],
                scopes: /* @__PURE__ */ new Set()
              };
              exportsAssignments.nodes.push({ node: node2, type: flattened.name });
              exportsAssignments.scopes.add(scope);
              exportsAccessScopes.add(scope);
              exportsAssignmentsByName.set(exportName, exportsAssignments);
              if (programDepth <= 3) {
                topLevelAssignments.add(node2);
              }
            }
            skippedNodes.add(node2.left);
          } else {
            for (const name of extractAssignedNames(node2.left)) {
              reassignedNames.add(name);
            }
          }
          return;
        case "CallExpression": {
          const defineCompiledEsmType = getDefineCompiledEsmType(node2);
          if (defineCompiledEsmType) {
            if (programDepth === 3 && parent.type === "ExpressionStatement") {
              skippedNodes.add(node2.arguments[0]);
              topLevelDefineCompiledEsmExpressions.push({ node: node2, type: defineCompiledEsmType });
            } else {
              shouldWrap = true;
            }
            return;
          }
          if (isDynamicRequireModulesEnabled && node2.callee.object && isRequire(node2.callee.object, scope) && node2.callee.property.name === "resolve") {
            checkDynamicRequire(node2.start);
            uses.require = true;
            const requireNode = node2.callee.object;
            replacedDynamicRequires.push(requireNode);
            skippedNodes.add(node2.callee);
            return;
          }
          if (!isRequireExpression(node2, scope)) {
            const keypath = getKeypath(node2.callee);
            if (keypath && importedVariables.has(keypath.name)) {
              currentConditionalNodeEnd = Infinity;
            }
            return;
          }
          skippedNodes.add(node2.callee);
          uses.require = true;
          if (hasDynamicArguments(node2)) {
            if (isDynamicRequireModulesEnabled) {
              checkDynamicRequire(node2.start);
            }
            if (!ignoreDynamicRequires) {
              replacedDynamicRequires.push(node2.callee);
            }
            return;
          }
          const requireStringArg = getRequireStringArg(node2);
          if (!ignoreRequire(requireStringArg)) {
            const usesReturnValue = parent.type !== "ExpressionStatement";
            const toBeRemoved = parent.type === "ExpressionStatement" && (!currentConditionalNodeEnd || // We should completely remove requires directly in a try-catch
            // so that Rollup can remove up the try-catch
            currentTryBlockEnd !== null && currentTryBlockEnd < currentConditionalNodeEnd) ? parent : node2;
            addRequireExpression(
              requireStringArg,
              node2,
              scope,
              usesReturnValue,
              currentTryBlockEnd !== null,
              currentConditionalNodeEnd !== null,
              toBeRemoved
            );
            if (parent.type === "VariableDeclarator" && parent.id.type === "Identifier") {
              for (const name of extractAssignedNames(parent.id)) {
                importedVariables.add(name);
              }
            }
          }
          return;
        }
        case "ClassBody":
          classBodyDepth += 1;
          return;
        case "ConditionalExpression":
        case "IfStatement":
          if (isFalsy(node2.test)) {
            skippedNodes.add(node2.consequent);
          } else if (isTruthy(node2.test)) {
            if (node2.alternate) {
              skippedNodes.add(node2.alternate);
            }
          } else {
            conditionalNodes.add(node2.consequent);
            if (node2.alternate) {
              conditionalNodes.add(node2.alternate);
            }
          }
          return;
        case "ArrowFunctionExpression":
        case "FunctionDeclaration":
        case "FunctionExpression":
          if (currentConditionalNodeEnd === null && !(parent.type === "CallExpression" && parent.callee === node2)) {
            currentConditionalNodeEnd = node2.end;
          }
          return;
        case "Identifier": {
          const { name } = node2;
          if (!isReference(node2, parent) || scope.contains(name) || parent.type === "PropertyDefinition" && parent.key === node2)
            return;
          switch (name) {
            case "require":
              uses.require = true;
              if (isNodeRequirePropertyAccess(parent)) {
                return;
              }
              if (!ignoreDynamicRequires) {
                if (isShorthandProperty(parent)) {
                  skippedNodes.add(parent.value);
                  magicString.prependRight(node2.start, "require: ");
                }
                replacedDynamicRequires.push(node2);
              }
              return;
            case "module":
            case "exports":
              shouldWrap = true;
              uses[name] = true;
              return;
            case "global":
              uses.global = true;
              if (!ignoreGlobal) {
                replacedGlobal.push(node2);
              }
              return;
            case "define":
              magicString.overwrite(node2.start, node2.end, "undefined", {
                storeName: true
              });
              return;
            default:
              globals.add(name);
              return;
          }
        }
        case "LogicalExpression":
          if (node2.operator === "&&") {
            if (isFalsy(node2.left)) {
              skippedNodes.add(node2.right);
            } else if (!isTruthy(node2.left)) {
              conditionalNodes.add(node2.right);
            }
          } else if (node2.operator === "||") {
            if (isTruthy(node2.left)) {
              skippedNodes.add(node2.right);
            } else if (!isFalsy(node2.left)) {
              conditionalNodes.add(node2.right);
            }
          }
          return;
        case "MemberExpression":
          if (!isDynamicRequireModulesEnabled && isModuleRequire(node2, scope)) {
            uses.require = true;
            replacedDynamicRequires.push(node2);
            skippedNodes.add(node2.object);
            skippedNodes.add(node2.property);
          }
          return;
        case "ReturnStatement":
          if (lexicalDepth === 0) {
            shouldWrap = true;
          }
          return;
        case "ThisExpression":
          if (lexicalDepth === 0 && !classBodyDepth) {
            uses.global = true;
            if (!ignoreGlobal) {
              replacedThis.push(node2);
            }
          }
          return;
        case "TryStatement":
          if (currentTryBlockEnd === null) {
            currentTryBlockEnd = node2.block.end;
          }
          if (currentConditionalNodeEnd === null) {
            currentConditionalNodeEnd = node2.end;
          }
          return;
        case "UnaryExpression":
          if (node2.operator === "typeof") {
            const flattened = getKeypath(node2.argument);
            if (!flattened) return;
            if (scope.contains(flattened.name)) return;
            if (!isEsModule && (flattened.keypath === "module.exports" || flattened.keypath === "module" || flattened.keypath === "exports")) {
              magicString.overwrite(node2.start, node2.end, `'object'`, {
                storeName: false
              });
            }
          }
          return;
        case "VariableDeclaration":
          if (!scope.parent) {
            topLevelDeclarations.push(node2);
          }
          return;
        case "TemplateElement":
          if (node2.value.raw.includes("\n")) {
            indentExclusionRanges.push([node2.start, node2.end]);
          }
      }
    },
    leave(node2) {
      programDepth -= 1;
      if (node2.scope) scope = scope.parent;
      if (functionType.test(node2.type)) lexicalDepth -= 1;
      if (node2.type === "ClassBody") classBodyDepth -= 1;
    }
  });
  const nameBase = getName(id);
  const exportsName = deconflict([...exportsAccessScopes], globals, nameBase);
  const moduleName = deconflict([...moduleAccessScopes], globals, `${nameBase}Module`);
  const requireName = deconflict([scope], globals, `require${capitalize(nameBase)}`);
  const isRequiredName = deconflict([scope], globals, `hasRequired${capitalize(nameBase)}`);
  const helpersName = deconflict([scope], globals, "commonjsHelpers");
  const dynamicRequireName = replacedDynamicRequires.length > 0 && deconflict(
    [scope],
    globals,
    isDynamicRequireModulesEnabled ? CREATE_COMMONJS_REQUIRE_EXPORT : COMMONJS_REQUIRE_EXPORT
  );
  const deconflictedExportNames = /* @__PURE__ */ Object.create(null);
  for (const [exportName, { scopes }] of exportsAssignmentsByName) {
    deconflictedExportNames[exportName] = deconflict([...scopes], globals, exportName);
  }
  for (const node2 of replacedGlobal) {
    magicString.overwrite(node2.start, node2.end, `${helpersName}.commonjsGlobal`, {
      storeName: true
    });
  }
  for (const node2 of replacedThis) {
    magicString.overwrite(node2.start, node2.end, exportsName, {
      storeName: true
    });
  }
  for (const node2 of replacedDynamicRequires) {
    magicString.overwrite(
      node2.start,
      node2.end,
      isDynamicRequireModulesEnabled ? `${dynamicRequireName}(${JSON.stringify(virtualDynamicRequirePath)})` : dynamicRequireName,
      {
        contentOnly: true,
        storeName: true
      }
    );
  }
  shouldWrap = !isEsModule && (shouldWrap || uses.exports && moduleExportsAssignments.length > 0);
  if (!(shouldWrap || isRequired || needsRequireWrapper || uses.module || uses.exports || uses.require || topLevelDefineCompiledEsmExpressions.length > 0) && (ignoreGlobal || !uses.global)) {
    return { meta: { commonjs: { isCommonJS: false } } };
  }
  let leadingComment = "";
  if (code.startsWith("/*")) {
    const commentEnd = code.indexOf("*/", 2) + 2;
    leadingComment = `${code.slice(0, commentEnd)}
`;
    magicString.remove(0, commentEnd).trim();
  }
  let shebang = "";
  if (code.startsWith("#!")) {
    const shebangEndPosition = code.indexOf("\n") + 1;
    shebang = code.slice(0, shebangEndPosition);
    magicString.remove(0, shebangEndPosition).trim();
  }
  const exportMode = isEsModule ? "none" : shouldWrap ? uses.module ? "module" : "exports" : firstTopLevelModuleExportsAssignment ? exportsAssignmentsByName.size === 0 && topLevelDefineCompiledEsmExpressions.length === 0 ? "replace" : "module" : moduleExportsAssignments.length === 0 ? "exports" : "module";
  const exportedExportsName = exportMode === "module" ? deconflict([], globals, `${nameBase}Exports`) : exportsName;
  const importBlock = await rewriteRequireExpressionsAndGetImportBlock(
    magicString,
    topLevelDeclarations,
    reassignedNames,
    helpersName,
    dynamicRequireName,
    moduleName,
    exportsName,
    id,
    exportMode,
    resolveRequireSourcesAndUpdateMeta,
    needsRequireWrapper,
    isEsModule,
    isDynamicRequireModulesEnabled,
    getIgnoreTryCatchRequireStatementMode,
    commonjsMeta
  );
  const usesRequireWrapper = commonjsMeta.isCommonJS === IS_WRAPPED_COMMONJS;
  const exportBlock = isEsModule ? "" : rewriteExportsAndGetExportsBlock(
    magicString,
    moduleName,
    exportsName,
    exportedExportsName,
    shouldWrap,
    moduleExportsAssignments,
    firstTopLevelModuleExportsAssignment,
    exportsAssignmentsByName,
    topLevelAssignments,
    topLevelDefineCompiledEsmExpressions,
    deconflictedExportNames,
    code,
    helpersName,
    exportMode,
    defaultIsModuleExports,
    usesRequireWrapper,
    requireName
  );
  if (shouldWrap) {
    wrapCode(magicString, uses, moduleName, exportsName, indentExclusionRanges);
  }
  if (usesRequireWrapper) {
    magicString.trim().indent("	", {
      exclude: indentExclusionRanges
    });
    const exported = exportMode === "module" ? `${moduleName}.exports` : exportsName;
    magicString.prepend(
      `var ${isRequiredName};

function ${requireName} () {
	if (${isRequiredName}) return ${exported};
	${isRequiredName} = 1;
`
    ).append(`
	return ${exported};
}`);
    if (exportMode === "replace") {
      magicString.prepend(`var ${exportsName};
`);
    }
  }
  magicString.trim().prepend(shebang + leadingComment + importBlock).append(exportBlock);
  return {
    code: magicString.toString(),
    map: sourceMap ? magicString.generateMap() : null,
    syntheticNamedExports: isEsModule || usesRequireWrapper ? false : "__moduleExports",
    meta: { commonjs: { ...commonjsMeta, shebang } }
  };
}
var PLUGIN_NAME = "commonjs";
function commonjs(options2 = {}) {
  const {
    ignoreGlobal,
    ignoreDynamicRequires,
    requireReturnsDefault: requireReturnsDefaultOption,
    defaultIsModuleExports: defaultIsModuleExportsOption,
    esmExternals
  } = options2;
  const extensions2 = options2.extensions || [".js"];
  const filter2 = createFilter$2(options2.include, options2.exclude);
  const isPossibleCjsId = (id) => {
    const extName = (0, import_path2.extname)(id);
    return extName === ".cjs" || extensions2.includes(extName) && filter2(id);
  };
  const { strictRequiresFilter, detectCyclesAndConditional } = getStrictRequiresFilter(options2);
  const getRequireReturnsDefault = typeof requireReturnsDefaultOption === "function" ? requireReturnsDefaultOption : () => requireReturnsDefaultOption;
  let esmExternalIds;
  const isEsmExternal = typeof esmExternals === "function" ? esmExternals : Array.isArray(esmExternals) ? (esmExternalIds = new Set(esmExternals), (id) => esmExternalIds.has(id)) : () => esmExternals;
  const getDefaultIsModuleExports = typeof defaultIsModuleExportsOption === "function" ? defaultIsModuleExportsOption : () => typeof defaultIsModuleExportsOption === "boolean" ? defaultIsModuleExportsOption : "auto";
  const dynamicRequireRoot = typeof options2.dynamicRequireRoot === "string" ? (0, import_path2.resolve)(options2.dynamicRequireRoot) : process.cwd();
  const { commonDir, dynamicRequireModules } = getDynamicRequireModules(
    options2.dynamicRequireTargets,
    dynamicRequireRoot
  );
  const isDynamicRequireModulesEnabled = dynamicRequireModules.size > 0;
  const ignoreRequire = typeof options2.ignore === "function" ? options2.ignore : Array.isArray(options2.ignore) ? (id) => options2.ignore.includes(id) : () => false;
  const getIgnoreTryCatchRequireStatementMode = (id) => {
    const mode2 = typeof options2.ignoreTryCatch === "function" ? options2.ignoreTryCatch(id) : Array.isArray(options2.ignoreTryCatch) ? options2.ignoreTryCatch.includes(id) : typeof options2.ignoreTryCatch !== "undefined" ? options2.ignoreTryCatch : true;
    return {
      canConvertRequire: mode2 !== "remove" && mode2 !== true,
      shouldRemoveRequire: mode2 === "remove"
    };
  };
  const { currentlyResolving, resolveId } = getResolveId(extensions2, isPossibleCjsId);
  const sourceMap = options2.sourceMap !== false;
  let requireResolver;
  function transformAndCheckExports(code, id) {
    const normalizedId = normalizePathSlashes(id);
    const { isEsModule, hasDefaultExport, hasNamedExports, ast } = analyzeTopLevelStatements(
      this.parse,
      code,
      id
    );
    const commonjsMeta = this.getModuleInfo(id).meta.commonjs || {};
    if (hasDefaultExport) {
      commonjsMeta.hasDefaultExport = true;
    }
    if (hasNamedExports) {
      commonjsMeta.hasNamedExports = true;
    }
    if (!dynamicRequireModules.has(normalizedId) && (!(hasCjsKeywords(code, ignoreGlobal) || requireResolver.isRequiredId(id)) || isEsModule && !options2.transformMixedEsModules)) {
      commonjsMeta.isCommonJS = false;
      return { meta: { commonjs: commonjsMeta } };
    }
    const needsRequireWrapper = !isEsModule && (dynamicRequireModules.has(normalizedId) || strictRequiresFilter(id));
    const checkDynamicRequire = (position) => {
      const normalizedDynamicRequireRoot = normalizePathSlashes(dynamicRequireRoot);
      if (normalizedId.indexOf(normalizedDynamicRequireRoot) !== 0) {
        this.error(
          {
            code: "DYNAMIC_REQUIRE_OUTSIDE_ROOT",
            normalizedId,
            normalizedDynamicRequireRoot,
            message: `"${normalizedId}" contains dynamic require statements but it is not within the current dynamicRequireRoot "${normalizedDynamicRequireRoot}". You should set dynamicRequireRoot to "${(0, import_path2.dirname)(
              normalizedId
            )}" or one of its parent directories.`
          },
          position
        );
      }
    };
    return transformCommonjs(
      this.parse,
      code,
      id,
      isEsModule,
      ignoreGlobal || isEsModule,
      ignoreRequire,
      ignoreDynamicRequires && !isDynamicRequireModulesEnabled,
      getIgnoreTryCatchRequireStatementMode,
      sourceMap,
      isDynamicRequireModulesEnabled,
      dynamicRequireModules,
      commonDir,
      ast,
      getDefaultIsModuleExports(id),
      needsRequireWrapper,
      requireResolver.resolveRequireSourcesAndUpdateMeta(this),
      requireResolver.isRequiredId(id),
      checkDynamicRequire,
      commonjsMeta
    );
  }
  return {
    name: PLUGIN_NAME,
    version: version$2,
    options(rawOptions) {
      const plugins2 = Array.isArray(rawOptions.plugins) ? [...rawOptions.plugins] : rawOptions.plugins ? [rawOptions.plugins] : [];
      plugins2.unshift({
        name: "commonjs--resolver",
        resolveId
      });
      return { ...rawOptions, plugins: plugins2 };
    },
    buildStart({ plugins: plugins2 }) {
      validateVersion(this.meta.rollupVersion, peerDependencies.rollup, "rollup");
      const nodeResolve = plugins2.find(({ name }) => name === "node-resolve");
      if (nodeResolve) {
        validateVersion(nodeResolve.version, "^13.0.6", "@rollup/plugin-node-resolve");
      }
      if (options2.namedExports != null) {
        this.warn(
          'The namedExports option from "@rollup/plugin-commonjs" is deprecated. Named exports are now handled automatically.'
        );
      }
      requireResolver = getRequireResolver(
        extensions2,
        detectCyclesAndConditional,
        currentlyResolving
      );
    },
    buildEnd() {
      if (options2.strictRequires === "debug") {
        const wrappedIds = requireResolver.getWrappedIds();
        if (wrappedIds.length) {
          this.warn({
            code: "WRAPPED_IDS",
            ids: wrappedIds,
            message: `The commonjs plugin automatically wrapped the following files:
[
${wrappedIds.map((id) => `	${JSON.stringify((0, import_path2.relative)(process.cwd(), id))}`).join(",\n")}
]`
          });
        } else {
          this.warn({
            code: "WRAPPED_IDS",
            ids: wrappedIds,
            message: "The commonjs plugin did not wrap any files."
          });
        }
      }
    },
    async load(id) {
      if (id === HELPERS_ID) {
        return getHelpersModule();
      }
      if (isWrappedId(id, MODULE_SUFFIX)) {
        const name = getName(unwrapId2(id, MODULE_SUFFIX));
        return {
          code: `var ${name} = {exports: {}}; export {${name} as __module}`,
          meta: { commonjs: { isCommonJS: false } }
        };
      }
      if (isWrappedId(id, EXPORTS_SUFFIX)) {
        const name = getName(unwrapId2(id, EXPORTS_SUFFIX));
        return {
          code: `var ${name} = {}; export {${name} as __exports}`,
          meta: { commonjs: { isCommonJS: false } }
        };
      }
      if (isWrappedId(id, EXTERNAL_SUFFIX)) {
        const actualId = unwrapId2(id, EXTERNAL_SUFFIX);
        return getUnknownRequireProxy(
          actualId,
          isEsmExternal(actualId) ? getRequireReturnsDefault(actualId) : true
        );
      }
      if (id.endsWith(ENTRY_SUFFIX)) {
        const acutalId = id.slice(0, -ENTRY_SUFFIX.length);
        const {
          meta: { commonjs: commonjsMeta }
        } = this.getModuleInfo(acutalId);
        const shebang = (commonjsMeta == null ? void 0 : commonjsMeta.shebang) ?? "";
        return getEntryProxy(
          acutalId,
          getDefaultIsModuleExports(acutalId),
          this.getModuleInfo,
          shebang
        );
      }
      if (isWrappedId(id, ES_IMPORT_SUFFIX)) {
        const actualId = unwrapId2(id, ES_IMPORT_SUFFIX);
        return getEsImportProxy(
          actualId,
          getDefaultIsModuleExports(actualId),
          (await this.load({ id: actualId })).moduleSideEffects
        );
      }
      if (id === DYNAMIC_MODULES_ID) {
        return getDynamicModuleRegistry(
          isDynamicRequireModulesEnabled,
          dynamicRequireModules,
          commonDir,
          ignoreDynamicRequires
        );
      }
      if (isWrappedId(id, PROXY_SUFFIX)) {
        const actualId = unwrapId2(id, PROXY_SUFFIX);
        return getStaticRequireProxy(actualId, getRequireReturnsDefault(actualId), this.load);
      }
      return null;
    },
    shouldTransformCachedModule(...args) {
      return requireResolver.shouldTransformCachedModule.call(this, ...args);
    },
    transform(code, id) {
      if (!isPossibleCjsId(id)) return null;
      try {
        return transformAndCheckExports.call(this, code, id);
      } catch (err2) {
        return this.error(err2, err2.pos);
      }
    }
  };
}
function perEnvironmentState(initial) {
  const stateMap = /* @__PURE__ */ new WeakMap();
  return function(context) {
    const { environment } = context;
    let state = stateMap.get(environment);
    if (!state) {
      state = initial(environment);
      stateMap.set(environment, state);
    }
    return state;
  };
}
var schemeRegex = /^[\w+.-]+:\/\//;
var urlRegex = /^([\w+.-]+:)\/\/([^@/#?]*@)?([^:/#?]*)(:\d+)?(\/[^#?]*)?(\?[^#]*)?(#.*)?/;
var fileRegex = /^file:(?:\/\/((?![a-z]:)[^/#?]*)?)?(\/?[^#?]*)(\?[^#]*)?(#.*)?/i;
function isAbsoluteUrl(input) {
  return schemeRegex.test(input);
}
function isSchemeRelativeUrl(input) {
  return input.startsWith("//");
}
function isAbsolutePath(input) {
  return input.startsWith("/");
}
function isFileUrl(input) {
  return input.startsWith("file:");
}
function isRelative(input) {
  return /^[.?#]/.test(input);
}
function parseAbsoluteUrl(input) {
  const match = urlRegex.exec(input);
  return makeUrl(match[1], match[2] || "", match[3], match[4] || "", match[5] || "/", match[6] || "", match[7] || "");
}
function parseFileUrl(input) {
  const match = fileRegex.exec(input);
  const path4 = match[2];
  return makeUrl("file:", "", match[1] || "", "", isAbsolutePath(path4) ? path4 : "/" + path4, match[3] || "", match[4] || "");
}
function makeUrl(scheme, user, host, port, path4, query, hash2) {
  return {
    scheme,
    user,
    host,
    port,
    path: path4,
    query,
    hash: hash2,
    type: 7
  };
}
function parseUrl$3(input) {
  if (isSchemeRelativeUrl(input)) {
    const url3 = parseAbsoluteUrl("http:" + input);
    url3.scheme = "";
    url3.type = 6;
    return url3;
  }
  if (isAbsolutePath(input)) {
    const url3 = parseAbsoluteUrl("http://foo.com" + input);
    url3.scheme = "";
    url3.host = "";
    url3.type = 5;
    return url3;
  }
  if (isFileUrl(input))
    return parseFileUrl(input);
  if (isAbsoluteUrl(input))
    return parseAbsoluteUrl(input);
  const url2 = parseAbsoluteUrl("http://foo.com/" + input);
  url2.scheme = "";
  url2.host = "";
  url2.type = input ? input.startsWith("?") ? 3 : input.startsWith("#") ? 2 : 4 : 1;
  return url2;
}
function stripPathFilename(path4) {
  if (path4.endsWith("/.."))
    return path4;
  const index = path4.lastIndexOf("/");
  return path4.slice(0, index + 1);
}
function mergePaths(url2, base) {
  normalizePath$4(base, base.type);
  if (url2.path === "/") {
    url2.path = base.path;
  } else {
    url2.path = stripPathFilename(base.path) + url2.path;
  }
}
function normalizePath$4(url2, type) {
  const rel = type <= 4;
  const pieces = url2.path.split("/");
  let pointer = 1;
  let positive = 0;
  let addTrailingSlash = false;
  for (let i = 1; i < pieces.length; i++) {
    const piece = pieces[i];
    if (!piece) {
      addTrailingSlash = true;
      continue;
    }
    addTrailingSlash = false;
    if (piece === ".")
      continue;
    if (piece === "..") {
      if (positive) {
        addTrailingSlash = true;
        positive--;
        pointer--;
      } else if (rel) {
        pieces[pointer++] = piece;
      }
      continue;
    }
    pieces[pointer++] = piece;
    positive++;
  }
  let path4 = "";
  for (let i = 1; i < pointer; i++) {
    path4 += "/" + pieces[i];
  }
  if (!path4 || addTrailingSlash && !path4.endsWith("/..")) {
    path4 += "/";
  }
  url2.path = path4;
}
function resolve$2(input, base) {
  if (!input && !base)
    return "";
  const url2 = parseUrl$3(input);
  let inputType = url2.type;
  if (base && inputType !== 7) {
    const baseUrl = parseUrl$3(base);
    const baseType = baseUrl.type;
    switch (inputType) {
      case 1:
        url2.hash = baseUrl.hash;
      // fall through
      case 2:
        url2.query = baseUrl.query;
      // fall through
      case 3:
      case 4:
        mergePaths(url2, baseUrl);
      // fall through
      case 5:
        url2.user = baseUrl.user;
        url2.host = baseUrl.host;
        url2.port = baseUrl.port;
      // fall through
      case 6:
        url2.scheme = baseUrl.scheme;
    }
    if (baseType > inputType)
      inputType = baseType;
  }
  normalizePath$4(url2, inputType);
  const queryHash = url2.query + url2.hash;
  switch (inputType) {
    // This is impossible, because of the empty checks at the start of the function.
    // case UrlType.Empty:
    case 2:
    case 3:
      return queryHash;
    case 4: {
      const path4 = url2.path.slice(1);
      if (!path4)
        return queryHash || ".";
      if (isRelative(base || input) && !isRelative(path4)) {
        return "./" + path4 + queryHash;
      }
      return path4 + queryHash;
    }
    case 5:
      return url2.path + queryHash;
    default:
      return url2.scheme + "//" + url2.user + url2.host + url2.port + url2.path + queryHash;
  }
}
function resolve$1(input, base) {
  if (base && !base.endsWith("/"))
    base += "/";
  return resolve$2(input, base);
}
function stripFilename(path4) {
  if (!path4)
    return "";
  const index = path4.lastIndexOf("/");
  return path4.slice(0, index + 1);
}
var COLUMN$1 = 0;
var SOURCES_INDEX$1 = 1;
var SOURCE_LINE$1 = 2;
var SOURCE_COLUMN$1 = 3;
var NAMES_INDEX$1 = 4;
function maybeSort(mappings, owned) {
  const unsortedIndex = nextUnsortedSegmentLine(mappings, 0);
  if (unsortedIndex === mappings.length)
    return mappings;
  if (!owned)
    mappings = mappings.slice();
  for (let i = unsortedIndex; i < mappings.length; i = nextUnsortedSegmentLine(mappings, i + 1)) {
    mappings[i] = sortSegments(mappings[i], owned);
  }
  return mappings;
}
function nextUnsortedSegmentLine(mappings, start) {
  for (let i = start; i < mappings.length; i++) {
    if (!isSorted(mappings[i]))
      return i;
  }
  return mappings.length;
}
function isSorted(line) {
  for (let j = 1; j < line.length; j++) {
    if (line[j][COLUMN$1] < line[j - 1][COLUMN$1]) {
      return false;
    }
  }
  return true;
}
function sortSegments(line, owned) {
  if (!owned)
    line = line.slice();
  return line.sort(sortComparator2);
}
function sortComparator2(a, b) {
  return a[COLUMN$1] - b[COLUMN$1];
}
var found2 = false;
function binarySearch2(haystack, needle, low, high) {
  while (low <= high) {
    const mid = low + (high - low >> 1);
    const cmp = haystack[mid][COLUMN$1] - needle;
    if (cmp === 0) {
      found2 = true;
      return mid;
    }
    if (cmp < 0) {
      low = mid + 1;
    } else {
      high = mid - 1;
    }
  }
  found2 = false;
  return low - 1;
}
function upperBound2(haystack, needle, index) {
  for (let i = index + 1; i < haystack.length; index = i++) {
    if (haystack[i][COLUMN$1] !== needle)
      break;
  }
  return index;
}
function lowerBound2(haystack, needle, index) {
  for (let i = index - 1; i >= 0; index = i--) {
    if (haystack[i][COLUMN$1] !== needle)
      break;
  }
  return index;
}
function memoizedState2() {
  return {
    lastKey: -1,
    lastNeedle: -1,
    lastIndex: -1
  };
}
function memoizedBinarySearch2(haystack, needle, state, key) {
  const { lastKey, lastNeedle, lastIndex } = state;
  let low = 0;
  let high = haystack.length - 1;
  if (key === lastKey) {
    if (needle === lastNeedle) {
      found2 = lastIndex !== -1 && haystack[lastIndex][COLUMN$1] === needle;
      return lastIndex;
    }
    if (needle >= lastNeedle) {
      low = lastIndex === -1 ? 0 : lastIndex;
    } else {
      high = lastIndex;
    }
  }
  state.lastKey = key;
  state.lastNeedle = needle;
  return state.lastIndex = binarySearch2(haystack, needle, low, high);
}
var LINE_GTR_ZERO2 = "`line` must be greater than 0 (lines start at line 1)";
var COL_GTR_EQ_ZERO2 = "`column` must be greater than or equal to 0 (columns start at column 0)";
var LEAST_UPPER_BOUND2 = -1;
var GREATEST_LOWER_BOUND2 = 1;
var TraceMap = class {
  constructor(map2, mapUrl) {
    const isString2 = typeof map2 === "string";
    if (!isString2 && map2._decodedMemo)
      return map2;
    const parsed = isString2 ? JSON.parse(map2) : map2;
    const { version: version3, file, names, sourceRoot, sources, sourcesContent } = parsed;
    this.version = version3;
    this.file = file;
    this.names = names || [];
    this.sourceRoot = sourceRoot;
    this.sources = sources;
    this.sourcesContent = sourcesContent;
    this.ignoreList = parsed.ignoreList || parsed.x_google_ignoreList || void 0;
    const from = resolve$1(sourceRoot || "", stripFilename(mapUrl));
    this.resolvedSources = sources.map((s2) => resolve$1(s2 || "", from));
    const { mappings } = parsed;
    if (typeof mappings === "string") {
      this._encoded = mappings;
      this._decoded = void 0;
    } else {
      this._encoded = void 0;
      this._decoded = maybeSort(mappings, isString2);
    }
    this._decodedMemo = memoizedState2();
    this._bySources = void 0;
    this._bySourceMemos = void 0;
  }
};
function cast$2(map2) {
  return map2;
}
function encodedMappings(map2) {
  var _a2;
  var _b;
  return (_a2 = (_b = cast$2(map2))._encoded) !== null && _a2 !== void 0 ? _a2 : _b._encoded = encode$1(cast$2(map2)._decoded);
}
function decodedMappings2(map2) {
  var _a2;
  return (_a2 = cast$2(map2))._decoded || (_a2._decoded = decode2(cast$2(map2)._encoded));
}
function traceSegment(map2, line, column) {
  const decoded = decodedMappings2(map2);
  if (line >= decoded.length)
    return null;
  const segments = decoded[line];
  const index = traceSegmentInternal2(segments, cast$2(map2)._decodedMemo, line, column, GREATEST_LOWER_BOUND2);
  return index === -1 ? null : segments[index];
}
function originalPositionFor$1(map2, needle) {
  let { line, column, bias } = needle;
  line--;
  if (line < 0)
    throw new Error(LINE_GTR_ZERO2);
  if (column < 0)
    throw new Error(COL_GTR_EQ_ZERO2);
  const decoded = decodedMappings2(map2);
  if (line >= decoded.length)
    return OMapping2(null, null, null, null);
  const segments = decoded[line];
  const index = traceSegmentInternal2(segments, cast$2(map2)._decodedMemo, line, column, bias || GREATEST_LOWER_BOUND2);
  if (index === -1)
    return OMapping2(null, null, null, null);
  const segment = segments[index];
  if (segment.length === 1)
    return OMapping2(null, null, null, null);
  const { names, resolvedSources } = map2;
  return OMapping2(resolvedSources[segment[SOURCES_INDEX$1]], segment[SOURCE_LINE$1] + 1, segment[SOURCE_COLUMN$1], segment.length === 5 ? names[segment[NAMES_INDEX$1]] : null);
}
function decodedMap(map2) {
  return clone(map2, decodedMappings2(map2));
}
function encodedMap(map2) {
  return clone(map2, encodedMappings(map2));
}
function clone(map2, mappings) {
  return {
    version: map2.version,
    file: map2.file,
    names: map2.names,
    sourceRoot: map2.sourceRoot,
    sources: map2.sources,
    sourcesContent: map2.sourcesContent,
    mappings,
    ignoreList: map2.ignoreList || map2.x_google_ignoreList
  };
}
function OMapping2(source, line, column, name) {
  return { source, line, column, name };
}
function traceSegmentInternal2(segments, memo, line, column, bias) {
  let index = memoizedBinarySearch2(segments, column, memo, line);
  if (found2) {
    index = (bias === LEAST_UPPER_BOUND2 ? upperBound2 : lowerBound2)(segments, column, index);
  } else if (bias === LEAST_UPPER_BOUND2)
    index++;
  if (index === -1 || index === segments.length)
    return -1;
  return index;
}
var SetArray = class {
  constructor() {
    this._indexes = { __proto__: null };
    this.array = [];
  }
};
function cast$1(set) {
  return set;
}
function get(setarr, key) {
  return cast$1(setarr)._indexes[key];
}
function put(setarr, key) {
  const index = get(setarr, key);
  if (index !== void 0)
    return index;
  const { array, _indexes: indexes } = cast$1(setarr);
  const length = array.push(key);
  return indexes[key] = length - 1;
}
function remove(setarr, key) {
  const index = get(setarr, key);
  if (index === void 0)
    return;
  const { array, _indexes: indexes } = cast$1(setarr);
  for (let i = index + 1; i < array.length; i++) {
    const k = array[i];
    array[i - 1] = k;
    indexes[k]--;
  }
  indexes[key] = void 0;
  array.pop();
}
var COLUMN2 = 0;
var SOURCES_INDEX2 = 1;
var SOURCE_LINE2 = 2;
var SOURCE_COLUMN2 = 3;
var NAMES_INDEX2 = 4;
var NO_NAME = -1;
var GenMapping = class {
  constructor({ file, sourceRoot } = {}) {
    this._names = new SetArray();
    this._sources = new SetArray();
    this._sourcesContent = [];
    this._mappings = [];
    this.file = file;
    this.sourceRoot = sourceRoot;
    this._ignoreList = new SetArray();
  }
};
function cast(map2) {
  return map2;
}
var maybeAddSegment = (map2, genLine, genColumn, source, sourceLine, sourceColumn, name, content) => {
  return addSegmentInternal(true, map2, genLine, genColumn, source, sourceLine, sourceColumn, name);
};
function setSourceContent(map2, source, content) {
  const { _sources: sources, _sourcesContent: sourcesContent } = cast(map2);
  const index = put(sources, source);
  sourcesContent[index] = content;
}
function setIgnore(map2, source, ignore = true) {
  const { _sources: sources, _sourcesContent: sourcesContent, _ignoreList: ignoreList } = cast(map2);
  const index = put(sources, source);
  if (index === sourcesContent.length)
    sourcesContent[index] = null;
  if (ignore)
    put(ignoreList, index);
  else
    remove(ignoreList, index);
}
function toDecodedMap(map2) {
  const { _mappings: mappings, _sources: sources, _sourcesContent: sourcesContent, _names: names, _ignoreList: ignoreList } = cast(map2);
  removeEmptyFinalLines(mappings);
  return {
    version: 3,
    file: map2.file || void 0,
    names: names.array,
    sourceRoot: map2.sourceRoot || void 0,
    sources: sources.array,
    sourcesContent,
    mappings,
    ignoreList: ignoreList.array
  };
}
function toEncodedMap(map2) {
  const decoded = toDecodedMap(map2);
  return Object.assign(Object.assign({}, decoded), { mappings: encode$1(decoded.mappings) });
}
function addSegmentInternal(skipable, map2, genLine, genColumn, source, sourceLine, sourceColumn, name, content) {
  const { _mappings: mappings, _sources: sources, _sourcesContent: sourcesContent, _names: names } = cast(map2);
  const line = getLine(mappings, genLine);
  const index = getColumnIndex(line, genColumn);
  if (!source) {
    if (skipSourceless(line, index))
      return;
    return insert(line, index, [genColumn]);
  }
  const sourcesIndex = put(sources, source);
  const namesIndex = name ? put(names, name) : NO_NAME;
  if (sourcesIndex === sourcesContent.length)
    sourcesContent[sourcesIndex] = null;
  if (skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex)) {
    return;
  }
  return insert(line, index, name ? [genColumn, sourcesIndex, sourceLine, sourceColumn, namesIndex] : [genColumn, sourcesIndex, sourceLine, sourceColumn]);
}
function getLine(mappings, index) {
  for (let i = mappings.length; i <= index; i++) {
    mappings[i] = [];
  }
  return mappings[index];
}
function getColumnIndex(line, genColumn) {
  let index = line.length;
  for (let i = index - 1; i >= 0; index = i--) {
    const current = line[i];
    if (genColumn >= current[COLUMN2])
      break;
  }
  return index;
}
function insert(array, index, value2) {
  for (let i = array.length; i > index; i--) {
    array[i] = array[i - 1];
  }
  array[index] = value2;
}
function removeEmptyFinalLines(mappings) {
  const { length } = mappings;
  let len = length;
  for (let i = len - 1; i >= 0; len = i, i--) {
    if (mappings[i].length > 0)
      break;
  }
  if (len < length)
    mappings.length = len;
}
function skipSourceless(line, index) {
  if (index === 0)
    return true;
  const prev = line[index - 1];
  return prev.length === 1;
}
function skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex) {
  if (index === 0)
    return false;
  const prev = line[index - 1];
  if (prev.length === 1)
    return false;
  return sourcesIndex === prev[SOURCES_INDEX2] && sourceLine === prev[SOURCE_LINE2] && sourceColumn === prev[SOURCE_COLUMN2] && namesIndex === (prev.length === 5 ? prev[NAMES_INDEX2] : NO_NAME);
}
var SOURCELESS_MAPPING = SegmentObject("", -1, -1, "", null, false);
var EMPTY_SOURCES = [];
function SegmentObject(source, line, column, name, content, ignore) {
  return { source, line, column, name, content, ignore };
}
function Source(map2, sources, source, content, ignore) {
  return {
    map: map2,
    sources,
    source,
    content,
    ignore
  };
}
function MapSource(map2, sources) {
  return Source(map2, sources, "", null, false);
}
function OriginalSource(source, content, ignore) {
  return Source(null, EMPTY_SOURCES, source, content, ignore);
}
function traceMappings(tree) {
  const gen = new GenMapping({ file: tree.map.file });
  const { sources: rootSources, map: map2 } = tree;
  const rootNames = map2.names;
  const rootMappings = decodedMappings2(map2);
  for (let i = 0; i < rootMappings.length; i++) {
    const segments = rootMappings[i];
    for (let j = 0; j < segments.length; j++) {
      const segment = segments[j];
      const genCol = segment[0];
      let traced = SOURCELESS_MAPPING;
      if (segment.length !== 1) {
        const source2 = rootSources[segment[1]];
        traced = originalPositionFor2(source2, segment[2], segment[3], segment.length === 5 ? rootNames[segment[4]] : "");
        if (traced == null)
          continue;
      }
      const { column, line, name, content, source, ignore } = traced;
      maybeAddSegment(gen, i, genCol, source, line, column, name);
      if (source && content != null)
        setSourceContent(gen, source, content);
      if (ignore)
        setIgnore(gen, source, true);
    }
  }
  return gen;
}
function originalPositionFor2(source, line, column, name) {
  if (!source.map) {
    return SegmentObject(source.source, line, column, name, source.content, source.ignore);
  }
  const segment = traceSegment(source.map, line, column);
  if (segment == null)
    return null;
  if (segment.length === 1)
    return SOURCELESS_MAPPING;
  return originalPositionFor2(source.sources[segment[1]], segment[2], segment[3], segment.length === 5 ? source.map.names[segment[4]] : name);
}
function asArray(value2) {
  if (Array.isArray(value2))
    return value2;
  return [value2];
}
function buildSourceMapTree(input, loader2) {
  const maps = asArray(input).map((m2) => new TraceMap(m2, ""));
  const map2 = maps.pop();
  for (let i = 0; i < maps.length; i++) {
    if (maps[i].sources.length > 1) {
      throw new Error(`Transformation map ${i} must have exactly one source file.
Did you specify these with the most recent transformation maps first?`);
    }
  }
  let tree = build$2(map2, loader2, "", 0);
  for (let i = maps.length - 1; i >= 0; i--) {
    tree = MapSource(maps[i], [tree]);
  }
  return tree;
}
function build$2(map2, loader2, importer, importerDepth) {
  const { resolvedSources, sourcesContent, ignoreList } = map2;
  const depth = importerDepth + 1;
  const children = resolvedSources.map((sourceFile, i) => {
    const ctx = {
      importer,
      depth,
      source: sourceFile || "",
      content: void 0,
      ignore: void 0
    };
    const sourceMap = loader2(ctx.source, ctx);
    const { source } = ctx;
    if (sourceMap)
      return build$2(new TraceMap(sourceMap, source), loader2, source, depth);
    const sourceContent = sourcesContent ? sourcesContent[i] : null;
    const ignored = ignoreList ? ignoreList.includes(i) : false;
    return OriginalSource(source, sourceContent, ignored);
  });
  return MapSource(map2, children);
}
var SourceMap2 = class {
  constructor(map2, options2) {
    const out = options2.decodedMappings ? toDecodedMap(map2) : toEncodedMap(map2);
    this.version = out.version;
    this.file = out.file;
    this.mappings = out.mappings;
    this.names = out.names;
    this.ignoreList = out.ignoreList;
    this.sourceRoot = out.sourceRoot;
    this.sources = out.sources;
    if (!options2.excludeContent) {
      this.sourcesContent = out.sourcesContent;
    }
  }
  toString() {
    return JSON.stringify(this);
  }
};
function remapping(input, loader2, options2) {
  const opts = { excludeContent: false, decodedMappings: false };
  const tree = buildSourceMapTree(input, loader2);
  return new SourceMap2(traceMappings(tree), opts);
}
var node$1 = { exports: {} };
var ms$1;
var hasRequiredMs;
function requireMs() {
  if (hasRequiredMs) return ms$1;
  hasRequiredMs = 1;
  var s2 = 1e3;
  var m2 = s2 * 60;
  var h2 = m2 * 60;
  var d2 = h2 * 24;
  var w = d2 * 7;
  var y2 = d2 * 365.25;
  ms$1 = function(val, options2) {
    options2 = options2 || {};
    var type = typeof val;
    if (type === "string" && val.length > 0) {
      return parse4(val);
    } else if (type === "number" && isFinite(val)) {
      return options2.long ? fmtLong2(val) : fmtShort2(val);
    }
    throw new Error(
      "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
    );
  };
  function parse4(str) {
    str = String(str);
    if (str.length > 100) {
      return;
    }
    var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
      str
    );
    if (!match) {
      return;
    }
    var n2 = parseFloat(match[1]);
    var type = (match[2] || "ms").toLowerCase();
    switch (type) {
      case "years":
      case "year":
      case "yrs":
      case "yr":
      case "y":
        return n2 * y2;
      case "weeks":
      case "week":
      case "w":
        return n2 * w;
      case "days":
      case "day":
      case "d":
        return n2 * d2;
      case "hours":
      case "hour":
      case "hrs":
      case "hr":
      case "h":
        return n2 * h2;
      case "minutes":
      case "minute":
      case "mins":
      case "min":
      case "m":
        return n2 * m2;
      case "seconds":
      case "second":
      case "secs":
      case "sec":
      case "s":
        return n2 * s2;
      case "milliseconds":
      case "millisecond":
      case "msecs":
      case "msec":
      case "ms":
        return n2;
      default:
        return void 0;
    }
  }
  function fmtShort2(ms2) {
    var msAbs = Math.abs(ms2);
    if (msAbs >= d2) {
      return Math.round(ms2 / d2) + "d";
    }
    if (msAbs >= h2) {
      return Math.round(ms2 / h2) + "h";
    }
    if (msAbs >= m2) {
      return Math.round(ms2 / m2) + "m";
    }
    if (msAbs >= s2) {
      return Math.round(ms2 / s2) + "s";
    }
    return ms2 + "ms";
  }
  function fmtLong2(ms2) {
    var msAbs = Math.abs(ms2);
    if (msAbs >= d2) {
      return plural2(ms2, msAbs, d2, "day");
    }
    if (msAbs >= h2) {
      return plural2(ms2, msAbs, h2, "hour");
    }
    if (msAbs >= m2) {
      return plural2(ms2, msAbs, m2, "minute");
    }
    if (msAbs >= s2) {
      return plural2(ms2, msAbs, s2, "second");
    }
    return ms2 + " ms";
  }
  function plural2(ms2, msAbs, n2, name) {
    var isPlural = msAbs >= n2 * 1.5;
    return Math.round(ms2 / n2) + " " + name + (isPlural ? "s" : "");
  }
  return ms$1;
}
var common$4;
var hasRequiredCommon;
function requireCommon() {
  if (hasRequiredCommon) return common$4;
  hasRequiredCommon = 1;
  function setup(env2) {
    createDebug.debug = createDebug;
    createDebug.default = createDebug;
    createDebug.coerce = coerce;
    createDebug.disable = disable;
    createDebug.enable = enable;
    createDebug.enabled = enabled;
    createDebug.humanize = requireMs();
    createDebug.destroy = destroy2;
    Object.keys(env2).forEach((key) => {
      createDebug[key] = env2[key];
    });
    createDebug.names = [];
    createDebug.skips = [];
    createDebug.formatters = {};
    function selectColor(namespace) {
      let hash2 = 0;
      for (let i = 0; i < namespace.length; i++) {
        hash2 = (hash2 << 5) - hash2 + namespace.charCodeAt(i);
        hash2 |= 0;
      }
      return createDebug.colors[Math.abs(hash2) % createDebug.colors.length];
    }
    createDebug.selectColor = selectColor;
    function createDebug(namespace) {
      let prevTime;
      let enableOverride = null;
      let namespacesCache;
      let enabledCache;
      function debug2(...args) {
        if (!debug2.enabled) {
          return;
        }
        const self2 = debug2;
        const curr = Number(/* @__PURE__ */ new Date());
        const ms2 = curr - (prevTime || curr);
        self2.diff = ms2;
        self2.prev = prevTime;
        self2.curr = curr;
        prevTime = curr;
        args[0] = createDebug.coerce(args[0]);
        if (typeof args[0] !== "string") {
          args.unshift("%O");
        }
        let index = 0;
        args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format2) => {
          if (match === "%%") {
            return "%";
          }
          index++;
          const formatter2 = createDebug.formatters[format2];
          if (typeof formatter2 === "function") {
            const val = args[index];
            match = formatter2.call(self2, val);
            args.splice(index, 1);
            index--;
          }
          return match;
        });
        createDebug.formatArgs.call(self2, args);
        const logFn = self2.log || createDebug.log;
        logFn.apply(self2, args);
      }
      debug2.namespace = namespace;
      debug2.useColors = createDebug.useColors();
      debug2.color = createDebug.selectColor(namespace);
      debug2.extend = extend;
      debug2.destroy = createDebug.destroy;
      Object.defineProperty(debug2, "enabled", {
        enumerable: true,
        configurable: false,
        get: () => {
          if (enableOverride !== null) {
            return enableOverride;
          }
          if (namespacesCache !== createDebug.namespaces) {
            namespacesCache = createDebug.namespaces;
            enabledCache = createDebug.enabled(namespace);
          }
          return enabledCache;
        },
        set: (v) => {
          enableOverride = v;
        }
      });
      if (typeof createDebug.init === "function") {
        createDebug.init(debug2);
      }
      return debug2;
    }
    function extend(namespace, delimiter) {
      const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
      newDebug.log = this.log;
      return newDebug;
    }
    function enable(namespaces) {
      createDebug.save(namespaces);
      createDebug.namespaces = namespaces;
      createDebug.names = [];
      createDebug.skips = [];
      const split = (typeof namespaces === "string" ? namespaces : "").trim().replace(" ", ",").split(",").filter(Boolean);
      for (const ns of split) {
        if (ns[0] === "-") {
          createDebug.skips.push(ns.slice(1));
        } else {
          createDebug.names.push(ns);
        }
      }
    }
    function matchesTemplate(search, template) {
      let searchIndex = 0;
      let templateIndex = 0;
      let starIndex = -1;
      let matchIndex = 0;
      while (searchIndex < search.length) {
        if (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || template[templateIndex] === "*")) {
          if (template[templateIndex] === "*") {
            starIndex = templateIndex;
            matchIndex = searchIndex;
            templateIndex++;
          } else {
            searchIndex++;
            templateIndex++;
          }
        } else if (starIndex !== -1) {
          templateIndex = starIndex + 1;
          matchIndex++;
          searchIndex = matchIndex;
        } else {
          return false;
        }
      }
      while (templateIndex < template.length && template[templateIndex] === "*") {
        templateIndex++;
      }
      return templateIndex === template.length;
    }
    function disable() {
      const namespaces = [
        ...createDebug.names,
        ...createDebug.skips.map((namespace) => "-" + namespace)
      ].join(",");
      createDebug.enable("");
      return namespaces;
    }
    function enabled(name) {
      for (const skip of createDebug.skips) {
        if (matchesTemplate(name, skip)) {
          return false;
        }
      }
      for (const ns of createDebug.names) {
        if (matchesTemplate(name, ns)) {
          return true;
        }
      }
      return false;
    }
    function coerce(val) {
      if (val instanceof Error) {
        return val.stack || val.message;
      }
      return val;
    }
    function destroy2() {
      console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
    }
    createDebug.enable(createDebug.load());
    return createDebug;
  }
  common$4 = setup;
  return common$4;
}
(function(module, exports) {
  const tty = import_tty.default;
  const util2 = import_util.default;
  exports.init = init2;
  exports.log = log2;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load2;
  exports.useColors = useColors;
  exports.destroy = util2.deprecate(
    () => {
    },
    "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."
  );
  exports.colors = [6, 2, 3, 4, 5, 1];
  try {
    const supportsColor = __require("supports-color");
    if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
      exports.colors = [
        20,
        21,
        26,
        27,
        32,
        33,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        56,
        57,
        62,
        63,
        68,
        69,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        92,
        93,
        98,
        99,
        112,
        113,
        128,
        129,
        134,
        135,
        148,
        149,
        160,
        161,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        171,
        172,
        173,
        178,
        179,
        184,
        185,
        196,
        197,
        198,
        199,
        200,
        201,
        202,
        203,
        204,
        205,
        206,
        207,
        208,
        209,
        214,
        215,
        220,
        221
      ];
    }
  } catch (error2) {
  }
  exports.inspectOpts = Object.keys(process.env).filter((key) => {
    return /^debug_/i.test(key);
  }).reduce((obj, key) => {
    const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_, k) => {
      return k.toUpperCase();
    });
    let val = process.env[key];
    if (/^(yes|on|true|enabled)$/i.test(val)) {
      val = true;
    } else if (/^(no|off|false|disabled)$/i.test(val)) {
      val = false;
    } else if (val === "null") {
      val = null;
    } else {
      val = Number(val);
    }
    obj[prop] = val;
    return obj;
  }, {});
  function useColors() {
    return "colors" in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(process.stderr.fd);
  }
  function formatArgs(args) {
    const { namespace: name, useColors: useColors2 } = this;
    if (useColors2) {
      const c = this.color;
      const colorCode = "\x1B[3" + (c < 8 ? c : "8;5;" + c);
      const prefix = `  ${colorCode};1m${name} \x1B[0m`;
      args[0] = prefix + args[0].split("\n").join("\n" + prefix);
      args.push(colorCode + "m+" + module.exports.humanize(this.diff) + "\x1B[0m");
    } else {
      args[0] = getDate() + name + " " + args[0];
    }
  }
  function getDate() {
    if (exports.inspectOpts.hideDate) {
      return "";
    }
    return (/* @__PURE__ */ new Date()).toISOString() + " ";
  }
  function log2(...args) {
    return process.stderr.write(util2.formatWithOptions(exports.inspectOpts, ...args) + "\n");
  }
  function save(namespaces) {
    if (namespaces) {
      process.env.DEBUG = namespaces;
    } else {
      delete process.env.DEBUG;
    }
  }
  function load2() {
    return process.env.DEBUG;
  }
  function init2(debug2) {
    debug2.inspectOpts = {};
    const keys = Object.keys(exports.inspectOpts);
    for (let i = 0; i < keys.length; i++) {
      debug2.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
    }
  }
  module.exports = requireCommon()(exports);
  const { formatters } = module.exports;
  formatters.o = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util2.inspect(v, this.inspectOpts).split("\n").map((str) => str.trim()).join(" ");
  };
  formatters.O = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util2.inspect(v, this.inspectOpts);
  };
})(node$1, node$1.exports);
var nodeExports$1 = node$1.exports;
var debug$j = getDefaultExportFromCjs(nodeExports$1);
var pnp;
if (process.versions.pnp) {
  try {
    pnp = (0, import_node_module.createRequire)(import.meta.url)("pnpapi");
  } catch {
  }
}
function invalidatePackageData(packageCache, pkgPath) {
  const pkgDir = normalizePath$3(import_node_path3.default.dirname(pkgPath));
  packageCache.forEach((pkg, cacheKey) => {
    if (pkg.dir === pkgDir) {
      packageCache.delete(cacheKey);
    }
  });
}
function resolvePackageData(pkgName, basedir, preserveSymlinks = false, packageCache) {
  if (pnp) {
    const cacheKey = getRpdCacheKey(pkgName, basedir, preserveSymlinks);
    if (packageCache == null ? void 0 : packageCache.has(cacheKey)) return packageCache.get(cacheKey);
    try {
      const pkg = pnp.resolveToUnqualified(pkgName, basedir, {
        considerBuiltins: false
      });
      if (!pkg) return null;
      const pkgData = loadPackageData(import_node_path3.default.join(pkg, "package.json"));
      packageCache == null ? void 0 : packageCache.set(cacheKey, pkgData);
      return pkgData;
    } catch {
      return null;
    }
  }
  const originalBasedir = basedir;
  while (basedir) {
    if (packageCache) {
      const cached = getRpdCache(
        packageCache,
        pkgName,
        basedir,
        originalBasedir,
        preserveSymlinks
      );
      if (cached) return cached;
    }
    const pkg = import_node_path3.default.join(basedir, "node_modules", pkgName, "package.json");
    try {
      if (import_node_fs2.default.existsSync(pkg)) {
        const pkgPath = preserveSymlinks ? pkg : safeRealpathSync(pkg);
        const pkgData = loadPackageData(pkgPath);
        if (packageCache) {
          setRpdCache(
            packageCache,
            pkgData,
            pkgName,
            basedir,
            originalBasedir,
            preserveSymlinks
          );
        }
        return pkgData;
      }
    } catch {
    }
    const nextBasedir = import_node_path3.default.dirname(basedir);
    if (nextBasedir === basedir) break;
    basedir = nextBasedir;
  }
  return null;
}
function findNearestPackageData(basedir, packageCache) {
  var _a2;
  const originalBasedir = basedir;
  while (basedir) {
    if (packageCache) {
      const cached = getFnpdCache(packageCache, basedir, originalBasedir);
      if (cached) return cached;
    }
    const pkgPath = import_node_path3.default.join(basedir, "package.json");
    if ((_a2 = tryStatSync(pkgPath)) == null ? void 0 : _a2.isFile()) {
      try {
        const pkgData = loadPackageData(pkgPath);
        if (packageCache) {
          setFnpdCache(packageCache, pkgData, basedir, originalBasedir);
        }
        return pkgData;
      } catch {
      }
    }
    const nextBasedir = import_node_path3.default.dirname(basedir);
    if (nextBasedir === basedir) break;
    basedir = nextBasedir;
  }
  return null;
}
function findNearestMainPackageData(basedir, packageCache) {
  const nearestPackage = findNearestPackageData(basedir, packageCache);
  return nearestPackage && (nearestPackage.data.name ? nearestPackage : findNearestMainPackageData(
    import_node_path3.default.dirname(nearestPackage.dir),
    packageCache
  ));
}
function loadPackageData(pkgPath) {
  const data = JSON.parse(stripBomTag(import_node_fs2.default.readFileSync(pkgPath, "utf-8")));
  const pkgDir = normalizePath$3(import_node_path3.default.dirname(pkgPath));
  const { sideEffects } = data;
  let hasSideEffects;
  if (typeof sideEffects === "boolean") {
    hasSideEffects = () => sideEffects;
  } else if (Array.isArray(sideEffects)) {
    if (sideEffects.length <= 0) {
      hasSideEffects = () => false;
    } else {
      const finalPackageSideEffects = sideEffects.map((sideEffect) => {
        if (sideEffect.includes("/")) {
          return sideEffect;
        }
        return `**/${sideEffect}`;
      });
      hasSideEffects = createFilter$1(finalPackageSideEffects, null, {
        resolve: pkgDir
      });
    }
  } else {
    hasSideEffects = () => null;
  }
  const resolvedCache = {};
  const pkg = {
    dir: pkgDir,
    data,
    hasSideEffects,
    setResolvedCache(key, entry, options2) {
      resolvedCache[getResolveCacheKey(key, options2)] = entry;
    },
    getResolvedCache(key, options2) {
      return resolvedCache[getResolveCacheKey(key, options2)];
    }
  };
  return pkg;
}
function getResolveCacheKey(key, options2) {
  return [
    key,
    options2.isRequire ? "1" : "0",
    options2.conditions.join("_"),
    options2.extensions.join("_"),
    options2.mainFields.join("_")
  ].join("|");
}
function findNearestNodeModules(basedir) {
  var _a2;
  while (basedir) {
    const pkgPath = import_node_path3.default.join(basedir, "node_modules");
    if ((_a2 = tryStatSync(pkgPath)) == null ? void 0 : _a2.isDirectory()) {
      return pkgPath;
    }
    const nextBasedir = import_node_path3.default.dirname(basedir);
    if (nextBasedir === basedir) break;
    basedir = nextBasedir;
  }
  return null;
}
function watchPackageDataPlugin(packageCache) {
  const watchQueue = /* @__PURE__ */ new Set();
  const watchedDirs = /* @__PURE__ */ new Set();
  const watchFileStub = (id) => {
    watchQueue.add(id);
  };
  let watchFile = watchFileStub;
  const setPackageData = packageCache.set.bind(packageCache);
  packageCache.set = (id, pkg) => {
    if (!isInNodeModules$1(pkg.dir) && !watchedDirs.has(pkg.dir)) {
      watchedDirs.add(pkg.dir);
      watchFile(import_node_path3.default.join(pkg.dir, "package.json"));
    }
    return setPackageData(id, pkg);
  };
  return {
    name: "vite:watch-package-data",
    buildStart() {
      watchFile = this.addWatchFile.bind(this);
      watchQueue.forEach(watchFile);
      watchQueue.clear();
    },
    buildEnd() {
      watchFile = watchFileStub;
    },
    watchChange(id) {
      if (id.endsWith("/package.json")) {
        invalidatePackageData(packageCache, import_node_path3.default.normalize(id));
      }
    }
  };
}
function getRpdCache(packageCache, pkgName, basedir, originalBasedir, preserveSymlinks) {
  const cacheKey = getRpdCacheKey(pkgName, basedir, preserveSymlinks);
  const pkgData = packageCache.get(cacheKey);
  if (pkgData) {
    traverseBetweenDirs(originalBasedir, basedir, (dir) => {
      packageCache.set(getRpdCacheKey(pkgName, dir, preserveSymlinks), pkgData);
    });
    return pkgData;
  }
}
function setRpdCache(packageCache, pkgData, pkgName, basedir, originalBasedir, preserveSymlinks) {
  packageCache.set(getRpdCacheKey(pkgName, basedir, preserveSymlinks), pkgData);
  traverseBetweenDirs(originalBasedir, basedir, (dir) => {
    packageCache.set(getRpdCacheKey(pkgName, dir, preserveSymlinks), pkgData);
  });
}
function getRpdCacheKey(pkgName, basedir, preserveSymlinks) {
  return `rpd_${pkgName}_${basedir}_${preserveSymlinks}`;
}
function getFnpdCache(packageCache, basedir, originalBasedir) {
  const cacheKey = getFnpdCacheKey(basedir);
  const pkgData = packageCache.get(cacheKey);
  if (pkgData) {
    traverseBetweenDirs(originalBasedir, basedir, (dir) => {
      packageCache.set(getFnpdCacheKey(dir), pkgData);
    });
    return pkgData;
  }
}
function setFnpdCache(packageCache, pkgData, basedir, originalBasedir) {
  packageCache.set(getFnpdCacheKey(basedir), pkgData);
  traverseBetweenDirs(originalBasedir, basedir, (dir) => {
    packageCache.set(getFnpdCacheKey(dir), pkgData);
  });
}
function getFnpdCacheKey(basedir) {
  return `fnpd_${basedir}`;
}
function traverseBetweenDirs(longerDir, shorterDir, cb) {
  while (longerDir !== shorterDir) {
    cb(longerDir);
    longerDir = import_node_path3.default.dirname(longerDir);
  }
}
var createFilter$1 = createFilter$2;
var replaceSlashOrColonRE = /[/:]/g;
var replaceDotRE = /\./g;
var replaceNestedIdRE = /\s*>\s*/g;
var replaceHashRE = /#/g;
var flattenId = (id) => {
  const flatId = limitFlattenIdLength(
    id.replace(replaceSlashOrColonRE, "_").replace(replaceDotRE, "__").replace(replaceNestedIdRE, "___").replace(replaceHashRE, "____")
  );
  return flatId;
};
var FLATTEN_ID_HASH_LENGTH = 8;
var FLATTEN_ID_MAX_FILE_LENGTH = 170;
var limitFlattenIdLength = (id, limit = FLATTEN_ID_MAX_FILE_LENGTH) => {
  if (id.length <= limit) {
    return id;
  }
  return id.slice(0, limit - (FLATTEN_ID_HASH_LENGTH + 1)) + "_" + getHash(id);
};
var normalizeId = (id) => id.replace(replaceNestedIdRE, " > ");
var NODE_BUILTIN_NAMESPACE = "node:";
var NPM_BUILTIN_NAMESPACE = "npm:";
var BUN_BUILTIN_NAMESPACE = "bun:";
var nodeBuiltins = import_node_module.builtinModules.filter((id) => !id.includes(":"));
var isBuiltinCache = /* @__PURE__ */ new WeakMap();
function isBuiltin(builtins2, id) {
  let isBuiltin2 = isBuiltinCache.get(builtins2);
  if (!isBuiltin2) {
    isBuiltin2 = createIsBuiltin(builtins2);
    isBuiltinCache.set(builtins2, isBuiltin2);
  }
  return isBuiltin2(id);
}
function createIsBuiltin(builtins2) {
  const plainBuiltinsSet = new Set(
    builtins2.filter((builtin) => typeof builtin === "string")
  );
  const regexBuiltins = builtins2.filter(
    (builtin) => typeof builtin !== "string"
  );
  return (id) => plainBuiltinsSet.has(id) || regexBuiltins.some((regexp) => regexp.test(id));
}
var nodeLikeBuiltins = [
  ...nodeBuiltins,
  new RegExp(`^${NODE_BUILTIN_NAMESPACE}`),
  new RegExp(`^${NPM_BUILTIN_NAMESPACE}`),
  new RegExp(`^${BUN_BUILTIN_NAMESPACE}`)
];
function isNodeLikeBuiltin(id) {
  return isBuiltin(nodeLikeBuiltins, id);
}
function isNodeBuiltin(id) {
  if (id.startsWith(NODE_BUILTIN_NAMESPACE)) return true;
  return nodeBuiltins.includes(id);
}
function isInNodeModules$1(id) {
  return id.includes("node_modules");
}
function moduleListContains(moduleList, id) {
  return moduleList == null ? void 0 : moduleList.some(
    (m2) => m2 === id || id.startsWith(withTrailingSlash(m2))
  );
}
function isOptimizable(id, optimizeDeps2) {
  const { extensions: extensions2 } = optimizeDeps2;
  return OPTIMIZABLE_ENTRY_RE.test(id) || ((extensions2 == null ? void 0 : extensions2.some((ext) => id.endsWith(ext))) ?? false);
}
var bareImportRE = /^(?![a-zA-Z]:)[\w@](?!.*:\/\/)/;
var deepImportRE = /^([^@][^/]*)\/|^(@[^/]+\/[^/]+)\//;
var _require$1 = (0, import_node_module.createRequire)(import.meta.url);
var _dirname = import_node_path3.default.dirname((0, import_node_url2.fileURLToPath)(import.meta.url));
var _a;
var rollupVersion = ((_a = resolvePackageData("rollup", _dirname, true)) == null ? void 0 : _a.data.version) ?? "";
var filter = process.env.VITE_DEBUG_FILTER;
var DEBUG = process.env.DEBUG;
function createDebugger(namespace, options2 = {}) {
  const log2 = debug$j(namespace);
  const { onlyWhenFocused, depth } = options2;
  if (depth && log2.inspectOpts && log2.inspectOpts.depth == null) {
    log2.inspectOpts.depth = options2.depth;
  }
  let enabled = log2.enabled;
  if (enabled && onlyWhenFocused) {
    const ns = typeof onlyWhenFocused === "string" ? onlyWhenFocused : namespace;
    enabled = !!(DEBUG == null ? void 0 : DEBUG.includes(ns));
  }
  if (enabled) {
    return (...args) => {
      if (!filter || args.some((a) => {
        var _a2;
        return (_a2 = a == null ? void 0 : a.includes) == null ? void 0 : _a2.call(a, filter);
      })) {
        log2(...args);
      }
    };
  }
}
function testCaseInsensitiveFS() {
  if (!CLIENT_ENTRY.endsWith("client.mjs")) {
    throw new Error(
      `cannot test case insensitive FS, CLIENT_ENTRY const doesn't contain client.mjs`
    );
  }
  if (!import_node_fs2.default.existsSync(CLIENT_ENTRY)) {
    throw new Error(
      "cannot test case insensitive FS, CLIENT_ENTRY does not point to an existing file: " + CLIENT_ENTRY
    );
  }
  return import_node_fs2.default.existsSync(CLIENT_ENTRY.replace("client.mjs", "cLiEnT.mjs"));
}
var urlCanParse = (
  // eslint-disable-next-line n/no-unsupported-features/node-builtins
  import_node_url2.URL.canParse ?? // URL.canParse is supported from Node.js 18.17.0+, 20.0.0+
  ((path22, base) => {
    try {
      new import_node_url2.URL(path22, base);
      return true;
    } catch {
      return false;
    }
  })
);
var isCaseInsensitiveFS = testCaseInsensitiveFS();
var VOLUME_RE = /^[A-Z]:/i;
function normalizePath$3(id) {
  return import_node_path3.default.posix.normalize(isWindows$3 ? slash$1(id) : id);
}
function fsPathFromId(id) {
  const fsPath = normalizePath$3(
    id.startsWith(FS_PREFIX) ? id.slice(FS_PREFIX.length) : id
  );
  return fsPath[0] === "/" || VOLUME_RE.test(fsPath) ? fsPath : `/${fsPath}`;
}
function fsPathFromUrl(url2) {
  return fsPathFromId(cleanUrl2(url2));
}
function isParentDirectory(dir, file) {
  dir = withTrailingSlash(dir);
  return file.startsWith(dir) || isCaseInsensitiveFS && file.toLowerCase().startsWith(dir.toLowerCase());
}
function isSameFileUri(file1, file2) {
  return file1 === file2 || isCaseInsensitiveFS && file1.toLowerCase() === file2.toLowerCase();
}
var externalRE = /^([a-z]+:)?\/\//;
var isExternalUrl = (url2) => externalRE.test(url2);
var dataUrlRE = /^\s*data:/i;
var isDataUrl = (url2) => dataUrlRE.test(url2);
var virtualModuleRE = /^virtual-module:.*/;
var virtualModulePrefix = "virtual-module:";
var knownJsSrcRE = /\.(?:[jt]sx?|m[jt]s|vue|marko|svelte|astro|imba|mdx)(?:$|\?)/;
var isJSRequest = (url2) => {
  url2 = cleanUrl2(url2);
  if (knownJsSrcRE.test(url2)) {
    return true;
  }
  if (!import_node_path3.default.extname(url2) && url2[url2.length - 1] !== "/") {
    return true;
  }
  return false;
};
var importQueryRE = /(\?|&)import=?(?:&|$)/;
var directRequestRE$1 = /(\?|&)direct=?(?:&|$)/;
var internalPrefixes = [
  FS_PREFIX,
  VALID_ID_PREFIX2,
  CLIENT_PUBLIC_PATH,
  ENV_PUBLIC_PATH
];
var InternalPrefixRE = new RegExp(`^(?:${internalPrefixes.join("|")})`);
var trailingSeparatorRE = /[?&]$/;
var isImportRequest = (url2) => importQueryRE.test(url2);
var isInternalRequest = (url2) => InternalPrefixRE.test(url2);
function removeImportQuery(url2) {
  return url2.replace(importQueryRE, "$1").replace(trailingSeparatorRE, "");
}
function removeDirectQuery(url2) {
  return url2.replace(directRequestRE$1, "$1").replace(trailingSeparatorRE, "");
}
var urlRE$1 = /(\?|&)url(?:&|$)/;
var rawRE$1 = /(\?|&)raw(?:&|$)/;
function removeUrlQuery(url2) {
  return url2.replace(urlRE$1, "$1").replace(trailingSeparatorRE, "");
}
function injectQuery(url2, queryToInject) {
  const { file, postfix } = splitFileAndPostfix(url2);
  const normalizedFile = isWindows$3 ? slash$1(file) : file;
  return `${normalizedFile}?${queryToInject}${postfix[0] === "?" ? `&${postfix.slice(1)}` : (
    /* hash only */
    postfix
  )}`;
}
var timestampRE = /\bt=\d{13}&?\b/;
function removeTimestampQuery(url2) {
  return url2.replace(timestampRE, "").replace(trailingSeparatorRE, "");
}
async function asyncReplace(input, re, replacer) {
  let match;
  let remaining = input;
  let rewritten = "";
  while (match = re.exec(remaining)) {
    rewritten += remaining.slice(0, match.index);
    rewritten += await replacer(match);
    remaining = remaining.slice(match.index + match[0].length);
  }
  rewritten += remaining;
  return rewritten;
}
function timeFrom(start, subtract = 0) {
  const time = import_node_perf_hooks.performance.now() - start - subtract;
  const timeString = (time.toFixed(2) + `ms`).padEnd(5, " ");
  if (time < 10) {
    return colors$1.green(timeString);
  } else if (time < 50) {
    return colors$1.yellow(timeString);
  } else {
    return colors$1.red(timeString);
  }
}
function prettifyUrl(url2, root) {
  url2 = removeTimestampQuery(url2);
  const isAbsoluteFile = url2.startsWith(root);
  if (isAbsoluteFile || url2.startsWith(FS_PREFIX)) {
    const file = import_node_path3.default.posix.relative(
      root,
      isAbsoluteFile ? url2 : fsPathFromId(url2)
    );
    return colors$1.dim(file);
  } else {
    return colors$1.dim(url2);
  }
}
function isObject$1(value2) {
  return Object.prototype.toString.call(value2) === "[object Object]";
}
function isDefined(value2) {
  return value2 != null;
}
function tryStatSync(file) {
  try {
    return import_node_fs2.default.statSync(file, { throwIfNoEntry: false });
  } catch {
  }
}
function lookupFile(dir, fileNames) {
  var _a2;
  while (dir) {
    for (const fileName of fileNames) {
      const fullPath = import_node_path3.default.join(dir, fileName);
      if ((_a2 = tryStatSync(fullPath)) == null ? void 0 : _a2.isFile()) return fullPath;
    }
    const parentDir2 = import_node_path3.default.dirname(dir);
    if (parentDir2 === dir) return;
    dir = parentDir2;
  }
}
function isFilePathESM(filePath, packageCache) {
  if (/\.m[jt]s$/.test(filePath)) {
    return true;
  } else if (/\.c[jt]s$/.test(filePath)) {
    return false;
  } else {
    try {
      const pkg = findNearestPackageData(import_node_path3.default.dirname(filePath), packageCache);
      return (pkg == null ? void 0 : pkg.data.type) === "module";
    } catch {
      return false;
    }
  }
}
var splitRE = /\r?\n/g;
var range = 2;
function pad$1(source, n2 = 2) {
  const lines = source.split(splitRE);
  return lines.map((l) => ` `.repeat(n2) + l).join(`
`);
}
function posToNumber(source, pos) {
  if (typeof pos === "number") return pos;
  const lines = source.split(splitRE);
  const { line, column } = pos;
  let start = 0;
  for (let i = 0; i < line - 1 && i < lines.length; i++) {
    start += lines[i].length + 1;
  }
  return start + column;
}
function numberToPos(source, offset2) {
  if (typeof offset2 !== "number") return offset2;
  if (offset2 > source.length) {
    throw new Error(
      `offset is longer than source length! offset ${offset2} > length ${source.length}`
    );
  }
  const lines = source.split(splitRE);
  let counted = 0;
  let line = 0;
  let column = 0;
  for (; line < lines.length; line++) {
    const lineLength = lines[line].length + 1;
    if (counted + lineLength >= offset2) {
      column = offset2 - counted + 1;
      break;
    }
    counted += lineLength;
  }
  return { line: line + 1, column };
}
function generateCodeFrame(source, start = 0, end) {
  start = Math.max(posToNumber(source, start), 0);
  end = Math.min(
    end !== void 0 ? posToNumber(source, end) : start,
    source.length
  );
  const lines = source.split(splitRE);
  let count = 0;
  const res = [];
  for (let i = 0; i < lines.length; i++) {
    count += lines[i].length;
    if (count >= start) {
      for (let j = i - range; j <= i + range || end > count; j++) {
        if (j < 0 || j >= lines.length) continue;
        const line = j + 1;
        res.push(
          `${line}${" ".repeat(Math.max(3 - String(line).length, 0))}|  ${lines[j]}`
        );
        const lineLength = lines[j].length;
        if (j === i) {
          const pad2 = Math.max(start - (count - lineLength), 0);
          const length = Math.max(
            1,
            end > count ? lineLength - pad2 : end - start
          );
          res.push(`   |  ` + " ".repeat(pad2) + "^".repeat(length));
        } else if (j > i) {
          if (end > count) {
            const length = Math.max(Math.min(end - count, lineLength), 1);
            res.push(`   |  ` + "^".repeat(length));
          }
          count += lineLength + 1;
        }
      }
      break;
    }
    count++;
  }
  return res.join("\n");
}
function isFileReadable(filename) {
  if (!tryStatSync(filename)) {
    return false;
  }
  try {
    import_node_fs2.default.accessSync(filename, import_node_fs2.default.constants.R_OK);
    return true;
  } catch {
    return false;
  }
}
var splitFirstDirRE = /(.+?)[\\/](.+)/;
function emptyDir(dir, skip) {
  const skipInDir = [];
  let nested = null;
  if (skip == null ? void 0 : skip.length) {
    for (const file of skip) {
      if (import_node_path3.default.dirname(file) !== ".") {
        const matched = splitFirstDirRE.exec(file);
        if (matched) {
          nested ?? (nested = /* @__PURE__ */ new Map());
          const [, nestedDir, skipPath] = matched;
          let nestedSkip = nested.get(nestedDir);
          if (!nestedSkip) {
            nestedSkip = [];
            nested.set(nestedDir, nestedSkip);
          }
          if (!nestedSkip.includes(skipPath)) {
            nestedSkip.push(skipPath);
          }
        }
      } else {
        skipInDir.push(file);
      }
    }
  }
  for (const file of import_node_fs2.default.readdirSync(dir)) {
    if (skipInDir.includes(file)) {
      continue;
    }
    if (nested == null ? void 0 : nested.has(file)) {
      emptyDir(import_node_path3.default.resolve(dir, file), nested.get(file));
    } else {
      import_node_fs2.default.rmSync(import_node_path3.default.resolve(dir, file), { recursive: true, force: true });
    }
  }
}
function copyDir(srcDir, destDir) {
  import_node_fs2.default.mkdirSync(destDir, { recursive: true });
  for (const file of import_node_fs2.default.readdirSync(srcDir)) {
    const srcFile = import_node_path3.default.resolve(srcDir, file);
    if (srcFile === destDir) {
      continue;
    }
    const destFile = import_node_path3.default.resolve(destDir, file);
    const stat2 = import_node_fs2.default.statSync(srcFile);
    if (stat2.isDirectory()) {
      copyDir(srcFile, destFile);
    } else {
      import_node_fs2.default.copyFileSync(srcFile, destFile);
    }
  }
}
var ERR_SYMLINK_IN_RECURSIVE_READDIR = "ERR_SYMLINK_IN_RECURSIVE_READDIR";
async function recursiveReaddir(dir) {
  if (!import_node_fs2.default.existsSync(dir)) {
    return [];
  }
  let dirents;
  try {
    dirents = await import_promises.default.readdir(dir, { withFileTypes: true });
  } catch (e2) {
    if (e2.code === "EACCES") {
      return [];
    }
    throw e2;
  }
  if (dirents.some((dirent) => dirent.isSymbolicLink())) {
    const err2 = new Error(
      "Symbolic links are not supported in recursiveReaddir"
    );
    err2.code = ERR_SYMLINK_IN_RECURSIVE_READDIR;
    throw err2;
  }
  const files = await Promise.all(
    dirents.map((dirent) => {
      const res = import_node_path3.default.resolve(dir, dirent.name);
      return dirent.isDirectory() ? recursiveReaddir(res) : normalizePath$3(res);
    })
  );
  return files.flat(1);
}
var safeRealpathSync = isWindows$3 ? windowsSafeRealPathSync : import_node_fs2.default.realpathSync.native;
var windowsNetworkMap = /* @__PURE__ */ new Map();
function windowsMappedRealpathSync(path22) {
  const realPath = import_node_fs2.default.realpathSync.native(path22);
  if (realPath.startsWith("\\\\")) {
    for (const [network, volume] of windowsNetworkMap) {
      if (realPath.startsWith(network)) return realPath.replace(network, volume);
    }
  }
  return realPath;
}
var parseNetUseRE = /^\w* +(\w:) +([^ ]+)\s/;
var firstSafeRealPathSyncRun = false;
function windowsSafeRealPathSync(path22) {
  if (!firstSafeRealPathSyncRun) {
    optimizeSafeRealPathSync();
    firstSafeRealPathSyncRun = true;
  }
  return import_node_fs2.default.realpathSync(path22);
}
function optimizeSafeRealPathSync() {
  const nodeVersion = process.versions.node.split(".").map(Number);
  if (nodeVersion[0] < 18 || nodeVersion[0] === 18 && nodeVersion[1] < 10) {
    safeRealpathSync = import_node_fs2.default.realpathSync;
    return;
  }
  try {
    import_node_fs2.default.realpathSync.native(import_node_path3.default.resolve("./"));
  } catch (error2) {
    if (error2.message.includes("EISDIR: illegal operation on a directory")) {
      safeRealpathSync = import_node_fs2.default.realpathSync;
      return;
    }
  }
  (0, import_node_child_process.exec)("net use", (error2, stdout) => {
    if (error2) return;
    const lines = stdout.split("\n");
    for (const line of lines) {
      const m2 = parseNetUseRE.exec(line);
      if (m2) windowsNetworkMap.set(m2[2], m2[1]);
    }
    if (windowsNetworkMap.size === 0) {
      safeRealpathSync = import_node_fs2.default.realpathSync.native;
    } else {
      safeRealpathSync = windowsMappedRealpathSync;
    }
  });
}
function ensureWatchedFile(watcher, file, root) {
  if (file && // only need to watch if out of root
  !file.startsWith(withTrailingSlash(root)) && // some rollup plugins use null bytes for private resolved Ids
  !file.includes("\0") && import_node_fs2.default.existsSync(file)) {
    watcher.add(import_node_path3.default.resolve(file));
  }
}
function joinSrcset(ret) {
  return ret.map(({ url: url2, descriptor }) => url2 + (descriptor ? ` ${descriptor}` : "")).join(", ");
}
var imageCandidateRegex = new RegExp(`(?:^|\\s|(?<=,))(?<url>[\\w-]+\\([^)]*\\)|"[^"]*"|'[^']*'|[^,]\\S*[^,])\\s*(?:\\s(?<descriptor>\\w[^,]+))?(?:,|$)`, "g");
var escapedSpaceCharacters = /(?: |\\t|\\n|\\f|\\r)+/g;
function parseSrcset(string) {
  const matches2 = string.trim().replace(escapedSpaceCharacters, " ").replace(/\r?\n/, "").replace(/,\s+/, ", ").replaceAll(/\s+/g, " ").matchAll(imageCandidateRegex);
  return Array.from(matches2, ({ groups: groups2 }) => {
    var _a2, _b;
    return {
      url: ((_a2 = groups2 == null ? void 0 : groups2.url) == null ? void 0 : _a2.trim()) ?? "",
      descriptor: ((_b = groups2 == null ? void 0 : groups2.descriptor) == null ? void 0 : _b.trim()) ?? ""
    };
  }).filter(({ url: url2 }) => !!url2);
}
function processSrcSet(srcs, replacer) {
  return Promise.all(
    parseSrcset(srcs).map(async ({ url: url2, descriptor }) => ({
      url: await replacer({ url: url2, descriptor }),
      descriptor
    }))
  ).then(joinSrcset);
}
function processSrcSetSync(srcs, replacer) {
  return joinSrcset(
    parseSrcset(srcs).map(({ url: url2, descriptor }) => ({
      url: replacer({ url: url2, descriptor }),
      descriptor
    }))
  );
}
var windowsDriveRE = /^[A-Z]:/;
var replaceWindowsDriveRE = /^([A-Z]):\//;
var linuxAbsolutePathRE = /^\/[^/]/;
function escapeToLinuxLikePath(path22) {
  if (windowsDriveRE.test(path22)) {
    return path22.replace(replaceWindowsDriveRE, "/windows/$1/");
  }
  if (linuxAbsolutePathRE.test(path22)) {
    return `/linux${path22}`;
  }
  return path22;
}
var revertWindowsDriveRE = /^\/windows\/([A-Z])\//;
function unescapeToLinuxLikePath(path22) {
  if (path22.startsWith("/linux/")) {
    return path22.slice("/linux".length);
  }
  if (path22.startsWith("/windows/")) {
    return path22.replace(revertWindowsDriveRE, "$1:/");
  }
  return path22;
}
var nullSourceMap = {
  names: [],
  sources: [],
  mappings: "",
  version: 3
};
function combineSourcemaps(filename, sourcemapList) {
  if (sourcemapList.length === 0 || sourcemapList.every((m2) => m2.sources.length === 0)) {
    return { ...nullSourceMap };
  }
  sourcemapList = sourcemapList.map((sourcemap) => {
    const newSourcemaps = { ...sourcemap };
    newSourcemaps.sources = sourcemap.sources.map(
      (source) => source ? escapeToLinuxLikePath(source) : null
    );
    if (sourcemap.sourceRoot) {
      newSourcemaps.sourceRoot = escapeToLinuxLikePath(sourcemap.sourceRoot);
    }
    return newSourcemaps;
  });
  const escapedFilename = escapeToLinuxLikePath(filename);
  let map2;
  let mapIndex = 1;
  const useArrayInterface = sourcemapList.slice(0, -1).find((m2) => m2.sources.length !== 1) === void 0;
  if (useArrayInterface) {
    map2 = remapping(sourcemapList, () => null);
  } else {
    map2 = remapping(sourcemapList[0], function loader2(sourcefile) {
      if (sourcefile === escapedFilename && sourcemapList[mapIndex]) {
        return sourcemapList[mapIndex++];
      } else {
        return null;
      }
    });
  }
  if (!map2.file) {
    delete map2.file;
  }
  map2.sources = map2.sources.map(
    (source) => source ? unescapeToLinuxLikePath(source) : source
  );
  map2.file = filename;
  return map2;
}
function unique(arr) {
  return Array.from(new Set(arr));
}
async function getLocalhostAddressIfDiffersFromDNS() {
  const [nodeResult, dnsResult] = await Promise.all([
    import_node_dns.promises.lookup("localhost"),
    import_node_dns.promises.lookup("localhost", { verbatim: true })
  ]);
  const isSame = nodeResult.family === dnsResult.family && nodeResult.address === dnsResult.address;
  return isSame ? void 0 : nodeResult.address;
}
function diffDnsOrderChange(oldUrls, newUrls) {
  return !(oldUrls === newUrls || oldUrls && newUrls && arrayEqual(oldUrls.local, newUrls.local) && arrayEqual(oldUrls.network, newUrls.network));
}
async function resolveHostname(optionsHost) {
  let host;
  if (optionsHost === void 0 || optionsHost === false) {
    host = "localhost";
  } else if (optionsHost === true) {
    host = void 0;
  } else {
    host = optionsHost;
  }
  let name = host === void 0 || wildcardHosts.has(host) ? "localhost" : host;
  if (host === "localhost") {
    const localhostAddr = await getLocalhostAddressIfDiffersFromDNS();
    if (localhostAddr) {
      name = localhostAddr;
    }
  }
  return { host, name };
}
async function resolveServerUrls(server, options2, httpsOptions, config2) {
  const address = server.address();
  const isAddressInfo = (x) => x == null ? void 0 : x.address;
  if (!isAddressInfo(address)) {
    return { local: [], network: [] };
  }
  const local = [];
  const network = [];
  const hostname = await resolveHostname(options2.host);
  const protocol = options2.https ? "https" : "http";
  const port = address.port;
  const base = config2.rawBase === "./" || config2.rawBase === "" ? "/" : config2.rawBase;
  if (hostname.host !== void 0 && !wildcardHosts.has(hostname.host)) {
    let hostnameName = hostname.name;
    if (hostnameName.includes(":")) {
      hostnameName = `[${hostnameName}]`;
    }
    const address2 = `${protocol}://${hostnameName}:${port}${base}`;
    if (loopbackHosts.has(hostname.host)) {
      local.push(address2);
    } else {
      network.push(address2);
    }
  } else {
    Object.values(import_node_os.default.networkInterfaces()).flatMap((nInterface) => nInterface ?? []).filter(
      (detail) => detail.address && (detail.family === "IPv4" || // @ts-expect-error Node 18.0 - 18.3 returns number
      detail.family === 4)
    ).forEach((detail) => {
      let host = detail.address.replace("127.0.0.1", hostname.name);
      if (host.includes(":")) {
        host = `[${host}]`;
      }
      const url2 = `${protocol}://${host}:${port}${base}`;
      if (detail.address.includes("127.0.0.1")) {
        local.push(url2);
      } else {
        network.push(url2);
      }
    });
  }
  const cert = (httpsOptions == null ? void 0 : httpsOptions.cert) && !Array.isArray(httpsOptions.cert) ? new import_node_crypto.default.X509Certificate(httpsOptions.cert) : void 0;
  const hostnameFromCert = (cert == null ? void 0 : cert.subjectAltName) ? extractHostnamesFromSubjectAltName(cert.subjectAltName) : [];
  if (hostnameFromCert.length > 0) {
    const existings = /* @__PURE__ */ new Set([...local, ...network]);
    local.push(
      ...hostnameFromCert.map((hostname2) => `https://${hostname2}:${port}${base}`).filter((url2) => !existings.has(url2))
    );
  }
  return { local, network };
}
function extractHostnamesFromSubjectAltName(subjectAltName) {
  const hostnames = [];
  let remaining = subjectAltName;
  while (remaining) {
    const nameEndIndex = remaining.indexOf(":");
    const name = remaining.slice(0, nameEndIndex);
    remaining = remaining.slice(nameEndIndex + 1);
    if (!remaining) break;
    const isQuoted = remaining[0] === '"';
    let value2;
    if (isQuoted) {
      const endQuoteIndex = remaining.indexOf('"', 1);
      value2 = JSON.parse(remaining.slice(0, endQuoteIndex + 1));
      remaining = remaining.slice(endQuoteIndex + 1);
    } else {
      const maybeEndIndex = remaining.indexOf(",");
      const endIndex = maybeEndIndex === -1 ? remaining.length : maybeEndIndex;
      value2 = remaining.slice(0, endIndex);
      remaining = remaining.slice(endIndex);
    }
    remaining = remaining.slice(
      /* for , */
      1
    ).trimStart();
    if (name === "DNS" && // [::1] might be included but skip it as it's already included as a local address
    value2 !== "[::1]" && // skip *.IPv4 addresses, which is invalid
    !(value2.startsWith("*.") && import_node_net.default.isIPv4(value2.slice(2)))) {
      hostnames.push(value2.replace("*", "vite"));
    }
  }
  return hostnames;
}
function arraify(target) {
  return Array.isArray(target) ? target : [target];
}
var multilineCommentsRE = /\/\*[^*]*\*+(?:[^/*][^*]*\*+)*\//g;
var singlelineCommentsRE = /\/\/.*/g;
var requestQuerySplitRE = /\?(?!.*[/|}])/;
var requestQueryMaybeEscapedSplitRE = /\\?\?(?!.*[/|}])/;
var blankReplacer = (match) => " ".repeat(match.length);
var hash$1 = (
  // eslint-disable-next-line n/no-unsupported-features/node-builtins -- crypto.hash is supported in Node 21.7.0+, 20.12.0+
  import_node_crypto.default.hash ?? ((algorithm, data, outputEncoding) => import_node_crypto.default.createHash(algorithm).update(data).digest(outputEncoding))
);
function getHash(text, length = 8) {
  const h2 = hash$1("sha256", text, "hex").substring(0, length);
  if (length <= 64) return h2;
  return h2.padEnd(length, "_");
}
var requireResolveFromRootWithFallback = (root, id) => {
  const found3 = resolvePackageData(id, root) || resolvePackageData(id, _dirname);
  if (!found3) {
    const error2 = new Error(`${JSON.stringify(id)} not found.`);
    error2.code = "MODULE_NOT_FOUND";
    throw error2;
  }
  return _require$1.resolve(id, { paths: [root, _dirname] });
};
function emptyCssComments(raw) {
  return raw.replace(multilineCommentsRE, blankReplacer);
}
function backwardCompatibleWorkerPlugins(plugins2) {
  if (Array.isArray(plugins2)) {
    return plugins2;
  }
  if (typeof plugins2 === "function") {
    return plugins2();
  }
  return [];
}
function deepClone(value2) {
  if (Array.isArray(value2)) {
    return value2.map((v) => deepClone(v));
  }
  if (isObject$1(value2)) {
    const cloned = {};
    for (const key in value2) {
      cloned[key] = deepClone(value2[key]);
    }
    return cloned;
  }
  if (typeof value2 === "function") {
    return value2;
  }
  if (value2 instanceof RegExp) {
    return new RegExp(value2);
  }
  if (typeof value2 === "object" && value2 != null) {
    throw new Error("Cannot deep clone non-plain object");
  }
  return value2;
}
function mergeWithDefaultsRecursively(defaults, values) {
  const merged = defaults;
  for (const key in values) {
    const value2 = values[key];
    if (value2 === void 0) continue;
    const existing = merged[key];
    if (existing === void 0) {
      merged[key] = value2;
      continue;
    }
    if (isObject$1(existing) && isObject$1(value2)) {
      merged[key] = mergeWithDefaultsRecursively(existing, value2);
      continue;
    }
    merged[key] = value2;
  }
  return merged;
}
function mergeWithDefaults(defaults, values) {
  const clonedDefaults = deepClone(defaults);
  return mergeWithDefaultsRecursively(clonedDefaults, values);
}
function mergeConfigRecursively(defaults, overrides, rootPath) {
  const merged = { ...defaults };
  for (const key in overrides) {
    const value2 = overrides[key];
    if (value2 == null) {
      continue;
    }
    const existing = merged[key];
    if (existing == null) {
      merged[key] = value2;
      continue;
    }
    if (key === "alias" && (rootPath === "resolve" || rootPath === "")) {
      merged[key] = mergeAlias(existing, value2);
      continue;
    } else if (key === "assetsInclude" && rootPath === "") {
      merged[key] = [].concat(existing, value2);
      continue;
    } else if (key === "noExternal" && (rootPath === "ssr" || rootPath === "resolve") && (existing === true || value2 === true)) {
      merged[key] = true;
      continue;
    } else if (key === "plugins" && rootPath === "worker") {
      merged[key] = () => [
        ...backwardCompatibleWorkerPlugins(existing),
        ...backwardCompatibleWorkerPlugins(value2)
      ];
      continue;
    } else if (key === "server" && rootPath === "server.hmr") {
      merged[key] = value2;
      continue;
    }
    if (Array.isArray(existing) || Array.isArray(value2)) {
      merged[key] = [...arraify(existing), ...arraify(value2)];
      continue;
    }
    if (isObject$1(existing) && isObject$1(value2)) {
      merged[key] = mergeConfigRecursively(
        existing,
        value2,
        rootPath ? `${rootPath}.${key}` : key
      );
      continue;
    }
    merged[key] = value2;
  }
  return merged;
}
function mergeConfig(defaults, overrides, isRoot = true) {
  if (typeof defaults === "function" || typeof overrides === "function") {
    throw new Error(`Cannot merge config in form of callback`);
  }
  return mergeConfigRecursively(defaults, overrides, isRoot ? "" : ".");
}
function mergeAlias(a, b) {
  if (!a) return b;
  if (!b) return a;
  if (isObject$1(a) && isObject$1(b)) {
    return { ...a, ...b };
  }
  return [...normalizeAlias(b), ...normalizeAlias(a)];
}
function normalizeAlias(o2 = []) {
  return Array.isArray(o2) ? o2.map(normalizeSingleAlias) : Object.keys(o2).map(
    (find2) => normalizeSingleAlias({
      find: find2,
      replacement: o2[find2]
    })
  );
}
function normalizeSingleAlias({
  find: find2,
  replacement,
  customResolver
}) {
  if (typeof find2 === "string" && find2.endsWith("/") && replacement.endsWith("/")) {
    find2 = find2.slice(0, find2.length - 1);
    replacement = replacement.slice(0, replacement.length - 1);
  }
  const alias2 = {
    find: find2,
    replacement
  };
  if (customResolver) {
    alias2.customResolver = customResolver;
  }
  return alias2;
}
function transformStableResult(s2, id, config2) {
  return {
    code: s2.toString(),
    map: config2.command === "build" && config2.build.sourcemap ? s2.generateMap({ hires: "boundary", source: id }) : null
  };
}
async function asyncFlatten(arr) {
  do {
    arr = (await Promise.all(arr)).flat(Infinity);
  } while (arr.some((v) => v == null ? void 0 : v.then));
  return arr;
}
function stripBomTag(content) {
  if (content.charCodeAt(0) === 65279) {
    return content.slice(1);
  }
  return content;
}
var windowsDrivePathPrefixRE = /^[A-Za-z]:[/\\]/;
var isNonDriveRelativeAbsolutePath = (p2) => {
  if (!isWindows$3) return p2[0] === "/";
  return windowsDrivePathPrefixRE.test(p2);
};
function shouldServeFile(filePath, root) {
  if (!isCaseInsensitiveFS) return true;
  return hasCorrectCase(filePath, root);
}
function hasCorrectCase(file, assets) {
  if (file === assets) return true;
  const parent = import_node_path3.default.dirname(file);
  if (import_node_fs2.default.readdirSync(parent).includes(import_node_path3.default.basename(file))) {
    return hasCorrectCase(parent, assets);
  }
  return false;
}
function joinUrlSegments(a, b) {
  if (!a || !b) {
    return a || b || "";
  }
  if (a.endsWith("/")) {
    a = a.substring(0, a.length - 1);
  }
  if (b[0] !== "/") {
    b = "/" + b;
  }
  return a + b;
}
function removeLeadingSlash(str) {
  return str[0] === "/" ? str.slice(1) : str;
}
function stripBase(path22, base) {
  if (path22 === base) {
    return "/";
  }
  const devBase = withTrailingSlash(base);
  return path22.startsWith(devBase) ? path22.slice(devBase.length - 1) : path22;
}
function arrayEqual(a, b) {
  if (a === b) return true;
  if (a.length !== b.length) return false;
  for (let i = 0; i < a.length; i++) {
    if (a[i] !== b[i]) return false;
  }
  return true;
}
function evalValue(rawValue) {
  const fn = new Function(`
    var console, exports, global, module, process, require
    return (
${rawValue}
)
  `);
  return fn();
}
function getNpmPackageName(importPath) {
  const parts = importPath.split("/");
  if (parts[0][0] === "@") {
    if (!parts[1]) return null;
    return `${parts[0]}/${parts[1]}`;
  } else {
    return parts[0];
  }
}
function getPkgName(name) {
  return name[0] === "@" ? name.split("/")[1] : name;
}
var escapeRegexRE = /[-/\\^$*+?.()|[\]{}]/g;
function escapeRegex(str) {
  return str.replace(escapeRegexRE, "\\$&");
}
function getPackageManagerCommand(type = "install") {
  var _a2;
  const packageManager = ((_a2 = process.env.npm_config_user_agent) == null ? void 0 : _a2.split(" ")[0].split("/")[0]) || "npm";
  switch (type) {
    case "install":
      return packageManager === "npm" ? "npm install" : `${packageManager} add`;
    case "uninstall":
      return packageManager === "npm" ? "npm uninstall" : `${packageManager} remove`;
    case "update":
      return packageManager === "yarn" ? "yarn upgrade" : `${packageManager} update`;
    default:
      throw new TypeError(`Unknown command type: ${type}`);
  }
}
function isDevServer(server) {
  return "pluginContainer" in server;
}
function createSerialPromiseQueue() {
  let previousTask;
  return {
    async run(f2) {
      const thisTask = f2();
      const depTasks = Promise.all([previousTask, thisTask]);
      previousTask = depTasks;
      const [, result] = await depTasks;
      if (previousTask === depTasks) {
        previousTask = void 0;
      }
      return result;
    }
  };
}
function sortObjectKeys(obj) {
  const sorted = {};
  for (const key of Object.keys(obj).sort()) {
    sorted[key] = obj[key];
  }
  return sorted;
}
function displayTime(time) {
  if (time < 1e3) {
    return `${time}ms`;
  }
  time = time / 1e3;
  if (time < 60) {
    return `${time.toFixed(2)}s`;
  }
  const mins = Math.floor(time / 60);
  const seconds = Math.round(time % 60);
  if (seconds === 60) {
    return `${mins + 1}m`;
  }
  return `${mins}m${seconds < 1 ? "" : ` ${seconds}s`}`;
}
function encodeURIPath(uri) {
  if (uri.startsWith("data:")) return uri;
  const filePath = cleanUrl2(uri);
  const postfix = filePath !== uri ? uri.slice(filePath.length) : "";
  return encodeURI(filePath) + postfix;
}
function partialEncodeURIPath(uri) {
  if (uri.startsWith("data:")) return uri;
  const filePath = cleanUrl2(uri);
  const postfix = filePath !== uri ? uri.slice(filePath.length) : "";
  return filePath.replaceAll("%", "%25") + postfix;
}
var sigtermCallbacks = /* @__PURE__ */ new Set();
var parentSigtermCallback = async (signal, exitCode) => {
  await Promise.all([...sigtermCallbacks].map((cb) => cb(signal, exitCode)));
};
var setupSIGTERMListener = (callback) => {
  if (sigtermCallbacks.size === 0) {
    process.once("SIGTERM", parentSigtermCallback);
    if (process.env.CI !== "true") {
      process.stdin.on("end", parentSigtermCallback);
    }
  }
  sigtermCallbacks.add(callback);
};
var teardownSIGTERMListener = (callback) => {
  sigtermCallbacks.delete(callback);
  if (sigtermCallbacks.size === 0) {
    process.off("SIGTERM", parentSigtermCallback);
    if (process.env.CI !== "true") {
      process.stdin.off("end", parentSigtermCallback);
    }
  }
};
function getServerUrlByHost(resolvedUrls, host) {
  if (typeof host === "string") {
    const matchedUrl = [
      ...(resolvedUrls == null ? void 0 : resolvedUrls.local) ?? [],
      ...(resolvedUrls == null ? void 0 : resolvedUrls.network) ?? []
    ].find((url2) => url2.includes(host));
    if (matchedUrl) {
      return matchedUrl;
    }
  }
  return (resolvedUrls == null ? void 0 : resolvedUrls.local[0]) ?? (resolvedUrls == null ? void 0 : resolvedUrls.network[0]);
}
var LogLevels = {
  silent: 0,
  error: 1,
  warn: 2,
  info: 3
};
var lastType;
var lastMsg;
var sameCount = 0;
function clearScreen() {
  const repeatCount = process.stdout.rows - 2;
  const blank = repeatCount > 0 ? "\n".repeat(repeatCount) : "";
  console.log(blank);
  import_node_readline.default.cursorTo(process.stdout, 0, 0);
  import_node_readline.default.clearScreenDown(process.stdout);
}
var timeFormatter;
function getTimeFormatter() {
  timeFormatter ?? (timeFormatter = new Intl.DateTimeFormat(void 0, {
    hour: "numeric",
    minute: "numeric",
    second: "numeric"
  }));
  return timeFormatter;
}
function createLogger(level = "info", options2 = {}) {
  if (options2.customLogger) {
    return options2.customLogger;
  }
  const loggedErrors = /* @__PURE__ */ new WeakSet();
  const {
    prefix = "[vite]",
    allowClearScreen = true,
    console: console2 = globalThis.console
  } = options2;
  const thresh = LogLevels[level];
  const canClearScreen = allowClearScreen && process.stdout.isTTY && !process.env.CI;
  const clear = canClearScreen ? clearScreen : () => {
  };
  function format2(type, msg, options22 = {}) {
    if (options22.timestamp) {
      let tag = "";
      if (type === "info") {
        tag = colors$1.cyan(colors$1.bold(prefix));
      } else if (type === "warn") {
        tag = colors$1.yellow(colors$1.bold(prefix));
      } else {
        tag = colors$1.red(colors$1.bold(prefix));
      }
      const environment = options22.environment ? options22.environment + " " : "";
      return `${colors$1.dim(getTimeFormatter().format(/* @__PURE__ */ new Date()))} ${tag} ${environment}${msg}`;
    } else {
      return msg;
    }
  }
  function output(type, msg, options22 = {}) {
    if (thresh >= LogLevels[type]) {
      const method = type === "info" ? "log" : type;
      if (options22.error) {
        loggedErrors.add(options22.error);
      }
      if (canClearScreen) {
        if (type === lastType && msg === lastMsg) {
          sameCount++;
          clear();
          console2[method](
            format2(type, msg, options22),
            colors$1.yellow(`(x${sameCount + 1})`)
          );
        } else {
          sameCount = 0;
          lastMsg = msg;
          lastType = type;
          if (options22.clear) {
            clear();
          }
          console2[method](format2(type, msg, options22));
        }
      } else {
        console2[method](format2(type, msg, options22));
      }
    }
  }
  const warnedMessages = /* @__PURE__ */ new Set();
  const logger = {
    hasWarned: false,
    info(msg, opts) {
      output("info", msg, opts);
    },
    warn(msg, opts) {
      logger.hasWarned = true;
      output("warn", msg, opts);
    },
    warnOnce(msg, opts) {
      if (warnedMessages.has(msg)) return;
      logger.hasWarned = true;
      output("warn", msg, opts);
      warnedMessages.add(msg);
    },
    error(msg, opts) {
      logger.hasWarned = true;
      output("error", msg, opts);
    },
    clearScreen(type) {
      if (thresh >= LogLevels[type]) {
        clear();
      }
    },
    hasErrorLogged(error2) {
      return loggedErrors.has(error2);
    }
  };
  return logger;
}
function printServerUrls(urls, optionsHost, info) {
  const colorUrl = (url2) => colors$1.cyan(url2.replace(/:(\d+)\//, (_, port) => `:${colors$1.bold(port)}/`));
  for (const url2 of urls.local) {
    info(`  ${colors$1.green("➜")}  ${colors$1.bold("Local")}:   ${colorUrl(url2)}`);
  }
  for (const url2 of urls.network) {
    info(`  ${colors$1.green("➜")}  ${colors$1.bold("Network")}: ${colorUrl(url2)}`);
  }
  if (urls.network.length === 0 && optionsHost === void 0) {
    info(
      colors$1.dim(`  ${colors$1.green("➜")}  ${colors$1.bold("Network")}: use `) + colors$1.bold("--host") + colors$1.dim(" to expose")
    );
  }
}
var groups = [
  { name: "Assets", color: colors$1.green },
  { name: "CSS", color: colors$1.magenta },
  { name: "JS", color: colors$1.cyan }
];
var COMPRESSIBLE_ASSETS_RE = /\.(?:html|json|svg|txt|xml|xhtml|wasm)$/;
function buildReporterPlugin(config2) {
  const compress = (0, import_node_util.promisify)(import_node_zlib.gzip);
  const numberFormatter = new Intl.NumberFormat("en", {
    maximumFractionDigits: 2,
    minimumFractionDigits: 2
  });
  const displaySize = (bytes) => {
    return `${numberFormatter.format(bytes / 1e3)} kB`;
  };
  const tty = process.stdout.isTTY && !process.env.CI;
  const shouldLogInfo = LogLevels[config2.logLevel || "info"] >= LogLevels.info;
  const modulesReporter = shouldLogInfo ? perEnvironmentState((environment) => {
    let hasTransformed = false;
    let transformedCount = 0;
    const logTransform = throttle((id) => {
      writeLine(
        `transforming (${transformedCount}) ${colors$1.dim(
          import_node_path3.default.relative(config2.root, id)
        )}`
      );
    });
    return {
      reset() {
        transformedCount = 0;
      },
      register(id) {
        transformedCount++;
        if (!tty) {
          if (!hasTransformed) {
            config2.logger.info(`transforming...`);
          }
        } else {
          if (id.includes(`?`)) return;
          logTransform(id);
        }
        hasTransformed = true;
      },
      log() {
        if (tty) {
          clearLine$1();
        }
        environment.logger.info(
          `${colors$1.green(`✓`)} ${transformedCount} modules transformed.`
        );
      }
    };
  }) : void 0;
  const chunksReporter = perEnvironmentState((environment) => {
    let hasRenderedChunk = false;
    let hasCompressChunk = false;
    let chunkCount = 0;
    let compressedCount = 0;
    async function getCompressedSize(code) {
      if (environment.config.consumer !== "client" || !environment.config.build.reportCompressedSize) {
        return null;
      }
      if (shouldLogInfo && !hasCompressChunk) {
        if (!tty) {
          config2.logger.info("computing gzip size...");
        } else {
          writeLine("computing gzip size (0)...");
        }
        hasCompressChunk = true;
      }
      const compressed = await compress(
        typeof code === "string" ? code : Buffer.from(code)
      );
      compressedCount++;
      if (shouldLogInfo && tty) {
        writeLine(`computing gzip size (${compressedCount})...`);
      }
      return compressed.length;
    }
    return {
      reset() {
        chunkCount = 0;
        compressedCount = 0;
      },
      register() {
        chunkCount++;
        if (shouldLogInfo) {
          if (!tty) {
            if (!hasRenderedChunk) {
              environment.logger.info("rendering chunks...");
            }
          } else {
            writeLine(`rendering chunks (${chunkCount})...`);
          }
          hasRenderedChunk = true;
        }
      },
      async log(output, outDir) {
        const chunkLimit = environment.config.build.chunkSizeWarningLimit;
        let hasLargeChunks = false;
        if (shouldLogInfo) {
          const entries = (await Promise.all(
            Object.values(output).map(
              async (chunk) => {
                if (chunk.type === "chunk") {
                  return {
                    name: chunk.fileName,
                    group: "JS",
                    size: Buffer.byteLength(chunk.code),
                    compressedSize: await getCompressedSize(chunk.code),
                    mapSize: chunk.map ? Buffer.byteLength(chunk.map.toString()) : null
                  };
                } else {
                  if (chunk.fileName.endsWith(".map")) return null;
                  const isCSS = chunk.fileName.endsWith(".css");
                  const isCompressible = isCSS || COMPRESSIBLE_ASSETS_RE.test(chunk.fileName);
                  return {
                    name: chunk.fileName,
                    group: isCSS ? "CSS" : "Assets",
                    size: Buffer.byteLength(chunk.source),
                    mapSize: null,
                    // Rollup doesn't support CSS maps?
                    compressedSize: isCompressible ? await getCompressedSize(chunk.source) : null
                  };
                }
              }
            )
          )).filter(isDefined);
          if (tty) clearLine$1();
          let longest = 0;
          let biggestSize = 0;
          let biggestMap = 0;
          let biggestCompressSize = 0;
          for (const entry of entries) {
            if (entry.name.length > longest) longest = entry.name.length;
            if (entry.size > biggestSize) biggestSize = entry.size;
            if (entry.mapSize && entry.mapSize > biggestMap) {
              biggestMap = entry.mapSize;
            }
            if (entry.compressedSize && entry.compressedSize > biggestCompressSize) {
              biggestCompressSize = entry.compressedSize;
            }
          }
          const sizePad = displaySize(biggestSize).length;
          const mapPad = displaySize(biggestMap).length;
          const compressPad = displaySize(biggestCompressSize).length;
          const relativeOutDir = normalizePath$3(
            import_node_path3.default.relative(
              config2.root,
              import_node_path3.default.resolve(
                config2.root,
                outDir ?? environment.config.build.outDir
              )
            )
          );
          const assetsDir = import_node_path3.default.join(environment.config.build.assetsDir, "/");
          for (const group of groups) {
            const filtered = entries.filter((e2) => e2.group === group.name);
            if (!filtered.length) continue;
            for (const entry of filtered.sort((a, z) => a.size - z.size)) {
              const isLarge = group.name === "JS" && entry.size / 1e3 > chunkLimit;
              if (isLarge) hasLargeChunks = true;
              const sizeColor = isLarge ? colors$1.yellow : colors$1.dim;
              let log2 = colors$1.dim(withTrailingSlash(relativeOutDir));
              log2 += !config2.build.lib && entry.name.startsWith(withTrailingSlash(assetsDir)) ? colors$1.dim(assetsDir) + group.color(
                entry.name.slice(assetsDir.length).padEnd(longest + 2 - assetsDir.length)
              ) : group.color(entry.name.padEnd(longest + 2));
              log2 += colors$1.bold(
                sizeColor(displaySize(entry.size).padStart(sizePad))
              );
              if (entry.compressedSize) {
                log2 += colors$1.dim(
                  ` │ gzip: ${displaySize(entry.compressedSize).padStart(
                    compressPad
                  )}`
                );
              }
              if (entry.mapSize) {
                log2 += colors$1.dim(
                  ` │ map: ${displaySize(entry.mapSize).padStart(mapPad)}`
                );
              }
              config2.logger.info(log2);
            }
          }
        } else {
          hasLargeChunks = Object.values(output).some((chunk) => {
            return chunk.type === "chunk" && chunk.code.length / 1e3 > chunkLimit;
          });
        }
        if (hasLargeChunks && environment.config.build.minify && !config2.build.lib && environment.config.consumer === "client") {
          environment.logger.warn(
            colors$1.yellow(
              `
(!) Some chunks are larger than ${chunkLimit} kB after minification. Consider:
- Using dynamic import() to code-split the application
- Use build.rollupOptions.output.manualChunks to improve chunking: https://rollupjs.org/configuration-options/#output-manualchunks
- Adjust chunk size limit for this warning via build.chunkSizeWarningLimit.`
            )
          );
        }
      }
    };
  });
  return {
    name: "vite:reporter",
    sharedDuringBuild: true,
    perEnvironmentStartEndDuringDev: true,
    ...modulesReporter ? {
      transform(_, id) {
        modulesReporter(this).register(id);
      },
      buildStart() {
        modulesReporter(this).reset();
      },
      buildEnd() {
        modulesReporter(this).log();
      }
    } : {},
    renderStart() {
      chunksReporter(this).reset();
    },
    renderChunk(_, chunk, options2) {
      if (!options2.inlineDynamicImports) {
        for (const id of chunk.moduleIds) {
          const module = this.getModuleInfo(id);
          if (!module) continue;
          if (module.importers.length && module.dynamicImporters.length) {
            const detectedIneffectiveDynamicImport = module.dynamicImporters.some(
              (id2) => !isInNodeModules$1(id2) && chunk.moduleIds.includes(id2)
            );
            if (detectedIneffectiveDynamicImport) {
              this.warn(
                `
(!) ${module.id} is dynamically imported by ${module.dynamicImporters.join(
                  ", "
                )} but also statically imported by ${module.importers.join(
                  ", "
                )}, dynamic import will not move module into another chunk.
`
              );
            }
          }
        }
      }
      chunksReporter(this).register();
    },
    generateBundle() {
      if (shouldLogInfo && tty) clearLine$1();
    },
    async writeBundle({ dir }, output) {
      await chunksReporter(this).log(output, dir);
    }
  };
}
function writeLine(output) {
  clearLine$1();
  if (output.length < process.stdout.columns) {
    process.stdout.write(output);
  } else {
    process.stdout.write(output.substring(0, process.stdout.columns - 1));
  }
}
function clearLine$1() {
  process.stdout.clearLine(0);
  process.stdout.cursorTo(0);
}
function throttle(fn) {
  let timerHandle = null;
  return (...args) => {
    if (timerHandle) return;
    fn(...args);
    timerHandle = setTimeout(() => {
      timerHandle = null;
    }, 100);
  };
}
var POSIX_SEP_RE = new RegExp("\\" + import_node_path3.default.posix.sep, "g");
var NATIVE_SEP_RE = new RegExp("\\" + import_node_path3.default.sep, "g");
var PATTERN_REGEX_CACHE = /* @__PURE__ */ new Map();
var GLOB_ALL_PATTERN = `**/*`;
var TS_EXTENSIONS = [".ts", ".tsx", ".mts", ".cts"];
var JS_EXTENSIONS = [".js", ".jsx", ".mjs", ".cjs"];
var TSJS_EXTENSIONS = TS_EXTENSIONS.concat(JS_EXTENSIONS);
var TS_EXTENSIONS_RE_GROUP = `\\.(?:${TS_EXTENSIONS.map((ext) => ext.substring(1)).join("|")})`;
var TSJS_EXTENSIONS_RE_GROUP = `\\.(?:${TSJS_EXTENSIONS.map((ext) => ext.substring(1)).join(
  "|"
)})`;
var IS_POSIX = import_node_path3.default.posix.sep === import_node_path3.default.sep;
function makePromise() {
  let resolve4, reject;
  const promise = new Promise((res, rej) => {
    resolve4 = res;
    reject = rej;
  });
  return { promise, resolve: resolve4, reject };
}
async function resolveTSConfigJson(filename, cache) {
  if (import_node_path3.default.extname(filename) !== ".json") {
    return;
  }
  const tsconfig = import_node_path3.default.resolve(filename);
  if (cache && (cache.hasParseResult(tsconfig) || cache.hasParseResult(filename))) {
    return tsconfig;
  }
  return import_node_fs2.promises.stat(tsconfig).then((stat2) => {
    if (stat2.isFile() || stat2.isFIFO()) {
      return tsconfig;
    } else {
      throw new Error(`${filename} exists but is not a regular file.`);
    }
  });
}
var isInNodeModules = IS_POSIX ? (dir) => dir.includes("/node_modules/") : (dir) => dir.match(/[/\\]node_modules[/\\]/);
var posix2native = IS_POSIX ? (filename) => filename : (filename) => filename.replace(POSIX_SEP_RE, import_node_path3.default.sep);
var native2posix = IS_POSIX ? (filename) => filename : (filename) => filename.replace(NATIVE_SEP_RE, import_node_path3.default.posix.sep);
var resolve2posix = IS_POSIX ? (dir, filename) => dir ? import_node_path3.default.resolve(dir, filename) : import_node_path3.default.resolve(filename) : (dir, filename) => native2posix(
  dir ? import_node_path3.default.resolve(posix2native(dir), posix2native(filename)) : import_node_path3.default.resolve(posix2native(filename))
);
function resolveReferencedTSConfigFiles(result, options2) {
  const dir = import_node_path3.default.dirname(result.tsconfigFile);
  return result.tsconfig.references.map((ref) => {
    const refPath = ref.path.endsWith(".json") ? ref.path : import_node_path3.default.join(ref.path, (options2 == null ? void 0 : options2.configName) ?? "tsconfig.json");
    return resolve2posix(dir, refPath);
  });
}
function resolveSolutionTSConfig(filename, result) {
  var _a2;
  const allowJs = (_a2 = result.tsconfig.compilerOptions) == null ? void 0 : _a2.allowJs;
  const extensions2 = allowJs ? TSJS_EXTENSIONS : TS_EXTENSIONS;
  if (result.referenced && extensions2.some((ext) => filename.endsWith(ext)) && !isIncluded(filename, result)) {
    const solutionTSConfig = result.referenced.find(
      (referenced) => isIncluded(filename, referenced)
    );
    if (solutionTSConfig) {
      return solutionTSConfig;
    }
  }
  return result;
}
function isIncluded(filename, result) {
  var _a2;
  const dir = native2posix(import_node_path3.default.dirname(result.tsconfigFile));
  const files = (result.tsconfig.files || []).map((file) => resolve2posix(dir, file));
  const absoluteFilename = resolve2posix(null, filename);
  if (files.includes(filename)) {
    return true;
  }
  const allowJs = (_a2 = result.tsconfig.compilerOptions) == null ? void 0 : _a2.allowJs;
  const isIncluded2 = isGlobMatch(
    absoluteFilename,
    dir,
    result.tsconfig.include || (result.tsconfig.files ? [] : [GLOB_ALL_PATTERN]),
    allowJs
  );
  if (isIncluded2) {
    const isExcluded = isGlobMatch(absoluteFilename, dir, result.tsconfig.exclude || [], allowJs);
    return !isExcluded;
  }
  return false;
}
function isGlobMatch(filename, dir, patterns, allowJs) {
  const extensions2 = allowJs ? TSJS_EXTENSIONS : TS_EXTENSIONS;
  return patterns.some((pattern) => {
    let lastWildcardIndex = pattern.length;
    let hasWildcard = false;
    let hasExtension = false;
    let hasSlash = false;
    let lastSlashIndex = -1;
    for (let i = pattern.length - 1; i > -1; i--) {
      const c = pattern[i];
      if (!hasWildcard) {
        if (c === "*" || c === "?") {
          lastWildcardIndex = i;
          hasWildcard = true;
        }
      }
      if (!hasSlash) {
        if (c === ".") {
          hasExtension = true;
        } else if (c === "/") {
          lastSlashIndex = i;
          hasSlash = true;
        }
      }
      if (hasWildcard && hasSlash) {
        break;
      }
    }
    if (!hasExtension && (!hasWildcard || lastWildcardIndex < lastSlashIndex)) {
      pattern += `${pattern.endsWith("/") ? "" : "/"}${GLOB_ALL_PATTERN}`;
      lastWildcardIndex = pattern.length - 1;
      hasWildcard = true;
    }
    if (lastWildcardIndex < pattern.length - 1 && !filename.endsWith(pattern.slice(lastWildcardIndex + 1))) {
      return false;
    }
    if (pattern.endsWith("*") && !extensions2.some((ext) => filename.endsWith(ext))) {
      return false;
    }
    if (pattern === GLOB_ALL_PATTERN) {
      return filename.startsWith(`${dir}/`);
    }
    const resolvedPattern = resolve2posix(dir, pattern);
    let firstWildcardIndex = -1;
    for (let i = 0; i < resolvedPattern.length; i++) {
      if (resolvedPattern[i] === "*" || resolvedPattern[i] === "?") {
        firstWildcardIndex = i;
        hasWildcard = true;
        break;
      }
    }
    if (firstWildcardIndex > 1 && !filename.startsWith(resolvedPattern.slice(0, firstWildcardIndex - 1))) {
      return false;
    }
    if (!hasWildcard) {
      return filename === resolvedPattern;
    } else if (firstWildcardIndex + GLOB_ALL_PATTERN.length === resolvedPattern.length - (pattern.length - 1 - lastWildcardIndex) && resolvedPattern.slice(firstWildcardIndex, firstWildcardIndex + GLOB_ALL_PATTERN.length) === GLOB_ALL_PATTERN) {
      return true;
    }
    if (PATTERN_REGEX_CACHE.has(resolvedPattern)) {
      return PATTERN_REGEX_CACHE.get(resolvedPattern).test(filename);
    }
    const regex = pattern2regex(resolvedPattern, allowJs);
    PATTERN_REGEX_CACHE.set(resolvedPattern, regex);
    return regex.test(filename);
  });
}
function pattern2regex(resolvedPattern, allowJs) {
  let regexStr = "^";
  for (let i = 0; i < resolvedPattern.length; i++) {
    const char = resolvedPattern[i];
    if (char === "?") {
      regexStr += "[^\\/]";
      continue;
    }
    if (char === "*") {
      if (resolvedPattern[i + 1] === "*" && resolvedPattern[i + 2] === "/") {
        i += 2;
        regexStr += "(?:[^\\/]*\\/)*";
        continue;
      }
      regexStr += "[^\\/]*";
      continue;
    }
    if ("/.+^${}()|[]\\".includes(char)) {
      regexStr += `\\`;
    }
    regexStr += char;
  }
  if (resolvedPattern.endsWith("*")) {
    regexStr += allowJs ? TSJS_EXTENSIONS_RE_GROUP : TS_EXTENSIONS_RE_GROUP;
  }
  regexStr += "$";
  return new RegExp(regexStr);
}
function replaceTokens(result) {
  if (result.tsconfig) {
    result.tsconfig = JSON.parse(
      JSON.stringify(result.tsconfig).replaceAll(/"\${configDir}/g, `"${native2posix(import_node_path3.default.dirname(result.tsconfigFile))}`)
    );
  }
}
async function find(filename, options2) {
  let dir = import_node_path3.default.dirname(import_node_path3.default.resolve(filename));
  if (isInNodeModules(dir)) {
    return null;
  }
  const cache = options2 == null ? void 0 : options2.cache;
  const configName = (options2 == null ? void 0 : options2.configName) ?? "tsconfig.json";
  if (cache == null ? void 0 : cache.hasConfigPath(dir, configName)) {
    return cache.getConfigPath(dir, configName);
  }
  const {
    /** @type {Promise<string|null>} */
    promise,
    resolve: resolve4,
    reject
  } = makePromise();
  if ((options2 == null ? void 0 : options2.root) && !import_node_path3.default.isAbsolute(options2.root)) {
    options2.root = import_node_path3.default.resolve(options2.root);
  }
  findUp(dir, { promise, resolve: resolve4, reject }, options2);
  return promise;
}
function findUp(dir, { resolve: resolve4, reject, promise }, options2) {
  const { cache, root, configName } = options2 ?? {};
  if (cache) {
    if (cache.hasConfigPath(dir, configName)) {
      let cached;
      try {
        cached = cache.getConfigPath(dir, configName);
      } catch (e2) {
        reject(e2);
        return;
      }
      if (cached == null ? void 0 : cached.then) {
        cached.then(resolve4).catch(reject);
      } else {
        resolve4(cached);
      }
    } else {
      cache.setConfigPath(dir, promise, configName);
    }
  }
  const tsconfig = import_node_path3.default.join(dir, (options2 == null ? void 0 : options2.configName) ?? "tsconfig.json");
  import_node_fs2.default.stat(tsconfig, (err2, stats) => {
    if (stats && (stats.isFile() || stats.isFIFO())) {
      resolve4(tsconfig);
    } else if ((err2 == null ? void 0 : err2.code) !== "ENOENT") {
      reject(err2);
    } else {
      let parent;
      if (root === dir || (parent = import_node_path3.default.dirname(dir)) === dir) {
        resolve4(null);
      } else {
        findUp(parent, { promise, resolve: resolve4, reject }, options2);
      }
    }
  });
}
function toJson(tsconfigJson) {
  const stripped = stripDanglingComma(stripJsonComments(stripBom(tsconfigJson)));
  if (stripped.trim() === "") {
    return "{}";
  } else {
    return stripped;
  }
}
function stripDanglingComma(pseudoJson) {
  let insideString = false;
  let offset2 = 0;
  let result = "";
  let danglingCommaPos = null;
  for (let i = 0; i < pseudoJson.length; i++) {
    const currentCharacter = pseudoJson[i];
    if (currentCharacter === '"') {
      const escaped2 = isEscaped(pseudoJson, i);
      if (!escaped2) {
        insideString = !insideString;
      }
    }
    if (insideString) {
      danglingCommaPos = null;
      continue;
    }
    if (currentCharacter === ",") {
      danglingCommaPos = i;
      continue;
    }
    if (danglingCommaPos) {
      if (currentCharacter === "}" || currentCharacter === "]") {
        result += pseudoJson.slice(offset2, danglingCommaPos) + " ";
        offset2 = danglingCommaPos + 1;
        danglingCommaPos = null;
      } else if (!currentCharacter.match(/\s/)) {
        danglingCommaPos = null;
      }
    }
  }
  return result + pseudoJson.substring(offset2);
}
function isEscaped(jsonString, quotePosition) {
  let index = quotePosition - 1;
  let backslashCount = 0;
  while (jsonString[index] === "\\") {
    index -= 1;
    backslashCount += 1;
  }
  return Boolean(backslashCount % 2);
}
function strip(string, start, end) {
  return string.slice(start, end).replace(/\S/g, " ");
}
var singleComment = Symbol("singleComment");
var multiComment = Symbol("multiComment");
function stripJsonComments(jsonString) {
  let isInsideString = false;
  let isInsideComment = false;
  let offset2 = 0;
  let result = "";
  for (let index = 0; index < jsonString.length; index++) {
    const currentCharacter = jsonString[index];
    const nextCharacter = jsonString[index + 1];
    if (!isInsideComment && currentCharacter === '"') {
      const escaped2 = isEscaped(jsonString, index);
      if (!escaped2) {
        isInsideString = !isInsideString;
      }
    }
    if (isInsideString) {
      continue;
    }
    if (!isInsideComment && currentCharacter + nextCharacter === "//") {
      result += jsonString.slice(offset2, index);
      offset2 = index;
      isInsideComment = singleComment;
      index++;
    } else if (isInsideComment === singleComment && currentCharacter + nextCharacter === "\r\n") {
      index++;
      isInsideComment = false;
      result += strip(jsonString, offset2, index);
      offset2 = index;
    } else if (isInsideComment === singleComment && currentCharacter === "\n") {
      isInsideComment = false;
      result += strip(jsonString, offset2, index);
      offset2 = index;
    } else if (!isInsideComment && currentCharacter + nextCharacter === "/*") {
      result += jsonString.slice(offset2, index);
      offset2 = index;
      isInsideComment = multiComment;
      index++;
    } else if (isInsideComment === multiComment && currentCharacter + nextCharacter === "*/") {
      index++;
      isInsideComment = false;
      result += strip(jsonString, offset2, index + 1);
      offset2 = index + 1;
    }
  }
  return result + (isInsideComment ? strip(jsonString.slice(offset2)) : jsonString.slice(offset2));
}
function stripBom(string) {
  if (string.charCodeAt(0) === 65279) {
    return string.slice(1);
  }
  return string;
}
var not_found_result = {
  tsconfigFile: null,
  tsconfig: {}
};
async function parse$e(filename, options2) {
  const cache = options2 == null ? void 0 : options2.cache;
  if (cache == null ? void 0 : cache.hasParseResult(filename)) {
    return getParsedDeep(filename, cache, options2);
  }
  const {
    resolve: resolve4,
    reject,
    /** @type {Promise<import('./public.d.ts').TSConfckParseResult>}*/
    promise
  } = makePromise();
  cache == null ? void 0 : cache.setParseResult(filename, promise, true);
  try {
    let tsconfigFile = await resolveTSConfigJson(filename, cache) || await find(filename, options2);
    if (!tsconfigFile) {
      resolve4(not_found_result);
      return promise;
    }
    let result;
    if (filename !== tsconfigFile && (cache == null ? void 0 : cache.hasParseResult(tsconfigFile))) {
      result = await getParsedDeep(tsconfigFile, cache, options2);
    } else {
      result = await parseFile$1(tsconfigFile, cache, filename === tsconfigFile);
      await Promise.all([parseExtends(result, cache), parseReferences(result, options2)]);
    }
    replaceTokens(result);
    resolve4(resolveSolutionTSConfig(filename, result));
  } catch (e2) {
    reject(e2);
  }
  return promise;
}
async function getParsedDeep(filename, cache, options2) {
  const result = await cache.getParseResult(filename);
  if (result.tsconfig.extends && !result.extended || result.tsconfig.references && !result.referenced) {
    const promise = Promise.all([
      parseExtends(result, cache),
      parseReferences(result, options2)
    ]).then(() => result);
    cache.setParseResult(filename, promise, true);
    return promise;
  }
  return result;
}
async function parseFile$1(tsconfigFile, cache, skipCache) {
  if (!skipCache && (cache == null ? void 0 : cache.hasParseResult(tsconfigFile)) && !cache.getParseResult(tsconfigFile)._isRootFile_) {
    return cache.getParseResult(tsconfigFile);
  }
  const promise = import_node_fs2.promises.readFile(tsconfigFile, "utf-8").then(toJson).then((json) => {
    const parsed = JSON.parse(json);
    applyDefaults(parsed, tsconfigFile);
    return {
      tsconfigFile,
      tsconfig: normalizeTSConfig(parsed, import_node_path3.default.dirname(tsconfigFile))
    };
  }).catch((e2) => {
    throw new TSConfckParseError(
      `parsing ${tsconfigFile} failed: ${e2}`,
      "PARSE_FILE",
      tsconfigFile,
      e2
    );
  });
  if (!skipCache && (!(cache == null ? void 0 : cache.hasParseResult(tsconfigFile)) || !cache.getParseResult(tsconfigFile)._isRootFile_)) {
    cache == null ? void 0 : cache.setParseResult(tsconfigFile, promise);
  }
  return promise;
}
function normalizeTSConfig(tsconfig, dir) {
  var _a2;
  const baseUrl = (_a2 = tsconfig.compilerOptions) == null ? void 0 : _a2.baseUrl;
  if (baseUrl && !baseUrl.startsWith("${") && !import_node_path3.default.isAbsolute(baseUrl)) {
    tsconfig.compilerOptions.baseUrl = resolve2posix(dir, baseUrl);
  }
  return tsconfig;
}
async function parseReferences(result, options2) {
  if (!result.tsconfig.references) {
    return;
  }
  const referencedFiles = resolveReferencedTSConfigFiles(result, options2);
  const referenced = await Promise.all(
    referencedFiles.map((file) => parseFile$1(file, options2 == null ? void 0 : options2.cache))
  );
  await Promise.all(referenced.map((ref) => parseExtends(ref, options2 == null ? void 0 : options2.cache)));
  referenced.forEach((ref) => {
    ref.solution = result;
    replaceTokens(ref);
  });
  result.referenced = referenced;
}
async function parseExtends(result, cache) {
  if (!result.tsconfig.extends) {
    return;
  }
  const extended = [
    { tsconfigFile: result.tsconfigFile, tsconfig: JSON.parse(JSON.stringify(result.tsconfig)) }
  ];
  let pos = 0;
  const extendsPath = [];
  let currentBranchDepth = 0;
  while (pos < extended.length) {
    const extending = extended[pos];
    extendsPath.push(extending.tsconfigFile);
    if (extending.tsconfig.extends) {
      currentBranchDepth += 1;
      let resolvedExtends;
      if (!Array.isArray(extending.tsconfig.extends)) {
        resolvedExtends = [resolveExtends(extending.tsconfig.extends, extending.tsconfigFile)];
      } else {
        resolvedExtends = extending.tsconfig.extends.reverse().map((ex) => resolveExtends(ex, extending.tsconfigFile));
      }
      const circularExtends = resolvedExtends.find(
        (tsconfigFile) => extendsPath.includes(tsconfigFile)
      );
      if (circularExtends) {
        const circle = extendsPath.concat([circularExtends]).join(" -> ");
        throw new TSConfckParseError(
          `Circular dependency in "extends": ${circle}`,
          "EXTENDS_CIRCULAR",
          result.tsconfigFile
        );
      }
      extended.splice(
        pos + 1,
        0,
        ...await Promise.all(resolvedExtends.map((file) => parseFile$1(file, cache)))
      );
    } else {
      extendsPath.splice(-currentBranchDepth);
      currentBranchDepth = 0;
    }
    pos = pos + 1;
  }
  result.extended = extended;
  for (const ext of result.extended.slice(1)) {
    extendTSConfig(result, ext);
  }
}
function resolveExtends(extended, from) {
  if (extended === "..") {
    extended = "../tsconfig.json";
  }
  const req2 = (0, import_module.createRequire)(from);
  let error2;
  try {
    return req2.resolve(extended);
  } catch (e2) {
    error2 = e2;
  }
  if (extended[0] !== "." && !import_node_path3.default.isAbsolute(extended)) {
    try {
      return req2.resolve(`${extended}/tsconfig.json`);
    } catch (e2) {
      error2 = e2;
    }
  }
  throw new TSConfckParseError(
    `failed to resolve "extends":"${extended}" in ${from}`,
    "EXTENDS_RESOLVE",
    from,
    error2
  );
}
var EXTENDABLE_KEYS = [
  "compilerOptions",
  "files",
  "include",
  "exclude",
  "watchOptions",
  "compileOnSave",
  "typeAcquisition",
  "buildOptions"
];
function extendTSConfig(extending, extended) {
  const extendingConfig = extending.tsconfig;
  const extendedConfig = extended.tsconfig;
  const relativePath = native2posix(
    import_node_path3.default.relative(import_node_path3.default.dirname(extending.tsconfigFile), import_node_path3.default.dirname(extended.tsconfigFile))
  );
  for (const key of Object.keys(extendedConfig).filter((key2) => EXTENDABLE_KEYS.includes(key2))) {
    if (key === "compilerOptions") {
      if (!extendingConfig.compilerOptions) {
        extendingConfig.compilerOptions = {};
      }
      for (const option of Object.keys(extendedConfig.compilerOptions)) {
        if (Object.prototype.hasOwnProperty.call(extendingConfig.compilerOptions, option)) {
          continue;
        }
        extendingConfig.compilerOptions[option] = rebaseRelative(
          option,
          extendedConfig.compilerOptions[option],
          relativePath
        );
      }
    } else if (extendingConfig[key] === void 0) {
      if (key === "watchOptions") {
        extendingConfig.watchOptions = {};
        for (const option of Object.keys(extendedConfig.watchOptions)) {
          extendingConfig.watchOptions[option] = rebaseRelative(
            option,
            extendedConfig.watchOptions[option],
            relativePath
          );
        }
      } else {
        extendingConfig[key] = rebaseRelative(key, extendedConfig[key], relativePath);
      }
    }
  }
}
var REBASE_KEYS = [
  // root
  "files",
  "include",
  "exclude",
  // compilerOptions
  "baseUrl",
  "rootDir",
  "rootDirs",
  "typeRoots",
  "outDir",
  "outFile",
  "declarationDir",
  // watchOptions
  "excludeDirectories",
  "excludeFiles"
];
function rebaseRelative(key, value2, prependPath) {
  if (!REBASE_KEYS.includes(key)) {
    return value2;
  }
  if (Array.isArray(value2)) {
    return value2.map((x) => rebasePath(x, prependPath));
  } else {
    return rebasePath(value2, prependPath);
  }
}
function rebasePath(value2, prependPath) {
  if (import_node_path3.default.isAbsolute(value2) || value2.startsWith("${configDir}")) {
    return value2;
  } else {
    return import_node_path3.default.posix.normalize(import_node_path3.default.posix.join(prependPath, value2));
  }
}
var TSConfckParseError = class _TSConfckParseError extends Error {
  /**
   *
   * @param {string} message - error message
   * @param {string} code - error code
   * @param {string} tsconfigFile - path to tsconfig file
   * @param {Error?} cause - cause of this error
   */
  constructor(message, code, tsconfigFile, cause) {
    super(message);
    /**
     * error code
     * @type {string}
     */
    __publicField(this, "code");
    /**
     * error cause
     * @type { Error | undefined}
     */
    __publicField(this, "cause");
    /**
     * absolute path of tsconfig file where the error happened
     * @type {string}
     */
    __publicField(this, "tsconfigFile");
    Object.setPrototypeOf(this, _TSConfckParseError.prototype);
    this.name = _TSConfckParseError.name;
    this.code = code;
    this.cause = cause;
    this.tsconfigFile = tsconfigFile;
  }
};
function applyDefaults(tsconfig, tsconfigFile) {
  if (isJSConfig(tsconfigFile)) {
    tsconfig.compilerOptions = {
      ...DEFAULT_JSCONFIG_COMPILER_OPTIONS,
      ...tsconfig.compilerOptions
    };
  }
}
var DEFAULT_JSCONFIG_COMPILER_OPTIONS = {
  allowJs: true,
  maxNodeModuleJsDepth: 2,
  allowSyntheticDefaultImports: true,
  skipLibCheck: true,
  noEmit: true
};
function isJSConfig(configFileName) {
  return import_node_path3.default.basename(configFileName) === "jsconfig.json";
}
var _configPaths, _parsed;
var TSConfckCache = class {
  constructor() {
    /**
     * map directories to their closest tsconfig.json
     * @internal
     * @private
     * @type{Map<string,(Promise<string|null>|string|null)>}
     */
    __privateAdd(this, _configPaths, /* @__PURE__ */ new Map());
    /**
     * map files to their parsed tsconfig result
     * @internal
     * @private
     * @type {Map<string,(Promise<T>|T)> }
     */
    __privateAdd(this, _parsed, /* @__PURE__ */ new Map());
  }
  /**
   * clear cache, use this if you have a long running process and tsconfig files have been added,changed or deleted
   */
  clear() {
    __privateGet(this, _configPaths).clear();
    __privateGet(this, _parsed).clear();
  }
  /**
   * has cached closest config for files in dir
   * @param {string} dir
   * @param {string} [configName=tsconfig.json]
   * @returns {boolean}
   */
  hasConfigPath(dir, configName = "tsconfig.json") {
    return __privateGet(this, _configPaths).has(`${dir}/${configName}`);
  }
  /**
   * get cached closest tsconfig for files in dir
   * @param {string} dir
   * @param {string} [configName=tsconfig.json]
   * @returns {Promise<string|null>|string|null}
   * @throws {unknown} if cached value is an error
   */
  getConfigPath(dir, configName = "tsconfig.json") {
    const key = `${dir}/${configName}`;
    const value2 = __privateGet(this, _configPaths).get(key);
    if (value2 == null || value2.length || value2.then) {
      return value2;
    } else {
      throw value2;
    }
  }
  /**
   * has parsed tsconfig for file
   * @param {string} file
   * @returns {boolean}
   */
  hasParseResult(file) {
    return __privateGet(this, _parsed).has(file);
  }
  /**
   * get parsed tsconfig for file
   * @param {string} file
   * @returns {Promise<T>|T}
   * @throws {unknown} if cached value is an error
   */
  getParseResult(file) {
    const value2 = __privateGet(this, _parsed).get(file);
    if (value2.then || value2.tsconfig) {
      return value2;
    } else {
      throw value2;
    }
  }
  /**
   * @internal
   * @private
   * @param file
   * @param {boolean} isRootFile a flag to check if current file which involking the parse() api, used to distinguish the normal cache which only parsed by parseFile()
   * @param {Promise<T>} result
   */
  setParseResult(file, result, isRootFile = false) {
    Object.defineProperty(result, "_isRootFile_", {
      value: isRootFile,
      writable: false,
      enumerable: false,
      configurable: false
    });
    __privateGet(this, _parsed).set(file, result);
    result.then((parsed) => {
      if (__privateGet(this, _parsed).get(file) === result) {
        __privateGet(this, _parsed).set(file, parsed);
      }
    }).catch((e2) => {
      if (__privateGet(this, _parsed).get(file) === result) {
        __privateGet(this, _parsed).set(file, e2);
      }
    });
  }
  /**
   * @internal
   * @private
   * @param {string} dir
   * @param {Promise<string|null>} configPath
   * @param {string} [configName=tsconfig.json]
   */
  setConfigPath(dir, configPath, configName = "tsconfig.json") {
    const key = `${dir}/${configName}`;
    __privateGet(this, _configPaths).set(key, configPath);
    configPath.then((path4) => {
      if (__privateGet(this, _configPaths).get(key) === configPath) {
        __privateGet(this, _configPaths).set(key, path4);
      }
    }).catch((e2) => {
      if (__privateGet(this, _configPaths).get(key) === configPath) {
        __privateGet(this, _configPaths).set(key, e2);
      }
    });
  }
};
_configPaths = new WeakMap();
_parsed = new WeakMap();
var debug$i = createDebugger("vite:esbuild");
var IIFE_BEGIN_RE = /(?:const|var)\s+\S+\s*=\s*function\([^()]*\)\s*\{\s*"use strict";/;
var validExtensionRE = /\.\w+$/;
var jsxExtensionsRE = /\.(?:j|t)sx\b/;
var defaultEsbuildSupported = {
  "dynamic-import": true,
  "import-meta": true
};
async function transformWithEsbuild(code, filename, options2, inMap, config2, watcher) {
  let loader2 = options2 == null ? void 0 : options2.loader;
  if (!loader2) {
    const ext = import_node_path3.default.extname(validExtensionRE.test(filename) ? filename : cleanUrl2(filename)).slice(1);
    if (ext === "cjs" || ext === "mjs") {
      loader2 = "js";
    } else if (ext === "cts" || ext === "mts") {
      loader2 = "ts";
    } else {
      loader2 = ext;
    }
  }
  let tsconfigRaw = options2 == null ? void 0 : options2.tsconfigRaw;
  if (typeof tsconfigRaw !== "string") {
    const meaningfulFields = [
      "alwaysStrict",
      "experimentalDecorators",
      "importsNotUsedAsValues",
      "jsx",
      "jsxFactory",
      "jsxFragmentFactory",
      "jsxImportSource",
      "preserveValueImports",
      "target",
      "useDefineForClassFields",
      "verbatimModuleSyntax"
    ];
    const compilerOptionsForFile = {};
    if (loader2 === "ts" || loader2 === "tsx") {
      try {
        const { tsconfig: loadedTsconfig, tsconfigFile } = await loadTsconfigJsonForFile(filename, config2);
        if (watcher && tsconfigFile && config2) {
          ensureWatchedFile(watcher, tsconfigFile, config2.root);
        }
        const loadedCompilerOptions = loadedTsconfig.compilerOptions ?? {};
        for (const field of meaningfulFields) {
          if (field in loadedCompilerOptions) {
            compilerOptionsForFile[field] = loadedCompilerOptions[field];
          }
        }
      } catch (e2) {
        if (e2 instanceof TSConfckParseError) {
          if (watcher && e2.tsconfigFile && config2) {
            ensureWatchedFile(watcher, e2.tsconfigFile, config2.root);
          }
        }
        throw e2;
      }
    }
    const compilerOptions = {
      ...compilerOptionsForFile,
      ...tsconfigRaw == null ? void 0 : tsconfigRaw.compilerOptions
    };
    if (compilerOptions.useDefineForClassFields === void 0 && compilerOptions.target === void 0) {
      compilerOptions.useDefineForClassFields = false;
    }
    if (options2) {
      if (options2.jsx) compilerOptions.jsx = void 0;
      if (options2.jsxFactory) compilerOptions.jsxFactory = void 0;
      if (options2.jsxFragment) compilerOptions.jsxFragmentFactory = void 0;
      if (options2.jsxImportSource) compilerOptions.jsxImportSource = void 0;
    }
    tsconfigRaw = {
      ...tsconfigRaw,
      compilerOptions
    };
  }
  const resolvedOptions = {
    sourcemap: true,
    // ensure source file name contains full query
    sourcefile: filename,
    ...options2,
    loader: loader2,
    tsconfigRaw
  };
  delete resolvedOptions.include;
  delete resolvedOptions.exclude;
  delete resolvedOptions.jsxInject;
  try {
    const result = await (0, import_esbuild.transform)(code, resolvedOptions);
    let map2;
    if (inMap && resolvedOptions.sourcemap) {
      const nextMap = JSON.parse(result.map);
      nextMap.sourcesContent = [];
      map2 = combineSourcemaps(filename, [
        nextMap,
        inMap
      ]);
    } else {
      map2 = resolvedOptions.sourcemap && resolvedOptions.sourcemap !== "inline" ? JSON.parse(result.map) : { mappings: "" };
    }
    return {
      ...result,
      map: map2
    };
  } catch (e2) {
    debug$i == null ? void 0 : debug$i(`esbuild error with options used: `, resolvedOptions);
    if (e2.errors) {
      e2.frame = "";
      e2.errors.forEach((m2) => {
        if (m2.text === "Experimental decorators are not currently enabled" || m2.text === "Parameter decorators only work when experimental decorators are enabled") {
          m2.text += '. Vite 5 now uses esbuild 0.18 and you need to enable them by adding "experimentalDecorators": true in your "tsconfig.json" file.';
        }
        e2.frame += `
` + prettifyMessage(m2, code);
      });
      e2.loc = e2.errors[0].location;
    }
    throw e2;
  }
}
function esbuildPlugin(config2) {
  const options2 = config2.esbuild;
  const { jsxInject, include, exclude, ...esbuildTransformOptions } = options2;
  const filter2 = createFilter$1(include || /\.(m?ts|[jt]sx)$/, exclude || /\.js$/);
  const transformOptions = {
    target: "esnext",
    charset: "utf8",
    ...esbuildTransformOptions,
    minify: false,
    minifyIdentifiers: false,
    minifySyntax: false,
    minifyWhitespace: false,
    treeShaking: false,
    // keepNames is not needed when minify is disabled.
    // Also transforming multiple times with keepNames enabled breaks
    // tree-shaking. (#9164)
    keepNames: false,
    supported: {
      ...defaultEsbuildSupported,
      ...esbuildTransformOptions.supported
    }
  };
  let server;
  return {
    name: "vite:esbuild",
    configureServer(_server) {
      server = _server;
    },
    async transform(code, id) {
      if (filter2(id) || filter2(cleanUrl2(id))) {
        const result = await transformWithEsbuild(
          code,
          id,
          transformOptions,
          void 0,
          config2,
          server == null ? void 0 : server.watcher
        );
        if (result.warnings.length) {
          result.warnings.forEach((m2) => {
            this.warn(prettifyMessage(m2, code));
          });
        }
        if (jsxInject && jsxExtensionsRE.test(id)) {
          result.code = jsxInject + ";" + result.code;
        }
        return {
          code: result.code,
          map: result.map
        };
      }
    }
  };
}
var rollupToEsbuildFormatMap = {
  es: "esm",
  cjs: "cjs",
  // passing `var Lib = (() => {})()` to esbuild with format = "iife"
  // will turn it to `(() => { var Lib = (() => {})() })()`,
  // so we remove the format config to tell esbuild not doing this
  //
  // although esbuild doesn't change format, there is still possibility
  // that `{ treeShaking: true }` removes a top-level no-side-effect variable
  // like: `var Lib = 1`, which becomes `` after esbuild transforming,
  // but thankfully rollup does not do this optimization now
  iife: void 0
};
var buildEsbuildPlugin = () => {
  return {
    name: "vite:esbuild-transpile",
    applyToEnvironment(environment) {
      return environment.config.esbuild !== false;
    },
    async renderChunk(code, chunk, opts) {
      if (opts.__vite_skip_esbuild__) {
        return null;
      }
      const config2 = this.environment.config;
      const options2 = resolveEsbuildTranspileOptions(config2, opts.format);
      if (!options2) {
        return null;
      }
      const res = await transformWithEsbuild(
        code,
        chunk.fileName,
        options2,
        void 0,
        config2
      );
      if (config2.build.lib) {
        const esbuildCode = res.code;
        const contentIndex = opts.format === "iife" ? Math.max(esbuildCode.search(IIFE_BEGIN_RE), 0) : opts.format === "umd" ? esbuildCode.indexOf(`(function(`) : 0;
        if (contentIndex > 0) {
          const esbuildHelpers = esbuildCode.slice(0, contentIndex);
          res.code = esbuildCode.slice(contentIndex).replace(`"use strict";`, `"use strict";` + esbuildHelpers);
        }
      }
      return res;
    }
  };
};
function resolveEsbuildTranspileOptions(config2, format2) {
  const target = config2.build.target;
  const minify = config2.build.minify === "esbuild";
  if ((!target || target === "esnext") && !minify) {
    return null;
  }
  const isEsLibBuild = config2.build.lib && format2 === "es";
  const esbuildOptions = config2.esbuild || {};
  const options2 = {
    charset: "utf8",
    ...esbuildOptions,
    loader: "js",
    target: target || void 0,
    format: rollupToEsbuildFormatMap[format2],
    supported: {
      ...defaultEsbuildSupported,
      ...esbuildOptions.supported
    }
  };
  if (!minify) {
    return {
      ...options2,
      minify: false,
      minifyIdentifiers: false,
      minifySyntax: false,
      minifyWhitespace: false,
      treeShaking: false
    };
  }
  if (options2.minifyIdentifiers != null || options2.minifySyntax != null || options2.minifyWhitespace != null) {
    if (isEsLibBuild) {
      return {
        ...options2,
        minify: false,
        minifyIdentifiers: options2.minifyIdentifiers ?? true,
        minifySyntax: options2.minifySyntax ?? true,
        minifyWhitespace: false,
        treeShaking: true
      };
    } else {
      return {
        ...options2,
        minify: false,
        minifyIdentifiers: options2.minifyIdentifiers ?? true,
        minifySyntax: options2.minifySyntax ?? true,
        minifyWhitespace: options2.minifyWhitespace ?? true,
        treeShaking: true
      };
    }
  }
  if (isEsLibBuild) {
    return {
      ...options2,
      minify: false,
      minifyIdentifiers: true,
      minifySyntax: true,
      minifyWhitespace: false,
      treeShaking: true
    };
  } else {
    return {
      ...options2,
      minify: true,
      treeShaking: true
    };
  }
}
function prettifyMessage(m2, code) {
  let res = colors$1.yellow(m2.text);
  if (m2.location) {
    res += `
` + generateCodeFrame(code, m2.location);
  }
  return res + `
`;
}
var globalTSConfckCache;
var tsconfckCacheMap = /* @__PURE__ */ new WeakMap();
function getTSConfckCache(config2) {
  if (!config2) {
    return globalTSConfckCache ?? (globalTSConfckCache = new TSConfckCache());
  }
  let cache = tsconfckCacheMap.get(config2);
  if (!cache) {
    cache = new TSConfckCache();
    tsconfckCacheMap.set(config2, cache);
  }
  return cache;
}
async function loadTsconfigJsonForFile(filename, config2) {
  const { tsconfig, tsconfigFile } = await parse$e(filename, {
    cache: getTSConfckCache(config2)
  });
  return { tsconfigFile, tsconfig };
}
async function reloadOnTsconfigChange(server, changedFile) {
  if (changedFile.endsWith(".json")) {
    const cache = getTSConfckCache(server.config);
    if (changedFile.endsWith("/tsconfig.json") || cache.hasParseResult(changedFile)) {
      server.config.logger.info(
        `changed tsconfig file detected: ${changedFile} - Clearing cache and forcing full-reload to ensure TypeScript is compiled with updated config values.`,
        { clear: server.config.clearScreen, timestamp: true }
      );
      for (const environment of Object.values(server.environments)) {
        environment.moduleGraph.invalidateAll();
      }
      cache.clear();
      for (const environment of Object.values(server.environments)) {
        environment.hot.send({
          type: "full-reload",
          path: "*"
        });
      }
    }
  }
}
var AsyncFunction2 = (async function() {
}).constructor;
var codeToDataUrl = (code) => `data:application/javascript,${encodeURIComponent(code + "\n//# sourceURL=[worker-eval(artichokie)]")}`;
var viteSsrDynamicImport = "__vite_ssr_dynamic_import__";
var Worker = class {
  constructor(fn, options2 = {}) {
    /** @internal */
    __publicField(this, "_isModule");
    /** @internal */
    __publicField(this, "_code");
    /** @internal */
    __publicField(this, "_parentFunctions");
    /** @internal */
    __publicField(this, "_max");
    /** @internal */
    __publicField(this, "_pool");
    /** @internal */
    __publicField(this, "_idlePool");
    /** @internal */
    __publicField(this, "_queue");
    var _a2, _b;
    this._isModule = options2.type === "module";
    this._code = genWorkerCode(
      fn,
      this._isModule,
      options2.parentFunctions ?? {}
    );
    this._parentFunctions = options2.parentFunctions ?? {};
    const defaultMax = Math.max(
      1,
      // os.availableParallelism is available from Node.js 18.14.0
      (((_b = (_a2 = import_node_os.default).availableParallelism) == null ? void 0 : _b.call(_a2)) ?? import_node_os.default.cpus().length) - 1
    );
    this._max = options2.max || defaultMax;
    this._pool = [];
    this._idlePool = [];
    this._queue = [];
  }
  async run(...args) {
    const worker = await this._getAvailableWorker();
    return new Promise((resolve4, reject) => {
      worker.currentResolve = resolve4;
      worker.currentReject = reject;
      worker.postMessage({ args });
    });
  }
  stop() {
    this._pool.forEach((w) => w.unref());
    this._queue.forEach(
      ([, reject]) => reject(
        new Error("Main worker pool stopped before a worker was available.")
      )
    );
    this._pool = [];
    this._idlePool = [];
    this._queue = [];
  }
  /** @internal */
  _createWorker(parentFunctionSyncMessagePort, parentFunctionAsyncMessagePort, lockState) {
    const options2 = {
      workerData: [
        parentFunctionSyncMessagePort,
        parentFunctionAsyncMessagePort,
        lockState
      ],
      transferList: [
        parentFunctionSyncMessagePort,
        parentFunctionAsyncMessagePort
      ]
    };
    if (this._isModule) {
      return new import_node_worker_threads.Worker(
        new URL(codeToDataUrl(this._code)),
        options2
      );
    }
    return new import_node_worker_threads.Worker(this._code, {
      ...options2,
      eval: true
    });
  }
  /** @internal */
  async _getAvailableWorker() {
    if (this._idlePool.length) {
      return this._idlePool.shift();
    }
    if (this._pool.length < this._max) {
      const parentFunctionResponder = createParentFunctionResponder(
        this._parentFunctions
      );
      const worker = this._createWorker(
        parentFunctionResponder.workerPorts.sync,
        parentFunctionResponder.workerPorts.async,
        parentFunctionResponder.lockState
      );
      worker.on("message", async (args) => {
        var _a2, _b;
        if ("result" in args) {
          (_a2 = worker.currentResolve) == null ? void 0 : _a2.call(worker, args.result);
          worker.currentResolve = null;
        } else {
          if (args.error instanceof ReferenceError) {
            args.error.message += ". Maybe you forgot to pass the function to parentFunction?";
          }
          (_b = worker.currentReject) == null ? void 0 : _b.call(worker, args.error);
          worker.currentReject = null;
        }
        this._assignDoneWorker(worker);
      });
      worker.on("error", (err2) => {
        var _a2;
        (_a2 = worker.currentReject) == null ? void 0 : _a2.call(worker, err2);
        worker.currentReject = null;
        parentFunctionResponder.close();
      });
      worker.on("exit", (code) => {
        const i = this._pool.indexOf(worker);
        if (i > -1) this._pool.splice(i, 1);
        if (code !== 0 && worker.currentReject) {
          worker.currentReject(
            new Error(`Worker stopped with non-0 exit code ${code}`)
          );
          worker.currentReject = null;
          parentFunctionResponder.close();
        }
      });
      this._pool.push(worker);
      return worker;
    }
    let resolve4;
    let reject;
    const onWorkerAvailablePromise = new Promise((r2, rj) => {
      resolve4 = r2;
      reject = rj;
    });
    this._queue.push([resolve4, reject]);
    return onWorkerAvailablePromise;
  }
  /** @internal */
  _assignDoneWorker(worker) {
    if (this._queue.length) {
      const [resolve4] = this._queue.shift();
      resolve4(worker);
      return;
    }
    this._idlePool.push(worker);
  }
};
function createParentFunctionResponder(parentFunctions) {
  const lockState = new Int32Array(new SharedArrayBuffer(4));
  const unlock = () => {
    Atomics.store(lockState, 0, 0);
    Atomics.notify(lockState, 0);
  };
  const parentFunctionSyncMessageChannel = new import_node_worker_threads.MessageChannel();
  const parentFunctionAsyncMessageChannel = new import_node_worker_threads.MessageChannel();
  const parentFunctionSyncMessagePort = parentFunctionSyncMessageChannel.port1;
  const parentFunctionAsyncMessagePort = parentFunctionAsyncMessageChannel.port1;
  const syncResponse = (data) => {
    parentFunctionSyncMessagePort.postMessage(data);
    unlock();
  };
  parentFunctionSyncMessagePort.on("message", async (args) => {
    let syncResult;
    try {
      syncResult = parentFunctions[args.name](...args.args);
    } catch (error2) {
      syncResponse({ id: args.id, error: error2 });
      return;
    }
    if (!(typeof syncResult === "object" && syncResult !== null && "then" in syncResult && typeof syncResult.then === "function")) {
      syncResponse({
        id: args.id,
        result: syncResult
      });
      return;
    }
    syncResponse({
      id: args.id,
      isAsync: true
    });
    try {
      const result = await syncResult;
      parentFunctionAsyncMessagePort.postMessage({ id: args.id, result });
    } catch (error2) {
      parentFunctionAsyncMessagePort.postMessage({ id: args.id, error: error2 });
    }
  });
  parentFunctionSyncMessagePort.unref();
  return {
    close: () => {
      parentFunctionSyncMessagePort.close();
      parentFunctionAsyncMessagePort.close();
    },
    lockState,
    workerPorts: {
      sync: parentFunctionSyncMessageChannel.port2,
      async: parentFunctionAsyncMessageChannel.port2
    }
  };
}
function genWorkerCode(fn, isModule, parentFunctions) {
  const createLock = (lockState) => {
    return {
      lock: () => {
        Atomics.store(lockState, 0, 1);
      },
      waitUnlock: () => {
        const status2 = Atomics.wait(lockState, 0, 1, 10 * 1e3);
        if (status2 === "timed-out") {
          throw new Error(status2);
        }
      }
    };
  };
  const createParentFunctionRequester = (syncPort, asyncPort, receive, lock) => {
    let id = 0;
    const resolvers = /* @__PURE__ */ new Map();
    const call2 = (key) => (...args) => {
      id++;
      lock.lock();
      syncPort.postMessage({ id, name: key, args });
      lock.waitUnlock();
      const resArgs = receive(syncPort).message;
      if (resArgs.isAsync) {
        let resolve4, reject;
        const promise = new Promise((res, rej) => {
          resolve4 = res;
          reject = rej;
        });
        resolvers.set(id, { resolve: resolve4, reject });
        return promise;
      }
      if ("error" in resArgs) {
        throw resArgs.error;
      } else {
        return resArgs.result;
      }
    };
    asyncPort.on("message", (args) => {
      const id2 = args.id;
      if (resolvers.has(id2)) {
        const { resolve: resolve4, reject } = resolvers.get(id2);
        resolvers.delete(id2);
        if ("result" in args) {
          resolve4(args.result);
        } else {
          reject(args.error);
        }
      }
    });
    return { call: call2 };
  };
  const fnString = fn.toString().replaceAll(viteSsrDynamicImport, "import");
  return `
${isModule ? "import { parentPort, receiveMessageOnPort, workerData } from 'worker_threads'" : "const { parentPort, receiveMessageOnPort, workerData } = require('worker_threads')"}
const [parentFunctionSyncMessagePort, parentFunctionAsyncMessagePort, lockState] = workerData
const createLock = ${createLock.toString()}
const parentFunctionRequester = (${createParentFunctionRequester.toString()})(
  parentFunctionSyncMessagePort,
  parentFunctionAsyncMessagePort,
  receiveMessageOnPort,
  createLock(lockState)
)

const doWorkPromise = (async () => {
  ${Object.keys(parentFunctions).map(
    (key) => `const ${key} = parentFunctionRequester.call(${JSON.stringify(key)});`
  ).join("\n")}
  return await (${fnString})()
})()
let doWork

parentPort.on('message', async (args) => {
  doWork ||= await doWorkPromise

  try {
    const res = await doWork(...args.args)
    parentPort.postMessage({ result: res })
  } catch (e) {
    parentPort.postMessage({ error: e })
  }
})
  `;
}
var importRe = /\bimport\s*\(/;
var internalImportName = "__artichokie_local_import__";
var FakeWorker = class {
  constructor(fn, options2 = {}) {
    /** @internal */
    __publicField(this, "_fn");
    const declareRequire = options2.type !== "module";
    const argsAndCode = genFakeWorkerArgsAndCode(
      fn,
      declareRequire,
      options2.parentFunctions ?? {}
    );
    const localImport = (specifier) => import(specifier);
    const args = [
      ...declareRequire ? [(0, import_node_module.createRequire)(import.meta.url)] : [],
      localImport,
      options2.parentFunctions
    ];
    this._fn = new AsyncFunction2(...argsAndCode)(...args);
  }
  async run(...args) {
    try {
      return await (await this._fn)(...args);
    } catch (err2) {
      if (err2 instanceof ReferenceError) {
        err2.message += ". Maybe you forgot to pass the function to parentFunction?";
      }
      throw err2;
    }
  }
  stop() {
  }
};
function genFakeWorkerArgsAndCode(fn, declareRequire, parentFunctions) {
  const fnString = fn.toString().replace(importRe, `${internalImportName}(`).replaceAll(viteSsrDynamicImport, internalImportName);
  return [
    ...declareRequire ? ["require"] : [],
    internalImportName,
    "parentFunctions",
    `
${Object.keys(parentFunctions).map((key) => `const ${key} = parentFunctions[${JSON.stringify(key)}];`).join("\n")}
return await (${fnString})()
  `
  ];
}
var WorkerWithFallback = class {
  constructor(fn, options2) {
    /** @internal */
    __publicField(this, "_disableReal");
    /** @internal */
    __publicField(this, "_realWorker");
    /** @internal */
    __publicField(this, "_fakeWorker");
    /** @internal */
    __publicField(this, "_shouldUseFake");
    this._disableReal = options2.max !== void 0 && options2.max <= 0;
    this._realWorker = new Worker(fn, options2);
    this._fakeWorker = new FakeWorker(fn, options2);
    this._shouldUseFake = options2.shouldUseFake;
  }
  async run(...args) {
    const useFake = this._disableReal || this._shouldUseFake(...args);
    return this[useFake ? "_fakeWorker" : "_realWorker"].run(...args);
  }
  stop() {
    this._realWorker.stop();
    this._fakeWorker.stop();
  }
};
var terserPath;
var loadTerserPath = (root) => {
  if (terserPath) return terserPath;
  try {
    terserPath = requireResolveFromRootWithFallback(root, "terser");
  } catch (e2) {
    if (e2.code === "MODULE_NOT_FOUND") {
      throw new Error(
        "terser not found. Since Vite v3, terser has become an optional dependency. You need to install it."
      );
    } else {
      const message = new Error(`terser failed to load:
${e2.message}`);
      message.stack = e2.stack + "\n" + message.stack;
      throw message;
    }
  }
  return terserPath;
};
function terserPlugin(config2) {
  const { maxWorkers, ...terserOptions } = config2.build.terserOptions;
  const makeWorker = () => new WorkerWithFallback(
    () => async (terserPath2, code, options2) => {
      const terser = __require(terserPath2);
      return terser.minify(code, options2);
    },
    {
      shouldUseFake(_terserPath, _code, options2) {
        var _a2, _b, _c, _d;
        return !!(typeof options2.mangle === "object" && (((_a2 = options2.mangle.nth_identifier) == null ? void 0 : _a2.get) || typeof options2.mangle.properties === "object" && ((_b = options2.mangle.properties.nth_identifier) == null ? void 0 : _b.get)) || typeof ((_c = options2.format) == null ? void 0 : _c.comments) === "function" || typeof ((_d = options2.output) == null ? void 0 : _d.comments) === "function");
      },
      max: maxWorkers
    }
  );
  let worker;
  return {
    name: "vite:terser",
    applyToEnvironment(environment) {
      return !!environment.config.build.minify;
    },
    async renderChunk(code, _chunk, outputOptions) {
      if (config2.build.minify !== "terser" && // @ts-expect-error injected by @vitejs/plugin-legacy
      !outputOptions.__vite_force_terser__) {
        return null;
      }
      if (config2.build.lib && outputOptions.format === "es") {
        return null;
      }
      worker || (worker = makeWorker());
      const terserPath2 = loadTerserPath(config2.root);
      const res = await worker.run(terserPath2, code, {
        safari10: true,
        ...terserOptions,
        sourceMap: !!outputOptions.sourcemap,
        module: outputOptions.format.startsWith("es"),
        toplevel: outputOptions.format === "cjs"
      });
      return {
        code: res.code,
        map: res.map
      };
    },
    closeBundle() {
      worker == null ? void 0 : worker.stop();
    }
  };
}
async function resolveEnvironmentPlugins(environment) {
  const environmentPlugins = [];
  for (const plugin of environment.getTopLevelConfig().plugins) {
    if (plugin.applyToEnvironment) {
      const applied = await plugin.applyToEnvironment(environment);
      if (!applied) {
        continue;
      }
      if (applied !== true) {
        environmentPlugins.push(
          ...(await asyncFlatten(arraify(applied))).filter(
            Boolean
          )
        );
        continue;
      }
    }
    environmentPlugins.push(plugin);
  }
  return environmentPlugins;
}
function perEnvironmentPlugin(name, applyToEnvironment) {
  return {
    name,
    applyToEnvironment
  };
}
var mimes = {
  "3g2": "video/3gpp2",
  "3gp": "video/3gpp",
  "3gpp": "video/3gpp",
  "3mf": "model/3mf",
  "aac": "audio/aac",
  "ac": "application/pkix-attr-cert",
  "adp": "audio/adpcm",
  "adts": "audio/aac",
  "ai": "application/postscript",
  "aml": "application/automationml-aml+xml",
  "amlx": "application/automationml-amlx+zip",
  "amr": "audio/amr",
  "apng": "image/apng",
  "appcache": "text/cache-manifest",
  "appinstaller": "application/appinstaller",
  "appx": "application/appx",
  "appxbundle": "application/appxbundle",
  "asc": "application/pgp-keys",
  "atom": "application/atom+xml",
  "atomcat": "application/atomcat+xml",
  "atomdeleted": "application/atomdeleted+xml",
  "atomsvc": "application/atomsvc+xml",
  "au": "audio/basic",
  "avci": "image/avci",
  "avcs": "image/avcs",
  "avif": "image/avif",
  "aw": "application/applixware",
  "bdoc": "application/bdoc",
  "bin": "application/octet-stream",
  "bmp": "image/bmp",
  "bpk": "application/octet-stream",
  "btf": "image/prs.btif",
  "btif": "image/prs.btif",
  "buffer": "application/octet-stream",
  "ccxml": "application/ccxml+xml",
  "cdfx": "application/cdfx+xml",
  "cdmia": "application/cdmi-capability",
  "cdmic": "application/cdmi-container",
  "cdmid": "application/cdmi-domain",
  "cdmio": "application/cdmi-object",
  "cdmiq": "application/cdmi-queue",
  "cer": "application/pkix-cert",
  "cgm": "image/cgm",
  "cjs": "application/node",
  "class": "application/java-vm",
  "coffee": "text/coffeescript",
  "conf": "text/plain",
  "cpl": "application/cpl+xml",
  "cpt": "application/mac-compactpro",
  "crl": "application/pkix-crl",
  "css": "text/css",
  "csv": "text/csv",
  "cu": "application/cu-seeme",
  "cwl": "application/cwl",
  "cww": "application/prs.cww",
  "davmount": "application/davmount+xml",
  "dbk": "application/docbook+xml",
  "deb": "application/octet-stream",
  "def": "text/plain",
  "deploy": "application/octet-stream",
  "dib": "image/bmp",
  "disposition-notification": "message/disposition-notification",
  "dist": "application/octet-stream",
  "distz": "application/octet-stream",
  "dll": "application/octet-stream",
  "dmg": "application/octet-stream",
  "dms": "application/octet-stream",
  "doc": "application/msword",
  "dot": "application/msword",
  "dpx": "image/dpx",
  "drle": "image/dicom-rle",
  "dsc": "text/prs.lines.tag",
  "dssc": "application/dssc+der",
  "dtd": "application/xml-dtd",
  "dump": "application/octet-stream",
  "dwd": "application/atsc-dwd+xml",
  "ear": "application/java-archive",
  "ecma": "application/ecmascript",
  "elc": "application/octet-stream",
  "emf": "image/emf",
  "eml": "message/rfc822",
  "emma": "application/emma+xml",
  "emotionml": "application/emotionml+xml",
  "eps": "application/postscript",
  "epub": "application/epub+zip",
  "exe": "application/octet-stream",
  "exi": "application/exi",
  "exp": "application/express",
  "exr": "image/aces",
  "ez": "application/andrew-inset",
  "fdf": "application/fdf",
  "fdt": "application/fdt+xml",
  "fits": "image/fits",
  "g3": "image/g3fax",
  "gbr": "application/rpki-ghostbusters",
  "geojson": "application/geo+json",
  "gif": "image/gif",
  "glb": "model/gltf-binary",
  "gltf": "model/gltf+json",
  "gml": "application/gml+xml",
  "gpx": "application/gpx+xml",
  "gram": "application/srgs",
  "grxml": "application/srgs+xml",
  "gxf": "application/gxf",
  "gz": "application/gzip",
  "h261": "video/h261",
  "h263": "video/h263",
  "h264": "video/h264",
  "heic": "image/heic",
  "heics": "image/heic-sequence",
  "heif": "image/heif",
  "heifs": "image/heif-sequence",
  "hej2": "image/hej2k",
  "held": "application/atsc-held+xml",
  "hjson": "application/hjson",
  "hlp": "application/winhlp",
  "hqx": "application/mac-binhex40",
  "hsj2": "image/hsj2",
  "htm": "text/html",
  "html": "text/html",
  "ics": "text/calendar",
  "ief": "image/ief",
  "ifb": "text/calendar",
  "iges": "model/iges",
  "igs": "model/iges",
  "img": "application/octet-stream",
  "in": "text/plain",
  "ini": "text/plain",
  "ink": "application/inkml+xml",
  "inkml": "application/inkml+xml",
  "ipfix": "application/ipfix",
  "iso": "application/octet-stream",
  "its": "application/its+xml",
  "jade": "text/jade",
  "jar": "application/java-archive",
  "jhc": "image/jphc",
  "jls": "image/jls",
  "jp2": "image/jp2",
  "jpe": "image/jpeg",
  "jpeg": "image/jpeg",
  "jpf": "image/jpx",
  "jpg": "image/jpeg",
  "jpg2": "image/jp2",
  "jpgm": "image/jpm",
  "jpgv": "video/jpeg",
  "jph": "image/jph",
  "jpm": "image/jpm",
  "jpx": "image/jpx",
  "js": "text/javascript",
  "json": "application/json",
  "json5": "application/json5",
  "jsonld": "application/ld+json",
  "jsonml": "application/jsonml+json",
  "jsx": "text/jsx",
  "jt": "model/jt",
  "jxl": "image/jxl",
  "jxr": "image/jxr",
  "jxra": "image/jxra",
  "jxrs": "image/jxrs",
  "jxs": "image/jxs",
  "jxsc": "image/jxsc",
  "jxsi": "image/jxsi",
  "jxss": "image/jxss",
  "kar": "audio/midi",
  "ktx": "image/ktx",
  "ktx2": "image/ktx2",
  "less": "text/less",
  "lgr": "application/lgr+xml",
  "list": "text/plain",
  "litcoffee": "text/coffeescript",
  "log": "text/plain",
  "lostxml": "application/lost+xml",
  "lrf": "application/octet-stream",
  "m1v": "video/mpeg",
  "m21": "application/mp21",
  "m2a": "audio/mpeg",
  "m2t": "video/mp2t",
  "m2ts": "video/mp2t",
  "m2v": "video/mpeg",
  "m3a": "audio/mpeg",
  "m4a": "audio/mp4",
  "m4p": "application/mp4",
  "m4s": "video/iso.segment",
  "ma": "application/mathematica",
  "mads": "application/mads+xml",
  "maei": "application/mmt-aei+xml",
  "man": "text/troff",
  "manifest": "text/cache-manifest",
  "map": "application/json",
  "mar": "application/octet-stream",
  "markdown": "text/markdown",
  "mathml": "application/mathml+xml",
  "mb": "application/mathematica",
  "mbox": "application/mbox",
  "md": "text/markdown",
  "mdx": "text/mdx",
  "me": "text/troff",
  "mesh": "model/mesh",
  "meta4": "application/metalink4+xml",
  "metalink": "application/metalink+xml",
  "mets": "application/mets+xml",
  "mft": "application/rpki-manifest",
  "mid": "audio/midi",
  "midi": "audio/midi",
  "mime": "message/rfc822",
  "mj2": "video/mj2",
  "mjp2": "video/mj2",
  "mjs": "text/javascript",
  "mml": "text/mathml",
  "mods": "application/mods+xml",
  "mov": "video/quicktime",
  "mp2": "audio/mpeg",
  "mp21": "application/mp21",
  "mp2a": "audio/mpeg",
  "mp3": "audio/mpeg",
  "mp4": "video/mp4",
  "mp4a": "audio/mp4",
  "mp4s": "application/mp4",
  "mp4v": "video/mp4",
  "mpd": "application/dash+xml",
  "mpe": "video/mpeg",
  "mpeg": "video/mpeg",
  "mpf": "application/media-policy-dataset+xml",
  "mpg": "video/mpeg",
  "mpg4": "video/mp4",
  "mpga": "audio/mpeg",
  "mpp": "application/dash-patch+xml",
  "mrc": "application/marc",
  "mrcx": "application/marcxml+xml",
  "ms": "text/troff",
  "mscml": "application/mediaservercontrol+xml",
  "msh": "model/mesh",
  "msi": "application/octet-stream",
  "msix": "application/msix",
  "msixbundle": "application/msixbundle",
  "msm": "application/octet-stream",
  "msp": "application/octet-stream",
  "mtl": "model/mtl",
  "mts": "video/mp2t",
  "musd": "application/mmt-usd+xml",
  "mxf": "application/mxf",
  "mxmf": "audio/mobile-xmf",
  "mxml": "application/xv+xml",
  "n3": "text/n3",
  "nb": "application/mathematica",
  "nq": "application/n-quads",
  "nt": "application/n-triples",
  "obj": "model/obj",
  "oda": "application/oda",
  "oga": "audio/ogg",
  "ogg": "audio/ogg",
  "ogv": "video/ogg",
  "ogx": "application/ogg",
  "omdoc": "application/omdoc+xml",
  "onepkg": "application/onenote",
  "onetmp": "application/onenote",
  "onetoc": "application/onenote",
  "onetoc2": "application/onenote",
  "opf": "application/oebps-package+xml",
  "opus": "audio/ogg",
  "otf": "font/otf",
  "owl": "application/rdf+xml",
  "oxps": "application/oxps",
  "p10": "application/pkcs10",
  "p7c": "application/pkcs7-mime",
  "p7m": "application/pkcs7-mime",
  "p7s": "application/pkcs7-signature",
  "p8": "application/pkcs8",
  "pdf": "application/pdf",
  "pfr": "application/font-tdpfr",
  "pgp": "application/pgp-encrypted",
  "pkg": "application/octet-stream",
  "pki": "application/pkixcmp",
  "pkipath": "application/pkix-pkipath",
  "pls": "application/pls+xml",
  "png": "image/png",
  "prc": "model/prc",
  "prf": "application/pics-rules",
  "provx": "application/provenance+xml",
  "ps": "application/postscript",
  "pskcxml": "application/pskc+xml",
  "pti": "image/prs.pti",
  "qt": "video/quicktime",
  "raml": "application/raml+yaml",
  "rapd": "application/route-apd+xml",
  "rdf": "application/rdf+xml",
  "relo": "application/p2p-overlay+xml",
  "rif": "application/reginfo+xml",
  "rl": "application/resource-lists+xml",
  "rld": "application/resource-lists-diff+xml",
  "rmi": "audio/midi",
  "rnc": "application/relax-ng-compact-syntax",
  "rng": "application/xml",
  "roa": "application/rpki-roa",
  "roff": "text/troff",
  "rq": "application/sparql-query",
  "rs": "application/rls-services+xml",
  "rsat": "application/atsc-rsat+xml",
  "rsd": "application/rsd+xml",
  "rsheet": "application/urc-ressheet+xml",
  "rss": "application/rss+xml",
  "rtf": "text/rtf",
  "rtx": "text/richtext",
  "rusd": "application/route-usd+xml",
  "s3m": "audio/s3m",
  "sbml": "application/sbml+xml",
  "scq": "application/scvp-cv-request",
  "scs": "application/scvp-cv-response",
  "sdp": "application/sdp",
  "senmlx": "application/senml+xml",
  "sensmlx": "application/sensml+xml",
  "ser": "application/java-serialized-object",
  "setpay": "application/set-payment-initiation",
  "setreg": "application/set-registration-initiation",
  "sgi": "image/sgi",
  "sgm": "text/sgml",
  "sgml": "text/sgml",
  "shex": "text/shex",
  "shf": "application/shf+xml",
  "shtml": "text/html",
  "sieve": "application/sieve",
  "sig": "application/pgp-signature",
  "sil": "audio/silk",
  "silo": "model/mesh",
  "siv": "application/sieve",
  "slim": "text/slim",
  "slm": "text/slim",
  "sls": "application/route-s-tsid+xml",
  "smi": "application/smil+xml",
  "smil": "application/smil+xml",
  "snd": "audio/basic",
  "so": "application/octet-stream",
  "spdx": "text/spdx",
  "spp": "application/scvp-vp-response",
  "spq": "application/scvp-vp-request",
  "spx": "audio/ogg",
  "sql": "application/sql",
  "sru": "application/sru+xml",
  "srx": "application/sparql-results+xml",
  "ssdl": "application/ssdl+xml",
  "ssml": "application/ssml+xml",
  "stk": "application/hyperstudio",
  "stl": "model/stl",
  "stpx": "model/step+xml",
  "stpxz": "model/step-xml+zip",
  "stpz": "model/step+zip",
  "styl": "text/stylus",
  "stylus": "text/stylus",
  "svg": "image/svg+xml",
  "svgz": "image/svg+xml",
  "swidtag": "application/swid+xml",
  "t": "text/troff",
  "t38": "image/t38",
  "td": "application/urc-targetdesc+xml",
  "tei": "application/tei+xml",
  "teicorpus": "application/tei+xml",
  "text": "text/plain",
  "tfi": "application/thraud+xml",
  "tfx": "image/tiff-fx",
  "tif": "image/tiff",
  "tiff": "image/tiff",
  "toml": "application/toml",
  "tr": "text/troff",
  "trig": "application/trig",
  "ts": "video/mp2t",
  "tsd": "application/timestamped-data",
  "tsv": "text/tab-separated-values",
  "ttc": "font/collection",
  "ttf": "font/ttf",
  "ttl": "text/turtle",
  "ttml": "application/ttml+xml",
  "txt": "text/plain",
  "u3d": "model/u3d",
  "u8dsn": "message/global-delivery-status",
  "u8hdr": "message/global-headers",
  "u8mdn": "message/global-disposition-notification",
  "u8msg": "message/global",
  "ubj": "application/ubjson",
  "uri": "text/uri-list",
  "uris": "text/uri-list",
  "urls": "text/uri-list",
  "vcard": "text/vcard",
  "vrml": "model/vrml",
  "vtt": "text/vtt",
  "vxml": "application/voicexml+xml",
  "war": "application/java-archive",
  "wasm": "application/wasm",
  "wav": "audio/wav",
  "weba": "audio/webm",
  "webm": "video/webm",
  "webmanifest": "application/manifest+json",
  "webp": "image/webp",
  "wgsl": "text/wgsl",
  "wgt": "application/widget",
  "wif": "application/watcherinfo+xml",
  "wmf": "image/wmf",
  "woff": "font/woff",
  "woff2": "font/woff2",
  "wrl": "model/vrml",
  "wsdl": "application/wsdl+xml",
  "wspolicy": "application/wspolicy+xml",
  "x3d": "model/x3d+xml",
  "x3db": "model/x3d+fastinfoset",
  "x3dbz": "model/x3d+binary",
  "x3dv": "model/x3d-vrml",
  "x3dvz": "model/x3d+vrml",
  "x3dz": "model/x3d+xml",
  "xaml": "application/xaml+xml",
  "xav": "application/xcap-att+xml",
  "xca": "application/xcap-caps+xml",
  "xcs": "application/calendar+xml",
  "xdf": "application/xcap-diff+xml",
  "xdssc": "application/dssc+xml",
  "xel": "application/xcap-el+xml",
  "xenc": "application/xenc+xml",
  "xer": "application/patch-ops-error+xml",
  "xfdf": "application/xfdf",
  "xht": "application/xhtml+xml",
  "xhtml": "application/xhtml+xml",
  "xhvml": "application/xv+xml",
  "xlf": "application/xliff+xml",
  "xm": "audio/xm",
  "xml": "text/xml",
  "xns": "application/xcap-ns+xml",
  "xop": "application/xop+xml",
  "xpl": "application/xproc+xml",
  "xsd": "application/xml",
  "xsf": "application/prs.xsf+xml",
  "xsl": "application/xml",
  "xslt": "application/xml",
  "xspf": "application/xspf+xml",
  "xvm": "application/xv+xml",
  "xvml": "application/xv+xml",
  "yaml": "text/yaml",
  "yang": "application/yang",
  "yin": "application/yin+xml",
  "yml": "text/yaml",
  "zip": "application/zip"
};
function lookup(extn) {
  let tmp = ("" + extn).trim().toLowerCase();
  let idx = tmp.lastIndexOf(".");
  return mimes[!~idx ? tmp : tmp.substring(++idx)];
}
var publicFilesMap = /* @__PURE__ */ new WeakMap();
async function initPublicFiles(config2) {
  let fileNames;
  try {
    fileNames = await recursiveReaddir(config2.publicDir);
  } catch (e2) {
    if (e2.code === ERR_SYMLINK_IN_RECURSIVE_READDIR) {
      return;
    }
    throw e2;
  }
  const publicFiles = new Set(
    fileNames.map((fileName) => fileName.slice(config2.publicDir.length))
  );
  publicFilesMap.set(config2, publicFiles);
  return publicFiles;
}
function getPublicFiles(config2) {
  return publicFilesMap.get(config2);
}
function checkPublicFile(url2, config2) {
  const { publicDir } = config2;
  if (!publicDir || url2[0] !== "/") {
    return;
  }
  const fileName = cleanUrl2(url2);
  const publicFiles = getPublicFiles(config2);
  if (publicFiles) {
    return publicFiles.has(fileName) ? normalizePath$3(import_node_path3.default.join(publicDir, fileName)) : void 0;
  }
  const publicFile = normalizePath$3(import_node_path3.default.join(publicDir, fileName));
  if (!publicFile.startsWith(withTrailingSlash(publicDir))) {
    return;
  }
  return import_node_fs2.default.existsSync(publicFile) ? publicFile : void 0;
}
var assetUrlRE = /__VITE_ASSET__([\w$]+)__(?:\$_(.*?)__)?/g;
var jsSourceMapRE = /\.[cm]?js\.map$/;
var noInlineRE = /[?&]no-inline\b/;
var inlineRE$3 = /[?&]inline\b/;
var svgExtRE = /\.svg(?:$|\?)/;
var assetCache = /* @__PURE__ */ new WeakMap();
var cssEntriesMap = /* @__PURE__ */ new WeakMap();
function registerCustomMime() {
  mimes["ico"] = "image/x-icon";
  mimes["cur"] = "image/x-icon";
  mimes["flac"] = "audio/flac";
  mimes["eot"] = "application/vnd.ms-fontobject";
}
function renderAssetUrlInJS(pluginContext, chunk, opts, code) {
  const { environment } = pluginContext;
  const toRelativeRuntime = createToImportMetaURLBasedRelativeRuntime(
    opts.format,
    environment.config.isWorker
  );
  let match;
  let s2;
  assetUrlRE.lastIndex = 0;
  while (match = assetUrlRE.exec(code)) {
    s2 || (s2 = new MagicString(code));
    const [full, referenceId, postfix = ""] = match;
    const file = pluginContext.getFileName(referenceId);
    chunk.viteMetadata.importedAssets.add(cleanUrl2(file));
    const filename = file + postfix;
    const replacement = toOutputFilePathInJS(
      environment,
      filename,
      "asset",
      chunk.fileName,
      "js",
      toRelativeRuntime
    );
    const replacementString = typeof replacement === "string" ? JSON.stringify(encodeURIPath(replacement)).slice(1, -1) : `"+${replacement.runtime}+"`;
    s2.update(match.index, match.index + full.length, replacementString);
  }
  const publicAssetUrlMap = publicAssetUrlCache.get(
    environment.getTopLevelConfig()
  );
  publicAssetUrlRE.lastIndex = 0;
  while (match = publicAssetUrlRE.exec(code)) {
    s2 || (s2 = new MagicString(code));
    const [full, hash2] = match;
    const publicUrl = publicAssetUrlMap.get(hash2).slice(1);
    const replacement = toOutputFilePathInJS(
      environment,
      publicUrl,
      "public",
      chunk.fileName,
      "js",
      toRelativeRuntime
    );
    const replacementString = typeof replacement === "string" ? JSON.stringify(encodeURIPath(replacement)).slice(1, -1) : `"+${replacement.runtime}+"`;
    s2.update(match.index, match.index + full.length, replacementString);
  }
  return s2;
}
function assetPlugin(config2) {
  registerCustomMime();
  return {
    name: "vite:asset",
    perEnvironmentStartEndDuringDev: true,
    buildStart() {
      assetCache.set(this.environment, /* @__PURE__ */ new Map());
      cssEntriesMap.set(this.environment, /* @__PURE__ */ new Set());
    },
    resolveId: {
      handler(id) {
        if (!config2.assetsInclude(cleanUrl2(id)) && !urlRE$1.test(id)) {
          return;
        }
        const publicFile = checkPublicFile(id, config2);
        if (publicFile) {
          return id;
        }
      }
    },
    load: {
      async handler(id) {
        var _a2;
        if (id[0] === "\0") {
          return;
        }
        if (rawRE$1.test(id)) {
          const file = checkPublicFile(id, config2) || cleanUrl2(id);
          this.addWatchFile(file);
          return `export default ${JSON.stringify(
            await import_promises.default.readFile(file, "utf-8")
          )}`;
        }
        if (!urlRE$1.test(id) && !config2.assetsInclude(cleanUrl2(id))) {
          return;
        }
        id = removeUrlQuery(id);
        let url2 = await fileToUrl$1(this, id);
        if (!url2.startsWith("data:") && this.environment.mode === "dev") {
          const mod = this.environment.moduleGraph.getModuleById(id);
          if (mod && mod.lastHMRTimestamp > 0) {
            url2 = injectQuery(url2, `t=${mod.lastHMRTimestamp}`);
          }
        }
        return {
          code: `export default ${JSON.stringify(encodeURIPath(url2))}`,
          // Force rollup to keep this module from being shared between other entry points if it's an entrypoint.
          // If the resulting chunk is empty, it will be removed in generateBundle.
          moduleSideEffects: config2.command === "build" && ((_a2 = this.getModuleInfo(id)) == null ? void 0 : _a2.isEntry) ? "no-treeshake" : false,
          meta: config2.command === "build" ? { "vite:asset": true } : void 0
        };
      }
    },
    renderChunk(code, chunk, opts) {
      const s2 = renderAssetUrlInJS(this, chunk, opts, code);
      if (s2) {
        return {
          code: s2.toString(),
          map: this.environment.config.build.sourcemap ? s2.generateMap({ hires: "boundary" }) : null
        };
      } else {
        return null;
      }
    },
    generateBundle(_, bundle) {
      var _a2;
      let importedFiles;
      for (const file in bundle) {
        const chunk = bundle[file];
        if (chunk.type === "chunk" && chunk.isEntry && chunk.moduleIds.length === 1 && config2.assetsInclude(chunk.moduleIds[0]) && ((_a2 = this.getModuleInfo(chunk.moduleIds[0])) == null ? void 0 : _a2.meta["vite:asset"])) {
          if (!importedFiles) {
            importedFiles = /* @__PURE__ */ new Set();
            for (const file2 in bundle) {
              const chunk2 = bundle[file2];
              if (chunk2.type === "chunk") {
                for (const importedFile of chunk2.imports) {
                  importedFiles.add(importedFile);
                }
                for (const importedFile of chunk2.dynamicImports) {
                  importedFiles.add(importedFile);
                }
              }
            }
          }
          if (!importedFiles.has(file)) {
            delete bundle[file];
          }
        }
      }
      if (config2.command === "build" && !this.environment.config.build.emitAssets) {
        for (const file in bundle) {
          if (bundle[file].type === "asset" && !file.endsWith("ssr-manifest.json") && !jsSourceMapRE.test(file)) {
            delete bundle[file];
          }
        }
      }
    }
  };
}
async function fileToUrl$1(pluginContext, id) {
  const { environment } = pluginContext;
  if (environment.config.command === "serve") {
    return fileToDevUrl(environment, id);
  } else {
    return fileToBuiltUrl(pluginContext, id);
  }
}
async function fileToDevUrl(environment, id, skipBase = false) {
  const config2 = environment.getTopLevelConfig();
  const publicFile = checkPublicFile(id, config2);
  if (inlineRE$3.test(id)) {
    const file = publicFile || cleanUrl2(id);
    const content = await import_promises.default.readFile(file);
    return assetToDataURL(environment, file, content);
  }
  const cleanedId = cleanUrl2(id);
  if (svgExtRE.test(cleanedId)) {
    const file = publicFile || cleanedId;
    const content = await import_promises.default.readFile(file);
    if (shouldInline(environment, file, id, content, void 0, void 0)) {
      return assetToDataURL(environment, file, content);
    }
  }
  let rtn;
  if (publicFile) {
    rtn = id;
  } else if (id.startsWith(withTrailingSlash(config2.root))) {
    rtn = "/" + import_node_path3.default.posix.relative(config2.root, id);
  } else {
    rtn = import_node_path3.default.posix.join(FS_PREFIX, id);
  }
  if (skipBase) {
    return rtn;
  }
  const base = joinUrlSegments(config2.server.origin ?? "", config2.decodedBase);
  return joinUrlSegments(base, removeLeadingSlash(rtn));
}
function getPublicAssetFilename(hash2, config2) {
  var _a2;
  return (_a2 = publicAssetUrlCache.get(config2)) == null ? void 0 : _a2.get(hash2);
}
var publicAssetUrlCache = /* @__PURE__ */ new WeakMap();
var publicAssetUrlRE = /__VITE_PUBLIC_ASSET__([a-z\d]{8})__/g;
function publicFileToBuiltUrl(url2, config2) {
  if (config2.command !== "build") {
    return joinUrlSegments(config2.decodedBase, url2);
  }
  const hash2 = getHash(url2);
  let cache = publicAssetUrlCache.get(config2);
  if (!cache) {
    cache = /* @__PURE__ */ new Map();
    publicAssetUrlCache.set(config2, cache);
  }
  if (!cache.get(hash2)) {
    cache.set(hash2, url2);
  }
  return `__VITE_PUBLIC_ASSET__${hash2}__`;
}
var GIT_LFS_PREFIX = import_node_buffer.Buffer.from("version https://git-lfs.github.com");
function isGitLfsPlaceholder(content) {
  if (content.length < GIT_LFS_PREFIX.length) return false;
  return GIT_LFS_PREFIX.compare(content, 0, GIT_LFS_PREFIX.length) === 0;
}
async function fileToBuiltUrl(pluginContext, id, skipPublicCheck = false, forceInline) {
  const environment = pluginContext.environment;
  const topLevelConfig = environment.getTopLevelConfig();
  if (!skipPublicCheck) {
    const publicFile = checkPublicFile(id, topLevelConfig);
    if (publicFile) {
      if (inlineRE$3.test(id)) {
        id = publicFile;
      } else {
        return publicFileToBuiltUrl(id, topLevelConfig);
      }
    }
  }
  const cache = assetCache.get(environment);
  const cached = cache.get(id);
  if (cached) {
    return cached;
  }
  let { file, postfix } = splitFileAndPostfix(id);
  const content = await import_promises.default.readFile(file);
  let url2;
  if (shouldInline(environment, file, id, content, pluginContext, forceInline)) {
    url2 = assetToDataURL(environment, file, content);
  } else {
    const originalFileName = normalizePath$3(
      import_node_path3.default.relative(environment.config.root, file)
    );
    const referenceId = pluginContext.emitFile({
      type: "asset",
      // Ignore directory structure for asset file names
      name: import_node_path3.default.basename(file),
      originalFileName,
      source: content
    });
    if (environment.config.command === "build" && noInlineRE.test(postfix)) {
      postfix = postfix.replace(noInlineRE, "").replace(/^&/, "?");
    }
    url2 = `__VITE_ASSET__${referenceId}__${postfix ? `$_${postfix}__` : ``}`;
  }
  cache.set(id, url2);
  return url2;
}
async function urlToBuiltUrl(pluginContext, url2, importer, forceInline) {
  const topLevelConfig = pluginContext.environment.getTopLevelConfig();
  if (checkPublicFile(url2, topLevelConfig)) {
    return publicFileToBuiltUrl(url2, topLevelConfig);
  }
  const file = url2[0] === "/" ? import_node_path3.default.join(topLevelConfig.root, url2) : import_node_path3.default.join(import_node_path3.default.dirname(importer), url2);
  return fileToBuiltUrl(
    pluginContext,
    file,
    // skip public check since we just did it above
    true,
    forceInline
  );
}
function shouldInline(environment, file, id, content, buildPluginContext, forceInline) {
  var _a2;
  if (noInlineRE.test(id)) return false;
  if (inlineRE$3.test(id)) return true;
  if (buildPluginContext) {
    if (environment.config.build.lib) return true;
    if ((_a2 = buildPluginContext.getModuleInfo(id)) == null ? void 0 : _a2.isEntry) return false;
  }
  if (forceInline !== void 0) return forceInline;
  if (file.endsWith(".html")) return false;
  if (file.endsWith(".svg") && id.includes("#")) return false;
  let limit;
  const { assetsInlineLimit } = environment.config.build;
  if (typeof assetsInlineLimit === "function") {
    const userShouldInline = assetsInlineLimit(file, content);
    if (userShouldInline != null) return userShouldInline;
    limit = DEFAULT_ASSETS_INLINE_LIMIT;
  } else {
    limit = Number(assetsInlineLimit);
  }
  return content.length < limit && !isGitLfsPlaceholder(content);
}
function assetToDataURL(environment, file, content) {
  if (environment.config.build.lib && isGitLfsPlaceholder(content)) {
    environment.logger.warn(
      colors$1.yellow(`Inlined file ${file} was not downloaded via Git LFS`)
    );
  }
  if (file.endsWith(".svg")) {
    return svgToDataURL(content);
  } else {
    const mimeType = lookup(file) ?? "application/octet-stream";
    return `data:${mimeType};base64,${content.toString("base64")}`;
  }
}
var nestedQuotesRE = /"[^"']*'[^"]*"|'[^'"]*"[^']*'/;
function svgToDataURL(content) {
  const stringContent = content.toString();
  if (stringContent.includes("<text") || stringContent.includes("<foreignObject") || nestedQuotesRE.test(stringContent)) {
    return `data:image/svg+xml;base64,${content.toString("base64")}`;
  } else {
    return "data:image/svg+xml," + stringContent.trim().replaceAll(/>\s+</g, "><").replaceAll('"', "'").replaceAll("%", "%25").replaceAll("#", "%23").replaceAll("<", "%3c").replaceAll(">", "%3e").replaceAll(/\s+/g, "%20");
  }
}
var endsWithJSRE = /\.[cm]?js$/;
function manifestPlugin() {
  const getState = perEnvironmentState(() => {
    return {
      manifest: {},
      outputCount: 0,
      reset() {
        this.manifest = {};
        this.outputCount = 0;
      }
    };
  });
  return {
    name: "vite:manifest",
    perEnvironmentStartEndDuringDev: true,
    applyToEnvironment(environment) {
      return !!environment.config.build.manifest;
    },
    buildStart() {
      getState(this).reset();
    },
    generateBundle({ format: format2 }, bundle) {
      var _a2, _b;
      const state = getState(this);
      const { manifest } = state;
      const { root } = this.environment.config;
      const buildOptions = this.environment.config.build;
      function getChunkName(chunk) {
        return getChunkOriginalFileName(chunk, root, format2) ?? `_${import_node_path3.default.basename(chunk.fileName)}`;
      }
      function getInternalImports(imports) {
        const filteredImports = [];
        for (const file of imports) {
          if (bundle[file] === void 0) {
            continue;
          }
          filteredImports.push(getChunkName(bundle[file]));
        }
        return filteredImports;
      }
      function createChunk(chunk) {
        var _a3, _b2;
        const manifestChunk = {
          file: chunk.fileName,
          name: chunk.name
        };
        if (chunk.facadeModuleId) {
          manifestChunk.src = getChunkName(chunk);
        }
        if (chunk.isEntry) {
          manifestChunk.isEntry = true;
        }
        if (chunk.isDynamicEntry) {
          manifestChunk.isDynamicEntry = true;
        }
        if (chunk.imports.length) {
          const internalImports = getInternalImports(chunk.imports);
          if (internalImports.length > 0) {
            manifestChunk.imports = internalImports;
          }
        }
        if (chunk.dynamicImports.length) {
          const internalImports = getInternalImports(chunk.dynamicImports);
          if (internalImports.length > 0) {
            manifestChunk.dynamicImports = internalImports;
          }
        }
        if ((_a3 = chunk.viteMetadata) == null ? void 0 : _a3.importedCss.size) {
          manifestChunk.css = [...chunk.viteMetadata.importedCss];
        }
        if ((_b2 = chunk.viteMetadata) == null ? void 0 : _b2.importedAssets.size) {
          manifestChunk.assets = [...chunk.viteMetadata.importedAssets];
        }
        return manifestChunk;
      }
      function createAsset(asset, src2, isEntry) {
        const manifestChunk = {
          file: asset.fileName,
          src: src2
        };
        if (isEntry) manifestChunk.isEntry = true;
        return manifestChunk;
      }
      const entryCssReferenceIds = cssEntriesMap.get(this.environment);
      const entryCssAssetFileNames = new Set(entryCssReferenceIds);
      for (const id of entryCssReferenceIds) {
        try {
          const fileName = this.getFileName(id);
          entryCssAssetFileNames.add(fileName);
        } catch {
        }
      }
      for (const file in bundle) {
        const chunk = bundle[file];
        if (chunk.type === "chunk") {
          manifest[getChunkName(chunk)] = createChunk(chunk);
        } else if (chunk.type === "asset" && chunk.names.length > 0) {
          const src2 = chunk.originalFileNames.length > 0 ? chunk.originalFileNames[0] : `_${import_node_path3.default.basename(chunk.fileName)}`;
          const isEntry = entryCssAssetFileNames.has(chunk.fileName);
          const asset = createAsset(chunk, src2, isEntry);
          const file2 = (_a2 = manifest[src2]) == null ? void 0 : _a2.file;
          if (!(file2 && endsWithJSRE.test(file2))) {
            manifest[src2] = asset;
          }
          for (const originalFileName of chunk.originalFileNames.slice(1)) {
            const file3 = (_b = manifest[originalFileName]) == null ? void 0 : _b.file;
            if (!(file3 && endsWithJSRE.test(file3))) {
              manifest[originalFileName] = asset;
            }
          }
        }
      }
      state.outputCount++;
      const output = buildOptions.rollupOptions.output;
      const outputLength = Array.isArray(output) ? output.length : 1;
      if (state.outputCount >= outputLength) {
        this.emitFile({
          fileName: typeof buildOptions.manifest === "string" ? buildOptions.manifest : ".vite/manifest.json",
          type: "asset",
          source: JSON.stringify(sortObjectKeys(manifest), void 0, 2)
        });
      }
    }
  };
}
function getChunkOriginalFileName(chunk, root, format2) {
  if (chunk.facadeModuleId) {
    let name = normalizePath$3(import_node_path3.default.relative(root, chunk.facadeModuleId));
    if (format2 === "system" && !chunk.name.includes("-legacy")) {
      const ext = import_node_path3.default.extname(name);
      const endPos = ext.length !== 0 ? -ext.length : void 0;
      name = `${name.slice(0, endPos)}-legacy${ext}`;
    }
    return name.replace(/\0/g, "");
  }
}
var dataUriRE = /^([^/]+\/[^;,]+)(;base64)?,([\s\S]*)$/;
var base64RE = /base64/i;
var dataUriPrefix = `\0/@data-uri/`;
function dataURIPlugin() {
  let resolved;
  return {
    name: "vite:data-uri",
    buildStart() {
      resolved = /* @__PURE__ */ new Map();
    },
    resolveId(id) {
      if (!id.trimStart().startsWith("data:")) {
        return;
      }
      const uri = new import_node_url2.URL(id);
      if (uri.protocol !== "data:") {
        return;
      }
      const match = dataUriRE.exec(uri.pathname);
      if (!match) {
        return;
      }
      const [, mime, format2, data] = match;
      if (mime !== "text/javascript") {
        throw new Error(
          `data URI with non-JavaScript mime type is not supported. If you're using legacy JavaScript MIME types (such as 'application/javascript'), please use 'text/javascript' instead.`
        );
      }
      const base64 = format2 && base64RE.test(format2.substring(1));
      const content = base64 ? Buffer.from(data, "base64").toString("utf-8") : data;
      resolved.set(id, content);
      return dataUriPrefix + id;
    },
    load(id) {
      if (id.startsWith(dataUriPrefix)) {
        return resolved.get(id.slice(dataUriPrefix.length));
      }
    }
  };
}
var ImportType;
!function(A2) {
  A2[A2.Static = 1] = "Static", A2[A2.Dynamic = 2] = "Dynamic", A2[A2.ImportMeta = 3] = "ImportMeta", A2[A2.StaticSourcePhase = 4] = "StaticSourcePhase", A2[A2.DynamicSourcePhase = 5] = "DynamicSourcePhase";
}(ImportType || (ImportType = {}));
var A = 1 === new Uint8Array(new Uint16Array([1]).buffer)[0];
function parse$d(E2, g = "@") {
  if (!C) return init.then(() => parse$d(E2));
  const I = E2.length + 1, w = (C.__heap_base.value || C.__heap_base) + 4 * I - C.memory.buffer.byteLength;
  w > 0 && C.memory.grow(Math.ceil(w / 65536));
  const K = C.sa(I - 1);
  if ((A ? B : Q)(E2, new Uint16Array(C.memory.buffer, K, I)), !C.parse()) throw Object.assign(new Error(`Parse error ${g}:${E2.slice(0, C.e()).split("\n").length}:${C.e() - E2.lastIndexOf("\n", C.e() - 1)}`), { idx: C.e() });
  const o2 = [], D = [];
  for (; C.ri(); ) {
    const A2 = C.is(), Q2 = C.ie(), B2 = C.it(), g2 = C.ai(), I2 = C.id(), w2 = C.ss(), K2 = C.se();
    let D2;
    C.ip() && (D2 = k(E2.slice(-1 === I2 ? A2 - 1 : A2, -1 === I2 ? Q2 + 1 : Q2))), o2.push({ n: D2, t: B2, s: A2, e: Q2, ss: w2, se: K2, d: I2, a: g2 });
  }
  for (; C.re(); ) {
    const A2 = C.es(), Q2 = C.ee(), B2 = C.els(), g2 = C.ele(), I2 = E2.slice(A2, Q2), w2 = I2[0], K2 = B2 < 0 ? void 0 : E2.slice(B2, g2), o3 = K2 ? K2[0] : "";
    D.push({ s: A2, e: Q2, ls: B2, le: g2, n: '"' === w2 || "'" === w2 ? k(I2) : I2, ln: '"' === o3 || "'" === o3 ? k(K2) : K2 });
  }
  function k(A2) {
    try {
      return (0, eval)(A2);
    } catch (A3) {
    }
  }
  return [o2, D, !!C.f(), !!C.ms()];
}
function Q(A2, Q2) {
  const B2 = A2.length;
  let C2 = 0;
  for (; C2 < B2; ) {
    const B3 = A2.charCodeAt(C2);
    Q2[C2++] = (255 & B3) << 8 | B3 >>> 8;
  }
}
function B(A2, Q2) {
  const B2 = A2.length;
  let C2 = 0;
  for (; C2 < B2; ) Q2[C2] = A2.charCodeAt(C2++);
}
var C;
var E = () => {
  return A2 = "", "undefined" != typeof Buffer ? Buffer.from(A2, "base64") : Uint8Array.from(atob(A2), (A3) => A3.charCodeAt(0));
  var A2;
};
var init = WebAssembly.compile(E()).then(WebAssembly.instantiate).then(({ exports: A2 }) => {
  C = A2;
});
var convertSourceMap$1 = {};
(function(exports) {
  Object.defineProperty(exports, "commentRegex", {
    get: function getCommentRegex() {
      return /^\s*?\/[\/\*][@#]\s+?sourceMappingURL=data:(((?:application|text)\/json)(?:;charset=([^;,]+?)?)?)?(?:;(base64))?,(.*?)$/mg;
    }
  });
  Object.defineProperty(exports, "mapFileCommentRegex", {
    get: function getMapFileCommentRegex() {
      return /(?:\/\/[@#][ \t]+?sourceMappingURL=([^\s'"`]+?)[ \t]*?$)|(?:\/\*[@#][ \t]+sourceMappingURL=([^*]+?)[ \t]*?(?:\*\/){1}[ \t]*?$)/mg;
    }
  });
  var decodeBase642;
  if (typeof Buffer !== "undefined") {
    if (typeof Buffer.from === "function") {
      decodeBase642 = decodeBase64WithBufferFrom;
    } else {
      decodeBase642 = decodeBase64WithNewBuffer;
    }
  } else {
    decodeBase642 = decodeBase64WithAtob;
  }
  function decodeBase64WithBufferFrom(base64) {
    return Buffer.from(base64, "base64").toString();
  }
  function decodeBase64WithNewBuffer(base64) {
    if (typeof value === "number") {
      throw new TypeError("The value to decode must not be of type number.");
    }
    return new Buffer(base64, "base64").toString();
  }
  function decodeBase64WithAtob(base64) {
    return decodeURIComponent(escape(atob(base64)));
  }
  function stripComment(sm) {
    return sm.split(",").pop();
  }
  function readFromFileMap(sm, read) {
    var r2 = exports.mapFileCommentRegex.exec(sm);
    var filename = r2[1] || r2[2];
    try {
      var sm = read(filename);
      if (sm != null && typeof sm.catch === "function") {
        return sm.catch(throwError);
      } else {
        return sm;
      }
    } catch (e2) {
      throwError(e2);
    }
    function throwError(e2) {
      throw new Error("An error occurred while trying to read the map file at " + filename + "\n" + e2.stack);
    }
  }
  function Converter(sm, opts) {
    opts = opts || {};
    if (opts.hasComment) {
      sm = stripComment(sm);
    }
    if (opts.encoding === "base64") {
      sm = decodeBase642(sm);
    } else if (opts.encoding === "uri") {
      sm = decodeURIComponent(sm);
    }
    if (opts.isJSON || opts.encoding) {
      sm = JSON.parse(sm);
    }
    this.sourcemap = sm;
  }
  Converter.prototype.toJSON = function(space) {
    return JSON.stringify(this.sourcemap, null, space);
  };
  if (typeof Buffer !== "undefined") {
    if (typeof Buffer.from === "function") {
      Converter.prototype.toBase64 = encodeBase64WithBufferFrom;
    } else {
      Converter.prototype.toBase64 = encodeBase64WithNewBuffer;
    }
  } else {
    Converter.prototype.toBase64 = encodeBase64WithBtoa;
  }
  function encodeBase64WithBufferFrom() {
    var json = this.toJSON();
    return Buffer.from(json, "utf8").toString("base64");
  }
  function encodeBase64WithNewBuffer() {
    var json = this.toJSON();
    if (typeof json === "number") {
      throw new TypeError("The json to encode must not be of type number.");
    }
    return new Buffer(json, "utf8").toString("base64");
  }
  function encodeBase64WithBtoa() {
    var json = this.toJSON();
    return btoa(unescape(encodeURIComponent(json)));
  }
  Converter.prototype.toURI = function() {
    var json = this.toJSON();
    return encodeURIComponent(json);
  };
  Converter.prototype.toComment = function(options2) {
    var encoding, content, data;
    if (options2 != null && options2.encoding === "uri") {
      encoding = "";
      content = this.toURI();
    } else {
      encoding = ";base64";
      content = this.toBase64();
    }
    data = "sourceMappingURL=data:application/json;charset=utf-8" + encoding + "," + content;
    return options2 != null && options2.multiline ? "/*# " + data + " */" : "//# " + data;
  };
  Converter.prototype.toObject = function() {
    return JSON.parse(this.toJSON());
  };
  Converter.prototype.addProperty = function(key, value2) {
    if (this.sourcemap.hasOwnProperty(key)) throw new Error('property "' + key + '" already exists on the sourcemap, use set property instead');
    return this.setProperty(key, value2);
  };
  Converter.prototype.setProperty = function(key, value2) {
    this.sourcemap[key] = value2;
    return this;
  };
  Converter.prototype.getProperty = function(key) {
    return this.sourcemap[key];
  };
  exports.fromObject = function(obj) {
    return new Converter(obj);
  };
  exports.fromJSON = function(json) {
    return new Converter(json, { isJSON: true });
  };
  exports.fromURI = function(uri) {
    return new Converter(uri, { encoding: "uri" });
  };
  exports.fromBase64 = function(base64) {
    return new Converter(base64, { encoding: "base64" });
  };
  exports.fromComment = function(comment) {
    var m2, encoding;
    comment = comment.replace(/^\/\*/g, "//").replace(/\*\/$/g, "");
    m2 = exports.commentRegex.exec(comment);
    encoding = m2 && m2[4] || "uri";
    return new Converter(comment, { encoding, hasComment: true });
  };
  function makeConverter(sm) {
    return new Converter(sm, { isJSON: true });
  }
  exports.fromMapFileComment = function(comment, read) {
    if (typeof read === "string") {
      throw new Error(
        "String directory paths are no longer supported with `fromMapFileComment`\nPlease review the Upgrading documentation at https://github.com/thlorenz/convert-source-map#upgrading"
      );
    }
    var sm = readFromFileMap(comment, read);
    if (sm != null && typeof sm.then === "function") {
      return sm.then(makeConverter);
    } else {
      return makeConverter(sm);
    }
  };
  exports.fromSource = function(content) {
    var m2 = content.match(exports.commentRegex);
    return m2 ? exports.fromComment(m2.pop()) : null;
  };
  exports.fromMapFileSource = function(content, read) {
    if (typeof read === "string") {
      throw new Error(
        "String directory paths are no longer supported with `fromMapFileSource`\nPlease review the Upgrading documentation at https://github.com/thlorenz/convert-source-map#upgrading"
      );
    }
    var m2 = content.match(exports.mapFileCommentRegex);
    return m2 ? exports.fromMapFileComment(m2.pop(), read) : null;
  };
  exports.removeComments = function(src2) {
    return src2.replace(exports.commentRegex, "");
  };
  exports.removeMapFileComments = function(src2) {
    return src2.replace(exports.mapFileCommentRegex, "");
  };
  exports.generateMapFileComment = function(file, options2) {
    var data = "sourceMappingURL=" + file;
    return options2 && options2.multiline ? "/*# " + data + " */" : "//# " + data;
  };
})(convertSourceMap$1);
var convertSourceMap = getDefaultExportFromCjs(convertSourceMap$1);
var debug$h = createDebugger("vite:sourcemap", {
  onlyWhenFocused: true
});
var virtualSourceRE = /^(?:dep:|browser-external:|virtual:)|\0/;
async function computeSourceRoute(map2, file) {
  let sourceRoot;
  try {
    sourceRoot = await import_promises.default.realpath(
      import_node_path3.default.resolve(import_node_path3.default.dirname(file), map2.sourceRoot || "")
    );
  } catch {
  }
  return sourceRoot;
}
async function injectSourcesContent(map2, file, logger) {
  let sourceRootPromise;
  const missingSources = [];
  const sourcesContent = map2.sourcesContent || [];
  const sourcesContentPromises = [];
  for (let index = 0; index < map2.sources.length; index++) {
    const sourcePath = map2.sources[index];
    if (sourcesContent[index] == null && sourcePath && !virtualSourceRE.test(sourcePath)) {
      sourcesContentPromises.push(
        (async () => {
          sourceRootPromise ?? (sourceRootPromise = computeSourceRoute(map2, file));
          const sourceRoot = await sourceRootPromise;
          let resolvedSourcePath = cleanUrl2(decodeURI(sourcePath));
          if (sourceRoot) {
            resolvedSourcePath = import_node_path3.default.resolve(sourceRoot, resolvedSourcePath);
          }
          sourcesContent[index] = await import_promises.default.readFile(resolvedSourcePath, "utf-8").catch(() => {
            missingSources.push(resolvedSourcePath);
            return null;
          });
        })()
      );
    }
  }
  await Promise.all(sourcesContentPromises);
  map2.sourcesContent = sourcesContent;
  if (missingSources.length) {
    logger.warnOnce(`Sourcemap for "${file}" points to missing source files`);
    debug$h == null ? void 0 : debug$h(`Missing sources:
  ` + missingSources.join(`
  `));
  }
}
function genSourceMapUrl(map2) {
  if (typeof map2 !== "string") {
    map2 = JSON.stringify(map2);
  }
  return `data:application/json;base64,${Buffer.from(map2).toString("base64")}`;
}
function getCodeWithSourcemap(type, code, map2) {
  if (debug$h) {
    code += `
/*${JSON.stringify(map2, null, 2).replace(/\*\//g, "*\\/")}*/
`;
  }
  if (type === "js") {
    code += `
//# sourceMappingURL=${genSourceMapUrl(map2)}`;
  } else if (type === "css") {
    code += `
/*# sourceMappingURL=${genSourceMapUrl(map2)} */`;
  }
  return code;
}
function applySourcemapIgnoreList(map2, sourcemapPath, sourcemapIgnoreList, logger) {
  let { x_google_ignoreList } = map2;
  if (x_google_ignoreList === void 0) {
    x_google_ignoreList = [];
  }
  for (let sourcesIndex = 0; sourcesIndex < map2.sources.length; ++sourcesIndex) {
    const sourcePath = map2.sources[sourcesIndex];
    if (!sourcePath) continue;
    const ignoreList = sourcemapIgnoreList(
      import_node_path3.default.isAbsolute(sourcePath) ? sourcePath : import_node_path3.default.resolve(import_node_path3.default.dirname(sourcemapPath), sourcePath),
      sourcemapPath
    );
    if (logger && typeof ignoreList !== "boolean") {
      logger.warn("sourcemapIgnoreList function must return a boolean.");
    }
    if (ignoreList && !x_google_ignoreList.includes(sourcesIndex)) {
      x_google_ignoreList.push(sourcesIndex);
    }
  }
  if (x_google_ignoreList.length > 0) {
    if (!map2.x_google_ignoreList) map2.x_google_ignoreList = x_google_ignoreList;
  }
}
async function extractSourcemapFromFile(code, filePath) {
  var _a2;
  const map2 = (_a2 = convertSourceMap.fromSource(code) || await convertSourceMap.fromMapFileSource(
    code,
    createConvertSourceMapReadMap(filePath)
  )) == null ? void 0 : _a2.toObject();
  if (map2) {
    return {
      code: code.replace(convertSourceMap.mapFileCommentRegex, blankReplacer),
      map: map2
    };
  }
}
function createConvertSourceMapReadMap(originalFileName) {
  return (filename) => {
    return import_promises.default.readFile(
      import_node_path3.default.resolve(import_node_path3.default.dirname(originalFileName), filename),
      "utf-8"
    );
  };
}
var src$1 = {};
var path$9 = import_path2.default;
var fs$7 = import_fs.default;
var os$2 = import_os.default;
var url$4 = import_url.default;
var fsReadFileAsync = fs$7.promises.readFile;
function getDefaultSearchPlaces(name, sync2) {
  return [
    "package.json",
    `.${name}rc.json`,
    `.${name}rc.js`,
    `.${name}rc.cjs`,
    ...sync2 ? [] : [`.${name}rc.mjs`],
    `.config/${name}rc`,
    `.config/${name}rc.json`,
    `.config/${name}rc.js`,
    `.config/${name}rc.cjs`,
    ...sync2 ? [] : [`.config/${name}rc.mjs`],
    `${name}.config.js`,
    `${name}.config.cjs`,
    ...sync2 ? [] : [`${name}.config.mjs`]
  ];
}
function parentDir(p2) {
  return path$9.dirname(p2) || path$9.sep;
}
var jsonLoader = (_, content) => JSON.parse(content);
var requireFunc = typeof __webpack_require__ === "function" ? __non_webpack_require__ : __require2;
var defaultLoadersSync = Object.freeze({
  ".js": requireFunc,
  ".json": requireFunc,
  ".cjs": requireFunc,
  noExt: jsonLoader
});
src$1.defaultLoadersSync = defaultLoadersSync;
var dynamicImport = async (id) => {
  try {
    const fileUrl = url$4.pathToFileURL(id).href;
    const mod = await import(
      /* webpackIgnore: true */
      fileUrl
    );
    return mod.default;
  } catch (e2) {
    try {
      return requireFunc(id);
    } catch (requireE) {
      if (requireE.code === "ERR_REQUIRE_ESM" || requireE instanceof SyntaxError && requireE.toString().includes("Cannot use import statement outside a module")) {
        throw e2;
      }
      throw requireE;
    }
  }
};
var defaultLoaders = Object.freeze({
  ".js": dynamicImport,
  ".mjs": dynamicImport,
  ".cjs": dynamicImport,
  ".json": jsonLoader,
  noExt: jsonLoader
});
src$1.defaultLoaders = defaultLoaders;
function getOptions(name, options2, sync2) {
  const conf = {
    stopDir: os$2.homedir(),
    searchPlaces: getDefaultSearchPlaces(name, sync2),
    ignoreEmptySearchPlaces: true,
    cache: true,
    transform: (x) => x,
    packageProp: [name],
    ...options2,
    loaders: {
      ...sync2 ? defaultLoadersSync : defaultLoaders,
      ...options2.loaders
    }
  };
  conf.searchPlaces.forEach((place) => {
    const key = path$9.extname(place) || "noExt";
    const loader2 = conf.loaders[key];
    if (!loader2) {
      throw new Error(`Missing loader for extension "${place}"`);
    }
    if (typeof loader2 !== "function") {
      throw new Error(
        `Loader for extension "${place}" is not a function: Received ${typeof loader2}.`
      );
    }
  });
  return conf;
}
function getPackageProp(props, obj) {
  if (typeof props === "string" && props in obj) return obj[props];
  return (Array.isArray(props) ? props : props.split(".")).reduce(
    (acc, prop) => acc === void 0 ? acc : acc[prop],
    obj
  ) || null;
}
function validateFilePath(filepath) {
  if (!filepath) throw new Error("load must pass a non-empty string");
}
function validateLoader(loader2, ext) {
  if (!loader2) throw new Error(`No loader specified for extension "${ext}"`);
  if (typeof loader2 !== "function") throw new Error("loader is not a function");
}
var makeEmplace = (enableCache) => (c, filepath, res) => {
  if (enableCache) c.set(filepath, res);
  return res;
};
src$1.lilconfig = function lilconfig(name, options2) {
  const {
    ignoreEmptySearchPlaces,
    loaders,
    packageProp,
    searchPlaces,
    stopDir,
    transform: transform2,
    cache
  } = getOptions(name, options2 ?? {}, false);
  const searchCache = /* @__PURE__ */ new Map();
  const loadCache = /* @__PURE__ */ new Map();
  const emplace = makeEmplace(cache);
  return {
    async search(searchFrom = process.cwd()) {
      const result = {
        config: null,
        filepath: ""
      };
      const visited = /* @__PURE__ */ new Set();
      let dir = searchFrom;
      dirLoop: while (true) {
        if (cache) {
          const r2 = searchCache.get(dir);
          if (r2 !== void 0) {
            for (const p2 of visited) searchCache.set(p2, r2);
            return r2;
          }
          visited.add(dir);
        }
        for (const searchPlace of searchPlaces) {
          const filepath = path$9.join(dir, searchPlace);
          try {
            await fs$7.promises.access(filepath);
          } catch {
            continue;
          }
          const content = String(await fsReadFileAsync(filepath));
          const loaderKey = path$9.extname(searchPlace) || "noExt";
          const loader2 = loaders[loaderKey];
          if (searchPlace === "package.json") {
            const pkg = await loader2(filepath, content);
            const maybeConfig = getPackageProp(packageProp, pkg);
            if (maybeConfig != null) {
              result.config = maybeConfig;
              result.filepath = filepath;
              break dirLoop;
            }
            continue;
          }
          const isEmpty = content.trim() === "";
          if (isEmpty && ignoreEmptySearchPlaces) continue;
          if (isEmpty) {
            result.isEmpty = true;
            result.config = void 0;
          } else {
            validateLoader(loader2, loaderKey);
            result.config = await loader2(filepath, content);
          }
          result.filepath = filepath;
          break dirLoop;
        }
        if (dir === stopDir || dir === parentDir(dir)) break dirLoop;
        dir = parentDir(dir);
      }
      const transformed = (
        // not found
        result.filepath === "" && result.config === null ? transform2(null) : transform2(result)
      );
      if (cache) {
        for (const p2 of visited) searchCache.set(p2, transformed);
      }
      return transformed;
    },
    async load(filepath) {
      validateFilePath(filepath);
      const absPath = path$9.resolve(process.cwd(), filepath);
      if (cache && loadCache.has(absPath)) {
        return loadCache.get(absPath);
      }
      const { base, ext } = path$9.parse(absPath);
      const loaderKey = ext || "noExt";
      const loader2 = loaders[loaderKey];
      validateLoader(loader2, loaderKey);
      const content = String(await fsReadFileAsync(absPath));
      if (base === "package.json") {
        const pkg = await loader2(absPath, content);
        return emplace(
          loadCache,
          absPath,
          transform2({
            config: getPackageProp(packageProp, pkg),
            filepath: absPath
          })
        );
      }
      const result = {
        config: null,
        filepath: absPath
      };
      const isEmpty = content.trim() === "";
      if (isEmpty && ignoreEmptySearchPlaces)
        return emplace(
          loadCache,
          absPath,
          transform2({
            config: void 0,
            filepath: absPath,
            isEmpty: true
          })
        );
      result.config = isEmpty ? void 0 : await loader2(absPath, content);
      return emplace(
        loadCache,
        absPath,
        transform2(isEmpty ? { ...result, isEmpty, config: void 0 } : result)
      );
    },
    clearLoadCache() {
      if (cache) loadCache.clear();
    },
    clearSearchCache() {
      if (cache) searchCache.clear();
    },
    clearCaches() {
      if (cache) {
        loadCache.clear();
        searchCache.clear();
      }
    }
  };
};
src$1.lilconfigSync = function lilconfigSync(name, options2) {
  const {
    ignoreEmptySearchPlaces,
    loaders,
    packageProp,
    searchPlaces,
    stopDir,
    transform: transform2,
    cache
  } = getOptions(name, options2 ?? {}, true);
  const searchCache = /* @__PURE__ */ new Map();
  const loadCache = /* @__PURE__ */ new Map();
  const emplace = makeEmplace(cache);
  return {
    search(searchFrom = process.cwd()) {
      const result = {
        config: null,
        filepath: ""
      };
      const visited = /* @__PURE__ */ new Set();
      let dir = searchFrom;
      dirLoop: while (true) {
        if (cache) {
          const r2 = searchCache.get(dir);
          if (r2 !== void 0) {
            for (const p2 of visited) searchCache.set(p2, r2);
            return r2;
          }
          visited.add(dir);
        }
        for (const searchPlace of searchPlaces) {
          const filepath = path$9.join(dir, searchPlace);
          try {
            fs$7.accessSync(filepath);
          } catch {
            continue;
          }
          const loaderKey = path$9.extname(searchPlace) || "noExt";
          const loader2 = loaders[loaderKey];
          const content = String(fs$7.readFileSync(filepath));
          if (searchPlace === "package.json") {
            const pkg = loader2(filepath, content);
            const maybeConfig = getPackageProp(packageProp, pkg);
            if (maybeConfig != null) {
              result.config = maybeConfig;
              result.filepath = filepath;
              break dirLoop;
            }
            continue;
          }
          const isEmpty = content.trim() === "";
          if (isEmpty && ignoreEmptySearchPlaces) continue;
          if (isEmpty) {
            result.isEmpty = true;
            result.config = void 0;
          } else {
            validateLoader(loader2, loaderKey);
            result.config = loader2(filepath, content);
          }
          result.filepath = filepath;
          break dirLoop;
        }
        if (dir === stopDir || dir === parentDir(dir)) break dirLoop;
        dir = parentDir(dir);
      }
      const transformed = (
        // not found
        result.filepath === "" && result.config === null ? transform2(null) : transform2(result)
      );
      if (cache) {
        for (const p2 of visited) searchCache.set(p2, transformed);
      }
      return transformed;
    },
    load(filepath) {
      validateFilePath(filepath);
      const absPath = path$9.resolve(process.cwd(), filepath);
      if (cache && loadCache.has(absPath)) {
        return loadCache.get(absPath);
      }
      const { base, ext } = path$9.parse(absPath);
      const loaderKey = ext || "noExt";
      const loader2 = loaders[loaderKey];
      validateLoader(loader2, loaderKey);
      const content = String(fs$7.readFileSync(absPath));
      if (base === "package.json") {
        const pkg = loader2(absPath, content);
        return transform2({
          config: getPackageProp(packageProp, pkg),
          filepath: absPath
        });
      }
      const result = {
        config: null,
        filepath: absPath
      };
      const isEmpty = content.trim() === "";
      if (isEmpty && ignoreEmptySearchPlaces)
        return emplace(
          loadCache,
          absPath,
          transform2({
            filepath: absPath,
            config: void 0,
            isEmpty: true
          })
        );
      result.config = isEmpty ? void 0 : loader2(absPath, content);
      return emplace(
        loadCache,
        absPath,
        transform2(isEmpty ? { ...result, isEmpty, config: void 0 } : result)
      );
    },
    clearLoadCache() {
      if (cache) loadCache.clear();
    },
    clearSearchCache() {
      if (cache) searchCache.clear();
    },
    clearCaches() {
      if (cache) {
        loadCache.clear();
        searchCache.clear();
      }
    }
  };
};
var { createRequire } = import_node_module.default;
var { fileURLToPath: fileURLToPath2, pathToFileURL } = import_node_url2.default;
var TS_EXT_RE = /\.[mc]?ts$/;
var tsx;
var jiti;
var importError = [];
async function req$3(name, rootFile = fileURLToPath2(import.meta.url)) {
  let url2 = createRequire(rootFile).resolve(name);
  try {
    return (await import(`${pathToFileURL(url2)}?t=${Date.now()}`)).default;
  } catch (err2) {
    if (!TS_EXT_RE.test(url2)) {
      throw err2;
    }
  }
  if (tsx === void 0) {
    try {
      tsx = await import("./api_vite-4CVLWFFX.js");
    } catch (error2) {
      importError.push(error2);
    }
  }
  if (tsx) {
    let loaded = tsx.require(name, rootFile);
    return loaded && "__esModule" in loaded ? loaded.default : loaded;
  }
  if (jiti === void 0) {
    try {
      jiti = (await import("./lib-FDWWGPUC.js")).default;
    } catch (error2) {
      importError.push(error2);
    }
  }
  if (jiti) {
    return jiti(rootFile, { interopDefault: true })(name);
  }
  throw new Error(
    `'tsx' or 'jiti' is required for the TypeScript configuration files. Make sure it is installed
Error: ${importError.map((error2) => error2.message).join("\n")}`
  );
}
var req_1 = req$3;
var req$2 = req_1;
async function options(config2, file) {
  if (config2.parser && typeof config2.parser === "string") {
    try {
      config2.parser = await req$2(config2.parser, file);
    } catch (err2) {
      throw new Error(
        `Loading PostCSS Parser failed: ${err2.message}

(@${file})`
      );
    }
  }
  if (config2.syntax && typeof config2.syntax === "string") {
    try {
      config2.syntax = await req$2(config2.syntax, file);
    } catch (err2) {
      throw new Error(
        `Loading PostCSS Syntax failed: ${err2.message}

(@${file})`
      );
    }
  }
  if (config2.stringifier && typeof config2.stringifier === "string") {
    try {
      config2.stringifier = await req$2(config2.stringifier, file);
    } catch (err2) {
      throw new Error(
        `Loading PostCSS Stringifier failed: ${err2.message}

(@${file})`
      );
    }
  }
  return config2;
}
var options_1 = options;
var req$1 = req_1;
async function load(plugin, options2, file) {
  try {
    if (options2 === null || options2 === void 0 || Object.keys(options2).length === 0) {
      return await req$1(plugin, file);
    } else {
      return (await req$1(plugin, file))(options2);
    }
  } catch (err2) {
    throw new Error(
      `Loading PostCSS Plugin failed: ${err2.message}

(@${file})`
    );
  }
}
async function plugins(config2, file) {
  let list = [];
  if (Array.isArray(config2.plugins)) {
    list = config2.plugins.filter(Boolean);
  } else {
    list = Object.entries(config2.plugins).filter(([, options2]) => {
      return options2 !== false;
    }).map(([plugin, options2]) => {
      return load(plugin, options2, file);
    });
    list = await Promise.all(list);
  }
  if (list.length && list.length > 0) {
    list.forEach((plugin, i) => {
      if (plugin.default) {
        plugin = plugin.default;
      }
      if (plugin.postcss === true) {
        plugin = plugin();
      } else if (plugin.postcss) {
        plugin = plugin.postcss;
      }
      if (!(typeof plugin === "object" && Array.isArray(plugin.plugins) || typeof plugin === "object" && plugin.postcssPlugin || typeof plugin === "function")) {
        throw new TypeError(
          `Invalid PostCSS Plugin found at: plugins[${i}]

(@${file})`
        );
      }
    });
  }
  return list;
}
var plugins_1 = plugins;
var { resolve: resolve3 } = import_node_path3.default;
var config$1 = src$1;
var loadOptions = options_1;
var loadPlugins = plugins_1;
var req = req_1;
var interopRequireDefault = (obj) => obj && obj.__esModule ? obj : { default: obj };
async function processResult(ctx, result) {
  let file = result.filepath || "";
  let projectConfig = interopRequireDefault(result.config).default || {};
  if (typeof projectConfig === "function") {
    projectConfig = projectConfig(ctx);
  } else {
    projectConfig = Object.assign({}, projectConfig, ctx);
  }
  if (!projectConfig.plugins) {
    projectConfig.plugins = [];
  }
  let res = {
    file,
    options: await loadOptions(projectConfig, file),
    plugins: await loadPlugins(projectConfig, file)
  };
  delete projectConfig.plugins;
  return res;
}
function createContext(ctx) {
  ctx = Object.assign(
    {
      cwd: process.cwd(),
      env: "development"
    },
    ctx
  );
  if (!ctx.env) {
    process.env.NODE_ENV = "development";
  }
  return ctx;
}
async function loader(filepath) {
  return req(filepath);
}
var yaml;
async function yamlLoader(_, content) {
  if (!yaml) {
    try {
      yaml = await import("./browser-5XSV4LRI.js");
    } catch (e2) {
      throw new Error(
        `'yaml' is required for the YAML configuration files. Make sure it is installed
Error: ${e2.message}`
      );
    }
  }
  return yaml.parse(content);
}
var withLoaders = (options2 = {}) => {
  let moduleName = "postcss";
  return {
    ...options2,
    loaders: {
      ...options2.loaders,
      ".cjs": loader,
      ".cts": loader,
      ".js": loader,
      ".mjs": loader,
      ".mts": loader,
      ".ts": loader,
      ".yaml": yamlLoader,
      ".yml": yamlLoader
    },
    searchPlaces: [
      ...options2.searchPlaces || [],
      "package.json",
      `.${moduleName}rc`,
      `.${moduleName}rc.json`,
      `.${moduleName}rc.yaml`,
      `.${moduleName}rc.yml`,
      `.${moduleName}rc.ts`,
      `.${moduleName}rc.cts`,
      `.${moduleName}rc.mts`,
      `.${moduleName}rc.js`,
      `.${moduleName}rc.cjs`,
      `.${moduleName}rc.mjs`,
      `${moduleName}.config.ts`,
      `${moduleName}.config.cts`,
      `${moduleName}.config.mts`,
      `${moduleName}.config.js`,
      `${moduleName}.config.cjs`,
      `${moduleName}.config.mjs`
    ]
  };
};
function rc(ctx, path4, options2) {
  ctx = createContext(ctx);
  path4 = path4 ? resolve3(path4) : process.cwd();
  return config$1.lilconfig("postcss", withLoaders(options2)).search(path4).then((result) => {
    if (!result) {
      throw new Error(`No PostCSS Config found in: ${path4}`);
    }
    return processResult(ctx, result);
  });
}
var src = rc;
var postcssrc = getDefaultExportFromCjs(src);
function matches$1(pattern, importee) {
  if (pattern instanceof RegExp) {
    return pattern.test(importee);
  }
  if (importee.length < pattern.length) {
    return false;
  }
  if (importee === pattern) {
    return true;
  }
  return importee.startsWith(pattern + "/");
}
function getEntries({ entries, customResolver }) {
  if (!entries) {
    return [];
  }
  const resolverFunctionFromOptions = resolveCustomResolver(customResolver);
  if (Array.isArray(entries)) {
    return entries.map((entry) => {
      return {
        find: entry.find,
        replacement: entry.replacement,
        resolverFunction: resolveCustomResolver(entry.customResolver) || resolverFunctionFromOptions
      };
    });
  }
  return Object.entries(entries).map(([key, value2]) => {
    return { find: key, replacement: value2, resolverFunction: resolverFunctionFromOptions };
  });
}
function getHookFunction(hook) {
  if (typeof hook === "function") {
    return hook;
  }
  if (hook && "handler" in hook && typeof hook.handler === "function") {
    return hook.handler;
  }
  return null;
}
function resolveCustomResolver(customResolver) {
  if (typeof customResolver === "function") {
    return customResolver;
  }
  if (customResolver) {
    return getHookFunction(customResolver.resolveId);
  }
  return null;
}
function alias$1(options2 = {}) {
  const entries = getEntries(options2);
  if (entries.length === 0) {
    return {
      name: "alias",
      resolveId: () => null
    };
  }
  return {
    name: "alias",
    async buildStart(inputOptions) {
      await Promise.all([...Array.isArray(options2.entries) ? options2.entries : [], options2].map(({ customResolver }) => {
        var _a2;
        return customResolver && ((_a2 = getHookFunction(customResolver.buildStart)) === null || _a2 === void 0 ? void 0 : _a2.call(this, inputOptions));
      }));
    },
    resolveId(importee, importer, resolveOptions) {
      const matchedEntry = entries.find((entry) => matches$1(entry.find, importee));
      if (!matchedEntry) {
        return null;
      }
      const updatedId = importee.replace(matchedEntry.find, matchedEntry.replacement);
      if (matchedEntry.resolverFunction) {
        return matchedEntry.resolverFunction.call(this, updatedId, importer, resolveOptions);
      }
      return this.resolve(updatedId, importer, Object.assign({ skipSelf: true }, resolveOptions)).then((resolved) => {
        if (resolved)
          return resolved;
        if (!import_path2.default.isAbsolute(updatedId)) {
          this.warn(`rewrote ${importee} to ${updatedId} but was not an abolute path and was not handled by other plugins. This will lead to duplicated modules for the same path. To avoid duplicating modules, you should resolve to an absolute path.`);
        }
        return { id: updatedId };
      });
    }
  };
}
var jsonExtRE = /\.json(?:$|\?)(?!commonjs-(?:proxy|external))/;
var jsonObjRE = /^\s*\{/;
var jsonLangs = `\\.(?:json|json5)(?:$|\\?)`;
var jsonLangRE = new RegExp(jsonLangs);
var isJSONRequest = (request) => jsonLangRE.test(request);
function jsonPlugin(options2, isBuild) {
  const plugin = {
    name: "vite:json",
    transform: {
      handler(json, id) {
        if (!jsonExtRE.test(id)) return null;
        if (SPECIAL_QUERY_RE.test(id)) return null;
        if (inlineRE$3.test(id) || noInlineRE.test(id)) {
          this.warn(
            `
Using ?inline or ?no-inline for JSON imports will have no effect.
Please use ?url&inline or ?url&no-inline to control JSON file inlining behavior.
`
          );
        }
        json = stripBomTag(json);
        try {
          if (options2.stringify !== false) {
            if (options2.namedExports && jsonObjRE.test(json)) {
              const parsed = JSON.parse(json);
              const keys = Object.keys(parsed);
              let code = "";
              let defaultObjectCode = "{\n";
              for (const key of keys) {
                if (key === makeLegalIdentifier(key)) {
                  code += `export const ${key} = ${serializeValue(parsed[key])};
`;
                  defaultObjectCode += `  ${key},
`;
                } else {
                  defaultObjectCode += `  ${JSON.stringify(key)}: ${serializeValue(parsed[key])},
`;
                }
              }
              defaultObjectCode += "}";
              code += `export default ${defaultObjectCode};
`;
              return {
                code,
                map: { mappings: "" }
              };
            }
            if (options2.stringify === true || // use 10kB as a threshold for 'auto'
            // https://v8.dev/blog/cost-of-javascript-2019#:~:text=A%20good%20rule%20of%20thumb%20is%20to%20apply%20this%20technique%20for%20objects%20of%2010%20kB%20or%20larger
            json.length > 10 * 1e3) {
              if (isBuild) {
                json = JSON.stringify(JSON.parse(json));
              }
              return {
                code: `export default /* #__PURE__ */ JSON.parse(${JSON.stringify(json)})`,
                map: { mappings: "" }
              };
            }
          }
          return {
            code: dataToEsm(JSON.parse(json), {
              preferConst: true,
              namedExports: options2.namedExports
            }),
            map: { mappings: "" }
          };
        } catch (e2) {
          const position = extractJsonErrorPosition(e2.message, json.length);
          const msg = position ? `, invalid JSON syntax found at position ${position}` : `.`;
          this.error(`Failed to parse JSON file` + msg, position);
        }
      }
    }
  };
  const handler = plugin.transform.handler;
  plugin.transform = handler;
  plugin.transform.handler = handler;
  return plugin;
}
function serializeValue(value2) {
  const valueAsString = JSON.stringify(value2);
  if (typeof value2 === "object" && value2 != null && valueAsString.length > 10 * 1e3) {
    return `/* #__PURE__ */ JSON.parse(${JSON.stringify(valueAsString)})`;
  }
  return valueAsString;
}
function extractJsonErrorPosition(errorMessage, inputLength) {
  if (errorMessage.startsWith("Unexpected end of JSON input")) {
    return inputLength - 1;
  }
  const errorMessageList = /at position (\d+)/.exec(errorMessage);
  return errorMessageList ? Math.max(parseInt(errorMessageList[1], 10) - 1, 0) : void 0;
}
function e(e2, n2, r2) {
  throw new Error(r2 ? `No known conditions for "${n2}" specifier in "${e2}" package` : `Missing "${n2}" specifier in "${e2}" package`);
}
function n(n2, i, o2, f2) {
  let s2, u, l = r(n2, o2), c = function(e2) {
    let n3 = /* @__PURE__ */ new Set(["default", ...e2.conditions || []]);
    return e2.unsafe || n3.add(e2.require ? "require" : "import"), e2.unsafe || n3.add(e2.browser ? "browser" : "node"), n3;
  }(f2 || {}), a = i[l];
  if (void 0 === a) {
    let e2, n3, r2, t2;
    for (t2 in i) n3 && t2.length < n3.length || ("/" === t2[t2.length - 1] && l.startsWith(t2) ? (u = l.substring(t2.length), n3 = t2) : t2.length > 1 && (r2 = t2.indexOf("*", 1), ~r2 && (e2 = RegExp("^" + t2.substring(0, r2) + "(.*)" + t2.substring(1 + r2) + "$").exec(l), e2 && e2[1] && (u = e2[1], n3 = t2))));
    a = i[n3];
  }
  return a || e(n2, l), s2 = t(a, c), s2 || e(n2, l, 1), u && function(e2, n3) {
    let r2, t2 = 0, i2 = e2.length, o3 = /[*]/g, f3 = /[/]$/;
    for (; t2 < i2; t2++) e2[t2] = o3.test(r2 = e2[t2]) ? r2.replace(o3, n3) : f3.test(r2) ? r2 + n3 : r2;
  }(s2, u), s2;
}
function r(e2, n2, r2) {
  if (e2 === n2 || "." === n2) return ".";
  let t2 = e2 + "/", i = t2.length, o2 = n2.slice(0, i) === t2, f2 = o2 ? n2.slice(i) : n2;
  return "#" === f2[0] ? f2 : "./" === f2.slice(0, 2) ? f2 : "./" + f2;
}
function t(e2, n2, r2) {
  if (e2) {
    if ("string" == typeof e2) return r2 && r2.add(e2), [e2];
    let i, o2;
    if (Array.isArray(e2)) {
      for (o2 = r2 || /* @__PURE__ */ new Set(), i = 0; i < e2.length; i++) t(e2[i], n2, o2);
      if (!r2 && o2.size) return [...o2];
    } else for (i in e2) if (n2.has(i)) return t(e2[i], n2, r2);
  }
}
function o(e2, r2, t2) {
  let i, o2 = e2.exports;
  if (o2) {
    if ("string" == typeof o2) o2 = { ".": o2 };
    else for (i in o2) {
      "." !== i[0] && (o2 = { ".": o2 });
      break;
    }
    return n(e2.name, o2, r2 || ".", t2);
  }
}
function f(e2, r2, t2) {
  if (e2.imports) return n(e2.name, e2.imports, r2, t2);
}
var HASH_RE = /#/g;
var AMPERSAND_RE = /&/g;
var SLASH_RE = /\//g;
var EQUAL_RE = /=/g;
var PLUS_RE = /\+/g;
var ENC_CARET_RE = /%5e/gi;
var ENC_BACKTICK_RE = /%60/gi;
var ENC_PIPE_RE = /%7c/gi;
var ENC_SPACE_RE = /%20/gi;
function encode(text) {
  return encodeURI("" + text).replace(ENC_PIPE_RE, "|");
}
function encodeQueryValue(input) {
  return encode(typeof input === "string" ? input : JSON.stringify(input)).replace(PLUS_RE, "%2B").replace(ENC_SPACE_RE, "+").replace(HASH_RE, "%23").replace(AMPERSAND_RE, "%26").replace(ENC_BACKTICK_RE, "`").replace(ENC_CARET_RE, "^").replace(SLASH_RE, "%2F");
}
function encodeQueryKey(text) {
  return encodeQueryValue(text).replace(EQUAL_RE, "%3D");
}
function encodeQueryItem(key, value2) {
  if (typeof value2 === "number" || typeof value2 === "boolean") {
    value2 = String(value2);
  }
  if (!value2) {
    return encodeQueryKey(key);
  }
  if (Array.isArray(value2)) {
    return value2.map(
      (_value) => `${encodeQueryKey(key)}=${encodeQueryValue(_value)}`
    ).join("&");
  }
  return `${encodeQueryKey(key)}=${encodeQueryValue(value2)}`;
}
function stringifyQuery(query) {
  return Object.keys(query).filter((k) => query[k] !== void 0).map((k) => encodeQueryItem(k, query[k])).filter(Boolean).join("&");
}
new Set(import_node_module.builtinModules);
function clearImports(imports) {
  return (imports || "").replace(/(\/\/[^\n]*\n|\/\*.*\*\/)/g, "").replace(/\s+/g, " ");
}
function getImportNames(cleanedImports) {
  var _a2, _b;
  const topLevelImports = cleanedImports.replace(/{([^}]*)}/, "");
  const namespacedImport = (_a2 = topLevelImports.match(/\* as \s*(\S*)/)) == null ? void 0 : _a2[1];
  const defaultImport = ((_b = topLevelImports.split(",").find((index) => !/[*{}]/.test(index))) == null ? void 0 : _b.trim()) || void 0;
  return {
    namespacedImport,
    defaultImport
  };
}
var own$1 = {}.hasOwnProperty;
var classRegExp = /^([A-Z][a-z\d]*)+$/;
var kTypes = /* @__PURE__ */ new Set([
  "string",
  "function",
  "number",
  "object",
  // Accept 'Function' and 'Object' as alternative to the lower cased version.
  "Function",
  "Object",
  "boolean",
  "bigint",
  "symbol"
]);
function formatList(array, type = "and") {
  return array.length < 3 ? array.join(` ${type} `) : `${array.slice(0, -1).join(", ")}, ${type} ${array[array.length - 1]}`;
}
var messages = /* @__PURE__ */ new Map();
var nodeInternalPrefix = "__node_internal_";
var userStackTraceLimit;
createError(
  "ERR_INVALID_ARG_TYPE",
  /**
   * @param {string} name
   * @param {Array<string> | string} expected
   * @param {unknown} actual
   */
  (name, expected, actual) => {
    (0, import_node_assert.default)(typeof name === "string", "'name' must be a string");
    if (!Array.isArray(expected)) {
      expected = [expected];
    }
    let message = "The ";
    if (name.endsWith(" argument")) {
      message += `${name} `;
    } else {
      const type = name.includes(".") ? "property" : "argument";
      message += `"${name}" ${type} `;
    }
    message += "must be ";
    const types = [];
    const instances = [];
    const other = [];
    for (const value2 of expected) {
      (0, import_node_assert.default)(
        typeof value2 === "string",
        "All expected entries have to be of type string"
      );
      if (kTypes.has(value2)) {
        types.push(value2.toLowerCase());
      } else if (classRegExp.exec(value2) === null) {
        (0, import_node_assert.default)(
          value2 !== "object",
          'The value "object" should be written as "Object"'
        );
        other.push(value2);
      } else {
        instances.push(value2);
      }
    }
    if (instances.length > 0) {
      const pos = types.indexOf("object");
      if (pos !== -1) {
        types.slice(pos, 1);
        instances.push("Object");
      }
    }
    if (types.length > 0) {
      message += `${types.length > 1 ? "one of type" : "of type"} ${formatList(
        types,
        "or"
      )}`;
      if (instances.length > 0 || other.length > 0) message += " or ";
    }
    if (instances.length > 0) {
      message += `an instance of ${formatList(instances, "or")}`;
      if (other.length > 0) message += " or ";
    }
    if (other.length > 0) {
      if (other.length > 1) {
        message += `one of ${formatList(other, "or")}`;
      } else {
        if (other[0].toLowerCase() !== other[0]) message += "an ";
        message += `${other[0]}`;
      }
    }
    message += `. Received ${determineSpecificType(actual)}`;
    return message;
  },
  TypeError
);
createError(
  "ERR_INVALID_MODULE_SPECIFIER",
  /**
   * @param {string} request
   * @param {string} reason
   * @param {string} [base]
   */
  (request, reason, base = void 0) => {
    return `Invalid module "${request}" ${reason}${base ? ` imported from ${base}` : ""}`;
  },
  TypeError
);
createError(
  "ERR_INVALID_PACKAGE_CONFIG",
  /**
   * @param {string} path
   * @param {string} [base]
   * @param {string} [message]
   */
  (path4, base, message) => {
    return `Invalid package config ${path4}${base ? ` while importing ${base}` : ""}${message ? `. ${message}` : ""}`;
  },
  Error
);
createError(
  "ERR_INVALID_PACKAGE_TARGET",
  /**
   * @param {string} packagePath
   * @param {string} key
   * @param {unknown} target
   * @param {boolean} [isImport=false]
   * @param {string} [base]
   */
  (packagePath, key, target, isImport = false, base = void 0) => {
    const relatedError = typeof target === "string" && !isImport && target.length > 0 && !target.startsWith("./");
    if (key === ".") {
      (0, import_node_assert.default)(isImport === false);
      return `Invalid "exports" main target ${JSON.stringify(target)} defined in the package config ${packagePath}package.json${base ? ` imported from ${base}` : ""}${relatedError ? '; targets must start with "./"' : ""}`;
    }
    return `Invalid "${isImport ? "imports" : "exports"}" target ${JSON.stringify(
      target
    )} defined for '${key}' in the package config ${packagePath}package.json${base ? ` imported from ${base}` : ""}${relatedError ? '; targets must start with "./"' : ""}`;
  },
  Error
);
createError(
  "ERR_MODULE_NOT_FOUND",
  /**
   * @param {string} path
   * @param {string} base
   * @param {boolean} [exactUrl]
   */
  (path4, base, exactUrl = false) => {
    return `Cannot find ${exactUrl ? "module" : "package"} '${path4}' imported from ${base}`;
  },
  Error
);
createError(
  "ERR_NETWORK_IMPORT_DISALLOWED",
  "import of '%s' by %s is not supported: %s",
  Error
);
createError(
  "ERR_PACKAGE_IMPORT_NOT_DEFINED",
  /**
   * @param {string} specifier
   * @param {string} packagePath
   * @param {string} base
   */
  (specifier, packagePath, base) => {
    return `Package import specifier "${specifier}" is not defined${packagePath ? ` in package ${packagePath}package.json` : ""} imported from ${base}`;
  },
  TypeError
);
createError(
  "ERR_PACKAGE_PATH_NOT_EXPORTED",
  /**
   * @param {string} packagePath
   * @param {string} subpath
   * @param {string} [base]
   */
  (packagePath, subpath, base = void 0) => {
    if (subpath === ".")
      return `No "exports" main defined in ${packagePath}package.json${base ? ` imported from ${base}` : ""}`;
    return `Package subpath '${subpath}' is not defined by "exports" in ${packagePath}package.json${base ? ` imported from ${base}` : ""}`;
  },
  Error
);
createError(
  "ERR_UNSUPPORTED_DIR_IMPORT",
  "Directory import '%s' is not supported resolving ES modules imported from %s",
  Error
);
createError(
  "ERR_UNSUPPORTED_RESOLVE_REQUEST",
  'Failed to resolve module specifier "%s" from "%s": Invalid relative URL or base scheme is not hierarchical.',
  TypeError
);
createError(
  "ERR_UNKNOWN_FILE_EXTENSION",
  /**
   * @param {string} extension
   * @param {string} path
   */
  (extension2, path4) => {
    return `Unknown file extension "${extension2}" for ${path4}`;
  },
  TypeError
);
createError(
  "ERR_INVALID_ARG_VALUE",
  /**
   * @param {string} name
   * @param {unknown} value
   * @param {string} [reason='is invalid']
   */
  (name, value2, reason = "is invalid") => {
    let inspected = (0, import_node_util.inspect)(value2);
    if (inspected.length > 128) {
      inspected = `${inspected.slice(0, 128)}...`;
    }
    const type = name.includes(".") ? "property" : "argument";
    return `The ${type} '${name}' ${reason}. Received ${inspected}`;
  },
  TypeError
  // Note: extra classes have been shaken out.
  // , RangeError
);
function createError(sym, value2, constructor) {
  messages.set(sym, value2);
  return makeNodeErrorWithCode(constructor, sym);
}
function makeNodeErrorWithCode(Base, key) {
  return NodeError;
  function NodeError(...parameters) {
    const limit = Error.stackTraceLimit;
    if (isErrorStackTraceLimitWritable()) Error.stackTraceLimit = 0;
    const error2 = new Base();
    if (isErrorStackTraceLimitWritable()) Error.stackTraceLimit = limit;
    const message = getMessage(key, parameters, error2);
    Object.defineProperties(error2, {
      // Note: no need to implement `kIsNodeError` symbol, would be hard,
      // probably.
      message: {
        value: message,
        enumerable: false,
        writable: true,
        configurable: true
      },
      toString: {
        /** @this {Error} */
        value() {
          return `${this.name} [${key}]: ${this.message}`;
        },
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    captureLargerStackTrace(error2);
    error2.code = key;
    return error2;
  }
}
function isErrorStackTraceLimitWritable() {
  try {
    if (import_node_v8.default.startupSnapshot.isBuildingSnapshot()) {
      return false;
    }
  } catch {
  }
  const desc = Object.getOwnPropertyDescriptor(Error, "stackTraceLimit");
  if (desc === void 0) {
    return Object.isExtensible(Error);
  }
  return own$1.call(desc, "writable") && desc.writable !== void 0 ? desc.writable : desc.set !== void 0;
}
function hideStackFrames(wrappedFunction) {
  const hidden = nodeInternalPrefix + wrappedFunction.name;
  Object.defineProperty(wrappedFunction, "name", { value: hidden });
  return wrappedFunction;
}
var captureLargerStackTrace = hideStackFrames(
  /**
   * @param {Error} error
   * @returns {Error}
   */
  // @ts-expect-error: fine
  function(error2) {
    const stackTraceLimitIsWritable = isErrorStackTraceLimitWritable();
    if (stackTraceLimitIsWritable) {
      userStackTraceLimit = Error.stackTraceLimit;
      Error.stackTraceLimit = Number.POSITIVE_INFINITY;
    }
    Error.captureStackTrace(error2);
    if (stackTraceLimitIsWritable) Error.stackTraceLimit = userStackTraceLimit;
    return error2;
  }
);
function getMessage(key, parameters, self2) {
  const message = messages.get(key);
  (0, import_node_assert.default)(message !== void 0, "expected `message` to be found");
  if (typeof message === "function") {
    (0, import_node_assert.default)(
      message.length <= parameters.length,
      // Default options do not count.
      `Code: ${key}; The provided arguments length (${parameters.length}) does not match the required ones (${message.length}).`
    );
    return Reflect.apply(message, self2, parameters);
  }
  const regex = /%[dfijoOs]/g;
  let expectedLength = 0;
  while (regex.exec(message) !== null) expectedLength++;
  (0, import_node_assert.default)(
    expectedLength === parameters.length,
    `Code: ${key}; The provided arguments length (${parameters.length}) does not match the required ones (${expectedLength}).`
  );
  if (parameters.length === 0) return message;
  parameters.unshift(message);
  return Reflect.apply(import_node_util.format, null, parameters);
}
function determineSpecificType(value2) {
  if (value2 === null || value2 === void 0) {
    return String(value2);
  }
  if (typeof value2 === "function" && value2.name) {
    return `function ${value2.name}`;
  }
  if (typeof value2 === "object") {
    if (value2.constructor && value2.constructor.name) {
      return `an instance of ${value2.constructor.name}`;
    }
    return `${(0, import_node_util.inspect)(value2, { depth: -1 })}`;
  }
  let inspected = (0, import_node_util.inspect)(value2, { colors: false });
  if (inspected.length > 28) {
    inspected = `${inspected.slice(0, 25)}...`;
  }
  return `type ${typeof value2} (${inspected})`;
}
var ESM_STATIC_IMPORT_RE = new RegExp(`(?<=\\s|^|;|\\})import\\s*([\\s"']*(?<imports>[\\p{L}\\p{M}\\w\\t\\n\\r $*,/{}@.]+)from\\s*)?["']\\s*(?<specifier>(?<="\\s*)[^"]*[^\\s"](?=\\s*")|(?<='\\s*)[^']*[^\\s'](?=\\s*'))\\s*["'][\\s;]*`, "gmu");
var TYPE_RE = /^\s*?type\s/;
function parseStaticImport(matched) {
  var _a2, _b;
  const cleanedImports = clearImports(matched.imports);
  const namedImports = {};
  const _matches = ((_b = (_a2 = cleanedImports.match(/{([^}]*)}/)) == null ? void 0 : _a2[1]) == null ? void 0 : _b.split(",")) || [];
  for (const namedImport of _matches) {
    const _match = namedImport.match(/^\s*(\S*) as (\S*)\s*$/);
    const source = (_match == null ? void 0 : _match[1]) || namedImport.trim();
    const importName = (_match == null ? void 0 : _match[2]) || source;
    if (source && !TYPE_RE.test(source)) {
      namedImports[source] = importName;
    }
  }
  const { namespacedImport, defaultImport } = getImportNames(cleanedImports);
  return {
    ...matched,
    defaultImport,
    namespacedImport,
    namedImports
  };
}
var ESM_RE = /([\s;]|^)(import[\s\w*,{}]*from|import\s*["'*{]|export\b\s*(?:[*{]|default|class|type|function|const|var|let|async function)|import\.meta\b)/m;
var COMMENT_RE = /\/\*.+?\*\/|\/\/.*(?=[nr])/g;
function hasESMSyntax(code, opts = {}) {
  if (opts.stripComments) {
    code = code.replace(COMMENT_RE, "");
  }
  return ESM_RE.test(code);
}
var externalWithConversionNamespace = "vite:dep-pre-bundle:external-conversion";
var convertedExternalPrefix = "vite-dep-pre-bundle-external:";
var cjsExternalFacadeNamespace = "vite:cjs-external-facade";
var nonFacadePrefix = "vite-cjs-external-facade:";
var externalTypes = [
  "css",
  // supported pre-processor types
  "less",
  "sass",
  "scss",
  "styl",
  "stylus",
  "pcss",
  "postcss",
  // wasm
  "wasm",
  // known SFC types
  "vue",
  "svelte",
  "marko",
  "astro",
  "imba",
  // JSX/TSX may be configured to be compiled differently from how esbuild
  // handles it by default, so exclude them as well
  "jsx",
  "tsx",
  ...KNOWN_ASSET_TYPES
];
function esbuildDepPlugin(environment, qualified, external) {
  const { isProduction } = environment.config;
  const { extensions: extensions2 } = environment.config.optimizeDeps;
  const allExternalTypes = extensions2 ? externalTypes.filter((type) => !extensions2.includes("." + type)) : externalTypes;
  const esmPackageCache = /* @__PURE__ */ new Map();
  const cjsPackageCache = /* @__PURE__ */ new Map();
  const _resolve = createBackCompatIdResolver(environment.getTopLevelConfig(), {
    asSrc: false,
    scan: true,
    packageCache: esmPackageCache
  });
  const _resolveRequire = createBackCompatIdResolver(
    environment.getTopLevelConfig(),
    {
      asSrc: false,
      isRequire: true,
      scan: true,
      packageCache: cjsPackageCache
    }
  );
  const resolve4 = (id, importer, kind, resolveDir) => {
    let _importer;
    {
      _importer = importer in qualified ? qualified[importer] : importer;
    }
    const resolver = kind.startsWith("require") ? _resolveRequire : _resolve;
    return resolver(environment, id, _importer);
  };
  const resolveResult = (id, resolved) => {
    if (resolved.startsWith(browserExternalId)) {
      return {
        path: id,
        namespace: "browser-external"
      };
    }
    if (resolved.startsWith(optionalPeerDepId)) {
      return {
        path: resolved,
        namespace: "optional-peer-dep"
      };
    }
    if (isBuiltin(environment.config.resolve.builtins, resolved)) {
      return;
    }
    if (isExternalUrl(resolved)) {
      return {
        path: resolved,
        external: true
      };
    }
    return {
      path: import_node_path3.default.resolve(resolved)
    };
  };
  return {
    name: "vite:dep-pre-bundle",
    setup(build2) {
      build2.onEnd(() => {
        esmPackageCache.clear();
        cjsPackageCache.clear();
      });
      build2.onResolve(
        {
          filter: new RegExp(
            `\\.(` + allExternalTypes.join("|") + `)(\\?.*)?$`
          )
        },
        async ({ path: id, importer, kind }) => {
          if (id.startsWith(convertedExternalPrefix)) {
            return {
              path: id.slice(convertedExternalPrefix.length),
              external: true
            };
          }
          const resolved = await resolve4(id, importer, kind);
          if (resolved) {
            if (JS_TYPES_RE.test(resolved)) {
              return {
                path: resolved,
                external: false
              };
            }
            if (kind === "require-call") {
              return {
                path: resolved,
                namespace: externalWithConversionNamespace
              };
            }
            return {
              path: resolved,
              external: true
            };
          }
        }
      );
      build2.onLoad(
        { filter: /./, namespace: externalWithConversionNamespace },
        (args) => {
          const modulePath = `"${convertedExternalPrefix}${args.path}"`;
          return {
            contents: isCSSRequest(args.path) && !isModuleCSSRequest(args.path) ? `import ${modulePath};` : `export { default } from ${modulePath};export * from ${modulePath};`,
            loader: "js"
          };
        }
      );
      function resolveEntry(id) {
        const flatId = flattenId(id);
        if (flatId in qualified) {
          return {
            path: qualified[flatId]
          };
        }
      }
      build2.onResolve(
        { filter: /^[\w@][^:]/ },
        async ({ path: id, importer, kind }) => {
          if (moduleListContains(external, id)) {
            return {
              path: id,
              external: true
            };
          }
          let entry;
          if (!importer) {
            if (entry = resolveEntry(id)) return entry;
            const aliased = await _resolve(environment, id, void 0, true);
            if (aliased && (entry = resolveEntry(aliased))) {
              return entry;
            }
          }
          const resolved = await resolve4(id, importer, kind);
          if (resolved) {
            return resolveResult(id, resolved);
          }
        }
      );
      build2.onLoad(
        { filter: /.*/, namespace: "browser-external" },
        ({ path: path22 }) => {
          if (isProduction) {
            return {
              contents: "module.exports = {}"
            };
          } else {
            return {
              // Return in CJS to intercept named imports. Use `Object.create` to
              // create the Proxy in the prototype to workaround esbuild issue. Why?
              //
              // In short, esbuild cjs->esm flow:
              // 1. Create empty object using `Object.create(Object.getPrototypeOf(module.exports))`.
              // 2. Assign props of `module.exports` to the object.
              // 3. Return object for ESM use.
              //
              // If we do `module.exports = new Proxy({}, {})`, step 1 returns empty object,
              // step 2 does nothing as there's no props for `module.exports`. The final object
              // is just an empty object.
              //
              // Creating the Proxy in the prototype satisfies step 1 immediately, which means
              // the returned object is a Proxy that we can intercept.
              //
              // Note: Skip keys that are accessed by esbuild and browser devtools.
              contents: `module.exports = Object.create(new Proxy({}, {
  get(_, key) {
    if (
      key !== '__esModule' &&
      key !== '__proto__' &&
      key !== 'constructor' &&
      key !== 'splice'
    ) {
      console.warn(\`Module "${path22}" has been externalized for browser compatibility. Cannot access "${path22}.\${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.\`)
    }
  }
}))`
            };
          }
        }
      );
      build2.onLoad(
        { filter: /.*/, namespace: "optional-peer-dep" },
        ({ path: path22 }) => {
          if (isProduction) {
            return {
              contents: "module.exports = {}"
            };
          } else {
            const [, peerDep, parentDep] = path22.split(":");
            return {
              contents: `throw new Error(\`Could not resolve "${peerDep}" imported by "${parentDep}". Is it installed?\`)`
            };
          }
        }
      );
    }
  };
}
var matchesEntireLine = (text) => `^${escapeRegex(text)}$`;
function esbuildCjsExternalPlugin(externals, platform2) {
  return {
    name: "cjs-external",
    setup(build2) {
      const filter2 = new RegExp(externals.map(matchesEntireLine).join("|"));
      build2.onResolve({ filter: new RegExp(`^${nonFacadePrefix}`) }, (args) => {
        return {
          path: args.path.slice(nonFacadePrefix.length),
          external: true
        };
      });
      build2.onResolve({ filter: filter2 }, (args) => {
        if (args.kind === "require-call" && platform2 !== "node") {
          return {
            path: args.path,
            namespace: cjsExternalFacadeNamespace
          };
        }
        return {
          path: args.path,
          external: true
        };
      });
      build2.onLoad(
        { filter: /.*/, namespace: cjsExternalFacadeNamespace },
        (args) => ({
          contents: `import * as m from ${JSON.stringify(
            nonFacadePrefix + args.path
          )};module.exports = { ...m };`
        })
      );
    }
  };
}
var environmentColors = [
  colors$1.blue,
  colors$1.magenta,
  colors$1.green,
  colors$1.gray
];
function getDefaultResolvedEnvironmentOptions(config2) {
  return {
    define: config2.define,
    resolve: config2.resolve,
    consumer: "server",
    optimizeDeps: config2.optimizeDeps,
    dev: config2.dev,
    build: config2.build
  };
}
var PartialEnvironment = class {
  constructor(name, topLevelConfig, options2 = topLevelConfig.environments[name]) {
    __publicField(this, "name");
    __publicField(this, "config");
    __publicField(this, "logger");
    /**
     * @internal
     */
    __publicField(this, "_options");
    /**
     * @internal
     */
    __publicField(this, "_topLevelConfig");
    if (!/^[\w$]+$/.test(name)) {
      throw new Error(
        `Invalid environment name "${name}". Environment names must only contain alphanumeric characters and "$", "_".`
      );
    }
    this.name = name;
    this._topLevelConfig = topLevelConfig;
    this._options = options2;
    this.config = new Proxy(
      options2,
      {
        get: (target, prop) => {
          if (prop === "logger") {
            return this.logger;
          }
          if (prop in target) {
            return this._options[prop];
          }
          return this._topLevelConfig[prop];
        }
      }
    );
    const environment = colors$1.dim(`(${this.name})`);
    const colorIndex = [...this.name].reduce((acc, c) => acc + c.charCodeAt(0), 0) % environmentColors.length;
    const infoColor = environmentColors[colorIndex || 0];
    this.logger = {
      get hasWarned() {
        return topLevelConfig.logger.hasWarned;
      },
      info(msg, opts) {
        return topLevelConfig.logger.info(msg, {
          ...opts,
          environment: infoColor(environment)
        });
      },
      warn(msg, opts) {
        return topLevelConfig.logger.warn(msg, {
          ...opts,
          environment: colors$1.yellow(environment)
        });
      },
      warnOnce(msg, opts) {
        return topLevelConfig.logger.warnOnce(msg, {
          ...opts,
          environment: colors$1.yellow(environment)
        });
      },
      error(msg, opts) {
        return topLevelConfig.logger.error(msg, {
          ...opts,
          environment: colors$1.red(environment)
        });
      },
      clearScreen(type) {
        return topLevelConfig.logger.clearScreen(type);
      },
      hasErrorLogged(error2) {
        return topLevelConfig.logger.hasErrorLogged(error2);
      }
    };
  }
  getTopLevelConfig() {
    return this._topLevelConfig;
  }
  /**
   * @deprecated use environment.config instead
   **/
  get options() {
    return this._options;
  }
};
var BaseEnvironment = class extends PartialEnvironment {
  constructor(name, config2, options2 = config2.environments[name]) {
    super(name, config2, options2);
    /**
     * @internal
     */
    __publicField(this, "_plugins");
    /**
     * @internal
     */
    __publicField(this, "_initiated", false);
  }
  get plugins() {
    if (!this._plugins)
      throw new Error(
        `${this.name} environment.plugins called before initialized`
      );
    return this._plugins;
  }
};
var HashbangComment;
var Identifier;
var JSXIdentifier;
var JSXPunctuator;
var JSXString;
var JSXText;
var KeywordsWithExpressionAfter;
var KeywordsWithNoLineTerminatorAfter;
var LineTerminatorSequence;
var MultiLineComment;
var Newline;
var NumericLiteral;
var Punctuator;
var RegularExpressionLiteral;
var SingleLineComment;
var StringLiteral;
var Template;
var TokensNotPrecedingObjectLiteral;
var TokensPrecedingExpression;
var WhiteSpace;
RegularExpressionLiteral = /\/(?![*\/])(?:\[(?:[^\]\\\n\r\u2028\u2029]+|\\.)*\]?|[^\/[\\\n\r\u2028\u2029]+|\\.)*(\/[$_\u200C\u200D\p{ID_Continue}]*|\\)?/yu;
Punctuator = /--|\+\+|=>|\.{3}|\??\.(?!\d)|(?:&&|\|\||\?\?|[+\-%&|^]|\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2}|\/(?![\/*]))=?|[?~,:;[\](){}]/y;
Identifier = /(\x23?)(?=[$_\p{ID_Start}\\])(?:[$_\u200C\u200D\p{ID_Continue}]+|\\u[\da-fA-F]{4}|\\u\{[\da-fA-F]+\})+/yu;
StringLiteral = /(['"])(?:[^'"\\\n\r]+|(?!\1)['"]|\\(?:\r\n|[^]))*(\1)?/y;
NumericLiteral = /(?:0[xX][\da-fA-F](?:_?[\da-fA-F])*|0[oO][0-7](?:_?[0-7])*|0[bB][01](?:_?[01])*)n?|0n|[1-9](?:_?\d)*n|(?:(?:0(?!\d)|0\d*[89]\d*|[1-9](?:_?\d)*)(?:\.(?:\d(?:_?\d)*)?)?|\.\d(?:_?\d)*)(?:[eE][+-]?\d(?:_?\d)*)?|0[0-7]+/y;
Template = /[`}](?:[^`\\$]+|\\[^]|\$(?!\{))*(`|\$\{)?/y;
WhiteSpace = /[\t\v\f\ufeff\p{Zs}]+/yu;
LineTerminatorSequence = /\r?\n|[\r\u2028\u2029]/y;
MultiLineComment = /\/\*(?:[^*]+|\*(?!\/))*(\*\/)?/y;
SingleLineComment = /\/\/.*/y;
HashbangComment = /^#!.*/;
JSXPunctuator = /[<>.:={}]|\/(?![\/*])/y;
JSXIdentifier = /[$_\p{ID_Start}][$_\u200C\u200D\p{ID_Continue}-]*/yu;
JSXString = /(['"])(?:[^'"]+|(?!\1)['"])*(\1)?/y;
JSXText = /[^<>{}]+/y;
TokensPrecedingExpression = /^(?:[\/+-]|\.{3}|\?(?:InterpolationIn(?:JSX|Template)|NoLineTerminatorHere|NonExpressionParenEnd|UnaryIncDec))?$|[{}([,;<>=*%&|^!~?:]$/;
TokensNotPrecedingObjectLiteral = /^(?:=>|[;\]){}]|else|\?(?:NoLineTerminatorHere|NonExpressionParenEnd))?$/;
KeywordsWithExpressionAfter = /^(?:await|case|default|delete|do|else|instanceof|new|return|throw|typeof|void|yield)$/;
KeywordsWithNoLineTerminatorAfter = /^(?:return|throw|yield)$/;
Newline = RegExp(LineTerminatorSequence.source);
var jsTokens_1 = function* (input, { jsx = false } = {}) {
  var braces2, firstCodePoint, isExpression, lastIndex, lastSignificantToken, length, match, mode2, nextLastIndex, nextLastSignificantToken, parenNesting, postfixIncDec, punctuator, stack;
  ({ length } = input);
  lastIndex = 0;
  lastSignificantToken = "";
  stack = [
    { tag: "JS" }
  ];
  braces2 = [];
  parenNesting = 0;
  postfixIncDec = false;
  if (match = HashbangComment.exec(input)) {
    yield {
      type: "HashbangComment",
      value: match[0]
    };
    lastIndex = match[0].length;
  }
  while (lastIndex < length) {
    mode2 = stack[stack.length - 1];
    switch (mode2.tag) {
      case "JS":
      case "JSNonExpressionParen":
      case "InterpolationInTemplate":
      case "InterpolationInJSX":
        if (input[lastIndex] === "/" && (TokensPrecedingExpression.test(lastSignificantToken) || KeywordsWithExpressionAfter.test(lastSignificantToken))) {
          RegularExpressionLiteral.lastIndex = lastIndex;
          if (match = RegularExpressionLiteral.exec(input)) {
            lastIndex = RegularExpressionLiteral.lastIndex;
            lastSignificantToken = match[0];
            postfixIncDec = true;
            yield {
              type: "RegularExpressionLiteral",
              value: match[0],
              closed: match[1] !== void 0 && match[1] !== "\\"
            };
            continue;
          }
        }
        Punctuator.lastIndex = lastIndex;
        if (match = Punctuator.exec(input)) {
          punctuator = match[0];
          nextLastIndex = Punctuator.lastIndex;
          nextLastSignificantToken = punctuator;
          switch (punctuator) {
            case "(":
              if (lastSignificantToken === "?NonExpressionParenKeyword") {
                stack.push({
                  tag: "JSNonExpressionParen",
                  nesting: parenNesting
                });
              }
              parenNesting++;
              postfixIncDec = false;
              break;
            case ")":
              parenNesting--;
              postfixIncDec = true;
              if (mode2.tag === "JSNonExpressionParen" && parenNesting === mode2.nesting) {
                stack.pop();
                nextLastSignificantToken = "?NonExpressionParenEnd";
                postfixIncDec = false;
              }
              break;
            case "{":
              Punctuator.lastIndex = 0;
              isExpression = !TokensNotPrecedingObjectLiteral.test(lastSignificantToken) && (TokensPrecedingExpression.test(lastSignificantToken) || KeywordsWithExpressionAfter.test(lastSignificantToken));
              braces2.push(isExpression);
              postfixIncDec = false;
              break;
            case "}":
              switch (mode2.tag) {
                case "InterpolationInTemplate":
                  if (braces2.length === mode2.nesting) {
                    Template.lastIndex = lastIndex;
                    match = Template.exec(input);
                    lastIndex = Template.lastIndex;
                    lastSignificantToken = match[0];
                    if (match[1] === "${") {
                      lastSignificantToken = "?InterpolationInTemplate";
                      postfixIncDec = false;
                      yield {
                        type: "TemplateMiddle",
                        value: match[0]
                      };
                    } else {
                      stack.pop();
                      postfixIncDec = true;
                      yield {
                        type: "TemplateTail",
                        value: match[0],
                        closed: match[1] === "`"
                      };
                    }
                    continue;
                  }
                  break;
                case "InterpolationInJSX":
                  if (braces2.length === mode2.nesting) {
                    stack.pop();
                    lastIndex += 1;
                    lastSignificantToken = "}";
                    yield {
                      type: "JSXPunctuator",
                      value: "}"
                    };
                    continue;
                  }
              }
              postfixIncDec = braces2.pop();
              nextLastSignificantToken = postfixIncDec ? "?ExpressionBraceEnd" : "}";
              break;
            case "]":
              postfixIncDec = true;
              break;
            case "++":
            case "--":
              nextLastSignificantToken = postfixIncDec ? "?PostfixIncDec" : "?UnaryIncDec";
              break;
            case "<":
              if (jsx && (TokensPrecedingExpression.test(lastSignificantToken) || KeywordsWithExpressionAfter.test(lastSignificantToken))) {
                stack.push({ tag: "JSXTag" });
                lastIndex += 1;
                lastSignificantToken = "<";
                yield {
                  type: "JSXPunctuator",
                  value: punctuator
                };
                continue;
              }
              postfixIncDec = false;
              break;
            default:
              postfixIncDec = false;
          }
          lastIndex = nextLastIndex;
          lastSignificantToken = nextLastSignificantToken;
          yield {
            type: "Punctuator",
            value: punctuator
          };
          continue;
        }
        Identifier.lastIndex = lastIndex;
        if (match = Identifier.exec(input)) {
          lastIndex = Identifier.lastIndex;
          nextLastSignificantToken = match[0];
          switch (match[0]) {
            case "for":
            case "if":
            case "while":
            case "with":
              if (lastSignificantToken !== "." && lastSignificantToken !== "?.") {
                nextLastSignificantToken = "?NonExpressionParenKeyword";
              }
          }
          lastSignificantToken = nextLastSignificantToken;
          postfixIncDec = !KeywordsWithExpressionAfter.test(match[0]);
          yield {
            type: match[1] === "#" ? "PrivateIdentifier" : "IdentifierName",
            value: match[0]
          };
          continue;
        }
        StringLiteral.lastIndex = lastIndex;
        if (match = StringLiteral.exec(input)) {
          lastIndex = StringLiteral.lastIndex;
          lastSignificantToken = match[0];
          postfixIncDec = true;
          yield {
            type: "StringLiteral",
            value: match[0],
            closed: match[2] !== void 0
          };
          continue;
        }
        NumericLiteral.lastIndex = lastIndex;
        if (match = NumericLiteral.exec(input)) {
          lastIndex = NumericLiteral.lastIndex;
          lastSignificantToken = match[0];
          postfixIncDec = true;
          yield {
            type: "NumericLiteral",
            value: match[0]
          };
          continue;
        }
        Template.lastIndex = lastIndex;
        if (match = Template.exec(input)) {
          lastIndex = Template.lastIndex;
          lastSignificantToken = match[0];
          if (match[1] === "${") {
            lastSignificantToken = "?InterpolationInTemplate";
            stack.push({
              tag: "InterpolationInTemplate",
              nesting: braces2.length
            });
            postfixIncDec = false;
            yield {
              type: "TemplateHead",
              value: match[0]
            };
          } else {
            postfixIncDec = true;
            yield {
              type: "NoSubstitutionTemplate",
              value: match[0],
              closed: match[1] === "`"
            };
          }
          continue;
        }
        break;
      case "JSXTag":
      case "JSXTagEnd":
        JSXPunctuator.lastIndex = lastIndex;
        if (match = JSXPunctuator.exec(input)) {
          lastIndex = JSXPunctuator.lastIndex;
          nextLastSignificantToken = match[0];
          switch (match[0]) {
            case "<":
              stack.push({ tag: "JSXTag" });
              break;
            case ">":
              stack.pop();
              if (lastSignificantToken === "/" || mode2.tag === "JSXTagEnd") {
                nextLastSignificantToken = "?JSX";
                postfixIncDec = true;
              } else {
                stack.push({ tag: "JSXChildren" });
              }
              break;
            case "{":
              stack.push({
                tag: "InterpolationInJSX",
                nesting: braces2.length
              });
              nextLastSignificantToken = "?InterpolationInJSX";
              postfixIncDec = false;
              break;
            case "/":
              if (lastSignificantToken === "<") {
                stack.pop();
                if (stack[stack.length - 1].tag === "JSXChildren") {
                  stack.pop();
                }
                stack.push({ tag: "JSXTagEnd" });
              }
          }
          lastSignificantToken = nextLastSignificantToken;
          yield {
            type: "JSXPunctuator",
            value: match[0]
          };
          continue;
        }
        JSXIdentifier.lastIndex = lastIndex;
        if (match = JSXIdentifier.exec(input)) {
          lastIndex = JSXIdentifier.lastIndex;
          lastSignificantToken = match[0];
          yield {
            type: "JSXIdentifier",
            value: match[0]
          };
          continue;
        }
        JSXString.lastIndex = lastIndex;
        if (match = JSXString.exec(input)) {
          lastIndex = JSXString.lastIndex;
          lastSignificantToken = match[0];
          yield {
            type: "JSXString",
            value: match[0],
            closed: match[2] !== void 0
          };
          continue;
        }
        break;
      case "JSXChildren":
        JSXText.lastIndex = lastIndex;
        if (match = JSXText.exec(input)) {
          lastIndex = JSXText.lastIndex;
          lastSignificantToken = match[0];
          yield {
            type: "JSXText",
            value: match[0]
          };
          continue;
        }
        switch (input[lastIndex]) {
          case "<":
            stack.push({ tag: "JSXTag" });
            lastIndex++;
            lastSignificantToken = "<";
            yield {
              type: "JSXPunctuator",
              value: "<"
            };
            continue;
          case "{":
            stack.push({
              tag: "InterpolationInJSX",
              nesting: braces2.length
            });
            lastIndex++;
            lastSignificantToken = "?InterpolationInJSX";
            postfixIncDec = false;
            yield {
              type: "JSXPunctuator",
              value: "{"
            };
            continue;
        }
    }
    WhiteSpace.lastIndex = lastIndex;
    if (match = WhiteSpace.exec(input)) {
      lastIndex = WhiteSpace.lastIndex;
      yield {
        type: "WhiteSpace",
        value: match[0]
      };
      continue;
    }
    LineTerminatorSequence.lastIndex = lastIndex;
    if (match = LineTerminatorSequence.exec(input)) {
      lastIndex = LineTerminatorSequence.lastIndex;
      postfixIncDec = false;
      if (KeywordsWithNoLineTerminatorAfter.test(lastSignificantToken)) {
        lastSignificantToken = "?NoLineTerminatorHere";
      }
      yield {
        type: "LineTerminatorSequence",
        value: match[0]
      };
      continue;
    }
    MultiLineComment.lastIndex = lastIndex;
    if (match = MultiLineComment.exec(input)) {
      lastIndex = MultiLineComment.lastIndex;
      if (Newline.test(match[0])) {
        postfixIncDec = false;
        if (KeywordsWithNoLineTerminatorAfter.test(lastSignificantToken)) {
          lastSignificantToken = "?NoLineTerminatorHere";
        }
      }
      yield {
        type: "MultiLineComment",
        value: match[0],
        closed: match[1] !== void 0
      };
      continue;
    }
    SingleLineComment.lastIndex = lastIndex;
    if (match = SingleLineComment.exec(input)) {
      lastIndex = SingleLineComment.lastIndex;
      postfixIncDec = false;
      yield {
        type: "SingleLineComment",
        value: match[0]
      };
      continue;
    }
    firstCodePoint = String.fromCodePoint(input.codePointAt(lastIndex));
    lastIndex += firstCodePoint.length;
    lastSignificantToken = firstCodePoint;
    postfixIncDec = false;
    yield {
      type: mode2.tag.startsWith("JSX") ? "JSXInvalid" : "Invalid",
      value: firstCodePoint
    };
  }
  return void 0;
};
var jsTokens = getDefaultExportFromCjs(jsTokens_1);
function stripLiteralJsTokens(code, options2) {
  const FILL = " ";
  const FILL_COMMENT = " ";
  let result = "";
  const tokens = [];
  for (const token of jsTokens(code, { jsx: false })) {
    tokens.push(token);
    if (token.type === "SingleLineComment") {
      result += FILL_COMMENT.repeat(token.value.length);
      continue;
    }
    if (token.type === "MultiLineComment") {
      result += token.value.replace(/[^\n]/g, FILL_COMMENT);
      continue;
    }
    if (token.type === "StringLiteral") {
      if (!token.closed) {
        result += token.value;
        continue;
      }
      const body = token.value.slice(1, -1);
      {
        result += token.value[0] + FILL.repeat(body.length) + token.value[token.value.length - 1];
        continue;
      }
    }
    if (token.type === "NoSubstitutionTemplate") {
      const body = token.value.slice(1, -1);
      {
        result += `\`${body.replace(/[^\n]/g, FILL)}\``;
        continue;
      }
    }
    if (token.type === "RegularExpressionLiteral") {
      const body = token.value;
      {
        result += body.replace(/\/(.*)\/(\w?)$/g, (_, $1, $2) => `/${FILL.repeat($1.length)}/${$2}`);
        continue;
      }
    }
    if (token.type === "TemplateHead") {
      const body = token.value.slice(1, -2);
      {
        result += `\`${body.replace(/[^\n]/g, FILL)}\${`;
        continue;
      }
    }
    if (token.type === "TemplateTail") {
      const body = token.value.slice(0, -2);
      {
        result += `}${body.replace(/[^\n]/g, FILL)}\``;
        continue;
      }
    }
    if (token.type === "TemplateMiddle") {
      const body = token.value.slice(1, -2);
      {
        result += `}${body.replace(/[^\n]/g, FILL)}\${`;
        continue;
      }
    }
    result += token.value;
  }
  return {
    result,
    tokens
  };
}
function stripLiteral(code, options2) {
  return stripLiteralDetailed(code).result;
}
function stripLiteralDetailed(code, options2) {
  return stripLiteralJsTokens(code);
}
function importGlobPlugin(config2) {
  const importGlobMaps = /* @__PURE__ */ new Map();
  return {
    name: "vite:import-glob",
    buildStart() {
      importGlobMaps.clear();
    },
    transform: {
      async handler(code, id) {
        if (!code.includes("import.meta.glob")) return;
        const result = await transformGlobImport(
          code,
          id,
          config2.root,
          (im, _, options2) => this.resolve(im, id, options2).then((i) => (i == null ? void 0 : i.id) || im),
          config2.experimental.importGlobRestoreExtension,
          config2.logger
        );
        if (result) {
          const allGlobs = result.matches.map((i) => i.globsResolved);
          if (!importGlobMaps.has(this.environment)) {
            importGlobMaps.set(this.environment, /* @__PURE__ */ new Map());
          }
          const globMatchers = allGlobs.map((globs) => {
            const affirmed = [];
            const negated = [];
            for (const glob2 of globs) {
              (glob2[0] === "!" ? negated : affirmed).push(glob2);
            }
            const affirmedMatcher = (0, import_picomatch2.default)(affirmed);
            const negatedMatcher = (0, import_picomatch2.default)(negated);
            return (file) => {
              return (affirmed.length === 0 || affirmedMatcher(file)) && !(negated.length > 0 && negatedMatcher(file));
            };
          });
          importGlobMaps.get(this.environment).set(id, globMatchers);
          return transformStableResult(result.s, id, config2);
        }
      }
    },
    hotUpdate({ type, file, modules: oldModules }) {
      if (type === "update") return;
      const importGlobMap = importGlobMaps.get(this.environment);
      if (!importGlobMap) return;
      const modules = [];
      for (const [id, globMatchers] of importGlobMap) {
        if (globMatchers.some((matcher) => matcher(file))) {
          const mod = this.environment.moduleGraph.getModuleById(id);
          if (mod) modules.push(mod);
        }
      }
      return modules.length > 0 ? [...oldModules, ...modules] : void 0;
    }
  };
}
var importGlobRE = /\bimport\.meta\.glob(?:<\w+>)?\s*\(/g;
var objectKeysRE = /\bObject\.keys\(\s*$/;
var objectValuesRE = /\bObject\.values\(\s*$/;
var knownOptions = {
  as: ["string"],
  eager: ["boolean"],
  import: ["string"],
  exhaustive: ["boolean"],
  query: ["object", "string"]
};
var forceDefaultAs = ["raw", "url"];
function err$1(e2, pos) {
  const error2 = new Error(e2);
  error2.pos = pos;
  return error2;
}
function parseGlobOptions(rawOpts, optsStartIndex, logger) {
  let opts = {};
  try {
    opts = evalValue(rawOpts);
  } catch {
    throw err$1(
      "Vite is unable to parse the glob options as the value is not static",
      optsStartIndex
    );
  }
  if (opts == null) {
    return {};
  }
  for (const key in opts) {
    if (!(key in knownOptions)) {
      throw err$1(`Unknown glob option "${key}"`, optsStartIndex);
    }
    const allowedTypes = knownOptions[key];
    const valueType = typeof opts[key];
    if (!allowedTypes.includes(valueType)) {
      throw err$1(
        `Expected glob option "${key}" to be of type ${allowedTypes.join(
          " or "
        )}, but got ${valueType}`,
        optsStartIndex
      );
    }
  }
  if (typeof opts.query === "object") {
    for (const key in opts.query) {
      const value2 = opts.query[key];
      if (!["string", "number", "boolean"].includes(typeof value2)) {
        throw err$1(
          `Expected glob option "query.${key}" to be of type string, number, or boolean, but got ${typeof value2}`,
          optsStartIndex
        );
      }
    }
    opts.query = stringifyQuery(opts.query);
  }
  if (opts.as && logger) {
    const importSuggestion = forceDefaultAs.includes(opts.as) ? `, import: 'default'` : "";
    logger.warn(
      colors$1.yellow(
        `The glob option "as" has been deprecated in favour of "query". Please update \`as: '${opts.as}'\` to \`query: '?${opts.as}'${importSuggestion}\`.`
      )
    );
  }
  if (opts.as && forceDefaultAs.includes(opts.as)) {
    if (opts.import && opts.import !== "default" && opts.import !== "*")
      throw err$1(
        `Option "import" can only be "default" or "*" when "as" is "${opts.as}", but got "${opts.import}"`,
        optsStartIndex
      );
    opts.import = opts.import || "default";
  }
  if (opts.as && opts.query)
    throw err$1(
      'Options "as" and "query" cannot be used together',
      optsStartIndex
    );
  if (opts.as) opts.query = opts.as;
  if (opts.query && opts.query[0] !== "?") opts.query = `?${opts.query}`;
  return opts;
}
async function parseImportGlob(code, importer, root, resolveId, logger) {
  let cleanCode;
  try {
    cleanCode = stripLiteral(code);
  } catch {
    return [];
  }
  const matches2 = Array.from(cleanCode.matchAll(importGlobRE));
  const tasks = matches2.map(async (match, index) => {
    const start = match.index;
    const err2 = (msg) => {
      const e2 = new Error(`Invalid glob import syntax: ${msg}`);
      e2.pos = start;
      return e2;
    };
    const end = findCorrespondingCloseParenthesisPosition(
      cleanCode,
      start + match[0].length
    ) + 1;
    if (end <= 0) {
      throw err2("Close parenthesis not found");
    }
    const statementCode = code.slice(start, end);
    const rootAst = (await parseAstAsync(statementCode)).body[0];
    if (rootAst.type !== "ExpressionStatement") {
      throw err2(`Expect CallExpression, got ${rootAst.type}`);
    }
    const ast = rootAst.expression;
    if (ast.type !== "CallExpression") {
      throw err2(`Expect CallExpression, got ${ast.type}`);
    }
    if (ast.arguments.length < 1 || ast.arguments.length > 2)
      throw err2(`Expected 1-2 arguments, but got ${ast.arguments.length}`);
    const arg1 = ast.arguments[0];
    const arg2 = ast.arguments[1];
    const globs = [];
    const validateLiteral = (element) => {
      if (!element) return;
      if (element.type === "Literal") {
        if (typeof element.value !== "string")
          throw err2(
            `Expected glob to be a string, but got "${typeof element.value}"`
          );
        globs.push(element.value);
      } else if (element.type === "TemplateLiteral") {
        if (element.expressions.length !== 0) {
          throw err2(
            `Expected glob to be a string, but got dynamic template literal`
          );
        }
        globs.push(element.quasis[0].value.raw);
      } else {
        throw err2("Could only use literals");
      }
    };
    if (arg1.type === "ArrayExpression") {
      for (const element of arg1.elements) {
        validateLiteral(element);
      }
    } else {
      validateLiteral(arg1);
    }
    let options2 = {};
    if (arg2) {
      if (arg2.type !== "ObjectExpression")
        throw err2(
          `Expected the second argument to be an object literal, but got "${arg2.type}"`
        );
      options2 = parseGlobOptions(
        code.slice(start + arg2.start, start + arg2.end),
        start + arg2.start,
        logger
      );
    }
    const globsResolved = await Promise.all(
      globs.map((glob2) => toAbsoluteGlob(glob2, root, importer, resolveId))
    );
    const isRelative2 = globs.every((i) => ".!".includes(i[0]));
    const sliceCode = cleanCode.slice(0, start);
    const onlyKeys = objectKeysRE.test(sliceCode);
    let onlyValues = false;
    if (!onlyKeys) {
      onlyValues = objectValuesRE.test(sliceCode);
    }
    return {
      index,
      globs,
      globsResolved,
      isRelative: isRelative2,
      options: options2,
      start,
      end,
      onlyKeys,
      onlyValues
    };
  });
  return (await Promise.all(tasks)).filter(Boolean);
}
function findCorrespondingCloseParenthesisPosition(cleanCode, openPos) {
  const closePos = cleanCode.indexOf(")", openPos);
  if (closePos < 0) return -1;
  if (!cleanCode.slice(openPos, closePos).includes("(")) return closePos;
  let remainingParenthesisCount = 0;
  const cleanCodeLen = cleanCode.length;
  for (let pos = openPos; pos < cleanCodeLen; pos++) {
    switch (cleanCode[pos]) {
      case "(": {
        remainingParenthesisCount++;
        break;
      }
      case ")": {
        remainingParenthesisCount--;
        if (remainingParenthesisCount <= 0) {
          return pos;
        }
      }
    }
  }
  return -1;
}
var importPrefix = "__vite_glob_";
var { basename, dirname: dirname2, relative } = import_node_path3.posix;
async function transformGlobImport(code, id, root, resolveId, restoreQueryExtension = false, logger) {
  id = slash$1(id);
  root = slash$1(root);
  const isVirtual = isVirtualModule(id);
  const dir = isVirtual ? void 0 : dirname2(id);
  const matches2 = await parseImportGlob(
    code,
    isVirtual ? void 0 : id,
    root,
    resolveId,
    logger
  );
  const matchedFiles = /* @__PURE__ */ new Set();
  if (!matches2.length) return null;
  const s2 = new MagicString(code);
  const staticImports = (await Promise.all(
    matches2.map(
      async ({
        globsResolved,
        isRelative: isRelative2,
        options: options2,
        index,
        start,
        end,
        onlyKeys,
        onlyValues
      }) => {
        var _a2;
        const cwd2 = getCommonBase(globsResolved) ?? root;
        const files = (await glob(globsResolved, {
          absolute: true,
          cwd: cwd2,
          dot: !!options2.exhaustive,
          expandDirectories: false,
          ignore: options2.exhaustive ? [] : ["**/node_modules/**"]
        })).filter((file) => file !== id).sort();
        const objectProps = [];
        const staticImports2 = [];
        const resolvePaths = (file) => {
          if (!dir) {
            if (isRelative2)
              throw new Error(
                "In virtual modules, all globs must start with '/'"
              );
            const filePath2 = `/${relative(root, file)}`;
            return { filePath: filePath2, importPath: filePath2 };
          }
          let importPath = relative(dir, file);
          if (importPath[0] !== ".") importPath = `./${importPath}`;
          let filePath;
          if (isRelative2) {
            filePath = importPath;
          } else {
            filePath = relative(root, file);
            if (filePath[0] !== ".") filePath = `/${filePath}`;
          }
          return { filePath, importPath };
        };
        files.forEach((file, i) => {
          const paths = resolvePaths(file);
          const filePath = paths.filePath;
          let importPath = paths.importPath;
          let importQuery = options2.query ?? "";
          if (onlyKeys) {
            objectProps.push(`${JSON.stringify(filePath)}: 0`);
            return;
          }
          if (importQuery && importQuery !== "?raw") {
            const fileExtension = basename(file).split(".").slice(-1)[0];
            if (fileExtension && restoreQueryExtension)
              importQuery = `${importQuery}&lang.${fileExtension}`;
          }
          importPath = `${importPath}${importQuery}`;
          const importKey = options2.import && options2.import !== "*" ? options2.import : void 0;
          if (options2.eager) {
            const variableName = `${importPrefix}${index}_${i}`;
            const expression = importKey ? `{ ${importKey} as ${variableName} }` : `* as ${variableName}`;
            staticImports2.push(
              `import ${expression} from ${JSON.stringify(importPath)}`
            );
            objectProps.push(
              onlyValues ? `${variableName}` : `${JSON.stringify(filePath)}: ${variableName}`
            );
          } else {
            let importStatement = `import(${JSON.stringify(importPath)})`;
            if (importKey)
              importStatement += `.then(m => m[${JSON.stringify(importKey)}])`;
            objectProps.push(
              onlyValues ? `() => ${importStatement}` : `${JSON.stringify(filePath)}: () => ${importStatement}`
            );
          }
        });
        files.forEach((i) => matchedFiles.add(i));
        const originalLineBreakCount = ((_a2 = code.slice(start, end).match(/\n/g)) == null ? void 0 : _a2.length) ?? 0;
        const lineBreaks = originalLineBreakCount > 0 ? "\n".repeat(originalLineBreakCount) : "";
        let replacement = "";
        if (onlyKeys) {
          replacement = `{${objectProps.join(",")}${lineBreaks}}`;
        } else if (onlyValues) {
          replacement = `[${objectProps.join(",")}${lineBreaks}]`;
        } else {
          replacement = `/* #__PURE__ */ Object.assign({${objectProps.join(
            ","
          )}${lineBreaks}})`;
        }
        s2.overwrite(start, end, replacement);
        return staticImports2;
      }
    )
  )).flat();
  if (staticImports.length) s2.prepend(`${staticImports.join(";")};`);
  return {
    s: s2,
    matches: matches2,
    files: matchedFiles
  };
}
function globSafePath(path4) {
  return escapePath(normalizePath$3(path4));
}
function lastNthChar(str, n2) {
  return str.charAt(str.length - 1 - n2);
}
function globSafeResolvedPath(resolved, glob2) {
  let numEqual = 0;
  const maxEqual = Math.min(resolved.length, glob2.length);
  while (numEqual < maxEqual && lastNthChar(resolved, numEqual) === lastNthChar(glob2, numEqual)) {
    numEqual += 1;
  }
  const staticPartEnd = resolved.length - numEqual;
  const staticPart = resolved.slice(0, staticPartEnd);
  const dynamicPart = resolved.slice(staticPartEnd);
  return globSafePath(staticPart) + dynamicPart;
}
async function toAbsoluteGlob(glob2, root, importer, resolveId) {
  let pre = "";
  if (glob2[0] === "!") {
    pre = "!";
    glob2 = glob2.slice(1);
  }
  root = globSafePath(root);
  const dir = importer ? globSafePath(dirname2(importer)) : root;
  if (glob2[0] === "/") return pre + import_node_path3.posix.join(root, glob2.slice(1));
  if (glob2.startsWith("./")) return pre + import_node_path3.posix.join(dir, glob2.slice(2));
  if (glob2.startsWith("../")) return pre + import_node_path3.posix.join(dir, glob2);
  if (glob2.startsWith("**")) return pre + glob2;
  const isSubImportsPattern = glob2[0] === "#" && glob2.includes("*");
  const resolved = normalizePath$3(
    await resolveId(glob2, importer, {
      custom: { "vite:import-glob": { isSubImportsPattern } }
    }) || glob2
  );
  if ((0, import_node_path3.isAbsolute)(resolved)) {
    return pre + globSafeResolvedPath(resolved, glob2);
  }
  throw new Error(
    `Invalid glob: "${glob2}" (resolved: "${resolved}"). It must start with '/' or './'`
  );
}
function getCommonBase(globsResolved) {
  const bases = globsResolved.filter((g) => g[0] !== "!").map((glob2) => {
    let { base } = import_picomatch2.default.scan(glob2);
    if (import_node_path3.posix.basename(base).includes(".")) base = import_node_path3.posix.dirname(base);
    return base;
  });
  if (!bases.length) return null;
  let commonAncestor = "";
  const dirS = bases[0].split("/");
  for (let i = 0; i < dirS.length; i++) {
    const candidate = dirS.slice(0, i + 1).join("/");
    if (bases.every((base) => base.startsWith(candidate)))
      commonAncestor = candidate;
    else break;
  }
  if (!commonAncestor) commonAncestor = "/";
  return commonAncestor;
}
function isVirtualModule(id) {
  return id.startsWith("virtual:") || id[0] === "\0" || !id.includes("/");
}
var ScanEnvironment = class extends BaseEnvironment {
  constructor() {
    super(...arguments);
    __publicField(this, "mode", "scan");
    /**
     * @internal
     */
    __publicField(this, "_pluginContainer");
  }
  get pluginContainer() {
    if (!this._pluginContainer)
      throw new Error(
        `${this.name} environment.pluginContainer called before initialized`
      );
    return this._pluginContainer;
  }
  async init() {
    if (this._initiated) {
      return;
    }
    this._initiated = true;
    this._plugins = await resolveEnvironmentPlugins(this);
    this._pluginContainer = await createEnvironmentPluginContainer(
      this,
      this.plugins,
      void 0,
      false
    );
  }
};
function devToScanEnvironment(environment) {
  return {
    mode: "scan",
    get name() {
      return environment.name;
    },
    getTopLevelConfig() {
      return environment.getTopLevelConfig();
    },
    /**
     * @deprecated use environment.config instead
     **/
    get options() {
      return environment.options;
    },
    get config() {
      return environment.config;
    },
    get logger() {
      return environment.logger;
    },
    get pluginContainer() {
      return environment.pluginContainer;
    },
    get plugins() {
      return environment.plugins;
    }
  };
}
var debug$g = createDebugger("vite:deps");
var htmlTypesRE = /\.(html|vue|svelte|astro|imba)$/;
var importsRE = new RegExp(`(?<!\\/\\/.*)(?<=^|;|\\*\\/)\\s*import(?!\\s+type)(?:[\\w*{}\\n\\r\\t, ]+from)?\\s*("[^"]+"|'[^']+')\\s*(?=$|;|\\/\\/|\\/\\*)`, "gm");
function scanImports(environment) {
  const start = import_node_perf_hooks.performance.now();
  const deps = {};
  const missing = {};
  let entries;
  const { config: config2 } = environment;
  const scanContext = { cancelled: false };
  const esbuildContext = computeEntries(
    environment
  ).then((computedEntries) => {
    entries = computedEntries;
    if (!entries.length) {
      if (!config2.optimizeDeps.entries && !config2.optimizeDeps.include) {
        environment.logger.warn(
          colors$1.yellow(
            "(!) Could not auto-determine entry point from rollupOptions or html files and there are no explicit optimizeDeps.include patterns. Skipping dependency pre-bundling."
          )
        );
      }
      return;
    }
    if (scanContext.cancelled) return;
    debug$g == null ? void 0 : debug$g(
      `Crawling dependencies using entries: ${entries.map((entry) => `
  ${colors$1.dim(entry)}`).join("")}`
    );
    return prepareEsbuildScanner(
      environment,
      entries,
      deps,
      missing,
      scanContext
    );
  });
  const result = esbuildContext.then((context) => {
    function disposeContext() {
      return context == null ? void 0 : context.dispose().catch((e2) => {
        environment.logger.error("Failed to dispose esbuild context", {
          error: e2
        });
      });
    }
    if (!context || scanContext.cancelled) {
      disposeContext();
      return { deps: {}, missing: {} };
    }
    return context.rebuild().then(() => {
      return {
        // Ensure a fixed order so hashes are stable and improve logs
        deps: orderedDependencies(deps),
        missing
      };
    }).finally(() => {
      return disposeContext();
    });
  }).catch(async (e2) => {
    if (e2.errors && e2.message.includes("The build was canceled")) {
      return { deps: {}, missing: {} };
    }
    const prependMessage = colors$1.red(`  Failed to scan for dependencies from entries:
  ${entries.join("\n")}

  `);
    if (e2.errors) {
      const msgs = await (0, import_esbuild.formatMessages)(e2.errors, {
        kind: "error",
        color: true
      });
      e2.message = prependMessage + msgs.join("\n");
    } else {
      e2.message = prependMessage + e2.message;
    }
    throw e2;
  }).finally(() => {
    if (debug$g) {
      const duration = (import_node_perf_hooks.performance.now() - start).toFixed(2);
      const depsStr = Object.keys(orderedDependencies(deps)).sort().map((id) => `
  ${colors$1.cyan(id)} -> ${colors$1.dim(deps[id])}`).join("") || colors$1.dim("no dependencies found");
      debug$g(`Scan completed in ${duration}ms: ${depsStr}`);
    }
  });
  return {
    cancel: async () => {
      scanContext.cancelled = true;
      return esbuildContext.then((context) => context == null ? void 0 : context.cancel());
    },
    result
  };
}
async function computeEntries(environment) {
  let entries = [];
  const explicitEntryPatterns = environment.config.optimizeDeps.entries;
  const buildInput = environment.config.build.rollupOptions.input;
  if (explicitEntryPatterns) {
    entries = await globEntries(explicitEntryPatterns, environment);
  } else if (buildInput) {
    const resolvePath = async (p2) => {
      var _a2;
      const id = (_a2 = await environment.pluginContainer.resolveId(p2, void 0, {
        scan: true
      })) == null ? void 0 : _a2.id;
      if (id === void 0) {
        throw new Error(
          `failed to resolve rollupOptions.input value: ${JSON.stringify(p2)}.`
        );
      }
      return id;
    };
    if (typeof buildInput === "string") {
      entries = [await resolvePath(buildInput)];
    } else if (Array.isArray(buildInput)) {
      entries = await Promise.all(buildInput.map(resolvePath));
    } else if (isObject$1(buildInput)) {
      entries = await Promise.all(Object.values(buildInput).map(resolvePath));
    } else {
      throw new Error("invalid rollupOptions.input value.");
    }
  } else {
    entries = await globEntries("**/*.html", environment);
  }
  entries = entries.filter(
    (entry) => isScannable(entry, environment.config.optimizeDeps.extensions) && import_node_fs2.default.existsSync(entry)
  );
  return entries;
}
async function prepareEsbuildScanner(environment, entries, deps, missing, scanContext) {
  var _a2;
  if (scanContext.cancelled) return;
  const plugin = esbuildScanPlugin(environment, deps, missing, entries);
  const { plugins: plugins2 = [], ...esbuildOptions } = environment.config.optimizeDeps.esbuildOptions ?? {};
  let tsconfigRaw = esbuildOptions.tsconfigRaw;
  if (!tsconfigRaw && !esbuildOptions.tsconfig) {
    const { tsconfig } = await loadTsconfigJsonForFile(
      import_node_path3.default.join(environment.config.root, "_dummy.js")
    );
    if ((_a2 = tsconfig.compilerOptions) == null ? void 0 : _a2.experimentalDecorators) {
      tsconfigRaw = { compilerOptions: { experimentalDecorators: true } };
    }
  }
  return await import_esbuild.default.context({
    absWorkingDir: process.cwd(),
    write: false,
    stdin: {
      contents: entries.map((e2) => `import ${JSON.stringify(e2)}`).join("\n"),
      loader: "js"
    },
    bundle: true,
    format: "esm",
    logLevel: "silent",
    plugins: [...plugins2, plugin],
    ...esbuildOptions,
    tsconfigRaw
  });
}
function orderedDependencies(deps) {
  const depsList = Object.entries(deps);
  depsList.sort((a, b) => a[0].localeCompare(b[0]));
  return Object.fromEntries(depsList);
}
function globEntries(pattern, environment) {
  const resolvedPatterns = arraify(pattern);
  if (resolvedPatterns.every((str) => !isDynamicPattern(str))) {
    return resolvedPatterns.map(
      (p2) => normalizePath$3(import_node_path3.default.resolve(environment.config.root, p2))
    );
  }
  return glob(pattern, {
    absolute: true,
    cwd: environment.config.root,
    ignore: [
      "**/node_modules/**",
      `**/${environment.config.build.outDir}/**`,
      // if there aren't explicit entries, also ignore other common folders
      ...environment.config.optimizeDeps.entries ? [] : [`**/__tests__/**`, `**/coverage/**`]
    ]
  });
}
var scriptRE = /(<script(?:\s+[a-z_:][-\w:]*(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^"'<>=\s]+))?)*\s*>)(.*?)<\/script>/gis;
var commentRE$1 = /<!--.*?-->/gs;
var srcRE = /\bsrc\s*=\s*(?:"([^"]+)"|'([^']+)'|([^\s'">]+))/i;
var typeRE = /\btype\s*=\s*(?:"([^"]+)"|'([^']+)'|([^\s'">]+))/i;
var langRE = /\blang\s*=\s*(?:"([^"]+)"|'([^']+)'|([^\s'">]+))/i;
var svelteScriptModuleRE = /\bcontext\s*=\s*(?:"([^"]+)"|'([^']+)'|([^\s'">]+))/i;
var svelteModuleRE = /\smodule\b/i;
function esbuildScanPlugin(environment, depImports, missing, entries) {
  const seen2 = /* @__PURE__ */ new Map();
  async function resolveId(id, importer) {
    return environment.pluginContainer.resolveId(
      id,
      importer && normalizePath$3(importer),
      { scan: true }
    );
  }
  const resolve4 = async (id, importer) => {
    const key = id + (importer && import_node_path3.default.dirname(importer));
    if (seen2.has(key)) {
      return seen2.get(key);
    }
    const resolved = await resolveId(id, importer);
    const res = resolved == null ? void 0 : resolved.id;
    seen2.set(key, res);
    return res;
  };
  const optimizeDepsOptions = environment.config.optimizeDeps;
  const include = optimizeDepsOptions.include;
  const exclude = [
    ...optimizeDepsOptions.exclude ?? [],
    "@vite/client",
    "@vite/env"
  ];
  const isUnlessEntry = (path22) => !entries.includes(path22);
  const externalUnlessEntry = ({ path: path22 }) => ({
    path: path22,
    external: isUnlessEntry(path22)
  });
  const doTransformGlobImport = async (contents, id, loader2) => {
    let transpiledContents;
    if (loader2 !== "js") {
      transpiledContents = (await (0, import_esbuild.transform)(contents, { loader: loader2 })).code;
    } else {
      transpiledContents = contents;
    }
    const result = await transformGlobImport(
      transpiledContents,
      id,
      environment.config.root,
      resolve4
    );
    return (result == null ? void 0 : result.s.toString()) || transpiledContents;
  };
  return {
    name: "vite:dep-scan",
    setup(build2) {
      const scripts = {};
      build2.onResolve({ filter: externalRE }, ({ path: path22 }) => ({
        path: path22,
        external: true
      }));
      build2.onResolve({ filter: dataUrlRE }, ({ path: path22 }) => ({
        path: path22,
        external: true
      }));
      build2.onResolve({ filter: virtualModuleRE }, ({ path: path22 }) => {
        return {
          // strip prefix to get valid filesystem path so esbuild can resolve imports in the file
          path: path22.replace(virtualModulePrefix, ""),
          namespace: "script"
        };
      });
      build2.onLoad({ filter: /.*/, namespace: "script" }, ({ path: path22 }) => {
        return scripts[path22];
      });
      build2.onResolve({ filter: htmlTypesRE }, async ({ path: path22, importer }) => {
        const resolved = await resolve4(path22, importer);
        if (!resolved) return;
        if (isInNodeModules$1(resolved) && isOptimizable(resolved, optimizeDepsOptions))
          return;
        return {
          path: resolved,
          namespace: "html"
        };
      });
      const htmlTypeOnLoadCallback = async ({ path: p2 }) => {
        let raw = await import_promises.default.readFile(p2, "utf-8");
        raw = raw.replace(commentRE$1, "<!---->");
        const isHtml = p2.endsWith(".html");
        let js = "";
        let scriptId = 0;
        const matches2 = raw.matchAll(scriptRE);
        for (const [, openTag, content] of matches2) {
          const typeMatch = typeRE.exec(openTag);
          const type = typeMatch && (typeMatch[1] || typeMatch[2] || typeMatch[3]);
          const langMatch = langRE.exec(openTag);
          const lang = langMatch && (langMatch[1] || langMatch[2] || langMatch[3]);
          if (isHtml && type !== "module") {
            continue;
          }
          if (type && !(type.includes("javascript") || type.includes("ecmascript") || type === "module")) {
            continue;
          }
          let loader2 = "js";
          if (lang === "ts" || lang === "tsx" || lang === "jsx") {
            loader2 = lang;
          } else if (p2.endsWith(".astro")) {
            loader2 = "ts";
          }
          const srcMatch = srcRE.exec(openTag);
          if (srcMatch) {
            const src2 = srcMatch[1] || srcMatch[2] || srcMatch[3];
            js += `import ${JSON.stringify(src2)}
`;
          } else if (content.trim()) {
            const contents = content + (loader2.startsWith("ts") ? extractImportPaths(content) : "");
            const key = `${p2}?id=${scriptId++}`;
            if (contents.includes("import.meta.glob")) {
              scripts[key] = {
                loader: "js",
                // since it is transpiled
                contents: await doTransformGlobImport(contents, p2, loader2),
                resolveDir: normalizePath$3(import_node_path3.default.dirname(p2)),
                pluginData: {
                  htmlType: { loader: loader2 }
                }
              };
            } else {
              scripts[key] = {
                loader: loader2,
                contents,
                resolveDir: normalizePath$3(import_node_path3.default.dirname(p2)),
                pluginData: {
                  htmlType: { loader: loader2 }
                }
              };
            }
            const virtualModulePath = JSON.stringify(virtualModulePrefix + key);
            let addedImport = false;
            if (p2.endsWith(".svelte")) {
              let isModule = svelteModuleRE.test(openTag);
              if (!isModule) {
                const contextMatch = svelteScriptModuleRE.exec(openTag);
                const context = contextMatch && (contextMatch[1] || contextMatch[2] || contextMatch[3]);
                isModule = context === "module";
              }
              if (!isModule) {
                addedImport = true;
                js += `import ${virtualModulePath}
`;
              }
            }
            if (!addedImport) {
              js += `export * from ${virtualModulePath}
`;
            }
          }
        }
        if (!p2.endsWith(".vue") || !js.includes("export default")) {
          js += "\nexport default {}";
        }
        return {
          loader: "js",
          contents: js
        };
      };
      build2.onLoad(
        { filter: htmlTypesRE, namespace: "html" },
        htmlTypeOnLoadCallback
      );
      build2.onLoad(
        { filter: htmlTypesRE, namespace: "file" },
        htmlTypeOnLoadCallback
      );
      build2.onResolve(
        {
          // avoid matching windows volume
          filter: /^[\w@][^:]/
        },
        async ({ path: id, importer }) => {
          if (moduleListContains(exclude, id)) {
            return externalUnlessEntry({ path: id });
          }
          if (depImports[id]) {
            return externalUnlessEntry({ path: id });
          }
          const resolved = await resolve4(id, importer);
          if (resolved) {
            if (shouldExternalizeDep(resolved, id)) {
              return externalUnlessEntry({ path: id });
            }
            if (isInNodeModules$1(resolved) || (include == null ? void 0 : include.includes(id))) {
              if (isOptimizable(resolved, optimizeDepsOptions)) {
                depImports[id] = resolved;
              }
              return externalUnlessEntry({ path: id });
            } else if (isScannable(resolved, optimizeDepsOptions.extensions)) {
              const namespace = htmlTypesRE.test(resolved) ? "html" : void 0;
              return {
                path: import_node_path3.default.resolve(resolved),
                namespace
              };
            } else {
              return externalUnlessEntry({ path: id });
            }
          } else {
            missing[id] = normalizePath$3(importer);
          }
        }
      );
      const setupExternalize = (filter2, doExternalize) => {
        build2.onResolve({ filter: filter2 }, ({ path: path22 }) => {
          return {
            path: path22,
            external: doExternalize(path22)
          };
        });
      };
      setupExternalize(CSS_LANGS_RE, isUnlessEntry);
      setupExternalize(/\.(json|json5|wasm)$/, isUnlessEntry);
      setupExternalize(
        new RegExp(`\\.(${KNOWN_ASSET_TYPES.join("|")})$`),
        isUnlessEntry
      );
      setupExternalize(SPECIAL_QUERY_RE, () => true);
      build2.onResolve(
        {
          filter: /.*/
        },
        async ({ path: id, importer }) => {
          const resolved = await resolve4(id, importer);
          if (resolved) {
            if (shouldExternalizeDep(resolved, id) || !isScannable(resolved, optimizeDepsOptions.extensions)) {
              return externalUnlessEntry({ path: id });
            }
            const namespace = htmlTypesRE.test(resolved) ? "html" : void 0;
            return {
              path: import_node_path3.default.resolve(cleanUrl2(resolved)),
              namespace
            };
          } else {
            return externalUnlessEntry({ path: id });
          }
        }
      );
      build2.onLoad({ filter: JS_TYPES_RE }, async ({ path: id }) => {
        var _a2, _b;
        let ext = import_node_path3.default.extname(id).slice(1);
        if (ext === "mjs") ext = "js";
        const esbuildConfig = environment.config.esbuild;
        let contents = await import_promises.default.readFile(id, "utf-8");
        if (ext.endsWith("x") && esbuildConfig && esbuildConfig.jsxInject) {
          contents = esbuildConfig.jsxInject + `
` + contents;
        }
        const loader2 = ((_b = (_a2 = optimizeDepsOptions.esbuildOptions) == null ? void 0 : _a2.loader) == null ? void 0 : _b[`.${ext}`]) ?? ext;
        if (contents.includes("import.meta.glob")) {
          return {
            loader: "js",
            // since it is transpiled,
            contents: await doTransformGlobImport(contents, id, loader2)
          };
        }
        return {
          loader: loader2,
          contents
        };
      });
      build2.onLoad({ filter: /.*/, namespace: "file" }, () => {
        return {
          loader: "js",
          contents: "export default {}"
        };
      });
    }
  };
}
function extractImportPaths(code) {
  code = code.replace(multilineCommentsRE, "/* */").replace(singlelineCommentsRE, "");
  let js = "";
  let m2;
  importsRE.lastIndex = 0;
  while ((m2 = importsRE.exec(code)) != null) {
    js += `
import ${m2[1]}`;
  }
  return js;
}
function shouldExternalizeDep(resolvedId, rawId) {
  if (!import_node_path3.default.isAbsolute(resolvedId)) {
    return true;
  }
  if (resolvedId === rawId || resolvedId.includes("\0")) {
    return true;
  }
  return false;
}
function isScannable(id, extensions2) {
  return JS_TYPES_RE.test(id) || htmlTypesRE.test(id) || (extensions2 == null ? void 0 : extensions2.includes(import_node_path3.default.extname(id))) || false;
}
function createOptimizeDepsIncludeResolver(environment) {
  const topLevelConfig = environment.getTopLevelConfig();
  const resolve4 = createBackCompatIdResolver(topLevelConfig, {
    asSrc: false,
    scan: true,
    packageCache: /* @__PURE__ */ new Map()
  });
  return async (id) => {
    const lastArrowIndex = id.lastIndexOf(">");
    if (lastArrowIndex === -1) {
      return await resolve4(environment, id, void 0);
    }
    const nestedRoot = id.substring(0, lastArrowIndex).trim();
    const nestedPath = id.substring(lastArrowIndex + 1).trim();
    const basedir = nestedResolveBasedir(
      nestedRoot,
      topLevelConfig.root,
      topLevelConfig.resolve.preserveSymlinks
    );
    return await resolve4(
      environment,
      nestedPath,
      import_node_path3.default.resolve(basedir, "package.json")
    );
  };
}
function expandGlobIds(id, config2) {
  const pkgName = getNpmPackageName(id);
  if (!pkgName) return [];
  const pkgData = resolvePackageData(
    pkgName,
    config2.root,
    config2.resolve.preserveSymlinks,
    config2.packageCache
  );
  if (!pkgData) return [];
  const pattern = "." + id.slice(pkgName.length);
  const exports = pkgData.data.exports;
  if (exports) {
    if (typeof exports === "string" || Array.isArray(exports)) {
      return [pkgName];
    }
    const possibleExportPaths = [];
    for (const key in exports) {
      if (key[0] === ".") {
        if (key.includes("*")) {
          const exportsValue = getFirstExportStringValue(exports[key]);
          if (!exportsValue) continue;
          const exportValuePattern = exportsValue.replace(/\*/g, "**/*");
          const exportsValueGlobRe = new RegExp(
            exportsValue.split("*").map(escapeRegex).join("(.*)")
          );
          possibleExportPaths.push(
            ...globSync(exportValuePattern, {
              cwd: pkgData.dir,
              expandDirectories: false,
              ignore: ["node_modules"]
            }).map((filePath) => {
              if (exportsValue.startsWith("./")) {
                filePath = "./" + filePath;
              }
              const matched2 = exportsValueGlobRe.exec(slash$1(filePath));
              if (matched2) {
                let allGlobSame = matched2.length === 2;
                if (!allGlobSame) {
                  allGlobSame = true;
                  for (let i = 2; i < matched2.length; i++) {
                    if (matched2[i] !== matched2[i - 1]) {
                      allGlobSame = false;
                      break;
                    }
                  }
                }
                if (allGlobSame) {
                  return key.replace("*", matched2[1]).slice(2);
                }
              }
              return "";
            }).filter(Boolean)
          );
        } else {
          possibleExportPaths.push(key.slice(2));
        }
      }
    }
    const isMatch2 = (0, import_picomatch2.default)(pattern);
    const matched = possibleExportPaths.filter((p2) => isMatch2(p2)).map((match) => import_node_path3.default.posix.join(pkgName, match));
    matched.unshift(pkgName);
    return matched;
  } else {
    const matched = globSync(pattern, {
      cwd: pkgData.dir,
      expandDirectories: false,
      ignore: ["node_modules"]
    }).map((match) => import_node_path3.default.posix.join(pkgName, slash$1(match)));
    matched.unshift(pkgName);
    return matched;
  }
}
function getFirstExportStringValue(obj) {
  if (typeof obj === "string") {
    return obj;
  } else if (Array.isArray(obj)) {
    return obj[0];
  } else {
    for (const key in obj) {
      return getFirstExportStringValue(obj[key]);
    }
  }
}
function nestedResolveBasedir(id, basedir, preserveSymlinks = false) {
  var _a2;
  const pkgs = id.split(">").map((pkg) => pkg.trim());
  for (const pkg of pkgs) {
    basedir = ((_a2 = resolvePackageData(pkg, basedir, preserveSymlinks)) == null ? void 0 : _a2.dir) || basedir;
  }
  return basedir;
}
var debug$f = createDebugger("vite:deps");
var jsExtensionRE = /\.js$/i;
var jsMapExtensionRE = /\.js\.map$/i;
function isDepOptimizationDisabled(optimizeDeps2) {
  var _a2;
  return optimizeDeps2.disabled === true || optimizeDeps2.disabled === "dev" || !!optimizeDeps2.noDiscovery && !((_a2 = optimizeDeps2.include) == null ? void 0 : _a2.length);
}
async function optimizeDeps(config2, force = config2.optimizeDeps.force, asCommand = false) {
  const log2 = asCommand ? config2.logger.info : debug$f;
  config2.logger.warn(
    colors$1.yellow(
      "manually calling optimizeDeps is deprecated. This is done automatically and does not need to be called manually."
    )
  );
  const environment = new ScanEnvironment("client", config2);
  await environment.init();
  const cachedMetadata = await loadCachedDepOptimizationMetadata(
    environment,
    force,
    asCommand
  );
  if (cachedMetadata) {
    return cachedMetadata;
  }
  const deps = await discoverProjectDependencies(environment).result;
  await addManuallyIncludedOptimizeDeps(environment, deps);
  const depsString = depsLogString(Object.keys(deps));
  log2 == null ? void 0 : log2(colors$1.green(`Optimizing dependencies:
  ${depsString}`));
  const depsInfo = toDiscoveredDependencies(environment, deps);
  const result = await runOptimizeDeps(environment, depsInfo).result;
  await result.commit();
  return result.metadata;
}
async function optimizeExplicitEnvironmentDeps(environment) {
  const cachedMetadata = await loadCachedDepOptimizationMetadata(
    environment,
    environment.config.optimizeDeps.force ?? false,
    false
  );
  if (cachedMetadata) {
    return cachedMetadata;
  }
  const deps = {};
  await addManuallyIncludedOptimizeDeps(environment, deps);
  const depsInfo = toDiscoveredDependencies(environment, deps);
  const result = await runOptimizeDeps(environment, depsInfo).result;
  await result.commit();
  return result.metadata;
}
function initDepsOptimizerMetadata(environment, timestamp) {
  const { lockfileHash, configHash, hash: hash2 } = getDepHash(environment);
  return {
    hash: hash2,
    lockfileHash,
    configHash,
    browserHash: getOptimizedBrowserHash(hash2, {}, timestamp),
    optimized: {},
    chunks: {},
    discovered: {},
    depInfoList: []
  };
}
function addOptimizedDepInfo(metadata, type, depInfo) {
  metadata[type][depInfo.id] = depInfo;
  metadata.depInfoList.push(depInfo);
  return depInfo;
}
var firstLoadCachedDepOptimizationMetadata = true;
async function loadCachedDepOptimizationMetadata(environment, force = environment.config.optimizeDeps.force ?? false, asCommand = false) {
  const log2 = asCommand ? environment.logger.info : debug$f;
  if (firstLoadCachedDepOptimizationMetadata) {
    firstLoadCachedDepOptimizationMetadata = false;
    setTimeout(
      () => cleanupDepsCacheStaleDirs(environment.getTopLevelConfig()),
      0
    );
  }
  const depsCacheDir = getDepsCacheDir(environment);
  if (!force) {
    let cachedMetadata;
    try {
      const cachedMetadataPath = import_node_path3.default.join(depsCacheDir, METADATA_FILENAME);
      cachedMetadata = parseDepsOptimizerMetadata(
        await import_promises.default.readFile(cachedMetadataPath, "utf-8"),
        depsCacheDir
      );
    } catch {
    }
    if (cachedMetadata) {
      if (cachedMetadata.lockfileHash !== getLockfileHash(environment)) {
        environment.logger.info(
          "Re-optimizing dependencies because lockfile has changed",
          {
            timestamp: true
          }
        );
      } else if (cachedMetadata.configHash !== getConfigHash(environment)) {
        environment.logger.info(
          "Re-optimizing dependencies because vite config has changed",
          {
            timestamp: true
          }
        );
      } else {
        log2 == null ? void 0 : log2(
          `(${environment.name}) Hash is consistent. Skipping. Use --force to override.`
        );
        return cachedMetadata;
      }
    }
  } else {
    environment.logger.info("Forced re-optimization of dependencies", {
      timestamp: true
    });
  }
  debug$f == null ? void 0 : debug$f(
    `(${environment.name}) ${colors$1.green(`removing old cache dir ${depsCacheDir}`)}`
  );
  await import_promises.default.rm(depsCacheDir, { recursive: true, force: true });
}
function discoverProjectDependencies(environment) {
  const { cancel, result } = scanImports(environment);
  return {
    cancel,
    result: result.then(({ deps, missing }) => {
      const missingIds = Object.keys(missing);
      if (missingIds.length) {
        throw new Error(
          `The following dependencies are imported but could not be resolved:

  ${missingIds.map(
            (id) => `${colors$1.cyan(id)} ${colors$1.white(
              colors$1.dim(`(imported by ${missing[id]})`)
            )}`
          ).join(`
  `)}

Are they installed?`
        );
      }
      return deps;
    })
  };
}
function toDiscoveredDependencies(environment, deps, timestamp) {
  const browserHash = getOptimizedBrowserHash(
    getDepHash(environment).hash,
    deps,
    timestamp
  );
  const discovered = {};
  for (const id in deps) {
    const src2 = deps[id];
    discovered[id] = {
      id,
      file: getOptimizedDepPath(environment, id),
      src: src2,
      browserHash,
      exportsData: extractExportsData(environment, src2)
    };
  }
  return discovered;
}
function depsLogString(qualifiedIds) {
  return colors$1.yellow(qualifiedIds.join(`, `));
}
function runOptimizeDeps(environment, depsInfo) {
  const optimizerContext = { cancelled: false };
  const depsCacheDir = getDepsCacheDir(environment);
  const processingCacheDir = getProcessingDepsCacheDir(environment);
  import_node_fs2.default.mkdirSync(processingCacheDir, { recursive: true });
  debug$f == null ? void 0 : debug$f(colors$1.green(`creating package.json in ${processingCacheDir}`));
  import_node_fs2.default.writeFileSync(
    import_node_path3.default.resolve(processingCacheDir, "package.json"),
    `{
  "type": "module"
}
`
  );
  const metadata = initDepsOptimizerMetadata(environment);
  metadata.browserHash = getOptimizedBrowserHash(
    metadata.hash,
    depsFromOptimizedDepInfo(depsInfo)
  );
  const qualifiedIds = Object.keys(depsInfo);
  let cleaned = false;
  let committed = false;
  const cleanUp = () => {
    if (!cleaned && !committed) {
      cleaned = true;
      debug$f == null ? void 0 : debug$f(colors$1.green(`removing cache dir ${processingCacheDir}`));
      try {
        import_node_fs2.default.rmSync(processingCacheDir, { recursive: true, force: true });
      } catch {
      }
    }
  };
  const successfulResult = {
    metadata,
    cancel: cleanUp,
    commit: async () => {
      if (cleaned) {
        throw new Error(
          "Can not commit a Deps Optimization run as it was cancelled"
        );
      }
      committed = true;
      const dataPath = import_node_path3.default.join(processingCacheDir, METADATA_FILENAME);
      debug$f == null ? void 0 : debug$f(
        colors$1.green(`creating ${METADATA_FILENAME} in ${processingCacheDir}`)
      );
      import_node_fs2.default.writeFileSync(
        dataPath,
        stringifyDepsOptimizerMetadata(metadata, depsCacheDir)
      );
      const temporaryPath = depsCacheDir + getTempSuffix();
      const depsCacheDirPresent = import_node_fs2.default.existsSync(depsCacheDir);
      if (isWindows$3) {
        if (depsCacheDirPresent) {
          debug$f == null ? void 0 : debug$f(colors$1.green(`renaming ${depsCacheDir} to ${temporaryPath}`));
          await safeRename(depsCacheDir, temporaryPath);
        }
        debug$f == null ? void 0 : debug$f(
          colors$1.green(`renaming ${processingCacheDir} to ${depsCacheDir}`)
        );
        await safeRename(processingCacheDir, depsCacheDir);
      } else {
        if (depsCacheDirPresent) {
          debug$f == null ? void 0 : debug$f(colors$1.green(`renaming ${depsCacheDir} to ${temporaryPath}`));
          import_node_fs2.default.renameSync(depsCacheDir, temporaryPath);
        }
        debug$f == null ? void 0 : debug$f(
          colors$1.green(`renaming ${processingCacheDir} to ${depsCacheDir}`)
        );
        import_node_fs2.default.renameSync(processingCacheDir, depsCacheDir);
      }
      if (depsCacheDirPresent) {
        debug$f == null ? void 0 : debug$f(colors$1.green(`removing cache temp dir ${temporaryPath}`));
        import_promises.default.rm(temporaryPath, { recursive: true, force: true });
      }
    }
  };
  if (!qualifiedIds.length) {
    return {
      cancel: async () => cleanUp(),
      result: Promise.resolve(successfulResult)
    };
  }
  const cancelledResult = {
    metadata,
    commit: async () => cleanUp(),
    cancel: cleanUp
  };
  const start = import_node_perf_hooks.performance.now();
  const preparedRun = prepareEsbuildOptimizerRun(
    environment,
    depsInfo,
    processingCacheDir,
    optimizerContext
  );
  const runResult = preparedRun.then(({ context, idToExports }) => {
    function disposeContext() {
      return context == null ? void 0 : context.dispose().catch((e2) => {
        environment.logger.error("Failed to dispose esbuild context", {
          error: e2
        });
      });
    }
    if (!context || optimizerContext.cancelled) {
      disposeContext();
      return cancelledResult;
    }
    return context.rebuild().then((result) => {
      const meta = result.metafile;
      const processingCacheDirOutputPath = import_node_path3.default.relative(
        process.cwd(),
        processingCacheDir
      );
      for (const id in depsInfo) {
        const output = esbuildOutputFromId(
          meta.outputs,
          id,
          processingCacheDir
        );
        const { exportsData, ...info } = depsInfo[id];
        addOptimizedDepInfo(metadata, "optimized", {
          ...info,
          // We only need to hash the output.imports in to check for stability, but adding the hash
          // and file path gives us a unique hash that may be useful for other things in the future
          fileHash: getHash(
            metadata.hash + depsInfo[id].file + JSON.stringify(output.imports)
          ),
          browserHash: metadata.browserHash,
          // After bundling we have more information and can warn the user about legacy packages
          // that require manual configuration
          needsInterop: needsInterop(
            environment,
            id,
            idToExports[id],
            output
          )
        });
      }
      for (const o2 of Object.keys(meta.outputs)) {
        if (!jsMapExtensionRE.test(o2)) {
          const id = import_node_path3.default.relative(processingCacheDirOutputPath, o2).replace(jsExtensionRE, "");
          const file = getOptimizedDepPath(environment, id);
          if (!findOptimizedDepInfoInRecord(
            metadata.optimized,
            (depInfo) => depInfo.file === file
          )) {
            addOptimizedDepInfo(metadata, "chunks", {
              id,
              file,
              needsInterop: false,
              browserHash: metadata.browserHash
            });
          }
        } else {
          const output = meta.outputs[o2];
          if (output.bytes === 93) {
            const jsMapPath = import_node_path3.default.resolve(o2);
            const jsPath = jsMapPath.slice(0, -4);
            if (import_node_fs2.default.existsSync(jsPath) && import_node_fs2.default.existsSync(jsMapPath)) {
              const map2 = JSON.parse(import_node_fs2.default.readFileSync(jsMapPath, "utf-8"));
              if (map2.sources.length === 0) {
                const js = import_node_fs2.default.readFileSync(jsPath, "utf-8");
                import_node_fs2.default.writeFileSync(
                  jsPath,
                  js.slice(0, js.lastIndexOf("//# sourceMappingURL="))
                );
              }
            }
          }
        }
      }
      debug$f == null ? void 0 : debug$f(
        `Dependencies bundled in ${(import_node_perf_hooks.performance.now() - start).toFixed(2)}ms`
      );
      return successfulResult;
    }).catch((e2) => {
      if (e2.errors && e2.message.includes("The build was canceled")) {
        return cancelledResult;
      }
      throw e2;
    }).finally(() => {
      return disposeContext();
    });
  });
  runResult.catch(() => {
    cleanUp();
  });
  return {
    async cancel() {
      optimizerContext.cancelled = true;
      const { context } = await preparedRun;
      await (context == null ? void 0 : context.cancel());
      cleanUp();
    },
    result: runResult
  };
}
async function prepareEsbuildOptimizerRun(environment, depsInfo, processingCacheDir, optimizerContext) {
  var _a2;
  const flatIdDeps = {};
  const idToExports = {};
  const { optimizeDeps: optimizeDeps2 } = environment.config;
  const { plugins: pluginsFromConfig = [], ...esbuildOptions } = optimizeDeps2.esbuildOptions ?? {};
  await Promise.all(
    Object.keys(depsInfo).map(async (id) => {
      var _a3;
      const src2 = depsInfo[id].src;
      const exportsData = await (depsInfo[id].exportsData ?? extractExportsData(environment, src2));
      if (exportsData.jsxLoader && !((_a3 = esbuildOptions.loader) == null ? void 0 : _a3[".js"])) {
        esbuildOptions.loader = {
          ".js": "jsx",
          ...esbuildOptions.loader
        };
      }
      const flatId = flattenId(id);
      flatIdDeps[flatId] = src2;
      idToExports[id] = exportsData;
    })
  );
  if (optimizerContext.cancelled) return { context: void 0, idToExports };
  const define = {
    "process.env.NODE_ENV": environment.config.keepProcessEnv ? (
      // define process.env.NODE_ENV even for keepProcessEnv === true
      // as esbuild will replace it automatically when `platform` is `'browser'`
      "process.env.NODE_ENV"
    ) : JSON.stringify("development")
  };
  const platform2 = ((_a2 = optimizeDeps2.esbuildOptions) == null ? void 0 : _a2.platform) ?? // We generally don't want to use platform 'neutral', as esbuild has custom handling
  // when the platform is 'node' or 'browser' that can't be emulated by using mainFields
  // and conditions
  (environment.config.consumer === "client" || environment.config.ssr.target === "webworker" ? "browser" : "node");
  const external = [...optimizeDeps2.exclude ?? []];
  const plugins2 = [...pluginsFromConfig];
  if (external.length) {
    plugins2.push(esbuildCjsExternalPlugin(external, platform2));
  }
  plugins2.push(esbuildDepPlugin(environment, flatIdDeps, external));
  const context = await import_esbuild.default.context({
    absWorkingDir: process.cwd(),
    entryPoints: Object.keys(flatIdDeps),
    bundle: true,
    platform: platform2,
    define,
    format: "esm",
    // See https://github.com/evanw/esbuild/issues/1921#issuecomment-1152991694
    banner: platform2 === "node" ? {
      js: `import { createRequire } from 'module';const require = createRequire(import.meta.url);`
    } : void 0,
    target: ESBUILD_MODULES_TARGET,
    external,
    logLevel: "error",
    splitting: true,
    sourcemap: true,
    outdir: processingCacheDir,
    ignoreAnnotations: true,
    metafile: true,
    plugins: plugins2,
    charset: "utf8",
    ...esbuildOptions,
    supported: {
      ...defaultEsbuildSupported,
      ...esbuildOptions.supported
    }
  });
  return { context, idToExports };
}
async function addManuallyIncludedOptimizeDeps(environment, deps) {
  const { logger } = environment;
  const { optimizeDeps: optimizeDeps2 } = environment.config;
  const optimizeDepsInclude = optimizeDeps2.include ?? [];
  if (optimizeDepsInclude.length) {
    const unableToOptimize = (id, msg) => {
      if (optimizeDepsInclude.includes(id)) {
        logger.warn(
          `${msg}: ${colors$1.cyan(id)}, present in ${environment.name} 'optimizeDeps.include'`
        );
      }
    };
    const includes = [...optimizeDepsInclude];
    for (let i = 0; i < includes.length; i++) {
      const id = includes[i];
      if (isDynamicPattern(id)) {
        const globIds = expandGlobIds(id, environment.getTopLevelConfig());
        includes.splice(i, 1, ...globIds);
        i += globIds.length - 1;
      }
    }
    const resolve4 = createOptimizeDepsIncludeResolver(environment);
    for (const id of includes) {
      const normalizedId = normalizeId(id);
      if (!deps[normalizedId]) {
        const entry = await resolve4(id);
        if (entry) {
          if (isOptimizable(entry, optimizeDeps2)) {
            deps[normalizedId] = entry;
          } else {
            unableToOptimize(id, "Cannot optimize dependency");
          }
        } else {
          unableToOptimize(id, "Failed to resolve dependency");
        }
      }
    }
  }
}
function depsFromOptimizedDepInfo(depsInfo) {
  const obj = {};
  for (const key in depsInfo) {
    obj[key] = depsInfo[key].src;
  }
  return obj;
}
function getOptimizedDepPath(environment, id) {
  return normalizePath$3(
    import_node_path3.default.resolve(getDepsCacheDir(environment), flattenId(id) + ".js")
  );
}
function getDepsCacheSuffix(environment) {
  return environment.name === "client" ? "" : `_${environment.name}`;
}
function getDepsCacheDir(environment) {
  return getDepsCacheDirPrefix(environment) + getDepsCacheSuffix(environment);
}
function getProcessingDepsCacheDir(environment) {
  return getDepsCacheDirPrefix(environment) + getDepsCacheSuffix(environment) + getTempSuffix();
}
function getTempSuffix() {
  return "_temp_" + getHash(
    `${process.pid}:${Date.now().toString()}:${Math.random().toString(16).slice(2)}`
  );
}
function getDepsCacheDirPrefix(environment) {
  return normalizePath$3(import_node_path3.default.resolve(environment.config.cacheDir, "deps"));
}
function createIsOptimizedDepFile(environment) {
  const depsCacheDirPrefix = getDepsCacheDirPrefix(environment);
  return (id) => id.startsWith(depsCacheDirPrefix);
}
function createIsOptimizedDepUrl(environment) {
  const { root } = environment.config;
  const depsCacheDir = getDepsCacheDirPrefix(environment);
  const depsCacheDirRelative = normalizePath$3(import_node_path3.default.relative(root, depsCacheDir));
  const depsCacheDirPrefix = depsCacheDirRelative.startsWith("../") ? (
    // if the cache directory is outside root, the url prefix would be something
    // like '/@fs/absolute/path/to/node_modules/.vite'
    `/@fs/${removeLeadingSlash(normalizePath$3(depsCacheDir))}`
  ) : (
    // if the cache directory is inside root, the url prefix would be something
    // like '/node_modules/.vite'
    `/${depsCacheDirRelative}`
  );
  return function isOptimizedDepUrl(url2) {
    return url2.startsWith(depsCacheDirPrefix);
  };
}
function parseDepsOptimizerMetadata(jsonMetadata, depsCacheDir) {
  const { hash: hash2, lockfileHash, configHash, browserHash, optimized, chunks } = JSON.parse(jsonMetadata, (key, value2) => {
    if (key === "file" || key === "src") {
      return normalizePath$3(import_node_path3.default.resolve(depsCacheDir, value2));
    }
    return value2;
  });
  if (!chunks || Object.values(optimized).some((depInfo) => !depInfo.fileHash)) {
    return;
  }
  const metadata = {
    hash: hash2,
    lockfileHash,
    configHash,
    browserHash,
    optimized: {},
    discovered: {},
    chunks: {},
    depInfoList: []
  };
  for (const id of Object.keys(optimized)) {
    addOptimizedDepInfo(metadata, "optimized", {
      ...optimized[id],
      id,
      browserHash
    });
  }
  for (const id of Object.keys(chunks)) {
    addOptimizedDepInfo(metadata, "chunks", {
      ...chunks[id],
      id,
      browserHash,
      needsInterop: false
    });
  }
  return metadata;
}
function stringifyDepsOptimizerMetadata(metadata, depsCacheDir) {
  const { hash: hash2, configHash, lockfileHash, browserHash, optimized, chunks } = metadata;
  return JSON.stringify(
    {
      hash: hash2,
      configHash,
      lockfileHash,
      browserHash,
      optimized: Object.fromEntries(
        Object.values(optimized).map(
          ({ id, src: src2, file, fileHash, needsInterop: needsInterop2 }) => [
            id,
            {
              src: src2,
              file,
              fileHash,
              needsInterop: needsInterop2
            }
          ]
        )
      ),
      chunks: Object.fromEntries(
        Object.values(chunks).map(({ id, file }) => [id, { file }])
      )
    },
    (key, value2) => {
      if (key === "file" || key === "src") {
        return normalizePath$3(import_node_path3.default.relative(depsCacheDir, value2));
      }
      return value2;
    },
    2
  );
}
function esbuildOutputFromId(outputs, id, cacheDirOutputPath) {
  const cwd2 = process.cwd();
  const flatId = flattenId(id) + ".js";
  const normalizedOutputPath = normalizePath$3(
    import_node_path3.default.relative(cwd2, import_node_path3.default.join(cacheDirOutputPath, flatId))
  );
  const output = outputs[normalizedOutputPath];
  if (output) {
    return output;
  }
  for (const [key, value2] of Object.entries(outputs)) {
    if (normalizePath$3(import_node_path3.default.relative(cwd2, key)) === normalizedOutputPath) {
      return value2;
    }
  }
}
async function extractExportsData(environment, filePath) {
  var _a2, _b;
  await init;
  const { optimizeDeps: optimizeDeps2 } = environment.config;
  const esbuildOptions = optimizeDeps2.esbuildOptions ?? {};
  if ((_a2 = optimizeDeps2.extensions) == null ? void 0 : _a2.some((ext) => filePath.endsWith(ext))) {
    const result = await (0, import_esbuild.build)({
      ...esbuildOptions,
      entryPoints: [filePath],
      write: false,
      format: "esm"
    });
    const [, exports2, , hasModuleSyntax2] = parse$d(result.outputFiles[0].text);
    return {
      hasModuleSyntax: hasModuleSyntax2,
      exports: exports2.map((e2) => e2.n)
    };
  }
  let parseResult;
  let usedJsxLoader = false;
  const entryContent = await import_promises.default.readFile(filePath, "utf-8");
  try {
    parseResult = parse$d(entryContent);
  } catch {
    const loader2 = ((_b = esbuildOptions.loader) == null ? void 0 : _b[import_node_path3.default.extname(filePath)]) || "jsx";
    debug$f == null ? void 0 : debug$f(
      `Unable to parse: ${filePath}.
 Trying again with a ${loader2} transform.`
    );
    const transformed = await transformWithEsbuild(
      entryContent,
      filePath,
      { loader: loader2 },
      void 0,
      environment.config
    );
    parseResult = parse$d(transformed.code);
    usedJsxLoader = true;
  }
  const [, exports, , hasModuleSyntax] = parseResult;
  const exportsData = {
    hasModuleSyntax,
    exports: exports.map((e2) => e2.n),
    jsxLoader: usedJsxLoader
  };
  return exportsData;
}
function needsInterop(environment, id, exportsData, output) {
  var _a2;
  if ((_a2 = environment.config.optimizeDeps.needsInterop) == null ? void 0 : _a2.includes(id)) {
    return true;
  }
  const { hasModuleSyntax, exports } = exportsData;
  if (!hasModuleSyntax) {
    return true;
  }
  if (output) {
    const generatedExports = output.exports;
    if (isSingleDefaultExport(generatedExports) && !isSingleDefaultExport(exports)) {
      return true;
    }
  }
  return false;
}
function isSingleDefaultExport(exports) {
  return exports.length === 1 && exports[0] === "default";
}
var lockfileFormats = [
  {
    path: "node_modules/.package-lock.json",
    checkPatchesDir: "patches",
    manager: "npm"
  },
  {
    // Yarn non-PnP
    path: "node_modules/.yarn-state.yml",
    checkPatchesDir: false,
    manager: "yarn"
  },
  {
    // Yarn v3+ PnP
    path: ".pnp.cjs",
    checkPatchesDir: ".yarn/patches",
    manager: "yarn"
  },
  {
    // Yarn v2 PnP
    path: ".pnp.js",
    checkPatchesDir: ".yarn/patches",
    manager: "yarn"
  },
  {
    // yarn 1
    path: "node_modules/.yarn-integrity",
    checkPatchesDir: "patches",
    manager: "yarn"
  },
  {
    path: "node_modules/.pnpm/lock.yaml",
    // Included in lockfile
    checkPatchesDir: false,
    manager: "pnpm"
  },
  {
    path: "bun.lock",
    checkPatchesDir: "patches",
    manager: "bun"
  },
  {
    path: "bun.lockb",
    checkPatchesDir: "patches",
    manager: "bun"
  }
].sort((_, { manager }) => {
  var _a2;
  return ((_a2 = process.env.npm_config_user_agent) == null ? void 0 : _a2.startsWith(manager)) ? 1 : -1;
});
var lockfilePaths = lockfileFormats.map((l) => l.path);
function getConfigHash(environment) {
  var _a2, _b;
  const { config: config2 } = environment;
  const { optimizeDeps: optimizeDeps2 } = config2;
  const content = JSON.stringify(
    {
      define: !config2.keepProcessEnv ? "development" : null,
      root: config2.root,
      resolve: config2.resolve,
      assetsInclude: config2.assetsInclude,
      plugins: config2.plugins.map((p2) => p2.name),
      optimizeDeps: {
        include: optimizeDeps2.include ? unique(optimizeDeps2.include).sort() : void 0,
        exclude: optimizeDeps2.exclude ? unique(optimizeDeps2.exclude).sort() : void 0,
        esbuildOptions: {
          ...optimizeDeps2.esbuildOptions,
          plugins: (_b = (_a2 = optimizeDeps2.esbuildOptions) == null ? void 0 : _a2.plugins) == null ? void 0 : _b.map((p2) => p2.name)
        }
      }
    },
    (_, value2) => {
      if (typeof value2 === "function" || value2 instanceof RegExp) {
        return value2.toString();
      }
      return value2;
    }
  );
  return getHash(content);
}
function getLockfileHash(environment) {
  const lockfilePath = lookupFile(environment.config.root, lockfilePaths);
  let content = lockfilePath ? import_node_fs2.default.readFileSync(lockfilePath, "utf-8") : "";
  if (lockfilePath) {
    const normalizedLockfilePath = lockfilePath.replaceAll("\\", "/");
    const lockfileFormat = lockfileFormats.find(
      (f2) => normalizedLockfilePath.endsWith(f2.path)
    );
    if (lockfileFormat.checkPatchesDir) {
      const baseDir = lockfilePath.slice(0, -lockfileFormat.path.length);
      const fullPath = import_node_path3.default.join(
        baseDir,
        lockfileFormat.checkPatchesDir
      );
      const stat2 = tryStatSync(fullPath);
      if (stat2 == null ? void 0 : stat2.isDirectory()) {
        content += stat2.mtimeMs.toString();
      }
    }
  }
  return getHash(content);
}
function getDepHash(environment) {
  const lockfileHash = getLockfileHash(environment);
  const configHash = getConfigHash(environment);
  const hash2 = getHash(lockfileHash + configHash);
  return {
    hash: hash2,
    lockfileHash,
    configHash
  };
}
function getOptimizedBrowserHash(hash2, deps, timestamp = "") {
  return getHash(hash2 + JSON.stringify(deps) + timestamp);
}
function optimizedDepInfoFromId(metadata, id) {
  return metadata.optimized[id] || metadata.discovered[id] || metadata.chunks[id];
}
function optimizedDepInfoFromFile(metadata, file) {
  return metadata.depInfoList.find((depInfo) => depInfo.file === file);
}
function findOptimizedDepInfoInRecord(dependenciesInfo, callbackFn) {
  for (const o2 of Object.keys(dependenciesInfo)) {
    const info = dependenciesInfo[o2];
    if (callbackFn(info, o2)) {
      return info;
    }
  }
}
async function optimizedDepNeedsInterop(environment, metadata, file) {
  const depInfo = optimizedDepInfoFromFile(metadata, file);
  if ((depInfo == null ? void 0 : depInfo.src) && depInfo.needsInterop === void 0) {
    depInfo.exportsData ?? (depInfo.exportsData = extractExportsData(environment, depInfo.src));
    depInfo.needsInterop = needsInterop(
      environment,
      depInfo.id,
      await depInfo.exportsData
    );
  }
  return depInfo == null ? void 0 : depInfo.needsInterop;
}
var MAX_TEMP_DIR_AGE_MS = 24 * 60 * 60 * 1e3;
async function cleanupDepsCacheStaleDirs(config2) {
  try {
    const cacheDir = import_node_path3.default.resolve(config2.cacheDir);
    if (import_node_fs2.default.existsSync(cacheDir)) {
      const dirents = await import_promises.default.readdir(cacheDir, { withFileTypes: true });
      for (const dirent of dirents) {
        if (dirent.isDirectory() && dirent.name.includes("_temp_")) {
          const tempDirPath = import_node_path3.default.resolve(config2.cacheDir, dirent.name);
          const stats = await import_promises.default.stat(tempDirPath).catch(() => null);
          if ((stats == null ? void 0 : stats.mtime) && Date.now() - stats.mtime.getTime() > MAX_TEMP_DIR_AGE_MS) {
            debug$f == null ? void 0 : debug$f(`removing stale cache temp dir ${tempDirPath}`);
            await import_promises.default.rm(tempDirPath, { recursive: true, force: true });
          }
        }
      }
    }
  } catch (err2) {
    config2.logger.error(err2);
  }
}
var GRACEFUL_RENAME_TIMEOUT = 5e3;
var safeRename = (0, import_node_util.promisify)(function gracefulRename(from, to, cb) {
  const start = Date.now();
  let backoff = 0;
  import_node_fs2.default.rename(from, to, function CB(er) {
    if (er && (er.code === "EACCES" || er.code === "EPERM") && Date.now() - start < GRACEFUL_RENAME_TIMEOUT) {
      setTimeout(function() {
        import_node_fs2.default.stat(to, function(stater, _st) {
          if (stater && stater.code === "ENOENT") import_node_fs2.default.rename(from, to, CB);
          else CB(er);
        });
      }, backoff);
      if (backoff < 100) backoff += 10;
      return;
    }
    cb(er);
  });
});
var debug$e = createDebugger("vite:external");
var isExternalCache = /* @__PURE__ */ new WeakMap();
function shouldExternalize(environment, id, importer) {
  let isExternal2 = isExternalCache.get(environment);
  if (!isExternal2) {
    isExternal2 = createIsExternal(environment);
    isExternalCache.set(environment, isExternal2);
  }
  return isExternal2(id, importer);
}
function createIsConfiguredAsExternal(environment) {
  const { config: config2 } = environment;
  const { root, resolve: resolve4 } = config2;
  const { external, noExternal } = resolve4;
  const noExternalFilter = typeof noExternal !== "boolean" && !(Array.isArray(noExternal) && noExternal.length === 0) && createFilter$1(void 0, noExternal, { resolve: false });
  const targetConditions = resolve4.externalConditions;
  const resolveOptions = {
    ...resolve4,
    root,
    isProduction: false,
    isBuild: true,
    conditions: targetConditions
  };
  const isExternalizable = (id, importer, configuredAsExternal) => {
    if (!bareImportRE.test(id) || id.includes("\0")) {
      return false;
    }
    try {
      const resolved = tryNodeResolve(
        id,
        // Skip passing importer in build to avoid externalizing non-hoisted dependencies
        // unresolvable from root (which would be unresolvable from output bundles also)
        config2.command === "build" ? void 0 : importer,
        resolveOptions,
        void 0,
        false
      );
      if (!resolved) {
        return false;
      }
      if (!configuredAsExternal && !isInNodeModules$1(resolved.id)) {
        return false;
      }
      return canExternalizeFile(resolved.id);
    } catch {
      debug$e == null ? void 0 : debug$e(
        `Failed to node resolve "${id}". Skipping externalizing it by default.`
      );
      return false;
    }
  };
  return (id, importer) => {
    if (
      // If this id is defined as external, force it as external
      // Note that individual package entries are allowed in `external`
      external !== true && external.includes(id)
    ) {
      return true;
    }
    const pkgName = getNpmPackageName(id);
    if (!pkgName) {
      return isExternalizable(id, importer, false);
    }
    if (
      // A package name in ssr.external externalizes every
      // externalizable package entry
      external !== true && external.includes(pkgName)
    ) {
      return isExternalizable(id, importer, true);
    }
    if (typeof noExternal === "boolean") {
      return !noExternal;
    }
    if (noExternalFilter && !noExternalFilter(pkgName)) {
      return false;
    }
    return isExternalizable(id, importer, external === true);
  };
}
function createIsExternal(environment) {
  const processedIds = /* @__PURE__ */ new Map();
  const isConfiguredAsExternal = createIsConfiguredAsExternal(environment);
  return (id, importer) => {
    if (processedIds.has(id)) {
      return processedIds.get(id);
    }
    let isExternal2 = false;
    if (id[0] !== "." && !import_node_path3.default.isAbsolute(id)) {
      isExternal2 = isBuiltin(environment.config.resolve.builtins, id) || isConfiguredAsExternal(id, importer);
    }
    processedIds.set(id, isExternal2);
    return isExternal2;
  };
}
function canExternalizeFile(filePath) {
  const ext = import_node_path3.default.extname(filePath);
  return !ext || ext === ".js" || ext === ".mjs" || ext === ".cjs";
}
var normalizedClientEntry$1 = normalizePath$3(CLIENT_ENTRY);
var normalizedEnvEntry$1 = normalizePath$3(ENV_ENTRY);
var ERR_RESOLVE_PACKAGE_ENTRY_FAIL = "ERR_RESOLVE_PACKAGE_ENTRY_FAIL";
var browserExternalId = "__vite-browser-external";
var optionalPeerDepId = "__vite-optional-peer-dep";
var subpathImportsPrefix = "#";
var startsWithWordCharRE = /^\w/;
var debug$d = createDebugger("vite:resolve-details", {
  onlyWhenFocused: true
});
function resolvePlugin(resolveOptions) {
  var _a2;
  const { root, isProduction, asSrc, preferRelative = false } = resolveOptions;
  const rootInRoot = ((_a2 = tryStatSync(import_node_path3.default.join(root, root))) == null ? void 0 : _a2.isDirectory()) ?? false;
  return {
    name: "vite:resolve",
    async resolveId(id, importer, resolveOpts) {
      var _a3, _b, _c, _d, _e;
      if (id[0] === "\0" || id.startsWith("virtual:") || // When injected directly in html/client code
      id.startsWith("/virtual:")) {
        return;
      }
      const depsOptimizer = resolveOptions.optimizeDeps && this.environment.mode === "dev" ? this.environment.depsOptimizer : void 0;
      if (id.startsWith(browserExternalId)) {
        return id;
      }
      const isRequire2 = ((_b = (_a3 = resolveOpts.custom) == null ? void 0 : _a3["node-resolve"]) == null ? void 0 : _b.isRequire) ?? false;
      const currentEnvironmentOptions = this.environment.config;
      const options2 = {
        isRequire: isRequire2,
        ...currentEnvironmentOptions.resolve,
        ...resolveOptions,
        // plugin options + resolve options overrides
        scan: resolveOpts.scan ?? resolveOptions.scan
      };
      const resolvedImports = resolveSubpathImports(id, importer, options2);
      if (resolvedImports) {
        id = resolvedImports;
        if ((_d = (_c = resolveOpts.custom) == null ? void 0 : _c["vite:import-glob"]) == null ? void 0 : _d.isSubImportsPattern) {
          return normalizePath$3(import_node_path3.default.join(root, id));
        }
      }
      let res;
      if (asSrc && (depsOptimizer == null ? void 0 : depsOptimizer.isOptimizedDepUrl(id))) {
        const optimizedPath = id.startsWith(FS_PREFIX) ? fsPathFromId(id) : normalizePath$3(import_node_path3.default.resolve(root, id.slice(1)));
        return optimizedPath;
      }
      if (asSrc && id.startsWith(FS_PREFIX)) {
        res = fsPathFromId(id);
        debug$d == null ? void 0 : debug$d(`[@fs] ${colors$1.cyan(id)} -> ${colors$1.dim(res)}`);
        return ensureVersionQuery(res, id, options2, depsOptimizer);
      }
      if (asSrc && id[0] === "/" && (rootInRoot || !id.startsWith(withTrailingSlash(root)))) {
        const fsPath = import_node_path3.default.resolve(root, id.slice(1));
        if (res = tryFsResolve(fsPath, options2)) {
          debug$d == null ? void 0 : debug$d(`[url] ${colors$1.cyan(id)} -> ${colors$1.dim(res)}`);
          return ensureVersionQuery(res, id, options2, depsOptimizer);
        }
      }
      if (id[0] === "." || (preferRelative || (importer == null ? void 0 : importer.endsWith(".html"))) && startsWithWordCharRE.test(id)) {
        const basedir = importer ? import_node_path3.default.dirname(importer) : process.cwd();
        const fsPath = import_node_path3.default.resolve(basedir, id);
        const normalizedFsPath = normalizePath$3(fsPath);
        if (depsOptimizer == null ? void 0 : depsOptimizer.isOptimizedDepFile(normalizedFsPath)) {
          if (!options2.isBuild && !DEP_VERSION_RE.test(normalizedFsPath)) {
            const browserHash = (_e = optimizedDepInfoFromFile(
              depsOptimizer.metadata,
              normalizedFsPath
            )) == null ? void 0 : _e.browserHash;
            if (browserHash) {
              return injectQuery(normalizedFsPath, `v=${browserHash}`);
            }
          }
          return normalizedFsPath;
        }
        if (options2.mainFields.includes("browser") && (res = tryResolveBrowserMapping(fsPath, importer, options2, true))) {
          return res;
        }
        if (res = tryFsResolve(fsPath, options2)) {
          res = ensureVersionQuery(res, id, options2, depsOptimizer);
          debug$d == null ? void 0 : debug$d(`[relative] ${colors$1.cyan(id)} -> ${colors$1.dim(res)}`);
          if (!options2.idOnly && !options2.scan && options2.isBuild) {
            const resPkg = findNearestPackageData(
              import_node_path3.default.dirname(res),
              options2.packageCache
            );
            if (resPkg) {
              return {
                id: res,
                moduleSideEffects: resPkg.hasSideEffects(res)
              };
            }
          }
          return res;
        }
      }
      if (id.startsWith("file://")) {
        const { file, postfix } = splitFileAndPostfix(id);
        id = (0, import_node_url2.fileURLToPath)(file) + postfix;
      }
      if (isWindows$3 && id[0] === "/") {
        const basedir = importer ? import_node_path3.default.dirname(importer) : process.cwd();
        const fsPath = import_node_path3.default.resolve(basedir, id);
        if (res = tryFsResolve(fsPath, options2)) {
          debug$d == null ? void 0 : debug$d(`[drive-relative] ${colors$1.cyan(id)} -> ${colors$1.dim(res)}`);
          return ensureVersionQuery(res, id, options2, depsOptimizer);
        }
      }
      if (isNonDriveRelativeAbsolutePath(id) && (res = tryFsResolve(id, options2))) {
        debug$d == null ? void 0 : debug$d(`[fs] ${colors$1.cyan(id)} -> ${colors$1.dim(res)}`);
        return ensureVersionQuery(res, id, options2, depsOptimizer);
      }
      if (isExternalUrl(id)) {
        return options2.idOnly ? id : { id, external: true };
      }
      if (isDataUrl(id)) {
        return null;
      }
      if (bareImportRE.test(id)) {
        const external = options2.externalize && options2.isBuild && currentEnvironmentOptions.consumer === "server" && shouldExternalize(this.environment, id, importer);
        if (!external && asSrc && depsOptimizer && !options2.scan && (res = await tryOptimizedResolve(
          depsOptimizer,
          id,
          importer,
          options2.preserveSymlinks,
          options2.packageCache
        ))) {
          return res;
        }
        if (options2.mainFields.includes("browser") && (res = tryResolveBrowserMapping(
          id,
          importer,
          options2,
          false,
          external
        ))) {
          return res;
        }
        if (res = tryNodeResolve(id, importer, options2, depsOptimizer, external)) {
          return res;
        }
        if (currentEnvironmentOptions.consumer === "server" && isBuiltin(options2.builtins, id)) {
          return options2.idOnly ? id : { id, external: true, moduleSideEffects: false };
        } else if (currentEnvironmentOptions.consumer === "server" && isNodeLikeBuiltin(id)) {
          if (!(options2.external === true || options2.external.includes(id))) {
            let message = `Automatically externalized node built-in module "${id}"`;
            if (importer) {
              message += ` imported from "${import_node_path3.default.relative(
                process.cwd(),
                importer
              )}"`;
            }
            message += `. Consider adding it to environments.${this.environment.name}.external if it is intended.`;
            this.warn(message);
          }
          return options2.idOnly ? id : { id, external: true, moduleSideEffects: false };
        } else if (currentEnvironmentOptions.consumer === "client" && isNodeLikeBuiltin(id)) {
          if (options2.noExternal === true && // if both noExternal and external are true, noExternal will take the higher priority and bundle it.
          // only if the id is explicitly listed in external, we will externalize it and skip this error.
          (options2.external === true || !options2.external.includes(id))) {
            let message = `Cannot bundle built-in module "${id}"`;
            if (importer) {
              message += ` imported from "${import_node_path3.default.relative(
                process.cwd(),
                importer
              )}"`;
            }
            message += `. Consider disabling environments.${this.environment.name}.noExternal or remove the built-in dependency.`;
            this.error(message);
          }
          if (!asSrc) {
            debug$d == null ? void 0 : debug$d(
              `externalized node built-in "${id}" to empty module. (imported by: ${colors$1.white(colors$1.dim(importer))})`
            );
          } else if (isProduction) {
            this.warn(
              `Module "${id}" has been externalized for browser compatibility, imported by "${importer}". See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`
            );
          }
          return isProduction ? browserExternalId : `${browserExternalId}:${id}`;
        }
      }
      debug$d == null ? void 0 : debug$d(`[fallthrough] ${colors$1.dim(id)}`);
    },
    load: {
      handler(id) {
        if (id.startsWith(browserExternalId)) {
          if (isProduction) {
            return `export default {}`;
          } else {
            id = id.slice(browserExternalId.length + 1);
            return `  export default new Proxy({}, {
    get(_, key) {
      throw new Error(\`Module "${id}" has been externalized for browser compatibility. Cannot access "${id}.\${key}" in client code.  See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.\`)
    }
  })`;
          }
        }
        if (id.startsWith(optionalPeerDepId)) {
          if (isProduction) {
            return `export default {}`;
          } else {
            const [, peerDep, parentDep] = id.split(":");
            return `throw new Error(\`Could not resolve "${peerDep}" imported by "${parentDep}". Is it installed?\`)`;
          }
        }
      }
    }
  };
}
function resolveSubpathImports(id, importer, options2) {
  if (!importer || !id.startsWith(subpathImportsPrefix)) return;
  const basedir = import_node_path3.default.dirname(importer);
  const pkgData = findNearestPackageData(basedir, options2.packageCache);
  if (!pkgData) return;
  let { file: idWithoutPostfix, postfix } = splitFileAndPostfix(id.slice(1));
  idWithoutPostfix = "#" + idWithoutPostfix;
  let importsPath = resolveExportsOrImports(
    pkgData.data,
    idWithoutPostfix,
    options2,
    "imports"
  );
  if ((importsPath == null ? void 0 : importsPath[0]) === ".") {
    importsPath = import_node_path3.default.relative(basedir, import_node_path3.default.join(pkgData.dir, importsPath));
    if (importsPath[0] !== ".") {
      importsPath = `./${importsPath}`;
    }
  }
  return importsPath + postfix;
}
function ensureVersionQuery(resolved, id, options2, depsOptimizer) {
  if (!options2.isBuild && !options2.scan && depsOptimizer && !(resolved === normalizedClientEntry$1 || resolved === normalizedEnvEntry$1)) {
    const isNodeModule = isInNodeModules$1(id) || isInNodeModules$1(resolved);
    if (isNodeModule && !DEP_VERSION_RE.test(resolved)) {
      const versionHash = depsOptimizer.metadata.browserHash;
      if (versionHash && isOptimizable(resolved, depsOptimizer.options)) {
        resolved = injectQuery(resolved, `v=${versionHash}`);
      }
    }
  }
  return resolved;
}
function tryFsResolve(fsPath, options2, tryIndex = true, skipPackageJson = false) {
  const hashIndex = fsPath.indexOf("#");
  if (hashIndex >= 0 && isInNodeModules$1(fsPath)) {
    const queryIndex = fsPath.indexOf("?");
    if (queryIndex < 0 || queryIndex > hashIndex) {
      const file2 = queryIndex > hashIndex ? fsPath.slice(0, queryIndex) : fsPath;
      const res2 = tryCleanFsResolve(file2, options2, tryIndex, skipPackageJson);
      if (res2) return res2 + fsPath.slice(file2.length);
    }
  }
  const { file, postfix } = splitFileAndPostfix(fsPath);
  const res = tryCleanFsResolve(file, options2, tryIndex, skipPackageJson);
  if (res) return res + postfix;
}
var knownTsOutputRE = /\.(?:js|mjs|cjs|jsx)$/;
var isPossibleTsOutput = (url2) => knownTsOutputRE.test(url2);
function tryCleanFsResolve(file, options2, tryIndex = true, skipPackageJson = false) {
  const { tryPrefix, extensions: extensions2, preserveSymlinks } = options2;
  const fileResult = tryResolveRealFileOrType(file, options2.preserveSymlinks);
  if (fileResult == null ? void 0 : fileResult.path) return fileResult.path;
  let res;
  const possibleJsToTs = isPossibleTsOutput(file);
  if (possibleJsToTs || options2.extensions.length || tryPrefix) {
    const dirPath = import_node_path3.default.dirname(file);
    if (isDirectory(dirPath)) {
      if (possibleJsToTs) {
        const fileExt = import_node_path3.default.extname(file);
        const fileName = file.slice(0, -fileExt.length);
        if (res = tryResolveRealFile(
          fileName + fileExt.replace("js", "ts"),
          preserveSymlinks
        ))
          return res;
        if (fileExt === ".js" && (res = tryResolveRealFile(fileName + ".tsx", preserveSymlinks)))
          return res;
      }
      if (res = tryResolveRealFileWithExtensions(
        file,
        extensions2,
        preserveSymlinks
      ))
        return res;
      if (tryPrefix) {
        const prefixed = `${dirPath}/${options2.tryPrefix}${import_node_path3.default.basename(file)}`;
        if (res = tryResolveRealFile(prefixed, preserveSymlinks)) return res;
        if (res = tryResolveRealFileWithExtensions(
          prefixed,
          extensions2,
          preserveSymlinks
        ))
          return res;
      }
    }
  }
  if (tryIndex && (fileResult == null ? void 0 : fileResult.type) === "directory") {
    const dirPath = file;
    if (!skipPackageJson) {
      let pkgPath = `${dirPath}/package.json`;
      try {
        if (import_node_fs2.default.existsSync(pkgPath)) {
          if (!options2.preserveSymlinks) {
            pkgPath = safeRealpathSync(pkgPath);
          }
          const pkg = loadPackageData(pkgPath);
          return resolvePackageEntry(dirPath, pkg, options2);
        }
      } catch (e2) {
        if (e2.code !== ERR_RESOLVE_PACKAGE_ENTRY_FAIL && e2.code !== "ENOENT")
          throw e2;
      }
    }
    if (res = tryResolveRealFileWithExtensions(
      `${dirPath}/index`,
      extensions2,
      preserveSymlinks
    ))
      return res;
    if (tryPrefix) {
      if (res = tryResolveRealFileWithExtensions(
        `${dirPath}/${options2.tryPrefix}index`,
        extensions2,
        preserveSymlinks
      ))
        return res;
    }
  }
}
function tryNodeResolve(id, importer, options2, depsOptimizer, externalize) {
  var _a2, _b, _c, _d;
  const { root, dedupe, isBuild, preserveSymlinks, packageCache } = options2;
  const deepMatch = deepImportRE.exec(id);
  const pkgId = deepMatch ? deepMatch[1] || deepMatch[2] : cleanUrl2(id);
  let basedir;
  if (dedupe.includes(pkgId)) {
    basedir = root;
  } else if (importer && import_node_path3.default.isAbsolute(importer) && // css processing appends `*` for importer
  (importer.endsWith("*") || import_node_fs2.default.existsSync(cleanUrl2(importer)))) {
    basedir = import_node_path3.default.dirname(importer);
  } else {
    basedir = root;
  }
  const isModuleBuiltin = (id2) => isBuiltin(options2.builtins, id2);
  let selfPkg = null;
  if (!isModuleBuiltin(id) && !id.includes("\0") && bareImportRE.test(id)) {
    const selfPackageData = findNearestPackageData(basedir, packageCache);
    selfPkg = (selfPackageData == null ? void 0 : selfPackageData.data.exports) && selfPackageData.data.name === pkgId ? selfPackageData : null;
  }
  const pkg = selfPkg || resolvePackageData(pkgId, basedir, preserveSymlinks, packageCache);
  if (!pkg) {
    if (basedir !== root && // root has no peer dep
    !isModuleBuiltin(id) && !id.includes("\0") && bareImportRE.test(id)) {
      const mainPkg = (_a2 = findNearestMainPackageData(basedir, packageCache)) == null ? void 0 : _a2.data;
      if (mainPkg) {
        const pkgName = getNpmPackageName(id);
        if (pkgName != null && ((_b = mainPkg.peerDependencies) == null ? void 0 : _b[pkgName]) && ((_d = (_c = mainPkg.peerDependenciesMeta) == null ? void 0 : _c[pkgName]) == null ? void 0 : _d.optional)) {
          return {
            id: `${optionalPeerDepId}:${id}:${mainPkg.name}`
          };
        }
      }
    }
    return;
  }
  const resolveId = deepMatch ? resolveDeepImport : resolvePackageEntry;
  const unresolvedId = deepMatch ? "." + id.slice(pkgId.length) : id;
  let resolved = resolveId(unresolvedId, pkg, options2);
  if (!resolved) {
    return;
  }
  const processResult2 = (resolved2) => {
    if (!externalize) {
      return resolved2;
    }
    if (!canExternalizeFile(resolved2.id)) {
      return resolved2;
    }
    let resolvedId = id;
    if (deepMatch && !pkg.data.exports && import_node_path3.default.extname(id) !== import_node_path3.default.extname(resolved2.id)) {
      const index = resolved2.id.indexOf(id);
      if (index > -1) {
        resolvedId = resolved2.id.slice(index);
        debug$d == null ? void 0 : debug$d(
          `[processResult] ${colors$1.cyan(id)} -> ${colors$1.dim(resolvedId)}`
        );
      }
    }
    return { ...resolved2, id: resolvedId, external: true };
  };
  if (!options2.idOnly && (!options2.scan && isBuild || externalize)) {
    return processResult2({
      id: resolved,
      moduleSideEffects: pkg.hasSideEffects(resolved)
    });
  }
  if (!isInNodeModules$1(resolved) || // linked
  !depsOptimizer || // resolving before listening to the server
  options2.scan) {
    return { id: resolved };
  }
  const isJsType = isOptimizable(resolved, depsOptimizer.options);
  const exclude = depsOptimizer.options.exclude;
  const skipOptimization = depsOptimizer.options.noDiscovery || !isJsType || importer && isInNodeModules$1(importer) || (exclude == null ? void 0 : exclude.includes(pkgId)) || (exclude == null ? void 0 : exclude.includes(id)) || SPECIAL_QUERY_RE.test(resolved);
  if (skipOptimization) {
    const versionHash = depsOptimizer.metadata.browserHash;
    if (versionHash && isJsType) {
      resolved = injectQuery(resolved, `v=${versionHash}`);
    }
  } else {
    const optimizedInfo = depsOptimizer.registerMissingImport(id, resolved);
    resolved = depsOptimizer.getOptimizedDepId(optimizedInfo);
  }
  return { id: resolved };
}
async function tryOptimizedResolve(depsOptimizer, id, importer, preserveSymlinks, packageCache) {
  var _a2;
  await depsOptimizer.scanProcessing;
  const metadata = depsOptimizer.metadata;
  const depInfo = optimizedDepInfoFromId(metadata, id);
  if (depInfo) {
    return depsOptimizer.getOptimizedDepId(depInfo);
  }
  if (!importer) return;
  let idPkgDir;
  const nestedIdMatch = `> ${id}`;
  for (const optimizedData of metadata.depInfoList) {
    if (!optimizedData.src) continue;
    if (!optimizedData.id.endsWith(nestedIdMatch)) continue;
    if (idPkgDir == null) {
      const pkgName = getNpmPackageName(id);
      if (!pkgName) break;
      idPkgDir = (_a2 = resolvePackageData(
        pkgName,
        importer,
        preserveSymlinks,
        packageCache
      )) == null ? void 0 : _a2.dir;
      if (idPkgDir == null) break;
      idPkgDir = normalizePath$3(idPkgDir);
    }
    if (optimizedData.src.startsWith(withTrailingSlash(idPkgDir))) {
      return depsOptimizer.getOptimizedDepId(optimizedData);
    }
  }
}
function resolvePackageEntry(id, { dir, data, setResolvedCache, getResolvedCache }, options2) {
  const { file: idWithoutPostfix, postfix } = splitFileAndPostfix(id);
  const cached = getResolvedCache(".", options2);
  if (cached) {
    return cached + postfix;
  }
  try {
    let entryPoint;
    if (data.exports) {
      entryPoint = resolveExportsOrImports(data, ".", options2, "exports");
    }
    if (!entryPoint) {
      for (const field of options2.mainFields) {
        if (field === "browser") {
          entryPoint = tryResolveBrowserEntry(dir, data, options2);
          if (entryPoint) {
            break;
          }
        } else if (typeof data[field] === "string") {
          entryPoint = data[field];
          break;
        }
      }
    }
    entryPoint || (entryPoint = data.main);
    const entryPoints = entryPoint ? [entryPoint] : ["index.js", "index.json", "index.node"];
    for (let entry of entryPoints) {
      let skipPackageJson = false;
      if (options2.mainFields[0] === "sass" && !options2.extensions.includes(import_node_path3.default.extname(entry))) {
        entry = "";
        skipPackageJson = true;
      } else {
        const { browser: browserField } = data;
        if (options2.mainFields.includes("browser") && isObject$1(browserField)) {
          entry = mapWithBrowserField(entry, browserField) || entry;
        }
      }
      const entryPointPath = import_node_path3.default.join(dir, entry);
      const resolvedEntryPoint = tryFsResolve(
        entryPointPath,
        options2,
        true,
        skipPackageJson
      );
      if (resolvedEntryPoint) {
        debug$d == null ? void 0 : debug$d(
          `[package entry] ${colors$1.cyan(idWithoutPostfix)} -> ${colors$1.dim(
            resolvedEntryPoint
          )}${postfix !== "" ? ` (postfix: ${postfix})` : ""}`
        );
        setResolvedCache(".", resolvedEntryPoint, options2);
        return resolvedEntryPoint + postfix;
      }
    }
  } catch (e2) {
    packageEntryFailure(id, e2.message);
  }
  packageEntryFailure(id);
}
function packageEntryFailure(id, details) {
  const err2 = new Error(
    `Failed to resolve entry for package "${id}". The package may have incorrect main/module/exports specified in its package.json` + (details ? ": " + details : ".")
  );
  err2.code = ERR_RESOLVE_PACKAGE_ENTRY_FAIL;
  throw err2;
}
function resolveExportsOrImports(pkg, key, options2, type) {
  const conditions = options2.conditions.map((condition) => {
    if (condition === DEV_PROD_CONDITION) {
      return options2.isProduction ? "production" : "development";
    }
    return condition;
  });
  if (options2.isRequire) {
    conditions.push("require");
  } else {
    conditions.push("import");
  }
  const fn = type === "imports" ? f : o;
  const result = fn(pkg, key, { conditions, unsafe: true });
  return result ? result[0] : void 0;
}
function resolveDeepImport(id, { setResolvedCache, getResolvedCache, dir, data }, options2) {
  const cache = getResolvedCache(id, options2);
  if (cache) {
    return cache;
  }
  let relativeId = id;
  const { exports: exportsField, browser: browserField } = data;
  if (exportsField) {
    if (isObject$1(exportsField) && !Array.isArray(exportsField)) {
      const { file, postfix } = splitFileAndPostfix(relativeId);
      const exportsId = resolveExportsOrImports(data, file, options2, "exports");
      if (exportsId !== void 0) {
        relativeId = exportsId + postfix;
      } else {
        relativeId = void 0;
      }
    } else {
      relativeId = void 0;
    }
    if (!relativeId) {
      throw new Error(
        `Package subpath '${relativeId}' is not defined by "exports" in ${import_node_path3.default.join(dir, "package.json")}.`
      );
    }
  } else if (options2.mainFields.includes("browser") && isObject$1(browserField)) {
    const { file, postfix } = splitFileAndPostfix(relativeId);
    const mapped = mapWithBrowserField(file, browserField);
    if (mapped) {
      relativeId = mapped + postfix;
    } else if (mapped === false) {
      setResolvedCache(id, browserExternalId, options2);
      return browserExternalId;
    }
  }
  if (relativeId) {
    const resolved = tryFsResolve(
      import_node_path3.default.join(dir, relativeId),
      options2,
      !exportsField
      // try index only if no exports field
    );
    if (resolved) {
      debug$d == null ? void 0 : debug$d(
        `[node/deep-import] ${colors$1.cyan(id)} -> ${colors$1.dim(resolved)}`
      );
      setResolvedCache(id, resolved, options2);
      return resolved;
    }
  }
}
function tryResolveBrowserMapping(id, importer, options2, isFilePath, externalize) {
  var _a2;
  let res;
  const pkg = importer && findNearestPackageData(import_node_path3.default.dirname(importer), options2.packageCache);
  if (pkg && isObject$1(pkg.data.browser)) {
    const mapId = isFilePath ? "./" + slash$1(import_node_path3.default.relative(pkg.dir, id)) : id;
    const browserMappedPath = mapWithBrowserField(mapId, pkg.data.browser);
    if (browserMappedPath) {
      if (res = bareImportRE.test(browserMappedPath) ? (_a2 = tryNodeResolve(
        browserMappedPath,
        importer,
        options2,
        void 0,
        void 0
      )) == null ? void 0 : _a2.id : tryFsResolve(import_node_path3.default.join(pkg.dir, browserMappedPath), options2)) {
        debug$d == null ? void 0 : debug$d(`[browser mapped] ${colors$1.cyan(id)} -> ${colors$1.dim(res)}`);
        let result = { id: res };
        if (options2.idOnly) {
          return result;
        }
        if (!options2.scan && options2.isBuild) {
          const resPkg = findNearestPackageData(
            import_node_path3.default.dirname(res),
            options2.packageCache
          );
          if (resPkg) {
            result = {
              id: res,
              moduleSideEffects: resPkg.hasSideEffects(res)
            };
          }
        }
        return externalize ? { ...result, external: true } : result;
      }
    } else if (browserMappedPath === false) {
      return browserExternalId;
    }
  }
}
function tryResolveBrowserEntry(dir, data, options2) {
  const browserEntry = typeof data.browser === "string" ? data.browser : isObject$1(data.browser) && data.browser["."];
  if (browserEntry) {
    if (!options2.isRequire && options2.mainFields.includes("module") && typeof data.module === "string" && data.module !== browserEntry) {
      const resolvedBrowserEntry = tryFsResolve(
        import_node_path3.default.join(dir, browserEntry),
        options2
      );
      if (resolvedBrowserEntry) {
        const content = import_node_fs2.default.readFileSync(resolvedBrowserEntry, "utf-8");
        if (hasESMSyntax(content)) {
          return browserEntry;
        } else {
          return data.module;
        }
      }
    } else {
      return browserEntry;
    }
  }
}
function mapWithBrowserField(relativePathInPkgDir, map2) {
  const normalizedPath = import_node_path3.default.posix.normalize(relativePathInPkgDir);
  for (const key in map2) {
    const normalizedKey = import_node_path3.default.posix.normalize(key);
    if (normalizedPath === normalizedKey || equalWithoutSuffix(normalizedPath, normalizedKey, ".js") || equalWithoutSuffix(normalizedPath, normalizedKey, "/index.js")) {
      return map2[key];
    }
  }
}
function equalWithoutSuffix(path22, key, suffix) {
  return key.endsWith(suffix) && key.slice(0, -suffix.length) === path22;
}
function tryResolveRealFile(file, preserveSymlinks) {
  const stat2 = tryStatSync(file);
  if (stat2 == null ? void 0 : stat2.isFile()) return getRealPath(file, preserveSymlinks);
}
function tryResolveRealFileWithExtensions(filePath, extensions2, preserveSymlinks) {
  for (const ext of extensions2) {
    const res = tryResolveRealFile(filePath + ext, preserveSymlinks);
    if (res) return res;
  }
}
function tryResolveRealFileOrType(file, preserveSymlinks) {
  const fileStat = tryStatSync(file);
  if (fileStat == null ? void 0 : fileStat.isFile()) {
    return { path: getRealPath(file, preserveSymlinks), type: "file" };
  }
  if (fileStat == null ? void 0 : fileStat.isDirectory()) {
    return { type: "directory" };
  }
  return;
}
function getRealPath(resolved, preserveSymlinks) {
  if (!preserveSymlinks) {
    resolved = safeRealpathSync(resolved);
  }
  return normalizePath$3(resolved);
}
function isDirectory(path22) {
  const stat2 = tryStatSync(path22);
  return (stat2 == null ? void 0 : stat2.isDirectory()) ?? false;
}
var debug$c = createDebugger("vite:optimize-deps");
function optimizedDepsPlugin() {
  return {
    name: "vite:optimized-deps",
    applyToEnvironment(environment) {
      return !isDepOptimizationDisabled(environment.config.optimizeDeps);
    },
    resolveId(id) {
      var _a2;
      const environment = this.environment;
      if ((_a2 = environment.depsOptimizer) == null ? void 0 : _a2.isOptimizedDepFile(id)) {
        return id;
      }
    },
    // this.load({ id }) isn't implemented in PluginContainer
    // The logic to register an id to wait until it is processed
    // is in importAnalysis, see call to delayDepsOptimizerUntil
    async load(id) {
      const environment = this.environment;
      const depsOptimizer = environment.depsOptimizer;
      if (depsOptimizer == null ? void 0 : depsOptimizer.isOptimizedDepFile(id)) {
        const metadata = depsOptimizer.metadata;
        const file = cleanUrl2(id);
        const versionMatch = DEP_VERSION_RE.exec(file);
        const browserHash = versionMatch ? versionMatch[1].split("=")[1] : void 0;
        const info = optimizedDepInfoFromFile(metadata, file);
        if (info) {
          if (browserHash && info.browserHash !== browserHash) {
            throwOutdatedRequest(id);
          }
          try {
            await info.processing;
          } catch {
            throwProcessingError(id);
          }
          const newMetadata = depsOptimizer.metadata;
          if (metadata !== newMetadata) {
            const currentInfo = optimizedDepInfoFromFile(newMetadata, file);
            if (info.browserHash !== (currentInfo == null ? void 0 : currentInfo.browserHash)) {
              throwOutdatedRequest(id);
            }
          }
        }
        debug$c == null ? void 0 : debug$c(`load ${colors$1.cyan(file)}`);
        try {
          return await import_promises.default.readFile(file, "utf-8");
        } catch {
          const newMetadata = depsOptimizer.metadata;
          if (optimizedDepInfoFromFile(newMetadata, file)) {
            throwOutdatedRequest(id);
          }
          throwFileNotFoundInOptimizedDep(id);
        }
      }
    }
  };
}
function throwProcessingError(id) {
  const err2 = new Error(
    `Something unexpected happened while optimizing "${id}". The current page should have reloaded by now`
  );
  err2.code = ERR_OPTIMIZE_DEPS_PROCESSING_ERROR;
  throw err2;
}
function throwOutdatedRequest(id) {
  const err2 = new Error(
    `There is a new version of the pre-bundle for "${id}", a page reload is going to ask for it.`
  );
  err2.code = ERR_OUTDATED_OPTIMIZED_DEP2;
  throw err2;
}
function throwFileNotFoundInOptimizedDep(id) {
  const err2 = new Error(
    `The file does not exist at "${id}" which is in the optimize deps directory. The dependency might be incompatible with the dep optimizer. Try adding it to \`optimizeDeps.exclude\`.`
  );
  err2.code = ERR_FILE_NOT_FOUND_IN_OPTIMIZED_DEP_DIR;
  throw err2;
}
var main = { exports: {} };
var version$1 = "16.5.0";
var require$$4 = {
  version: version$1
};
var fs$6 = import_fs.default;
var path$8 = import_path2.default;
var os$1 = import_os.default;
var crypto$1 = import_crypto.default;
var packageJson = require$$4;
var version2 = packageJson.version;
var LINE = /(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;
function parse$c(src2) {
  const obj = {};
  let lines = src2.toString();
  lines = lines.replace(/\r\n?/mg, "\n");
  let match;
  while ((match = LINE.exec(lines)) != null) {
    const key = match[1];
    let value2 = match[2] || "";
    value2 = value2.trim();
    const maybeQuote = value2[0];
    value2 = value2.replace(/^(['"`])([\s\S]*)\1$/mg, "$2");
    if (maybeQuote === '"') {
      value2 = value2.replace(/\\n/g, "\n");
      value2 = value2.replace(/\\r/g, "\r");
    }
    obj[key] = value2;
  }
  return obj;
}
function _parseVault(options2) {
  const vaultPath = _vaultPath(options2);
  const result = DotenvModule.configDotenv({ path: vaultPath });
  if (!result.parsed) {
    const err2 = new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`);
    err2.code = "MISSING_DATA";
    throw err2;
  }
  const keys = _dotenvKey(options2).split(",");
  const length = keys.length;
  let decrypted;
  for (let i = 0; i < length; i++) {
    try {
      const key = keys[i].trim();
      const attrs = _instructions(result, key);
      decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key);
      break;
    } catch (error2) {
      if (i + 1 >= length) {
        throw error2;
      }
    }
  }
  return DotenvModule.parse(decrypted);
}
function _warn(message) {
  console.log(`[dotenv@${version2}][WARN] ${message}`);
}
function _debug(message) {
  console.log(`[dotenv@${version2}][DEBUG] ${message}`);
}
function _dotenvKey(options2) {
  if (options2 && options2.DOTENV_KEY && options2.DOTENV_KEY.length > 0) {
    return options2.DOTENV_KEY;
  }
  if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {
    return process.env.DOTENV_KEY;
  }
  return "";
}
function _instructions(result, dotenvKey) {
  let uri;
  try {
    uri = new URL(dotenvKey);
  } catch (error2) {
    if (error2.code === "ERR_INVALID_URL") {
      const err2 = new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development");
      err2.code = "INVALID_DOTENV_KEY";
      throw err2;
    }
    throw error2;
  }
  const key = uri.password;
  if (!key) {
    const err2 = new Error("INVALID_DOTENV_KEY: Missing key part");
    err2.code = "INVALID_DOTENV_KEY";
    throw err2;
  }
  const environment = uri.searchParams.get("environment");
  if (!environment) {
    const err2 = new Error("INVALID_DOTENV_KEY: Missing environment part");
    err2.code = "INVALID_DOTENV_KEY";
    throw err2;
  }
  const environmentKey = `DOTENV_VAULT_${environment.toUpperCase()}`;
  const ciphertext = result.parsed[environmentKey];
  if (!ciphertext) {
    const err2 = new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${environmentKey} in your .env.vault file.`);
    err2.code = "NOT_FOUND_DOTENV_ENVIRONMENT";
    throw err2;
  }
  return { ciphertext, key };
}
function _vaultPath(options2) {
  let possibleVaultPath = null;
  if (options2 && options2.path && options2.path.length > 0) {
    if (Array.isArray(options2.path)) {
      for (const filepath of options2.path) {
        if (fs$6.existsSync(filepath)) {
          possibleVaultPath = filepath.endsWith(".vault") ? filepath : `${filepath}.vault`;
        }
      }
    } else {
      possibleVaultPath = options2.path.endsWith(".vault") ? options2.path : `${options2.path}.vault`;
    }
  } else {
    possibleVaultPath = path$8.resolve(process.cwd(), ".env.vault");
  }
  if (fs$6.existsSync(possibleVaultPath)) {
    return possibleVaultPath;
  }
  return null;
}
function _resolveHome(envPath) {
  return envPath[0] === "~" ? path$8.join(os$1.homedir(), envPath.slice(1)) : envPath;
}
function _configVault(options2) {
  const debug2 = Boolean(options2 && options2.debug);
  if (debug2) {
    _debug("Loading env from encrypted .env.vault");
  }
  const parsed = DotenvModule._parseVault(options2);
  let processEnv = process.env;
  if (options2 && options2.processEnv != null) {
    processEnv = options2.processEnv;
  }
  DotenvModule.populate(processEnv, parsed, options2);
  return { parsed };
}
function configDotenv(options2) {
  const dotenvPath = path$8.resolve(process.cwd(), ".env");
  let encoding = "utf8";
  const debug2 = Boolean(options2 && options2.debug);
  if (options2 && options2.encoding) {
    encoding = options2.encoding;
  } else {
    if (debug2) {
      _debug("No encoding is specified. UTF-8 is used by default");
    }
  }
  let optionPaths = [dotenvPath];
  if (options2 && options2.path) {
    if (!Array.isArray(options2.path)) {
      optionPaths = [_resolveHome(options2.path)];
    } else {
      optionPaths = [];
      for (const filepath of options2.path) {
        optionPaths.push(_resolveHome(filepath));
      }
    }
  }
  let lastError;
  const parsedAll = {};
  for (const path4 of optionPaths) {
    try {
      const parsed = DotenvModule.parse(fs$6.readFileSync(path4, { encoding }));
      DotenvModule.populate(parsedAll, parsed, options2);
    } catch (e2) {
      if (debug2) {
        _debug(`Failed to load ${path4} ${e2.message}`);
      }
      lastError = e2;
    }
  }
  let processEnv = process.env;
  if (options2 && options2.processEnv != null) {
    processEnv = options2.processEnv;
  }
  DotenvModule.populate(processEnv, parsedAll, options2);
  if (lastError) {
    return { parsed: parsedAll, error: lastError };
  } else {
    return { parsed: parsedAll };
  }
}
function config(options2) {
  if (_dotenvKey(options2).length === 0) {
    return DotenvModule.configDotenv(options2);
  }
  const vaultPath = _vaultPath(options2);
  if (!vaultPath) {
    _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`);
    return DotenvModule.configDotenv(options2);
  }
  return DotenvModule._configVault(options2);
}
function decrypt(encrypted, keyStr) {
  const key = Buffer.from(keyStr.slice(-64), "hex");
  let ciphertext = Buffer.from(encrypted, "base64");
  const nonce = ciphertext.subarray(0, 12);
  const authTag = ciphertext.subarray(-16);
  ciphertext = ciphertext.subarray(12, -16);
  try {
    const aesgcm = crypto$1.createDecipheriv("aes-256-gcm", key, nonce);
    aesgcm.setAuthTag(authTag);
    return `${aesgcm.update(ciphertext)}${aesgcm.final()}`;
  } catch (error2) {
    const isRange = error2 instanceof RangeError;
    const invalidKeyLength = error2.message === "Invalid key length";
    const decryptionFailed = error2.message === "Unsupported state or unable to authenticate data";
    if (isRange || invalidKeyLength) {
      const err2 = new Error("INVALID_DOTENV_KEY: It must be 64 characters long (or more)");
      err2.code = "INVALID_DOTENV_KEY";
      throw err2;
    } else if (decryptionFailed) {
      const err2 = new Error("DECRYPTION_FAILED: Please check your DOTENV_KEY");
      err2.code = "DECRYPTION_FAILED";
      throw err2;
    } else {
      throw error2;
    }
  }
}
function populate(processEnv, parsed, options2 = {}) {
  const debug2 = Boolean(options2 && options2.debug);
  const override = Boolean(options2 && options2.override);
  if (typeof parsed !== "object") {
    const err2 = new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");
    err2.code = "OBJECT_REQUIRED";
    throw err2;
  }
  for (const key of Object.keys(parsed)) {
    if (Object.prototype.hasOwnProperty.call(processEnv, key)) {
      if (override === true) {
        processEnv[key] = parsed[key];
      }
      if (debug2) {
        if (override === true) {
          _debug(`"${key}" is already defined and WAS overwritten`);
        } else {
          _debug(`"${key}" is already defined and was NOT overwritten`);
        }
      }
    } else {
      processEnv[key] = parsed[key];
    }
  }
}
var DotenvModule = {
  configDotenv,
  _configVault,
  _parseVault,
  config,
  decrypt,
  parse: parse$c,
  populate
};
main.exports.configDotenv = DotenvModule.configDotenv;
main.exports._configVault = DotenvModule._configVault;
main.exports._parseVault = DotenvModule._parseVault;
main.exports.config = DotenvModule.config;
main.exports.decrypt = DotenvModule.decrypt;
var parse_1$2 = main.exports.parse = DotenvModule.parse;
main.exports.populate = DotenvModule.populate;
main.exports = DotenvModule;
function _resolveEscapeSequences(value2) {
  return value2.replace(/\\\$/g, "$");
}
function expandValue(value2, processEnv, runningParsed) {
  const env2 = { ...runningParsed, ...processEnv };
  const regex = new RegExp("(?<!\\\\)\\${([^{}]+)}|(?<!\\\\)\\$([A-Za-z_][A-Za-z0-9_]*)", "g");
  let result = value2;
  let match;
  const seen2 = /* @__PURE__ */ new Set();
  while ((match = regex.exec(result)) !== null) {
    seen2.add(result);
    const [template, bracedExpression, unbracedExpression] = match;
    const expression = bracedExpression || unbracedExpression;
    const opRegex = /(:\+|\+|:-|-)/;
    const opMatch = expression.match(opRegex);
    const splitter = opMatch ? opMatch[0] : null;
    const r2 = expression.split(splitter);
    let defaultValue;
    let value3;
    const key = r2.shift();
    if ([":+", "+"].includes(splitter)) {
      defaultValue = env2[key] ? r2.join(splitter) : "";
      value3 = null;
    } else {
      defaultValue = r2.join(splitter);
      value3 = env2[key];
    }
    if (value3) {
      if (seen2.has(value3)) {
        result = result.replace(template, defaultValue);
      } else {
        result = result.replace(template, value3);
      }
    } else {
      result = result.replace(template, defaultValue);
    }
    if (result === runningParsed[key]) {
      break;
    }
    regex.lastIndex = 0;
  }
  return result;
}
function expand$2(options2) {
  let processEnv = process.env;
  if (options2 && options2.processEnv != null) {
    processEnv = options2.processEnv;
  }
  for (const key in options2.parsed) {
    let value2 = options2.parsed[key];
    if (processEnv[key] && processEnv[key] !== value2) {
      value2 = processEnv[key];
    } else {
      value2 = expandValue(value2, processEnv, options2.parsed);
    }
    options2.parsed[key] = _resolveEscapeSequences(value2);
  }
  for (const processKey in options2.parsed) {
    processEnv[processKey] = options2.parsed[processKey];
  }
  return options2;
}
var expand_1$1 = expand$2;
var debug$b = createDebugger("vite:env");
function getEnvFilesForMode(mode2, envDir) {
  if (envDir !== false) {
    return [
      /** default file */
      `.env`,
      /** local file */
      `.env.local`,
      /** mode file */
      `.env.${mode2}`,
      /** mode local file */
      `.env.${mode2}.local`
    ].map((file) => normalizePath$3(import_node_path3.default.join(envDir, file)));
  }
  return [];
}
function loadEnv(mode2, envDir, prefixes = "VITE_") {
  const start = performance.now();
  const getTime = () => `${(performance.now() - start).toFixed(2)}ms`;
  if (mode2 === "local") {
    throw new Error(
      `"local" cannot be used as a mode name because it conflicts with the .local postfix for .env files.`
    );
  }
  prefixes = arraify(prefixes);
  const env2 = {};
  const envFiles = getEnvFilesForMode(mode2, envDir);
  debug$b == null ? void 0 : debug$b(`loading env files: %O`, envFiles);
  const parsed = Object.fromEntries(
    envFiles.flatMap((filePath) => {
      var _a2;
      if (!((_a2 = tryStatSync(filePath)) == null ? void 0 : _a2.isFile())) return [];
      return Object.entries(parse_1$2(import_node_fs2.default.readFileSync(filePath)));
    })
  );
  debug$b == null ? void 0 : debug$b(`env files loaded in ${getTime()}`);
  if (parsed.NODE_ENV && process.env.VITE_USER_NODE_ENV === void 0) {
    process.env.VITE_USER_NODE_ENV = parsed.NODE_ENV;
  }
  if (parsed.BROWSER && process.env.BROWSER === void 0) {
    process.env.BROWSER = parsed.BROWSER;
  }
  if (parsed.BROWSER_ARGS && process.env.BROWSER_ARGS === void 0) {
    process.env.BROWSER_ARGS = parsed.BROWSER_ARGS;
  }
  const processEnv = { ...process.env };
  expand_1$1({ parsed, processEnv });
  for (const [key, value2] of Object.entries(parsed)) {
    if (prefixes.some((prefix) => key.startsWith(prefix))) {
      env2[key] = value2;
    }
  }
  for (const key in process.env) {
    if (prefixes.some((prefix) => key.startsWith(prefix))) {
      env2[key] = process.env[key];
    }
  }
  debug$b == null ? void 0 : debug$b(`using resolved env: %O`, env2);
  return env2;
}
function resolveEnvPrefix({
  envPrefix = "VITE_"
}) {
  envPrefix = arraify(envPrefix);
  if (envPrefix.includes("")) {
    throw new Error(
      `envPrefix option contains value '', which could lead unexpected exposure of sensitive information.`
    );
  }
  return envPrefix;
}
var docsURL = "https://vite.dev";
var deprecationCode = {
  removePluginHookSsrArgument: "changes/this-environment-in-hooks",
  removePluginHookHandleHotUpdate: "changes/hotupdate-hook",
  removeServerModuleGraph: "changes/per-environment-apis",
  removeServerHot: "changes/per-environment-apis",
  removeServerTransformRequest: "changes/per-environment-apis",
  removeSsrLoadModule: "changes/ssr-using-modulerunner"
};
var deprecationMessages = {
  removePluginHookSsrArgument: "Plugin hook `options.ssr` is replaced with `this.environment.config.consumer === 'server'`.",
  removePluginHookHandleHotUpdate: "Plugin hook `handleHotUpdate()` is replaced with `hotUpdate()`.",
  removeServerModuleGraph: "The `server.moduleGraph` is replaced with `this.environment.moduleGraph`.",
  removeServerHot: "The `server.hot` is replaced with `this.environment.hot`.",
  removeServerTransformRequest: "The `server.transformRequest` is replaced with `this.environment.transformRequest`.",
  removeSsrLoadModule: "The `server.ssrLoadModule` is replaced with Environment Runner."
};
var _ignoreDeprecationWarnings = false;
function warnFutureDeprecation(config2, type, extraMessage, stacktrace = true) {
  if (_ignoreDeprecationWarnings || !config2.future || config2.future[type] !== "warn")
    return;
  let msg = `[vite future] ${deprecationMessages[type]}`;
  if (extraMessage) {
    msg += ` ${extraMessage}`;
  }
  msg = colors$1.yellow(msg);
  const docs = `${docsURL}/changes/${deprecationCode[type].toLowerCase()}`;
  msg += colors$1.gray(`
  ${stacktrace ? "├" : "└"}─── `) + colors$1.underline(docs) + "\n";
  if (stacktrace) {
    const stack = new Error().stack;
    if (stack) {
      let stacks = stack.split("\n").slice(3).filter((i) => !i.includes("/node_modules/vite/dist/"));
      if (stacks.length === 0) {
        stacks.push("No stack trace found.");
      }
      stacks = stacks.map(
        (i, idx) => `  ${idx === stacks.length - 1 ? "└" : "│"} ${i.trim()}`
      );
      msg += colors$1.dim(stacks.join("\n")) + "\n";
    }
  }
  config2.logger.warnOnce(msg);
}
function ignoreDeprecationWarnings(fn) {
  const before = _ignoreDeprecationWarnings;
  _ignoreDeprecationWarnings = true;
  const ret = fn();
  _ignoreDeprecationWarnings = before;
  return ret;
}
function prepareError(err2) {
  var _a2;
  return {
    message: (0, import_node_util.stripVTControlCharacters)(err2.message),
    stack: (0, import_node_util.stripVTControlCharacters)(cleanStack(err2.stack || "")),
    id: err2.id,
    frame: (0, import_node_util.stripVTControlCharacters)(err2.frame || ""),
    plugin: err2.plugin,
    pluginCode: (_a2 = err2.pluginCode) == null ? void 0 : _a2.toString(),
    loc: err2.loc
  };
}
function buildErrorMessage(err2, args = [], includeStack = true) {
  if (err2.plugin) args.push(`  Plugin: ${colors$1.magenta(err2.plugin)}`);
  const loc = err2.loc ? `:${err2.loc.line}:${err2.loc.column}` : "";
  if (err2.id) args.push(`  File: ${colors$1.cyan(err2.id)}${loc}`);
  if (err2.frame) args.push(colors$1.yellow(pad$1(err2.frame)));
  if (includeStack && err2.stack) args.push(pad$1(cleanStack(err2.stack)));
  return args.join("\n");
}
function cleanStack(stack) {
  return stack.split(/\n/).filter((l) => /^\s*at/.test(l)).join("\n");
}
function logError(server, err2) {
  const msg = buildErrorMessage(err2, [
    colors$1.red(`Internal server error: ${err2.message}`)
  ]);
  server.config.logger.error(msg, {
    clear: true,
    timestamp: true,
    error: err2
  });
  server.environments.client.hot.send({
    type: "error",
    err: prepareError(err2)
  });
}
function errorMiddleware(server, allowNext = false) {
  return function viteErrorMiddleware(err2, _req, res, next) {
    logError(server, err2);
    if (allowNext) {
      next();
    } else {
      res.statusCode = 500;
      res.end(`
        <!DOCTYPE html>
        <html lang="en">
          <head>
            <meta charset="UTF-8" />
            <title>Error</title>
            <script type="module">
              const error = ${JSON.stringify(prepareError(err2)).replace(
        /</g,
        "\\u003c"
      )}
              try {
                const { ErrorOverlay } = await import(${JSON.stringify(import_node_path3.default.posix.join(server.config.base, CLIENT_PUBLIC_PATH))})
                document.body.appendChild(new ErrorOverlay(error))
              } catch {
                const h = (tag, text) => {
                  const el = document.createElement(tag)
                  el.textContent = text
                  return el
                }
                document.body.appendChild(h('h1', 'Internal Server Error'))
                document.body.appendChild(h('h2', error.message))
                document.body.appendChild(h('pre', error.stack))
                document.body.appendChild(h('p', '(Error overlay failed to load)'))
              }
            <\/script>
          </head>
          <body>
          </body>
        </html>
      `);
    }
  };
}
var node = { exports: {} };
var debug$a = { exports: {} };
var s = 1e3;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;
var ms = function(val, options2) {
  options2 = options2 || {};
  var type = typeof val;
  if (type === "string" && val.length > 0) {
    return parse$b(val);
  } else if (type === "number" && isNaN(val) === false) {
    return options2.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
  );
};
function parse$b(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n2 = parseFloat(match[1]);
  var type = (match[2] || "ms").toLowerCase();
  switch (type) {
    case "years":
    case "year":
    case "yrs":
    case "yr":
    case "y":
      return n2 * y;
    case "days":
    case "day":
    case "d":
      return n2 * d;
    case "hours":
    case "hour":
    case "hrs":
    case "hr":
    case "h":
      return n2 * h;
    case "minutes":
    case "minute":
    case "mins":
    case "min":
    case "m":
      return n2 * m;
    case "seconds":
    case "second":
    case "secs":
    case "sec":
    case "s":
      return n2 * s;
    case "milliseconds":
    case "millisecond":
    case "msecs":
    case "msec":
    case "ms":
      return n2;
    default:
      return void 0;
  }
}
function fmtShort(ms2) {
  if (ms2 >= d) {
    return Math.round(ms2 / d) + "d";
  }
  if (ms2 >= h) {
    return Math.round(ms2 / h) + "h";
  }
  if (ms2 >= m) {
    return Math.round(ms2 / m) + "m";
  }
  if (ms2 >= s) {
    return Math.round(ms2 / s) + "s";
  }
  return ms2 + "ms";
}
function fmtLong(ms2) {
  return plural(ms2, d, "day") || plural(ms2, h, "hour") || plural(ms2, m, "minute") || plural(ms2, s, "second") || ms2 + " ms";
}
function plural(ms2, n2, name) {
  if (ms2 < n2) {
    return;
  }
  if (ms2 < n2 * 1.5) {
    return Math.floor(ms2 / n2) + " " + name;
  }
  return Math.ceil(ms2 / n2) + " " + name + "s";
}
(function(module, exports) {
  exports = module.exports = createDebug.debug = createDebug["default"] = createDebug;
  exports.coerce = coerce;
  exports.disable = disable;
  exports.enable = enable;
  exports.enabled = enabled;
  exports.humanize = ms;
  exports.names = [];
  exports.skips = [];
  exports.formatters = {};
  var prevTime;
  function selectColor(namespace) {
    var hash2 = 0, i;
    for (i in namespace) {
      hash2 = (hash2 << 5) - hash2 + namespace.charCodeAt(i);
      hash2 |= 0;
    }
    return exports.colors[Math.abs(hash2) % exports.colors.length];
  }
  function createDebug(namespace) {
    function debug2() {
      if (!debug2.enabled) return;
      var self2 = debug2;
      var curr = +/* @__PURE__ */ new Date();
      var ms2 = curr - (prevTime || curr);
      self2.diff = ms2;
      self2.prev = prevTime;
      self2.curr = curr;
      prevTime = curr;
      var args = new Array(arguments.length);
      for (var i = 0; i < args.length; i++) {
        args[i] = arguments[i];
      }
      args[0] = exports.coerce(args[0]);
      if ("string" !== typeof args[0]) {
        args.unshift("%O");
      }
      var index = 0;
      args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format2) {
        if (match === "%%") return match;
        index++;
        var formatter2 = exports.formatters[format2];
        if ("function" === typeof formatter2) {
          var val = args[index];
          match = formatter2.call(self2, val);
          args.splice(index, 1);
          index--;
        }
        return match;
      });
      exports.formatArgs.call(self2, args);
      var logFn = debug2.log || exports.log || console.log.bind(console);
      logFn.apply(self2, args);
    }
    debug2.namespace = namespace;
    debug2.enabled = exports.enabled(namespace);
    debug2.useColors = exports.useColors();
    debug2.color = selectColor(namespace);
    if ("function" === typeof exports.init) {
      exports.init(debug2);
    }
    return debug2;
  }
  function enable(namespaces) {
    exports.save(namespaces);
    exports.names = [];
    exports.skips = [];
    var split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
    var len = split.length;
    for (var i = 0; i < len; i++) {
      if (!split[i]) continue;
      namespaces = split[i].replace(/\*/g, ".*?");
      if (namespaces[0] === "-") {
        exports.skips.push(new RegExp("^" + namespaces.substr(1) + "$"));
      } else {
        exports.names.push(new RegExp("^" + namespaces + "$"));
      }
    }
  }
  function disable() {
    exports.enable("");
  }
  function enabled(name) {
    var i, len;
    for (i = 0, len = exports.skips.length; i < len; i++) {
      if (exports.skips[i].test(name)) {
        return false;
      }
    }
    for (i = 0, len = exports.names.length; i < len; i++) {
      if (exports.names[i].test(name)) {
        return true;
      }
    }
    return false;
  }
  function coerce(val) {
    if (val instanceof Error) return val.stack || val.message;
    return val;
  }
})(debug$a, debug$a.exports);
var debugExports = debug$a.exports;
(function(module, exports) {
  var tty = import_tty.default;
  var util2 = import_util.default;
  exports = module.exports = debugExports;
  exports.init = init2;
  exports.log = log2;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load2;
  exports.useColors = useColors;
  exports.colors = [6, 2, 3, 4, 5, 1];
  exports.inspectOpts = Object.keys(process.env).filter(function(key) {
    return /^debug_/i.test(key);
  }).reduce(function(obj, key) {
    var prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, function(_, k) {
      return k.toUpperCase();
    });
    var val = process.env[key];
    if (/^(yes|on|true|enabled)$/i.test(val)) val = true;
    else if (/^(no|off|false|disabled)$/i.test(val)) val = false;
    else if (val === "null") val = null;
    else val = Number(val);
    obj[prop] = val;
    return obj;
  }, {});
  var fd = parseInt(process.env.DEBUG_FD, 10) || 2;
  if (1 !== fd && 2 !== fd) {
    util2.deprecate(function() {
    }, "except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)")();
  }
  var stream3 = 1 === fd ? process.stdout : 2 === fd ? process.stderr : createWritableStdioStream(fd);
  function useColors() {
    return "colors" in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(fd);
  }
  exports.formatters.o = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util2.inspect(v, this.inspectOpts).split("\n").map(function(str) {
      return str.trim();
    }).join(" ");
  };
  exports.formatters.O = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util2.inspect(v, this.inspectOpts);
  };
  function formatArgs(args) {
    var name = this.namespace;
    var useColors2 = this.useColors;
    if (useColors2) {
      var c = this.color;
      var prefix = "  \x1B[3" + c + ";1m" + name + " \x1B[0m";
      args[0] = prefix + args[0].split("\n").join("\n" + prefix);
      args.push("\x1B[3" + c + "m+" + exports.humanize(this.diff) + "\x1B[0m");
    } else {
      args[0] = (/* @__PURE__ */ new Date()).toUTCString() + " " + name + " " + args[0];
    }
  }
  function log2() {
    return stream3.write(util2.format.apply(util2, arguments) + "\n");
  }
  function save(namespaces) {
    if (null == namespaces) {
      delete process.env.DEBUG;
    } else {
      process.env.DEBUG = namespaces;
    }
  }
  function load2() {
    return process.env.DEBUG;
  }
  function createWritableStdioStream(fd2) {
    var stream4;
    var tty_wrap = process.binding("tty_wrap");
    switch (tty_wrap.guessHandleType(fd2)) {
      case "TTY":
        stream4 = new tty.WriteStream(fd2);
        stream4._type = "tty";
        if (stream4._handle && stream4._handle.unref) {
          stream4._handle.unref();
        }
        break;
      case "FILE":
        var fs2 = import_fs.default;
        stream4 = new fs2.SyncWriteStream(fd2, { autoClose: false });
        stream4._type = "fs";
        break;
      case "PIPE":
      case "TCP":
        var net2 = import_net.default;
        stream4 = new net2.Socket({
          fd: fd2,
          readable: false,
          writable: true
        });
        stream4.readable = false;
        stream4.read = null;
        stream4._type = "pipe";
        if (stream4._handle && stream4._handle.unref) {
          stream4._handle.unref();
        }
        break;
      default:
        throw new Error("Implement me. Unknown stream file type!");
    }
    stream4.fd = fd2;
    stream4._isStdio = true;
    return stream4;
  }
  function init2(debug2) {
    debug2.inspectOpts = {};
    var keys = Object.keys(exports.inspectOpts);
    for (var i = 0; i < keys.length; i++) {
      debug2.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
    }
  }
  exports.enable(load2());
})(node, node.exports);
var nodeExports = node.exports;
var encodeurl = encodeUrl$1;
var ENCODE_CHARS_REGEXP = /(?:[^\x21\x25\x26-\x3B\x3D\x3F-\x5B\x5D\x5F\x61-\x7A\x7E]|%(?:[^0-9A-Fa-f]|[0-9A-Fa-f][^0-9A-Fa-f]|$))+/g;
var UNMATCHED_SURROGATE_PAIR_REGEXP = /(^|[^\uD800-\uDBFF])[\uDC00-\uDFFF]|[\uD800-\uDBFF]([^\uDC00-\uDFFF]|$)/g;
var UNMATCHED_SURROGATE_PAIR_REPLACE = "$1�$2";
function encodeUrl$1(url2) {
  return String(url2).replace(UNMATCHED_SURROGATE_PAIR_REGEXP, UNMATCHED_SURROGATE_PAIR_REPLACE).replace(ENCODE_CHARS_REGEXP, encodeURI);
}
var matchHtmlRegExp = /["'&<>]/;
var escapeHtml_1 = escapeHtml$1;
function escapeHtml$1(string) {
  var str = "" + string;
  var match = matchHtmlRegExp.exec(str);
  if (!match) {
    return str;
  }
  var escape2;
  var html = "";
  var index = 0;
  var lastIndex = 0;
  for (index = match.index; index < str.length; index++) {
    switch (str.charCodeAt(index)) {
      case 34:
        escape2 = "&quot;";
        break;
      case 38:
        escape2 = "&amp;";
        break;
      case 39:
        escape2 = "&#39;";
        break;
      case 60:
        escape2 = "&lt;";
        break;
      case 62:
        escape2 = "&gt;";
        break;
      default:
        continue;
    }
    if (lastIndex !== index) {
      html += str.substring(lastIndex, index);
    }
    lastIndex = index + 1;
    html += escape2;
  }
  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
}
var escapeHtml$2 = getDefaultExportFromCjs(escapeHtml_1);
var onFinished$2 = { exports: {} };
var eeFirst = first$1;
function first$1(stuff, done) {
  if (!Array.isArray(stuff))
    throw new TypeError("arg must be an array of [ee, events...] arrays");
  var cleanups = [];
  for (var i = 0; i < stuff.length; i++) {
    var arr = stuff[i];
    if (!Array.isArray(arr) || arr.length < 2)
      throw new TypeError("each array member must be [ee, events...]");
    var ee = arr[0];
    for (var j = 1; j < arr.length; j++) {
      var event = arr[j];
      var fn = listener(event, callback);
      ee.on(event, fn);
      cleanups.push({
        ee,
        event,
        fn
      });
    }
  }
  function callback() {
    cleanup();
    done.apply(null, arguments);
  }
  function cleanup() {
    var x;
    for (var i2 = 0; i2 < cleanups.length; i2++) {
      x = cleanups[i2];
      x.ee.removeListener(x.event, x.fn);
    }
  }
  function thunk(fn2) {
    done = fn2;
  }
  thunk.cancel = cleanup;
  return thunk;
}
function listener(event, done) {
  return function onevent(arg1) {
    var args = new Array(arguments.length);
    var ee = this;
    var err2 = event === "error" ? arg1 : null;
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    done(err2, ee, event, args);
  };
}
onFinished$2.exports = onFinished$1;
onFinished$2.exports.isFinished = isFinished$1;
var first = eeFirst;
var defer$2 = typeof setImmediate === "function" ? setImmediate : function(fn) {
  process.nextTick(fn.bind.apply(fn, arguments));
};
function onFinished$1(msg, listener2) {
  if (isFinished$1(msg) !== false) {
    defer$2(listener2, null, msg);
    return msg;
  }
  attachListener(msg, listener2);
  return msg;
}
function isFinished$1(msg) {
  var socket = msg.socket;
  if (typeof msg.finished === "boolean") {
    return Boolean(msg.finished || socket && !socket.writable);
  }
  if (typeof msg.complete === "boolean") {
    return Boolean(msg.upgrade || !socket || !socket.readable || msg.complete && !msg.readable);
  }
  return void 0;
}
function attachFinishedListener(msg, callback) {
  var eeMsg;
  var eeSocket;
  var finished = false;
  function onFinish(error2) {
    eeMsg.cancel();
    eeSocket.cancel();
    finished = true;
    callback(error2);
  }
  eeMsg = eeSocket = first([[msg, "end", "finish"]], onFinish);
  function onSocket(socket) {
    msg.removeListener("socket", onSocket);
    if (finished) return;
    if (eeMsg !== eeSocket) return;
    eeSocket = first([[socket, "error", "close"]], onFinish);
  }
  if (msg.socket) {
    onSocket(msg.socket);
    return;
  }
  msg.on("socket", onSocket);
  if (msg.socket === void 0) {
    patchAssignSocket(msg, onSocket);
  }
}
function attachListener(msg, listener2) {
  var attached = msg.__onFinished;
  if (!attached || !attached.queue) {
    attached = msg.__onFinished = createListener(msg);
    attachFinishedListener(msg, attached);
  }
  attached.queue.push(listener2);
}
function createListener(msg) {
  function listener2(err2) {
    if (msg.__onFinished === listener2) msg.__onFinished = null;
    if (!listener2.queue) return;
    var queue = listener2.queue;
    listener2.queue = null;
    for (var i = 0; i < queue.length; i++) {
      queue[i](err2, msg);
    }
  }
  listener2.queue = [];
  return listener2;
}
function patchAssignSocket(res, callback) {
  var assignSocket = res.assignSocket;
  if (typeof assignSocket !== "function") return;
  res.assignSocket = function _assignSocket(socket) {
    assignSocket.call(this, socket);
    callback(socket);
  };
}
var onFinishedExports = onFinished$2.exports;
var parseurl$1 = { exports: {} };
var url$3 = import_url.default;
var parse$a = url$3.parse;
var Url = url$3.Url;
parseurl$1.exports = parseurl;
parseurl$1.exports.original = originalurl;
function parseurl(req2) {
  var url2 = req2.url;
  if (url2 === void 0) {
    return void 0;
  }
  var parsed = req2._parsedUrl;
  if (fresh(url2, parsed)) {
    return parsed;
  }
  parsed = fastparse(url2);
  parsed._raw = url2;
  return req2._parsedUrl = parsed;
}
function originalurl(req2) {
  var url2 = req2.originalUrl;
  if (typeof url2 !== "string") {
    return parseurl(req2);
  }
  var parsed = req2._parsedOriginalUrl;
  if (fresh(url2, parsed)) {
    return parsed;
  }
  parsed = fastparse(url2);
  parsed._raw = url2;
  return req2._parsedOriginalUrl = parsed;
}
function fastparse(str) {
  if (typeof str !== "string" || str.charCodeAt(0) !== 47) {
    return parse$a(str);
  }
  var pathname = str;
  var query = null;
  var search = null;
  for (var i = 1; i < str.length; i++) {
    switch (str.charCodeAt(i)) {
      case 63:
        if (search === null) {
          pathname = str.substring(0, i);
          query = str.substring(i + 1);
          search = str.substring(i);
        }
        break;
      case 9:
      /* \t */
      case 10:
      /* \n */
      case 12:
      /* \f */
      case 13:
      /* \r */
      case 32:
      /*    */
      case 35:
      /* #  */
      case 160:
      case 65279:
        return parse$a(str);
    }
  }
  var url2 = Url !== void 0 ? new Url() : {};
  url2.path = str;
  url2.href = str;
  url2.pathname = pathname;
  if (search !== null) {
    url2.query = query;
    url2.search = search;
  }
  return url2;
}
function fresh(url2, parsedUrl) {
  return typeof parsedUrl === "object" && parsedUrl !== null && (Url === void 0 || parsedUrl instanceof Url) && parsedUrl._raw === url2;
}
var parseurlExports = parseurl$1.exports;
var require$$0$1 = {
  "100": "Continue",
  "101": "Switching Protocols",
  "102": "Processing",
  "103": "Early Hints",
  "200": "OK",
  "201": "Created",
  "202": "Accepted",
  "203": "Non-Authoritative Information",
  "204": "No Content",
  "205": "Reset Content",
  "206": "Partial Content",
  "207": "Multi-Status",
  "208": "Already Reported",
  "226": "IM Used",
  "300": "Multiple Choices",
  "301": "Moved Permanently",
  "302": "Found",
  "303": "See Other",
  "304": "Not Modified",
  "305": "Use Proxy",
  "306": "(Unused)",
  "307": "Temporary Redirect",
  "308": "Permanent Redirect",
  "400": "Bad Request",
  "401": "Unauthorized",
  "402": "Payment Required",
  "403": "Forbidden",
  "404": "Not Found",
  "405": "Method Not Allowed",
  "406": "Not Acceptable",
  "407": "Proxy Authentication Required",
  "408": "Request Timeout",
  "409": "Conflict",
  "410": "Gone",
  "411": "Length Required",
  "412": "Precondition Failed",
  "413": "Payload Too Large",
  "414": "URI Too Long",
  "415": "Unsupported Media Type",
  "416": "Range Not Satisfiable",
  "417": "Expectation Failed",
  "418": "I'm a teapot",
  "421": "Misdirected Request",
  "422": "Unprocessable Entity",
  "423": "Locked",
  "424": "Failed Dependency",
  "425": "Unordered Collection",
  "426": "Upgrade Required",
  "428": "Precondition Required",
  "429": "Too Many Requests",
  "431": "Request Header Fields Too Large",
  "451": "Unavailable For Legal Reasons",
  "500": "Internal Server Error",
  "501": "Not Implemented",
  "502": "Bad Gateway",
  "503": "Service Unavailable",
  "504": "Gateway Timeout",
  "505": "HTTP Version Not Supported",
  "506": "Variant Also Negotiates",
  "507": "Insufficient Storage",
  "508": "Loop Detected",
  "509": "Bandwidth Limit Exceeded",
  "510": "Not Extended",
  "511": "Network Authentication Required"
};
var codes = require$$0$1;
var statuses$1 = status;
status.STATUS_CODES = codes;
status.codes = populateStatusesMap(status, codes);
status.redirect = {
  300: true,
  301: true,
  302: true,
  303: true,
  305: true,
  307: true,
  308: true
};
status.empty = {
  204: true,
  205: true,
  304: true
};
status.retry = {
  502: true,
  503: true,
  504: true
};
function populateStatusesMap(statuses2, codes2) {
  var arr = [];
  Object.keys(codes2).forEach(function forEachCode(code) {
    var message = codes2[code];
    var status2 = Number(code);
    statuses2[status2] = message;
    statuses2[message] = status2;
    statuses2[message.toLowerCase()] = status2;
    arr.push(status2);
  });
  return arr;
}
function status(code) {
  if (typeof code === "number") {
    if (!status[code]) throw new Error("invalid status code: " + code);
    return code;
  }
  if (typeof code !== "string") {
    throw new TypeError("code must be a number or string");
  }
  var n2 = parseInt(code, 10);
  if (!isNaN(n2)) {
    if (!status[n2]) throw new Error("invalid status code: " + n2);
    return n2;
  }
  n2 = status[code.toLowerCase()];
  if (!n2) throw new Error('invalid status message: "' + code + '"');
  return n2;
}
var unpipe_1 = unpipe$1;
function hasPipeDataListeners(stream3) {
  var listeners = stream3.listeners("data");
  for (var i = 0; i < listeners.length; i++) {
    if (listeners[i].name === "ondata") {
      return true;
    }
  }
  return false;
}
function unpipe$1(stream3) {
  if (!stream3) {
    throw new TypeError("argument stream is required");
  }
  if (typeof stream3.unpipe === "function") {
    stream3.unpipe();
    return;
  }
  if (!hasPipeDataListeners(stream3)) {
    return;
  }
  var listener2;
  var listeners = stream3.listeners("close");
  for (var i = 0; i < listeners.length; i++) {
    listener2 = listeners[i];
    if (listener2.name !== "cleanup" && listener2.name !== "onclose") {
      continue;
    }
    listener2.call(stream3);
  }
}
var debug$9 = nodeExports("finalhandler");
var encodeUrl = encodeurl;
var escapeHtml = escapeHtml_1;
var onFinished = onFinishedExports;
var parseUrl$2 = parseurlExports;
var statuses = statuses$1;
var unpipe = unpipe_1;
var DOUBLE_SPACE_REGEXP = /\x20{2}/g;
var NEWLINE_REGEXP = /\n/g;
var defer$1 = typeof setImmediate === "function" ? setImmediate : function(fn) {
  process.nextTick(fn.bind.apply(fn, arguments));
};
var isFinished = onFinished.isFinished;
function createHtmlDocument(message) {
  var body = escapeHtml(message).replace(NEWLINE_REGEXP, "<br>").replace(DOUBLE_SPACE_REGEXP, " &nbsp;");
  return '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>' + body + "</pre>\n</body>\n</html>\n";
}
var finalhandler_1 = finalhandler$1;
function finalhandler$1(req2, res, options2) {
  var opts = options2 || {};
  var env2 = opts.env || "development";
  var onerror = opts.onerror;
  return function(err2) {
    var headers;
    var msg;
    var status2;
    if (!err2 && headersSent(res)) {
      debug$9("cannot 404 after headers sent");
      return;
    }
    if (err2) {
      status2 = getErrorStatusCode(err2);
      if (status2 === void 0) {
        status2 = getResponseStatusCode(res);
      } else {
        headers = getErrorHeaders(err2);
      }
      msg = getErrorMessage(err2, status2, env2);
    } else {
      status2 = 404;
      msg = "Cannot " + req2.method + " " + encodeUrl(getResourceName(req2));
    }
    debug$9("default %s", status2);
    if (err2 && onerror) {
      defer$1(onerror, err2, req2, res);
    }
    if (headersSent(res)) {
      debug$9("cannot %d after headers sent", status2);
      req2.socket.destroy();
      return;
    }
    send$2(req2, res, status2, headers, msg);
  };
}
function getErrorHeaders(err2) {
  if (!err2.headers || typeof err2.headers !== "object") {
    return void 0;
  }
  var headers = /* @__PURE__ */ Object.create(null);
  var keys = Object.keys(err2.headers);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    headers[key] = err2.headers[key];
  }
  return headers;
}
function getErrorMessage(err2, status2, env2) {
  var msg;
  if (env2 !== "production") {
    msg = err2.stack;
    if (!msg && typeof err2.toString === "function") {
      msg = err2.toString();
    }
  }
  return msg || statuses[status2];
}
function getErrorStatusCode(err2) {
  if (typeof err2.status === "number" && err2.status >= 400 && err2.status < 600) {
    return err2.status;
  }
  if (typeof err2.statusCode === "number" && err2.statusCode >= 400 && err2.statusCode < 600) {
    return err2.statusCode;
  }
  return void 0;
}
function getResourceName(req2) {
  try {
    return parseUrl$2.original(req2).pathname;
  } catch (e2) {
    return "resource";
  }
}
function getResponseStatusCode(res) {
  var status2 = res.statusCode;
  if (typeof status2 !== "number" || status2 < 400 || status2 > 599) {
    status2 = 500;
  }
  return status2;
}
function headersSent(res) {
  return typeof res.headersSent !== "boolean" ? Boolean(res._header) : res.headersSent;
}
function send$2(req2, res, status2, headers, message) {
  function write() {
    var body = createHtmlDocument(message);
    res.statusCode = status2;
    res.statusMessage = statuses[status2];
    setHeaders(res, headers);
    res.setHeader("Content-Security-Policy", "default-src 'none'");
    res.setHeader("X-Content-Type-Options", "nosniff");
    res.setHeader("Content-Type", "text/html; charset=utf-8");
    res.setHeader("Content-Length", Buffer.byteLength(body, "utf8"));
    if (req2.method === "HEAD") {
      res.end();
      return;
    }
    res.end(body, "utf8");
  }
  if (isFinished(req2)) {
    write();
    return;
  }
  unpipe(req2);
  onFinished(req2, write);
  req2.resume();
}
function setHeaders(res, headers) {
  if (!headers) {
    return;
  }
  var keys = Object.keys(headers);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    res.setHeader(key, headers[key]);
  }
}
var utilsMerge = { exports: {} };
(function(module, exports) {
  module.exports = function(a, b) {
    if (a && b) {
      for (var key in b) {
        a[key] = b[key];
      }
    }
    return a;
  };
})(utilsMerge);
var utilsMergeExports = utilsMerge.exports;
var debug$8 = nodeExports("connect:dispatcher");
var EventEmitter$3 = import_events.default.EventEmitter;
var finalhandler = finalhandler_1;
var http$4 = import_http.default;
var merge = utilsMergeExports;
var parseUrl$1 = parseurlExports;
var connect = createServer$1;
var env = "development";
var proto = {};
var defer = typeof setImmediate === "function" ? setImmediate : function(fn) {
  process.nextTick(fn.bind.apply(fn, arguments));
};
function createServer$1() {
  function app(req2, res, next) {
    app.handle(req2, res, next);
  }
  merge(app, proto);
  merge(app, EventEmitter$3.prototype);
  app.route = "/";
  app.stack = [];
  return app;
}
proto.use = function use(route, fn) {
  var handle2 = fn;
  var path4 = route;
  if (typeof route !== "string") {
    handle2 = route;
    path4 = "/";
  }
  if (typeof handle2.handle === "function") {
    var server = handle2;
    server.route = path4;
    handle2 = function(req2, res, next) {
      server.handle(req2, res, next);
    };
  }
  if (handle2 instanceof http$4.Server) {
    handle2 = handle2.listeners("request")[0];
  }
  if (path4[path4.length - 1] === "/") {
    path4 = path4.slice(0, -1);
  }
  debug$8("use %s %s", path4 || "/", handle2.name || "anonymous");
  this.stack.push({ route: path4, handle: handle2 });
  return this;
};
proto.handle = function handle(req2, res, out) {
  var index = 0;
  var protohost = getProtohost(req2.url) || "";
  var removed = "";
  var slashAdded = false;
  var stack = this.stack;
  var done = out || finalhandler(req2, res, {
    env,
    onerror: logerror
  });
  req2.originalUrl = req2.originalUrl || req2.url;
  function next(err2) {
    if (slashAdded) {
      req2.url = req2.url.substr(1);
      slashAdded = false;
    }
    if (removed.length !== 0) {
      req2.url = protohost + removed + req2.url.substr(protohost.length);
      removed = "";
    }
    var layer = stack[index++];
    if (!layer) {
      defer(done, err2);
      return;
    }
    var path4 = parseUrl$1(req2).pathname || "/";
    var route = layer.route;
    if (path4.toLowerCase().substr(0, route.length) !== route.toLowerCase()) {
      return next(err2);
    }
    var c = path4.length > route.length && path4[route.length];
    if (c && c !== "/" && c !== ".") {
      return next(err2);
    }
    if (route.length !== 0 && route !== "/") {
      removed = route;
      req2.url = protohost + req2.url.substr(protohost.length + removed.length);
      if (!protohost && req2.url[0] !== "/") {
        req2.url = "/" + req2.url;
        slashAdded = true;
      }
    }
    call(layer.handle, route, err2, req2, res, next);
  }
  next();
};
proto.listen = function listen() {
  var server = http$4.createServer(this);
  return server.listen.apply(server, arguments);
};
function call(handle2, route, err2, req2, res, next) {
  var arity = handle2.length;
  var error2 = err2;
  var hasError = Boolean(err2);
  debug$8("%s %s : %s", handle2.name || "<anonymous>", route, req2.originalUrl);
  try {
    if (hasError && arity === 4) {
      handle2(err2, req2, res, next);
      return;
    } else if (!hasError && arity < 4) {
      handle2(req2, res, next);
      return;
    }
  } catch (e2) {
    error2 = e2;
  }
  next(error2);
}
function logerror(err2) {
  if (env !== "test") console.error(err2.stack || err2.toString());
}
function getProtohost(url2) {
  if (url2.length === 0 || url2[0] === "/") {
    return void 0;
  }
  var fqdnIndex = url2.indexOf("://");
  return fqdnIndex !== -1 && url2.lastIndexOf("?", fqdnIndex) === -1 ? url2.substr(0, url2.indexOf("/", 3 + fqdnIndex)) : void 0;
}
var connect$1 = getDefaultExportFromCjs(connect);
var lib = { exports: {} };
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
function toObject(val) {
  if (val === null || val === void 0) {
    throw new TypeError("Object.assign cannot be called with null or undefined");
  }
  return Object(val);
}
function shouldUseNative() {
  try {
    if (!Object.assign) {
      return false;
    }
    var test1 = new String("abc");
    test1[5] = "de";
    if (Object.getOwnPropertyNames(test1)[0] === "5") {
      return false;
    }
    var test2 = {};
    for (var i = 0; i < 10; i++) {
      test2["_" + String.fromCharCode(i)] = i;
    }
    var order2 = Object.getOwnPropertyNames(test2).map(function(n2) {
      return test2[n2];
    });
    if (order2.join("") !== "0123456789") {
      return false;
    }
    var test3 = {};
    "abcdefghijklmnopqrst".split("").forEach(function(letter) {
      test3[letter] = letter;
    });
    if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
      return false;
    }
    return true;
  } catch (err2) {
    return false;
  }
}
var objectAssign = shouldUseNative() ? Object.assign : function(target, source) {
  var from;
  var to = toObject(target);
  var symbols;
  for (var s2 = 1; s2 < arguments.length; s2++) {
    from = Object(arguments[s2]);
    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
    if (getOwnPropertySymbols) {
      symbols = getOwnPropertySymbols(from);
      for (var i = 0; i < symbols.length; i++) {
        if (propIsEnumerable.call(from, symbols[i])) {
          to[symbols[i]] = from[symbols[i]];
        }
      }
    }
  }
  return to;
};
var vary$1 = { exports: {} };
vary$1.exports = vary;
vary$1.exports.append = append$1;
var FIELD_NAME_REGEXP = /^[!#$%&'*+\-.^_`|~0-9A-Za-z]+$/;
function append$1(header, field) {
  if (typeof header !== "string") {
    throw new TypeError("header argument is required");
  }
  if (!field) {
    throw new TypeError("field argument is required");
  }
  var fields = !Array.isArray(field) ? parse$9(String(field)) : field;
  for (var j = 0; j < fields.length; j++) {
    if (!FIELD_NAME_REGEXP.test(fields[j])) {
      throw new TypeError("field argument contains an invalid header name");
    }
  }
  if (header === "*") {
    return header;
  }
  var val = header;
  var vals = parse$9(header.toLowerCase());
  if (fields.indexOf("*") !== -1 || vals.indexOf("*") !== -1) {
    return "*";
  }
  for (var i = 0; i < fields.length; i++) {
    var fld = fields[i].toLowerCase();
    if (vals.indexOf(fld) === -1) {
      vals.push(fld);
      val = val ? val + ", " + fields[i] : fields[i];
    }
  }
  return val;
}
function parse$9(header) {
  var end = 0;
  var list = [];
  var start = 0;
  for (var i = 0, len = header.length; i < len; i++) {
    switch (header.charCodeAt(i)) {
      case 32:
        if (start === end) {
          start = end = i + 1;
        }
        break;
      case 44:
        list.push(header.substring(start, end));
        start = end = i + 1;
        break;
      default:
        end = i + 1;
        break;
    }
  }
  list.push(header.substring(start, end));
  return list;
}
function vary(res, field) {
  if (!res || !res.getHeader || !res.setHeader) {
    throw new TypeError("res argument is required");
  }
  var val = res.getHeader("Vary") || "";
  var header = Array.isArray(val) ? val.join(", ") : String(val);
  if (val = append$1(header, field)) {
    res.setHeader("Vary", val);
  }
}
var varyExports = vary$1.exports;
(function() {
  var assign = objectAssign;
  var vary2 = varyExports;
  var defaults = {
    origin: "*",
    methods: "GET,HEAD,PUT,PATCH,POST,DELETE",
    preflightContinue: false,
    optionsSuccessStatus: 204
  };
  function isString2(s2) {
    return typeof s2 === "string" || s2 instanceof String;
  }
  function isOriginAllowed(origin, allowedOrigin) {
    if (Array.isArray(allowedOrigin)) {
      for (var i = 0; i < allowedOrigin.length; ++i) {
        if (isOriginAllowed(origin, allowedOrigin[i])) {
          return true;
        }
      }
      return false;
    } else if (isString2(allowedOrigin)) {
      return origin === allowedOrigin;
    } else if (allowedOrigin instanceof RegExp) {
      return allowedOrigin.test(origin);
    } else {
      return !!allowedOrigin;
    }
  }
  function configureOrigin(options2, req2) {
    var requestOrigin = req2.headers.origin, headers = [], isAllowed;
    if (!options2.origin || options2.origin === "*") {
      headers.push([{
        key: "Access-Control-Allow-Origin",
        value: "*"
      }]);
    } else if (isString2(options2.origin)) {
      headers.push([{
        key: "Access-Control-Allow-Origin",
        value: options2.origin
      }]);
      headers.push([{
        key: "Vary",
        value: "Origin"
      }]);
    } else {
      isAllowed = isOriginAllowed(requestOrigin, options2.origin);
      headers.push([{
        key: "Access-Control-Allow-Origin",
        value: isAllowed ? requestOrigin : false
      }]);
      headers.push([{
        key: "Vary",
        value: "Origin"
      }]);
    }
    return headers;
  }
  function configureMethods(options2) {
    var methods = options2.methods;
    if (methods.join) {
      methods = options2.methods.join(",");
    }
    return {
      key: "Access-Control-Allow-Methods",
      value: methods
    };
  }
  function configureCredentials(options2) {
    if (options2.credentials === true) {
      return {
        key: "Access-Control-Allow-Credentials",
        value: "true"
      };
    }
    return null;
  }
  function configureAllowedHeaders(options2, req2) {
    var allowedHeaders = options2.allowedHeaders || options2.headers;
    var headers = [];
    if (!allowedHeaders) {
      allowedHeaders = req2.headers["access-control-request-headers"];
      headers.push([{
        key: "Vary",
        value: "Access-Control-Request-Headers"
      }]);
    } else if (allowedHeaders.join) {
      allowedHeaders = allowedHeaders.join(",");
    }
    if (allowedHeaders && allowedHeaders.length) {
      headers.push([{
        key: "Access-Control-Allow-Headers",
        value: allowedHeaders
      }]);
    }
    return headers;
  }
  function configureExposedHeaders(options2) {
    var headers = options2.exposedHeaders;
    if (!headers) {
      return null;
    } else if (headers.join) {
      headers = headers.join(",");
    }
    if (headers && headers.length) {
      return {
        key: "Access-Control-Expose-Headers",
        value: headers
      };
    }
    return null;
  }
  function configureMaxAge(options2) {
    var maxAge = (typeof options2.maxAge === "number" || options2.maxAge) && options2.maxAge.toString();
    if (maxAge && maxAge.length) {
      return {
        key: "Access-Control-Max-Age",
        value: maxAge
      };
    }
    return null;
  }
  function applyHeaders(headers, res) {
    for (var i = 0, n2 = headers.length; i < n2; i++) {
      var header = headers[i];
      if (header) {
        if (Array.isArray(header)) {
          applyHeaders(header, res);
        } else if (header.key === "Vary" && header.value) {
          vary2(res, header.value);
        } else if (header.value) {
          res.setHeader(header.key, header.value);
        }
      }
    }
  }
  function cors(options2, req2, res, next) {
    var headers = [], method = req2.method && req2.method.toUpperCase && req2.method.toUpperCase();
    if (method === "OPTIONS") {
      headers.push(configureOrigin(options2, req2));
      headers.push(configureCredentials(options2));
      headers.push(configureMethods(options2));
      headers.push(configureAllowedHeaders(options2, req2));
      headers.push(configureMaxAge(options2));
      headers.push(configureExposedHeaders(options2));
      applyHeaders(headers, res);
      if (options2.preflightContinue) {
        next();
      } else {
        res.statusCode = options2.optionsSuccessStatus;
        res.setHeader("Content-Length", "0");
        res.end();
      }
    } else {
      headers.push(configureOrigin(options2, req2));
      headers.push(configureCredentials(options2));
      headers.push(configureExposedHeaders(options2));
      applyHeaders(headers, res);
      next();
    }
  }
  function middlewareWrapper(o2) {
    var optionsCallback = null;
    if (typeof o2 === "function") {
      optionsCallback = o2;
    } else {
      optionsCallback = function(req2, cb) {
        cb(null, o2);
      };
    }
    return function corsMiddleware2(req2, res, next) {
      optionsCallback(req2, function(err2, options2) {
        if (err2) {
          next(err2);
        } else {
          var corsOptions = assign({}, defaults, options2);
          var originCallback = null;
          if (corsOptions.origin && typeof corsOptions.origin === "function") {
            originCallback = corsOptions.origin;
          } else if (corsOptions.origin) {
            originCallback = function(origin, cb) {
              cb(null, corsOptions.origin);
            };
          }
          if (originCallback) {
            originCallback(req2.headers.origin, function(err22, origin) {
              if (err22 || !origin) {
                next(err22);
              } else {
                corsOptions.origin = origin;
                cors(corsOptions, req2, res, next);
              }
            });
          } else {
            next();
          }
        }
      });
    };
  }
  lib.exports = middlewareWrapper;
})();
var libExports = lib.exports;
var corsMiddleware = getDefaultExportFromCjs(libExports);
var chokidar = {};
var fs$5 = import_fs.default;
var { Readable } = import_stream.default;
var sysPath$3 = import_path2.default;
var { promisify: promisify$3 } = import_util.default;
var picomatch$1 = import_picomatch2.default;
var readdir$1 = promisify$3(fs$5.readdir);
var stat$3 = promisify$3(fs$5.stat);
var lstat$2 = promisify$3(fs$5.lstat);
var realpath$1 = promisify$3(fs$5.realpath);
var BANG$2 = "!";
var RECURSIVE_ERROR_CODE = "READDIRP_RECURSIVE_ERROR";
var NORMAL_FLOW_ERRORS = /* @__PURE__ */ new Set(["ENOENT", "EPERM", "EACCES", "ELOOP", RECURSIVE_ERROR_CODE]);
var FILE_TYPE = "files";
var DIR_TYPE = "directories";
var FILE_DIR_TYPE = "files_directories";
var EVERYTHING_TYPE = "all";
var ALL_TYPES = [FILE_TYPE, DIR_TYPE, FILE_DIR_TYPE, EVERYTHING_TYPE];
var isNormalFlowError = (error2) => NORMAL_FLOW_ERRORS.has(error2.code);
var [maj, min] = process.versions.node.split(".").slice(0, 2).map((n2) => Number.parseInt(n2, 10));
var wantBigintFsStats = process.platform === "win32" && (maj > 10 || maj === 10 && min >= 5);
var normalizeFilter$1 = (filter2) => {
  if (filter2 === void 0) return;
  if (typeof filter2 === "function") return filter2;
  if (typeof filter2 === "string") {
    const glob2 = picomatch$1(filter2.trim());
    return (entry) => glob2(entry.basename);
  }
  if (Array.isArray(filter2)) {
    const positive = [];
    const negative = [];
    for (const item of filter2) {
      const trimmed = item.trim();
      if (trimmed.charAt(0) === BANG$2) {
        negative.push(picomatch$1(trimmed.slice(1)));
      } else {
        positive.push(picomatch$1(trimmed));
      }
    }
    if (negative.length > 0) {
      if (positive.length > 0) {
        return (entry) => positive.some((f2) => f2(entry.basename)) && !negative.some((f2) => f2(entry.basename));
      }
      return (entry) => !negative.some((f2) => f2(entry.basename));
    }
    return (entry) => positive.some((f2) => f2(entry.basename));
  }
};
var ReaddirpStream = class _ReaddirpStream extends Readable {
  static get defaultOptions() {
    return {
      root: ".",
      /* eslint-disable no-unused-vars */
      fileFilter: (path4) => true,
      directoryFilter: (path4) => true,
      /* eslint-enable no-unused-vars */
      type: FILE_TYPE,
      lstat: false,
      depth: 2147483648,
      alwaysStat: false
    };
  }
  constructor(options2 = {}) {
    super({
      objectMode: true,
      autoDestroy: true,
      highWaterMark: options2.highWaterMark || 4096
    });
    const opts = { ..._ReaddirpStream.defaultOptions, ...options2 };
    const { root, type } = opts;
    this._fileFilter = normalizeFilter$1(opts.fileFilter);
    this._directoryFilter = normalizeFilter$1(opts.directoryFilter);
    const statMethod = opts.lstat ? lstat$2 : stat$3;
    if (wantBigintFsStats) {
      this._stat = (path4) => statMethod(path4, { bigint: true });
    } else {
      this._stat = statMethod;
    }
    this._maxDepth = opts.depth;
    this._wantsDir = [DIR_TYPE, FILE_DIR_TYPE, EVERYTHING_TYPE].includes(type);
    this._wantsFile = [FILE_TYPE, FILE_DIR_TYPE, EVERYTHING_TYPE].includes(type);
    this._wantsEverything = type === EVERYTHING_TYPE;
    this._root = sysPath$3.resolve(root);
    this._isDirent = "Dirent" in fs$5 && !opts.alwaysStat;
    this._statsProp = this._isDirent ? "dirent" : "stats";
    this._rdOptions = { encoding: "utf8", withFileTypes: this._isDirent };
    this.parents = [this._exploreDir(root, 1)];
    this.reading = false;
    this.parent = void 0;
  }
  async _read(batch) {
    if (this.reading) return;
    this.reading = true;
    try {
      while (!this.destroyed && batch > 0) {
        const { path: path4, depth, files = [] } = this.parent || {};
        if (files.length > 0) {
          const slice = files.splice(0, batch).map((dirent) => this._formatEntry(dirent, path4));
          for (const entry of await Promise.all(slice)) {
            if (this.destroyed) return;
            const entryType = await this._getEntryType(entry);
            if (entryType === "directory" && this._directoryFilter(entry)) {
              if (depth <= this._maxDepth) {
                this.parents.push(this._exploreDir(entry.fullPath, depth + 1));
              }
              if (this._wantsDir) {
                this.push(entry);
                batch--;
              }
            } else if ((entryType === "file" || this._includeAsFile(entry)) && this._fileFilter(entry)) {
              if (this._wantsFile) {
                this.push(entry);
                batch--;
              }
            }
          }
        } else {
          const parent = this.parents.pop();
          if (!parent) {
            this.push(null);
            break;
          }
          this.parent = await parent;
          if (this.destroyed) return;
        }
      }
    } catch (error2) {
      this.destroy(error2);
    } finally {
      this.reading = false;
    }
  }
  async _exploreDir(path4, depth) {
    let files;
    try {
      files = await readdir$1(path4, this._rdOptions);
    } catch (error2) {
      this._onError(error2);
    }
    return { files, depth, path: path4 };
  }
  async _formatEntry(dirent, path4) {
    let entry;
    try {
      const basename2 = this._isDirent ? dirent.name : dirent;
      const fullPath = sysPath$3.resolve(sysPath$3.join(path4, basename2));
      entry = { path: sysPath$3.relative(this._root, fullPath), fullPath, basename: basename2 };
      entry[this._statsProp] = this._isDirent ? dirent : await this._stat(fullPath);
    } catch (err2) {
      this._onError(err2);
    }
    return entry;
  }
  _onError(err2) {
    if (isNormalFlowError(err2) && !this.destroyed) {
      this.emit("warn", err2);
    } else {
      this.destroy(err2);
    }
  }
  async _getEntryType(entry) {
    const stats = entry && entry[this._statsProp];
    if (!stats) {
      return;
    }
    if (stats.isFile()) {
      return "file";
    }
    if (stats.isDirectory()) {
      return "directory";
    }
    if (stats && stats.isSymbolicLink()) {
      const full = entry.fullPath;
      try {
        const entryRealPath = await realpath$1(full);
        const entryRealPathStats = await lstat$2(entryRealPath);
        if (entryRealPathStats.isFile()) {
          return "file";
        }
        if (entryRealPathStats.isDirectory()) {
          const len = entryRealPath.length;
          if (full.startsWith(entryRealPath) && full.substr(len, 1) === sysPath$3.sep) {
            const recursiveError = new Error(
              `Circular symlink detected: "${full}" points to "${entryRealPath}"`
            );
            recursiveError.code = RECURSIVE_ERROR_CODE;
            return this._onError(recursiveError);
          }
          return "directory";
        }
      } catch (error2) {
        this._onError(error2);
      }
    }
  }
  _includeAsFile(entry) {
    const stats = entry && entry[this._statsProp];
    return stats && this._wantsEverything && !stats.isDirectory();
  }
};
var readdirp$1 = (root, options2 = {}) => {
  let type = options2.entryType || options2.type;
  if (type === "both") type = FILE_DIR_TYPE;
  if (type) options2.type = type;
  if (!root) {
    throw new Error("readdirp: root argument is required. Usage: readdirp(root, options)");
  } else if (typeof root !== "string") {
    throw new TypeError("readdirp: root argument must be a string. Usage: readdirp(root, options)");
  } else if (type && !ALL_TYPES.includes(type)) {
    throw new Error(`readdirp: Invalid type passed. Use one of ${ALL_TYPES.join(", ")}`);
  }
  options2.root = root;
  return new ReaddirpStream(options2);
};
var readdirpPromise = (root, options2 = {}) => {
  return new Promise((resolve4, reject) => {
    const files = [];
    readdirp$1(root, options2).on("data", (entry) => files.push(entry)).on("end", () => resolve4(files)).on("error", (error2) => reject(error2));
  });
};
readdirp$1.promise = readdirpPromise;
readdirp$1.ReaddirpStream = ReaddirpStream;
readdirp$1.default = readdirp$1;
var readdirp_1 = readdirp$1;
var anymatch$2 = { exports: {} };
var normalizePath$2 = function(path4, stripTrailing) {
  if (typeof path4 !== "string") {
    throw new TypeError("expected path to be a string");
  }
  if (path4 === "\\" || path4 === "/") return "/";
  var len = path4.length;
  if (len <= 1) return path4;
  var prefix = "";
  if (len > 4 && path4[3] === "\\") {
    var ch = path4[2];
    if ((ch === "?" || ch === ".") && path4.slice(0, 2) === "\\\\") {
      path4 = path4.slice(2);
      prefix = "//";
    }
  }
  var segs = path4.split(/[/\\]+/);
  if (stripTrailing !== false && segs[segs.length - 1] === "") {
    segs.pop();
  }
  return prefix + segs.join("/");
};
var anymatch_1 = anymatch$2.exports;
Object.defineProperty(anymatch_1, "__esModule", { value: true });
var picomatch2 = import_picomatch2.default;
var normalizePath$1 = normalizePath$2;
var BANG$1 = "!";
var DEFAULT_OPTIONS = { returnIndex: false };
var arrify$1 = (item) => Array.isArray(item) ? item : [item];
var createPattern = (matcher, options2) => {
  if (typeof matcher === "function") {
    return matcher;
  }
  if (typeof matcher === "string") {
    const glob2 = picomatch2(matcher, options2);
    return (string) => matcher === string || glob2(string);
  }
  if (matcher instanceof RegExp) {
    return (string) => matcher.test(string);
  }
  return (string) => false;
};
var matchPatterns = (patterns, negPatterns, args, returnIndex) => {
  const isList = Array.isArray(args);
  const _path = isList ? args[0] : args;
  if (!isList && typeof _path !== "string") {
    throw new TypeError("anymatch: second argument must be a string: got " + Object.prototype.toString.call(_path));
  }
  const path4 = normalizePath$1(_path, false);
  for (let index = 0; index < negPatterns.length; index++) {
    const nglob = negPatterns[index];
    if (nglob(path4)) {
      return returnIndex ? -1 : false;
    }
  }
  const applied = isList && [path4].concat(args.slice(1));
  for (let index = 0; index < patterns.length; index++) {
    const pattern = patterns[index];
    if (isList ? pattern(...applied) : pattern(path4)) {
      return returnIndex ? index : true;
    }
  }
  return returnIndex ? -1 : false;
};
var anymatch$1 = (matchers, testString, options2 = DEFAULT_OPTIONS) => {
  if (matchers == null) {
    throw new TypeError("anymatch: specify first argument");
  }
  const opts = typeof options2 === "boolean" ? { returnIndex: options2 } : options2;
  const returnIndex = opts.returnIndex || false;
  const mtchers = arrify$1(matchers);
  const negatedGlobs = mtchers.filter((item) => typeof item === "string" && item.charAt(0) === BANG$1).map((item) => item.slice(1)).map((item) => picomatch2(item, opts));
  const patterns = mtchers.filter((item) => typeof item !== "string" || typeof item === "string" && item.charAt(0) !== BANG$1).map((matcher) => createPattern(matcher, opts));
  if (testString == null) {
    return (testString2, ri = false) => {
      const returnIndex2 = typeof ri === "boolean" ? ri : false;
      return matchPatterns(patterns, negatedGlobs, testString2, returnIndex2);
    };
  }
  return matchPatterns(patterns, negatedGlobs, testString, returnIndex);
};
anymatch$1.default = anymatch$1;
anymatch$2.exports = anymatch$1;
var anymatchExports = anymatch$2.exports;
var isExtglob$1 = function isExtglob(str) {
  if (typeof str !== "string" || str === "") {
    return false;
  }
  var match;
  while (match = /(\\).|([@?!+*]\(.*\))/g.exec(str)) {
    if (match[2]) return true;
    str = str.slice(match.index + match[0].length);
  }
  return false;
};
var isExtglob2 = isExtglob$1;
var chars2 = { "{": "}", "(": ")", "[": "]" };
var strictCheck = function(str) {
  if (str[0] === "!") {
    return true;
  }
  var index = 0;
  var pipeIndex = -2;
  var closeSquareIndex = -2;
  var closeCurlyIndex = -2;
  var closeParenIndex = -2;
  var backSlashIndex = -2;
  while (index < str.length) {
    if (str[index] === "*") {
      return true;
    }
    if (str[index + 1] === "?" && /[\].+)]/.test(str[index])) {
      return true;
    }
    if (closeSquareIndex !== -1 && str[index] === "[" && str[index + 1] !== "]") {
      if (closeSquareIndex < index) {
        closeSquareIndex = str.indexOf("]", index);
      }
      if (closeSquareIndex > index) {
        if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {
          return true;
        }
        backSlashIndex = str.indexOf("\\", index);
        if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {
          return true;
        }
      }
    }
    if (closeCurlyIndex !== -1 && str[index] === "{" && str[index + 1] !== "}") {
      closeCurlyIndex = str.indexOf("}", index);
      if (closeCurlyIndex > index) {
        backSlashIndex = str.indexOf("\\", index);
        if (backSlashIndex === -1 || backSlashIndex > closeCurlyIndex) {
          return true;
        }
      }
    }
    if (closeParenIndex !== -1 && str[index] === "(" && str[index + 1] === "?" && /[:!=]/.test(str[index + 2]) && str[index + 3] !== ")") {
      closeParenIndex = str.indexOf(")", index);
      if (closeParenIndex > index) {
        backSlashIndex = str.indexOf("\\", index);
        if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {
          return true;
        }
      }
    }
    if (pipeIndex !== -1 && str[index] === "(" && str[index + 1] !== "|") {
      if (pipeIndex < index) {
        pipeIndex = str.indexOf("|", index);
      }
      if (pipeIndex !== -1 && str[pipeIndex + 1] !== ")") {
        closeParenIndex = str.indexOf(")", pipeIndex);
        if (closeParenIndex > pipeIndex) {
          backSlashIndex = str.indexOf("\\", pipeIndex);
          if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {
            return true;
          }
        }
      }
    }
    if (str[index] === "\\") {
      var open2 = str[index + 1];
      index += 2;
      var close2 = chars2[open2];
      if (close2) {
        var n2 = str.indexOf(close2, index);
        if (n2 !== -1) {
          index = n2 + 1;
        }
      }
      if (str[index] === "!") {
        return true;
      }
    } else {
      index++;
    }
  }
  return false;
};
var relaxedCheck = function(str) {
  if (str[0] === "!") {
    return true;
  }
  var index = 0;
  while (index < str.length) {
    if (/[*?{}()[\]]/.test(str[index])) {
      return true;
    }
    if (str[index] === "\\") {
      var open2 = str[index + 1];
      index += 2;
      var close2 = chars2[open2];
      if (close2) {
        var n2 = str.indexOf(close2, index);
        if (n2 !== -1) {
          index = n2 + 1;
        }
      }
      if (str[index] === "!") {
        return true;
      }
    } else {
      index++;
    }
  }
  return false;
};
var isGlob$2 = function isGlob(str, options2) {
  if (typeof str !== "string" || str === "") {
    return false;
  }
  if (isExtglob2(str)) {
    return true;
  }
  var check = strictCheck;
  if (options2 && options2.strict === false) {
    check = relaxedCheck;
  }
  return check(str);
};
var isGlob$1 = isGlob$2;
var pathPosixDirname = import_path2.default.posix.dirname;
var isWin32 = import_os.default.platform() === "win32";
var slash2 = "/";
var backslash = /\\/g;
var enclosure = /[\{\[].*[\}\]]$/;
var globby = /(^|[^\\])([\{\[]|\([^\)]+$)/;
var escaped = /\\([\!\*\?\|\[\]\(\)\{\}])/g;
var globParent$1 = function globParent(str, opts) {
  var options2 = Object.assign({ flipBackslashes: true }, opts);
  if (options2.flipBackslashes && isWin32 && str.indexOf(slash2) < 0) {
    str = str.replace(backslash, slash2);
  }
  if (enclosure.test(str)) {
    str += slash2;
  }
  str += "a";
  do {
    str = pathPosixDirname(str);
  } while (isGlob$1(str) || globby.test(str));
  return str.replace(escaped, "$1");
};
var utils$3 = {};
(function(exports) {
  exports.isInteger = (num) => {
    if (typeof num === "number") {
      return Number.isInteger(num);
    }
    if (typeof num === "string" && num.trim() !== "") {
      return Number.isInteger(Number(num));
    }
    return false;
  };
  exports.find = (node2, type) => node2.nodes.find((node3) => node3.type === type);
  exports.exceedsLimit = (min2, max, step = 1, limit) => {
    if (limit === false) return false;
    if (!exports.isInteger(min2) || !exports.isInteger(max)) return false;
    return (Number(max) - Number(min2)) / Number(step) >= limit;
  };
  exports.escapeNode = (block, n2 = 0, type) => {
    const node2 = block.nodes[n2];
    if (!node2) return;
    if (type && node2.type === type || node2.type === "open" || node2.type === "close") {
      if (node2.escaped !== true) {
        node2.value = "\\" + node2.value;
        node2.escaped = true;
      }
    }
  };
  exports.encloseBrace = (node2) => {
    if (node2.type !== "brace") return false;
    if (node2.commas >> 0 + node2.ranges >> 0 === 0) {
      node2.invalid = true;
      return true;
    }
    return false;
  };
  exports.isInvalidBrace = (block) => {
    if (block.type !== "brace") return false;
    if (block.invalid === true || block.dollar) return true;
    if (block.commas >> 0 + block.ranges >> 0 === 0) {
      block.invalid = true;
      return true;
    }
    if (block.open !== true || block.close !== true) {
      block.invalid = true;
      return true;
    }
    return false;
  };
  exports.isOpenOrClose = (node2) => {
    if (node2.type === "open" || node2.type === "close") {
      return true;
    }
    return node2.open === true || node2.close === true;
  };
  exports.reduce = (nodes) => nodes.reduce((acc, node2) => {
    if (node2.type === "text") acc.push(node2.value);
    if (node2.type === "range") node2.type = "text";
    return acc;
  }, []);
  exports.flatten = (...args) => {
    const result = [];
    const flat = (arr) => {
      for (let i = 0; i < arr.length; i++) {
        const ele = arr[i];
        if (Array.isArray(ele)) {
          flat(ele);
          continue;
        }
        if (ele !== void 0) {
          result.push(ele);
        }
      }
      return result;
    };
    flat(args);
    return result;
  };
})(utils$3);
var utils$2 = utils$3;
var stringify$4 = (ast, options2 = {}) => {
  const stringify2 = (node2, parent = {}) => {
    const invalidBlock = options2.escapeInvalid && utils$2.isInvalidBrace(parent);
    const invalidNode = node2.invalid === true && options2.escapeInvalid === true;
    let output = "";
    if (node2.value) {
      if ((invalidBlock || invalidNode) && utils$2.isOpenOrClose(node2)) {
        return "\\" + node2.value;
      }
      return node2.value;
    }
    if (node2.value) {
      return node2.value;
    }
    if (node2.nodes) {
      for (const child of node2.nodes) {
        output += stringify2(child);
      }
    }
    return output;
  };
  return stringify2(ast);
};
var isNumber$2 = function(num) {
  if (typeof num === "number") {
    return num - num === 0;
  }
  if (typeof num === "string" && num.trim() !== "") {
    return Number.isFinite ? Number.isFinite(+num) : isFinite(+num);
  }
  return false;
};
var isNumber$1 = isNumber$2;
var toRegexRange$1 = (min2, max, options2) => {
  if (isNumber$1(min2) === false) {
    throw new TypeError("toRegexRange: expected the first argument to be a number");
  }
  if (max === void 0 || min2 === max) {
    return String(min2);
  }
  if (isNumber$1(max) === false) {
    throw new TypeError("toRegexRange: expected the second argument to be a number.");
  }
  let opts = { relaxZeros: true, ...options2 };
  if (typeof opts.strictZeros === "boolean") {
    opts.relaxZeros = opts.strictZeros === false;
  }
  let relax = String(opts.relaxZeros);
  let shorthand = String(opts.shorthand);
  let capture = String(opts.capture);
  let wrap2 = String(opts.wrap);
  let cacheKey = min2 + ":" + max + "=" + relax + shorthand + capture + wrap2;
  if (toRegexRange$1.cache.hasOwnProperty(cacheKey)) {
    return toRegexRange$1.cache[cacheKey].result;
  }
  let a = Math.min(min2, max);
  let b = Math.max(min2, max);
  if (Math.abs(a - b) === 1) {
    let result = min2 + "|" + max;
    if (opts.capture) {
      return `(${result})`;
    }
    if (opts.wrap === false) {
      return result;
    }
    return `(?:${result})`;
  }
  let isPadded = hasPadding(min2) || hasPadding(max);
  let state = { min: min2, max, a, b };
  let positives = [];
  let negatives = [];
  if (isPadded) {
    state.isPadded = isPadded;
    state.maxLen = String(state.max).length;
  }
  if (a < 0) {
    let newMin = b < 0 ? Math.abs(b) : 1;
    negatives = splitToPatterns(newMin, Math.abs(a), state, opts);
    a = state.a = 0;
  }
  if (b >= 0) {
    positives = splitToPatterns(a, b, state, opts);
  }
  state.negatives = negatives;
  state.positives = positives;
  state.result = collatePatterns(negatives, positives);
  if (opts.capture === true) {
    state.result = `(${state.result})`;
  } else if (opts.wrap !== false && positives.length + negatives.length > 1) {
    state.result = `(?:${state.result})`;
  }
  toRegexRange$1.cache[cacheKey] = state;
  return state.result;
};
function collatePatterns(neg, pos, options2) {
  let onlyNegative = filterPatterns(neg, pos, "-", false) || [];
  let onlyPositive = filterPatterns(pos, neg, "", false) || [];
  let intersected = filterPatterns(neg, pos, "-?", true) || [];
  let subpatterns = onlyNegative.concat(intersected).concat(onlyPositive);
  return subpatterns.join("|");
}
function splitToRanges(min2, max) {
  let nines = 1;
  let zeros2 = 1;
  let stop = countNines(min2, nines);
  let stops = /* @__PURE__ */ new Set([max]);
  while (min2 <= stop && stop <= max) {
    stops.add(stop);
    nines += 1;
    stop = countNines(min2, nines);
  }
  stop = countZeros(max + 1, zeros2) - 1;
  while (min2 < stop && stop <= max) {
    stops.add(stop);
    zeros2 += 1;
    stop = countZeros(max + 1, zeros2) - 1;
  }
  stops = [...stops];
  stops.sort(compare);
  return stops;
}
function rangeToPattern(start, stop, options2) {
  if (start === stop) {
    return { pattern: start, count: [], digits: 0 };
  }
  let zipped = zip(start, stop);
  let digits = zipped.length;
  let pattern = "";
  let count = 0;
  for (let i = 0; i < digits; i++) {
    let [startDigit, stopDigit] = zipped[i];
    if (startDigit === stopDigit) {
      pattern += startDigit;
    } else if (startDigit !== "0" || stopDigit !== "9") {
      pattern += toCharacterClass(startDigit, stopDigit);
    } else {
      count++;
    }
  }
  if (count) {
    pattern += options2.shorthand === true ? "\\d" : "[0-9]";
  }
  return { pattern, count: [count], digits };
}
function splitToPatterns(min2, max, tok, options2) {
  let ranges = splitToRanges(min2, max);
  let tokens = [];
  let start = min2;
  let prev;
  for (let i = 0; i < ranges.length; i++) {
    let max2 = ranges[i];
    let obj = rangeToPattern(String(start), String(max2), options2);
    let zeros2 = "";
    if (!tok.isPadded && prev && prev.pattern === obj.pattern) {
      if (prev.count.length > 1) {
        prev.count.pop();
      }
      prev.count.push(obj.count[0]);
      prev.string = prev.pattern + toQuantifier(prev.count);
      start = max2 + 1;
      continue;
    }
    if (tok.isPadded) {
      zeros2 = padZeros(max2, tok, options2);
    }
    obj.string = zeros2 + obj.pattern + toQuantifier(obj.count);
    tokens.push(obj);
    start = max2 + 1;
    prev = obj;
  }
  return tokens;
}
function filterPatterns(arr, comparison, prefix, intersection, options2) {
  let result = [];
  for (let ele of arr) {
    let { string } = ele;
    if (!intersection && !contains(comparison, "string", string)) {
      result.push(prefix + string);
    }
    if (intersection && contains(comparison, "string", string)) {
      result.push(prefix + string);
    }
  }
  return result;
}
function zip(a, b) {
  let arr = [];
  for (let i = 0; i < a.length; i++) arr.push([a[i], b[i]]);
  return arr;
}
function compare(a, b) {
  return a > b ? 1 : b > a ? -1 : 0;
}
function contains(arr, key, val) {
  return arr.some((ele) => ele[key] === val);
}
function countNines(min2, len) {
  return Number(String(min2).slice(0, -len) + "9".repeat(len));
}
function countZeros(integer, zeros2) {
  return integer - integer % Math.pow(10, zeros2);
}
function toQuantifier(digits) {
  let [start = 0, stop = ""] = digits;
  if (stop || start > 1) {
    return `{${start + (stop ? "," + stop : "")}}`;
  }
  return "";
}
function toCharacterClass(a, b, options2) {
  return `[${a}${b - a === 1 ? "" : "-"}${b}]`;
}
function hasPadding(str) {
  return /^-?(0+)\d/.test(str);
}
function padZeros(value2, tok, options2) {
  if (!tok.isPadded) {
    return value2;
  }
  let diff = Math.abs(tok.maxLen - String(value2).length);
  let relax = options2.relaxZeros !== false;
  switch (diff) {
    case 0:
      return "";
    case 1:
      return relax ? "0?" : "0";
    case 2:
      return relax ? "0{0,2}" : "00";
    default: {
      return relax ? `0{0,${diff}}` : `0{${diff}}`;
    }
  }
}
toRegexRange$1.cache = {};
toRegexRange$1.clearCache = () => toRegexRange$1.cache = {};
var toRegexRange_1 = toRegexRange$1;
var util = import_util.default;
var toRegexRange = toRegexRange_1;
var isObject = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
var transform = (toNumber) => {
  return (value2) => toNumber === true ? Number(value2) : String(value2);
};
var isValidValue = (value2) => {
  return typeof value2 === "number" || typeof value2 === "string" && value2 !== "";
};
var isNumber = (num) => Number.isInteger(+num);
var zeros = (input) => {
  let value2 = `${input}`;
  let index = -1;
  if (value2[0] === "-") value2 = value2.slice(1);
  if (value2 === "0") return false;
  while (value2[++index] === "0") ;
  return index > 0;
};
var stringify$3 = (start, end, options2) => {
  if (typeof start === "string" || typeof end === "string") {
    return true;
  }
  return options2.stringify === true;
};
var pad = (input, maxLength, toNumber) => {
  if (maxLength > 0) {
    let dash = input[0] === "-" ? "-" : "";
    if (dash) input = input.slice(1);
    input = dash + input.padStart(dash ? maxLength - 1 : maxLength, "0");
  }
  if (toNumber === false) {
    return String(input);
  }
  return input;
};
var toMaxLen = (input, maxLength) => {
  let negative = input[0] === "-" ? "-" : "";
  if (negative) {
    input = input.slice(1);
    maxLength--;
  }
  while (input.length < maxLength) input = "0" + input;
  return negative ? "-" + input : input;
};
var toSequence = (parts, options2, maxLen) => {
  parts.negatives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);
  parts.positives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);
  let prefix = options2.capture ? "" : "?:";
  let positives = "";
  let negatives = "";
  let result;
  if (parts.positives.length) {
    positives = parts.positives.map((v) => toMaxLen(String(v), maxLen)).join("|");
  }
  if (parts.negatives.length) {
    negatives = `-(${prefix}${parts.negatives.map((v) => toMaxLen(String(v), maxLen)).join("|")})`;
  }
  if (positives && negatives) {
    result = `${positives}|${negatives}`;
  } else {
    result = positives || negatives;
  }
  if (options2.wrap) {
    return `(${prefix}${result})`;
  }
  return result;
};
var toRange = (a, b, isNumbers, options2) => {
  if (isNumbers) {
    return toRegexRange(a, b, { wrap: false, ...options2 });
  }
  let start = String.fromCharCode(a);
  if (a === b) return start;
  let stop = String.fromCharCode(b);
  return `[${start}-${stop}]`;
};
var toRegex = (start, end, options2) => {
  if (Array.isArray(start)) {
    let wrap2 = options2.wrap === true;
    let prefix = options2.capture ? "" : "?:";
    return wrap2 ? `(${prefix}${start.join("|")})` : start.join("|");
  }
  return toRegexRange(start, end, options2);
};
var rangeError = (...args) => {
  return new RangeError("Invalid range arguments: " + util.inspect(...args));
};
var invalidRange = (start, end, options2) => {
  if (options2.strictRanges === true) throw rangeError([start, end]);
  return [];
};
var invalidStep = (step, options2) => {
  if (options2.strictRanges === true) {
    throw new TypeError(`Expected step "${step}" to be a number`);
  }
  return [];
};
var fillNumbers = (start, end, step = 1, options2 = {}) => {
  let a = Number(start);
  let b = Number(end);
  if (!Number.isInteger(a) || !Number.isInteger(b)) {
    if (options2.strictRanges === true) throw rangeError([start, end]);
    return [];
  }
  if (a === 0) a = 0;
  if (b === 0) b = 0;
  let descending = a > b;
  let startString = String(start);
  let endString = String(end);
  let stepString = String(step);
  step = Math.max(Math.abs(step), 1);
  let padded = zeros(startString) || zeros(endString) || zeros(stepString);
  let maxLen = padded ? Math.max(startString.length, endString.length, stepString.length) : 0;
  let toNumber = padded === false && stringify$3(start, end, options2) === false;
  let format2 = options2.transform || transform(toNumber);
  if (options2.toRegex && step === 1) {
    return toRange(toMaxLen(start, maxLen), toMaxLen(end, maxLen), true, options2);
  }
  let parts = { negatives: [], positives: [] };
  let push2 = (num) => parts[num < 0 ? "negatives" : "positives"].push(Math.abs(num));
  let range2 = [];
  let index = 0;
  while (descending ? a >= b : a <= b) {
    if (options2.toRegex === true && step > 1) {
      push2(a);
    } else {
      range2.push(pad(format2(a, index), maxLen, toNumber));
    }
    a = descending ? a - step : a + step;
    index++;
  }
  if (options2.toRegex === true) {
    return step > 1 ? toSequence(parts, options2, maxLen) : toRegex(range2, null, { wrap: false, ...options2 });
  }
  return range2;
};
var fillLetters = (start, end, step = 1, options2 = {}) => {
  if (!isNumber(start) && start.length > 1 || !isNumber(end) && end.length > 1) {
    return invalidRange(start, end, options2);
  }
  let format2 = options2.transform || ((val) => String.fromCharCode(val));
  let a = `${start}`.charCodeAt(0);
  let b = `${end}`.charCodeAt(0);
  let descending = a > b;
  let min2 = Math.min(a, b);
  let max = Math.max(a, b);
  if (options2.toRegex && step === 1) {
    return toRange(min2, max, false, options2);
  }
  let range2 = [];
  let index = 0;
  while (descending ? a >= b : a <= b) {
    range2.push(format2(a, index));
    a = descending ? a - step : a + step;
    index++;
  }
  if (options2.toRegex === true) {
    return toRegex(range2, null, { wrap: false, options: options2 });
  }
  return range2;
};
var fill$2 = (start, end, step, options2 = {}) => {
  if (end == null && isValidValue(start)) {
    return [start];
  }
  if (!isValidValue(start) || !isValidValue(end)) {
    return invalidRange(start, end, options2);
  }
  if (typeof step === "function") {
    return fill$2(start, end, 1, { transform: step });
  }
  if (isObject(step)) {
    return fill$2(start, end, 0, step);
  }
  let opts = { ...options2 };
  if (opts.capture === true) opts.wrap = true;
  step = step || opts.step || 1;
  if (!isNumber(step)) {
    if (step != null && !isObject(step)) return invalidStep(step, opts);
    return fill$2(start, end, 1, step);
  }
  if (isNumber(start) && isNumber(end)) {
    return fillNumbers(start, end, step, opts);
  }
  return fillLetters(start, end, Math.max(Math.abs(step), 1), opts);
};
var fillRange = fill$2;
var fill$1 = fillRange;
var utils$1 = utils$3;
var compile$1 = (ast, options2 = {}) => {
  const walk2 = (node2, parent = {}) => {
    const invalidBlock = utils$1.isInvalidBrace(parent);
    const invalidNode = node2.invalid === true && options2.escapeInvalid === true;
    const invalid = invalidBlock === true || invalidNode === true;
    const prefix = options2.escapeInvalid === true ? "\\" : "";
    let output = "";
    if (node2.isOpen === true) {
      return prefix + node2.value;
    }
    if (node2.isClose === true) {
      console.log("node.isClose", prefix, node2.value);
      return prefix + node2.value;
    }
    if (node2.type === "open") {
      return invalid ? prefix + node2.value : "(";
    }
    if (node2.type === "close") {
      return invalid ? prefix + node2.value : ")";
    }
    if (node2.type === "comma") {
      return node2.prev.type === "comma" ? "" : invalid ? node2.value : "|";
    }
    if (node2.value) {
      return node2.value;
    }
    if (node2.nodes && node2.ranges > 0) {
      const args = utils$1.reduce(node2.nodes);
      const range2 = fill$1(...args, { ...options2, wrap: false, toRegex: true, strictZeros: true });
      if (range2.length !== 0) {
        return args.length > 1 && range2.length > 1 ? `(${range2})` : range2;
      }
    }
    if (node2.nodes) {
      for (const child of node2.nodes) {
        output += walk2(child, node2);
      }
    }
    return output;
  };
  return walk2(ast);
};
var compile_1 = compile$1;
var fill = fillRange;
var stringify$2 = stringify$4;
var utils = utils$3;
var append = (queue = "", stash = "", enclose = false) => {
  const result = [];
  queue = [].concat(queue);
  stash = [].concat(stash);
  if (!stash.length) return queue;
  if (!queue.length) {
    return enclose ? utils.flatten(stash).map((ele) => `{${ele}}`) : stash;
  }
  for (const item of queue) {
    if (Array.isArray(item)) {
      for (const value2 of item) {
        result.push(append(value2, stash, enclose));
      }
    } else {
      for (let ele of stash) {
        if (enclose === true && typeof ele === "string") ele = `{${ele}}`;
        result.push(Array.isArray(ele) ? append(item, ele, enclose) : item + ele);
      }
    }
  }
  return utils.flatten(result);
};
var expand$1 = (ast, options2 = {}) => {
  const rangeLimit = options2.rangeLimit === void 0 ? 1e3 : options2.rangeLimit;
  const walk2 = (node2, parent = {}) => {
    node2.queue = [];
    let p2 = parent;
    let q = parent.queue;
    while (p2.type !== "brace" && p2.type !== "root" && p2.parent) {
      p2 = p2.parent;
      q = p2.queue;
    }
    if (node2.invalid || node2.dollar) {
      q.push(append(q.pop(), stringify$2(node2, options2)));
      return;
    }
    if (node2.type === "brace" && node2.invalid !== true && node2.nodes.length === 2) {
      q.push(append(q.pop(), ["{}"]));
      return;
    }
    if (node2.nodes && node2.ranges > 0) {
      const args = utils.reduce(node2.nodes);
      if (utils.exceedsLimit(...args, options2.step, rangeLimit)) {
        throw new RangeError("expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.");
      }
      let range2 = fill(...args, options2);
      if (range2.length === 0) {
        range2 = stringify$2(node2, options2);
      }
      q.push(append(q.pop(), range2));
      node2.nodes = [];
      return;
    }
    const enclose = utils.encloseBrace(node2);
    let queue = node2.queue;
    let block = node2;
    while (block.type !== "brace" && block.type !== "root" && block.parent) {
      block = block.parent;
      queue = block.queue;
    }
    for (let i = 0; i < node2.nodes.length; i++) {
      const child = node2.nodes[i];
      if (child.type === "comma" && node2.type === "brace") {
        if (i === 1) queue.push("");
        queue.push("");
        continue;
      }
      if (child.type === "close") {
        q.push(append(q.pop(), queue, enclose));
        continue;
      }
      if (child.value && child.type !== "open") {
        queue.push(append(queue.pop(), child.value));
        continue;
      }
      if (child.nodes) {
        walk2(child, node2);
      }
    }
    return queue;
  };
  return utils.flatten(walk2(ast));
};
var expand_1 = expand$1;
var constants$2 = {
  MAX_LENGTH: 1e4,
  CHAR_LEFT_PARENTHESES: "(",
  /* ( */
  CHAR_RIGHT_PARENTHESES: ")",
  /* ) */
  CHAR_BACKSLASH: "\\",
  /* \ */
  CHAR_BACKTICK: "`",
  /* ` */
  CHAR_COMMA: ",",
  /* , */
  CHAR_DOT: ".",
  /* . */
  CHAR_DOUBLE_QUOTE: '"',
  /* " */
  CHAR_LEFT_CURLY_BRACE: "{",
  /* { */
  CHAR_LEFT_SQUARE_BRACKET: "[",
  /* [ */
  CHAR_NO_BREAK_SPACE: " ",
  /* \u00A0 */
  CHAR_RIGHT_CURLY_BRACE: "}",
  /* } */
  CHAR_RIGHT_SQUARE_BRACKET: "]",
  /* ] */
  CHAR_SINGLE_QUOTE: "'",
  /* ' */
  CHAR_ZERO_WIDTH_NOBREAK_SPACE: "\uFEFF"
  /* \uFEFF */
};
var stringify$1 = stringify$4;
var {
  MAX_LENGTH,
  CHAR_BACKSLASH,
  /* \ */
  CHAR_BACKTICK,
  /* ` */
  CHAR_COMMA,
  /* , */
  CHAR_DOT,
  /* . */
  CHAR_LEFT_PARENTHESES,
  /* ( */
  CHAR_RIGHT_PARENTHESES,
  /* ) */
  CHAR_LEFT_CURLY_BRACE,
  /* { */
  CHAR_RIGHT_CURLY_BRACE,
  /* } */
  CHAR_LEFT_SQUARE_BRACKET,
  /* [ */
  CHAR_RIGHT_SQUARE_BRACKET,
  /* ] */
  CHAR_DOUBLE_QUOTE,
  /* " */
  CHAR_SINGLE_QUOTE,
  /* ' */
  CHAR_NO_BREAK_SPACE,
  CHAR_ZERO_WIDTH_NOBREAK_SPACE
} = constants$2;
var parse$8 = (input, options2 = {}) => {
  if (typeof input !== "string") {
    throw new TypeError("Expected a string");
  }
  const opts = options2 || {};
  const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
  if (input.length > max) {
    throw new SyntaxError(`Input length (${input.length}), exceeds max characters (${max})`);
  }
  const ast = { type: "root", input, nodes: [] };
  const stack = [ast];
  let block = ast;
  let prev = ast;
  let brackets = 0;
  const length = input.length;
  let index = 0;
  let depth = 0;
  let value2;
  const advance = () => input[index++];
  const push2 = (node2) => {
    if (node2.type === "text" && prev.type === "dot") {
      prev.type = "text";
    }
    if (prev && prev.type === "text" && node2.type === "text") {
      prev.value += node2.value;
      return;
    }
    block.nodes.push(node2);
    node2.parent = block;
    node2.prev = prev;
    prev = node2;
    return node2;
  };
  push2({ type: "bos" });
  while (index < length) {
    block = stack[stack.length - 1];
    value2 = advance();
    if (value2 === CHAR_ZERO_WIDTH_NOBREAK_SPACE || value2 === CHAR_NO_BREAK_SPACE) {
      continue;
    }
    if (value2 === CHAR_BACKSLASH) {
      push2({ type: "text", value: (options2.keepEscaping ? value2 : "") + advance() });
      continue;
    }
    if (value2 === CHAR_RIGHT_SQUARE_BRACKET) {
      push2({ type: "text", value: "\\" + value2 });
      continue;
    }
    if (value2 === CHAR_LEFT_SQUARE_BRACKET) {
      brackets++;
      let next;
      while (index < length && (next = advance())) {
        value2 += next;
        if (next === CHAR_LEFT_SQUARE_BRACKET) {
          brackets++;
          continue;
        }
        if (next === CHAR_BACKSLASH) {
          value2 += advance();
          continue;
        }
        if (next === CHAR_RIGHT_SQUARE_BRACKET) {
          brackets--;
          if (brackets === 0) {
            break;
          }
        }
      }
      push2({ type: "text", value: value2 });
      continue;
    }
    if (value2 === CHAR_LEFT_PARENTHESES) {
      block = push2({ type: "paren", nodes: [] });
      stack.push(block);
      push2({ type: "text", value: value2 });
      continue;
    }
    if (value2 === CHAR_RIGHT_PARENTHESES) {
      if (block.type !== "paren") {
        push2({ type: "text", value: value2 });
        continue;
      }
      block = stack.pop();
      push2({ type: "text", value: value2 });
      block = stack[stack.length - 1];
      continue;
    }
    if (value2 === CHAR_DOUBLE_QUOTE || value2 === CHAR_SINGLE_QUOTE || value2 === CHAR_BACKTICK) {
      const open2 = value2;
      let next;
      if (options2.keepQuotes !== true) {
        value2 = "";
      }
      while (index < length && (next = advance())) {
        if (next === CHAR_BACKSLASH) {
          value2 += next + advance();
          continue;
        }
        if (next === open2) {
          if (options2.keepQuotes === true) value2 += next;
          break;
        }
        value2 += next;
      }
      push2({ type: "text", value: value2 });
      continue;
    }
    if (value2 === CHAR_LEFT_CURLY_BRACE) {
      depth++;
      const dollar = prev.value && prev.value.slice(-1) === "$" || block.dollar === true;
      const brace = {
        type: "brace",
        open: true,
        close: false,
        dollar,
        depth,
        commas: 0,
        ranges: 0,
        nodes: []
      };
      block = push2(brace);
      stack.push(block);
      push2({ type: "open", value: value2 });
      continue;
    }
    if (value2 === CHAR_RIGHT_CURLY_BRACE) {
      if (block.type !== "brace") {
        push2({ type: "text", value: value2 });
        continue;
      }
      const type = "close";
      block = stack.pop();
      block.close = true;
      push2({ type, value: value2 });
      depth--;
      block = stack[stack.length - 1];
      continue;
    }
    if (value2 === CHAR_COMMA && depth > 0) {
      if (block.ranges > 0) {
        block.ranges = 0;
        const open2 = block.nodes.shift();
        block.nodes = [open2, { type: "text", value: stringify$1(block) }];
      }
      push2({ type: "comma", value: value2 });
      block.commas++;
      continue;
    }
    if (value2 === CHAR_DOT && depth > 0 && block.commas === 0) {
      const siblings = block.nodes;
      if (depth === 0 || siblings.length === 0) {
        push2({ type: "text", value: value2 });
        continue;
      }
      if (prev.type === "dot") {
        block.range = [];
        prev.value += value2;
        prev.type = "range";
        if (block.nodes.length !== 3 && block.nodes.length !== 5) {
          block.invalid = true;
          block.ranges = 0;
          prev.type = "text";
          continue;
        }
        block.ranges++;
        block.args = [];
        continue;
      }
      if (prev.type === "range") {
        siblings.pop();
        const before = siblings[siblings.length - 1];
        before.value += prev.value + value2;
        prev = before;
        block.ranges--;
        continue;
      }
      push2({ type: "dot", value: value2 });
      continue;
    }
    push2({ type: "text", value: value2 });
  }
  do {
    block = stack.pop();
    if (block.type !== "root") {
      block.nodes.forEach((node2) => {
        if (!node2.nodes) {
          if (node2.type === "open") node2.isOpen = true;
          if (node2.type === "close") node2.isClose = true;
          if (!node2.nodes) node2.type = "text";
          node2.invalid = true;
        }
      });
      const parent = stack[stack.length - 1];
      const index2 = parent.nodes.indexOf(block);
      parent.nodes.splice(index2, 1, ...block.nodes);
    }
  } while (stack.length > 0);
  push2({ type: "eos" });
  return ast;
};
var parse_1$1 = parse$8;
var stringify = stringify$4;
var compile = compile_1;
var expand = expand_1;
var parse$7 = parse_1$1;
var braces$1 = (input, options2 = {}) => {
  let output = [];
  if (Array.isArray(input)) {
    for (const pattern of input) {
      const result = braces$1.create(pattern, options2);
      if (Array.isArray(result)) {
        output.push(...result);
      } else {
        output.push(result);
      }
    }
  } else {
    output = [].concat(braces$1.create(input, options2));
  }
  if (options2 && options2.expand === true && options2.nodupes === true) {
    output = [...new Set(output)];
  }
  return output;
};
braces$1.parse = (input, options2 = {}) => parse$7(input, options2);
braces$1.stringify = (input, options2 = {}) => {
  if (typeof input === "string") {
    return stringify(braces$1.parse(input, options2), options2);
  }
  return stringify(input, options2);
};
braces$1.compile = (input, options2 = {}) => {
  if (typeof input === "string") {
    input = braces$1.parse(input, options2);
  }
  return compile(input, options2);
};
braces$1.expand = (input, options2 = {}) => {
  if (typeof input === "string") {
    input = braces$1.parse(input, options2);
  }
  let result = expand(input, options2);
  if (options2.noempty === true) {
    result = result.filter(Boolean);
  }
  if (options2.nodupes === true) {
    result = [...new Set(result)];
  }
  return result;
};
braces$1.create = (input, options2 = {}) => {
  if (input === "" || input.length < 3) {
    return [input];
  }
  return options2.expand !== true ? braces$1.compile(input, options2) : braces$1.expand(input, options2);
};
var braces_1 = braces$1;
var require$$0 = [
  "3dm",
  "3ds",
  "3g2",
  "3gp",
  "7z",
  "a",
  "aac",
  "adp",
  "afdesign",
  "afphoto",
  "afpub",
  "ai",
  "aif",
  "aiff",
  "alz",
  "ape",
  "apk",
  "appimage",
  "ar",
  "arj",
  "asf",
  "au",
  "avi",
  "bak",
  "baml",
  "bh",
  "bin",
  "bk",
  "bmp",
  "btif",
  "bz2",
  "bzip2",
  "cab",
  "caf",
  "cgm",
  "class",
  "cmx",
  "cpio",
  "cr2",
  "cur",
  "dat",
  "dcm",
  "deb",
  "dex",
  "djvu",
  "dll",
  "dmg",
  "dng",
  "doc",
  "docm",
  "docx",
  "dot",
  "dotm",
  "dra",
  "DS_Store",
  "dsk",
  "dts",
  "dtshd",
  "dvb",
  "dwg",
  "dxf",
  "ecelp4800",
  "ecelp7470",
  "ecelp9600",
  "egg",
  "eol",
  "eot",
  "epub",
  "exe",
  "f4v",
  "fbs",
  "fh",
  "fla",
  "flac",
  "flatpak",
  "fli",
  "flv",
  "fpx",
  "fst",
  "fvt",
  "g3",
  "gh",
  "gif",
  "graffle",
  "gz",
  "gzip",
  "h261",
  "h263",
  "h264",
  "icns",
  "ico",
  "ief",
  "img",
  "ipa",
  "iso",
  "jar",
  "jpeg",
  "jpg",
  "jpgv",
  "jpm",
  "jxr",
  "key",
  "ktx",
  "lha",
  "lib",
  "lvp",
  "lz",
  "lzh",
  "lzma",
  "lzo",
  "m3u",
  "m4a",
  "m4v",
  "mar",
  "mdi",
  "mht",
  "mid",
  "midi",
  "mj2",
  "mka",
  "mkv",
  "mmr",
  "mng",
  "mobi",
  "mov",
  "movie",
  "mp3",
  "mp4",
  "mp4a",
  "mpeg",
  "mpg",
  "mpga",
  "mxu",
  "nef",
  "npx",
  "numbers",
  "nupkg",
  "o",
  "odp",
  "ods",
  "odt",
  "oga",
  "ogg",
  "ogv",
  "otf",
  "ott",
  "pages",
  "pbm",
  "pcx",
  "pdb",
  "pdf",
  "pea",
  "pgm",
  "pic",
  "png",
  "pnm",
  "pot",
  "potm",
  "potx",
  "ppa",
  "ppam",
  "ppm",
  "pps",
  "ppsm",
  "ppsx",
  "ppt",
  "pptm",
  "pptx",
  "psd",
  "pya",
  "pyc",
  "pyo",
  "pyv",
  "qt",
  "rar",
  "ras",
  "raw",
  "resources",
  "rgb",
  "rip",
  "rlc",
  "rmf",
  "rmvb",
  "rpm",
  "rtf",
  "rz",
  "s3m",
  "s7z",
  "scpt",
  "sgi",
  "shar",
  "snap",
  "sil",
  "sketch",
  "slk",
  "smv",
  "snk",
  "so",
  "stl",
  "suo",
  "sub",
  "swf",
  "tar",
  "tbz",
  "tbz2",
  "tga",
  "tgz",
  "thmx",
  "tif",
  "tiff",
  "tlz",
  "ttc",
  "ttf",
  "txz",
  "udf",
  "uvh",
  "uvi",
  "uvm",
  "uvp",
  "uvs",
  "uvu",
  "viv",
  "vob",
  "war",
  "wav",
  "wax",
  "wbmp",
  "wdp",
  "weba",
  "webm",
  "webp",
  "whl",
  "wim",
  "wm",
  "wma",
  "wmv",
  "wmx",
  "woff",
  "woff2",
  "wrm",
  "wvx",
  "xbm",
  "xif",
  "xla",
  "xlam",
  "xls",
  "xlsb",
  "xlsm",
  "xlsx",
  "xlt",
  "xltm",
  "xltx",
  "xm",
  "xmind",
  "xpi",
  "xpm",
  "xwd",
  "xz",
  "z",
  "zip",
  "zipx"
];
var binaryExtensions$1 = require$$0;
var path$7 = import_path2.default;
var binaryExtensions = binaryExtensions$1;
var extensions = new Set(binaryExtensions);
var isBinaryPath$1 = (filePath) => extensions.has(path$7.extname(filePath).slice(1).toLowerCase());
var constants$1 = {};
(function(exports) {
  const { sep: sep2 } = import_path2.default;
  const { platform: platform2 } = process;
  const os2 = import_os.default;
  exports.EV_ALL = "all";
  exports.EV_READY = "ready";
  exports.EV_ADD = "add";
  exports.EV_CHANGE = "change";
  exports.EV_ADD_DIR = "addDir";
  exports.EV_UNLINK = "unlink";
  exports.EV_UNLINK_DIR = "unlinkDir";
  exports.EV_RAW = "raw";
  exports.EV_ERROR = "error";
  exports.STR_DATA = "data";
  exports.STR_END = "end";
  exports.STR_CLOSE = "close";
  exports.FSEVENT_CREATED = "created";
  exports.FSEVENT_MODIFIED = "modified";
  exports.FSEVENT_DELETED = "deleted";
  exports.FSEVENT_MOVED = "moved";
  exports.FSEVENT_CLONED = "cloned";
  exports.FSEVENT_UNKNOWN = "unknown";
  exports.FSEVENT_FLAG_MUST_SCAN_SUBDIRS = 1;
  exports.FSEVENT_TYPE_FILE = "file";
  exports.FSEVENT_TYPE_DIRECTORY = "directory";
  exports.FSEVENT_TYPE_SYMLINK = "symlink";
  exports.KEY_LISTENERS = "listeners";
  exports.KEY_ERR = "errHandlers";
  exports.KEY_RAW = "rawEmitters";
  exports.HANDLER_KEYS = [exports.KEY_LISTENERS, exports.KEY_ERR, exports.KEY_RAW];
  exports.DOT_SLASH = `.${sep2}`;
  exports.BACK_SLASH_RE = /\\/g;
  exports.DOUBLE_SLASH_RE = /\/\//;
  exports.SLASH_OR_BACK_SLASH_RE = /[/\\]/;
  exports.DOT_RE = /\..*\.(sw[px])$|~$|\.subl.*\.tmp/;
  exports.REPLACER_RE = /^\.[/\\]/;
  exports.SLASH = "/";
  exports.SLASH_SLASH = "//";
  exports.BRACE_START = "{";
  exports.BANG = "!";
  exports.ONE_DOT = ".";
  exports.TWO_DOTS = "..";
  exports.STAR = "*";
  exports.GLOBSTAR = "**";
  exports.ROOT_GLOBSTAR = "/**/*";
  exports.SLASH_GLOBSTAR = "/**";
  exports.DIR_SUFFIX = "Dir";
  exports.ANYMATCH_OPTS = { dot: true };
  exports.STRING_TYPE = "string";
  exports.FUNCTION_TYPE = "function";
  exports.EMPTY_STR = "";
  exports.EMPTY_FN = () => {
  };
  exports.IDENTITY_FN = (val) => val;
  exports.isWindows = platform2 === "win32";
  exports.isMacos = platform2 === "darwin";
  exports.isLinux = platform2 === "linux";
  exports.isIBMi = os2.type() === "OS400";
})(constants$1);
var fs$4 = import_fs.default;
var sysPath$2 = import_path2.default;
var { promisify: promisify$2 } = import_util.default;
var isBinaryPath = isBinaryPath$1;
var {
  isWindows: isWindows$2,
  isLinux,
  EMPTY_FN: EMPTY_FN$2,
  EMPTY_STR: EMPTY_STR$1,
  KEY_LISTENERS,
  KEY_ERR,
  KEY_RAW,
  HANDLER_KEYS,
  EV_CHANGE: EV_CHANGE$2,
  EV_ADD: EV_ADD$2,
  EV_ADD_DIR: EV_ADD_DIR$2,
  EV_ERROR: EV_ERROR$2,
  STR_DATA: STR_DATA$1,
  STR_END: STR_END$2,
  BRACE_START: BRACE_START$1,
  STAR
} = constants$1;
var THROTTLE_MODE_WATCH = "watch";
var open$1 = promisify$2(fs$4.open);
var stat$2 = promisify$2(fs$4.stat);
var lstat$1 = promisify$2(fs$4.lstat);
var close = promisify$2(fs$4.close);
var fsrealpath = promisify$2(fs$4.realpath);
var statMethods$1 = { lstat: lstat$1, stat: stat$2 };
var foreach = (val, fn) => {
  if (val instanceof Set) {
    val.forEach(fn);
  } else {
    fn(val);
  }
};
var addAndConvert = (main2, prop, item) => {
  let container = main2[prop];
  if (!(container instanceof Set)) {
    main2[prop] = container = /* @__PURE__ */ new Set([container]);
  }
  container.add(item);
};
var clearItem = (cont) => (key) => {
  const set = cont[key];
  if (set instanceof Set) {
    set.clear();
  } else {
    delete cont[key];
  }
};
var delFromSet = (main2, prop, item) => {
  const container = main2[prop];
  if (container instanceof Set) {
    container.delete(item);
  } else if (container === item) {
    delete main2[prop];
  }
};
var isEmptySet = (val) => val instanceof Set ? val.size === 0 : !val;
var FsWatchInstances = /* @__PURE__ */ new Map();
function createFsWatchInstance(path4, options2, listener2, errHandler, emitRaw) {
  const handleEvent = (rawEvent, evPath) => {
    listener2(path4);
    emitRaw(rawEvent, evPath, { watchedPath: path4 });
    if (evPath && path4 !== evPath) {
      fsWatchBroadcast(
        sysPath$2.resolve(path4, evPath),
        KEY_LISTENERS,
        sysPath$2.join(path4, evPath)
      );
    }
  };
  try {
    return fs$4.watch(path4, options2, handleEvent);
  } catch (error2) {
    errHandler(error2);
  }
}
var fsWatchBroadcast = (fullPath, type, val1, val2, val3) => {
  const cont = FsWatchInstances.get(fullPath);
  if (!cont) return;
  foreach(cont[type], (listener2) => {
    listener2(val1, val2, val3);
  });
};
var setFsWatchListener = (path4, fullPath, options2, handlers) => {
  const { listener: listener2, errHandler, rawEmitter } = handlers;
  let cont = FsWatchInstances.get(fullPath);
  let watcher;
  if (!options2.persistent) {
    watcher = createFsWatchInstance(
      path4,
      options2,
      listener2,
      errHandler,
      rawEmitter
    );
    return watcher.close.bind(watcher);
  }
  if (cont) {
    addAndConvert(cont, KEY_LISTENERS, listener2);
    addAndConvert(cont, KEY_ERR, errHandler);
    addAndConvert(cont, KEY_RAW, rawEmitter);
  } else {
    watcher = createFsWatchInstance(
      path4,
      options2,
      fsWatchBroadcast.bind(null, fullPath, KEY_LISTENERS),
      errHandler,
      // no need to use broadcast here
      fsWatchBroadcast.bind(null, fullPath, KEY_RAW)
    );
    if (!watcher) return;
    watcher.on(EV_ERROR$2, async (error2) => {
      const broadcastErr = fsWatchBroadcast.bind(null, fullPath, KEY_ERR);
      cont.watcherUnusable = true;
      if (isWindows$2 && error2.code === "EPERM") {
        try {
          const fd = await open$1(path4, "r");
          await close(fd);
          broadcastErr(error2);
        } catch (err2) {
        }
      } else {
        broadcastErr(error2);
      }
    });
    cont = {
      listeners: listener2,
      errHandlers: errHandler,
      rawEmitters: rawEmitter,
      watcher
    };
    FsWatchInstances.set(fullPath, cont);
  }
  return () => {
    delFromSet(cont, KEY_LISTENERS, listener2);
    delFromSet(cont, KEY_ERR, errHandler);
    delFromSet(cont, KEY_RAW, rawEmitter);
    if (isEmptySet(cont.listeners)) {
      cont.watcher.close();
      FsWatchInstances.delete(fullPath);
      HANDLER_KEYS.forEach(clearItem(cont));
      cont.watcher = void 0;
      Object.freeze(cont);
    }
  };
};
var FsWatchFileInstances = /* @__PURE__ */ new Map();
var setFsWatchFileListener = (path4, fullPath, options2, handlers) => {
  const { listener: listener2, rawEmitter } = handlers;
  let cont = FsWatchFileInstances.get(fullPath);
  const copts = cont && cont.options;
  if (copts && (copts.persistent < options2.persistent || copts.interval > options2.interval)) {
    fs$4.unwatchFile(fullPath);
    cont = void 0;
  }
  if (cont) {
    addAndConvert(cont, KEY_LISTENERS, listener2);
    addAndConvert(cont, KEY_RAW, rawEmitter);
  } else {
    cont = {
      listeners: listener2,
      rawEmitters: rawEmitter,
      options: options2,
      watcher: fs$4.watchFile(fullPath, options2, (curr, prev) => {
        foreach(cont.rawEmitters, (rawEmitter2) => {
          rawEmitter2(EV_CHANGE$2, fullPath, { curr, prev });
        });
        const currmtime = curr.mtimeMs;
        if (curr.size !== prev.size || currmtime > prev.mtimeMs || currmtime === 0) {
          foreach(cont.listeners, (listener3) => listener3(path4, curr));
        }
      })
    };
    FsWatchFileInstances.set(fullPath, cont);
  }
  return () => {
    delFromSet(cont, KEY_LISTENERS, listener2);
    delFromSet(cont, KEY_RAW, rawEmitter);
    if (isEmptySet(cont.listeners)) {
      FsWatchFileInstances.delete(fullPath);
      fs$4.unwatchFile(fullPath);
      cont.options = cont.watcher = void 0;
      Object.freeze(cont);
    }
  };
};
var NodeFsHandler$1 = class NodeFsHandler {
  /**
   * @param {import("../index").FSWatcher} fsW
   */
  constructor(fsW) {
    this.fsw = fsW;
    this._boundHandleError = (error2) => fsW._handleError(error2);
  }
  /**
   * Watch file for changes with fs_watchFile or fs_watch.
   * @param {String} path to file or dir
   * @param {Function} listener on fs change
   * @returns {Function} closer for the watcher instance
   */
  _watchWithNodeFs(path4, listener2) {
    const opts = this.fsw.options;
    const directory = sysPath$2.dirname(path4);
    const basename2 = sysPath$2.basename(path4);
    const parent = this.fsw._getWatchedDir(directory);
    parent.add(basename2);
    const absolutePath = sysPath$2.resolve(path4);
    const options2 = { persistent: opts.persistent };
    if (!listener2) listener2 = EMPTY_FN$2;
    let closer;
    if (opts.usePolling) {
      options2.interval = opts.enableBinaryInterval && isBinaryPath(basename2) ? opts.binaryInterval : opts.interval;
      closer = setFsWatchFileListener(path4, absolutePath, options2, {
        listener: listener2,
        rawEmitter: this.fsw._emitRaw
      });
    } else {
      closer = setFsWatchListener(path4, absolutePath, options2, {
        listener: listener2,
        errHandler: this._boundHandleError,
        rawEmitter: this.fsw._emitRaw
      });
    }
    return closer;
  }
  /**
   * Watch a file and emit add event if warranted.
   * @param {Path} file Path
   * @param {fs.Stats} stats result of fs_stat
   * @param {Boolean} initialAdd was the file added at watch instantiation?
   * @returns {Function} closer for the watcher instance
   */
  _handleFile(file, stats, initialAdd) {
    if (this.fsw.closed) {
      return;
    }
    const dirname3 = sysPath$2.dirname(file);
    const basename2 = sysPath$2.basename(file);
    const parent = this.fsw._getWatchedDir(dirname3);
    let prevStats = stats;
    if (parent.has(basename2)) return;
    const listener2 = async (path4, newStats) => {
      if (!this.fsw._throttle(THROTTLE_MODE_WATCH, file, 5)) return;
      if (!newStats || newStats.mtimeMs === 0) {
        try {
          const newStats2 = await stat$2(file);
          if (this.fsw.closed) return;
          const at = newStats2.atimeMs;
          const mt = newStats2.mtimeMs;
          if (!at || at <= mt || mt !== prevStats.mtimeMs) {
            this.fsw._emit(EV_CHANGE$2, file, newStats2);
          }
          if (isLinux && prevStats.ino !== newStats2.ino) {
            this.fsw._closeFile(path4);
            prevStats = newStats2;
            this.fsw._addPathCloser(path4, this._watchWithNodeFs(file, listener2));
          } else {
            prevStats = newStats2;
          }
        } catch (error2) {
          this.fsw._remove(dirname3, basename2);
        }
      } else if (parent.has(basename2)) {
        const at = newStats.atimeMs;
        const mt = newStats.mtimeMs;
        if (!at || at <= mt || mt !== prevStats.mtimeMs) {
          this.fsw._emit(EV_CHANGE$2, file, newStats);
        }
        prevStats = newStats;
      }
    };
    const closer = this._watchWithNodeFs(file, listener2);
    if (!(initialAdd && this.fsw.options.ignoreInitial) && this.fsw._isntIgnored(file)) {
      if (!this.fsw._throttle(EV_ADD$2, file, 0)) return;
      this.fsw._emit(EV_ADD$2, file, stats);
    }
    return closer;
  }
  /**
   * Handle symlinks encountered while reading a dir.
   * @param {Object} entry returned by readdirp
   * @param {String} directory path of dir being read
   * @param {String} path of this item
   * @param {String} item basename of this item
   * @returns {Promise<Boolean>} true if no more processing is needed for this entry.
   */
  async _handleSymlink(entry, directory, path4, item) {
    if (this.fsw.closed) {
      return;
    }
    const full = entry.fullPath;
    const dir = this.fsw._getWatchedDir(directory);
    if (!this.fsw.options.followSymlinks) {
      this.fsw._incrReadyCount();
      let linkPath;
      try {
        linkPath = await fsrealpath(path4);
      } catch (e2) {
        this.fsw._emitReady();
        return true;
      }
      if (this.fsw.closed) return;
      if (dir.has(item)) {
        if (this.fsw._symlinkPaths.get(full) !== linkPath) {
          this.fsw._symlinkPaths.set(full, linkPath);
          this.fsw._emit(EV_CHANGE$2, path4, entry.stats);
        }
      } else {
        dir.add(item);
        this.fsw._symlinkPaths.set(full, linkPath);
        this.fsw._emit(EV_ADD$2, path4, entry.stats);
      }
      this.fsw._emitReady();
      return true;
    }
    if (this.fsw._symlinkPaths.has(full)) {
      return true;
    }
    this.fsw._symlinkPaths.set(full, true);
  }
  _handleRead(directory, initialAdd, wh, target, dir, depth, throttler) {
    directory = sysPath$2.join(directory, EMPTY_STR$1);
    if (!wh.hasGlob) {
      throttler = this.fsw._throttle("readdir", directory, 1e3);
      if (!throttler) return;
    }
    const previous = this.fsw._getWatchedDir(wh.path);
    const current = /* @__PURE__ */ new Set();
    let stream3 = this.fsw._readdirp(directory, {
      fileFilter: (entry) => wh.filterPath(entry),
      directoryFilter: (entry) => wh.filterDir(entry),
      depth: 0
    }).on(STR_DATA$1, async (entry) => {
      if (this.fsw.closed) {
        stream3 = void 0;
        return;
      }
      const item = entry.path;
      let path4 = sysPath$2.join(directory, item);
      current.add(item);
      if (entry.stats.isSymbolicLink() && await this._handleSymlink(entry, directory, path4, item)) {
        return;
      }
      if (this.fsw.closed) {
        stream3 = void 0;
        return;
      }
      if (item === target || !target && !previous.has(item)) {
        this.fsw._incrReadyCount();
        path4 = sysPath$2.join(dir, sysPath$2.relative(dir, path4));
        this._addToNodeFs(path4, initialAdd, wh, depth + 1);
      }
    }).on(EV_ERROR$2, this._boundHandleError);
    return new Promise(
      (resolve4) => stream3.once(STR_END$2, () => {
        if (this.fsw.closed) {
          stream3 = void 0;
          return;
        }
        const wasThrottled = throttler ? throttler.clear() : false;
        resolve4();
        previous.getChildren().filter((item) => {
          return item !== directory && !current.has(item) && // in case of intersecting globs;
          // a path may have been filtered out of this readdir, but
          // shouldn't be removed because it matches a different glob
          (!wh.hasGlob || wh.filterPath({
            fullPath: sysPath$2.resolve(directory, item)
          }));
        }).forEach((item) => {
          this.fsw._remove(directory, item);
        });
        stream3 = void 0;
        if (wasThrottled) this._handleRead(directory, false, wh, target, dir, depth, throttler);
      })
    );
  }
  /**
   * Read directory to add / remove files from `@watched` list and re-read it on change.
   * @param {String} dir fs path
   * @param {fs.Stats} stats
   * @param {Boolean} initialAdd
   * @param {Number} depth relative to user-supplied path
   * @param {String} target child path targeted for watch
   * @param {Object} wh Common watch helpers for this path
   * @param {String} realpath
   * @returns {Promise<Function>} closer for the watcher instance.
   */
  async _handleDir(dir, stats, initialAdd, depth, target, wh, realpath2) {
    const parentDir2 = this.fsw._getWatchedDir(sysPath$2.dirname(dir));
    const tracked = parentDir2.has(sysPath$2.basename(dir));
    if (!(initialAdd && this.fsw.options.ignoreInitial) && !target && !tracked) {
      if (!wh.hasGlob || wh.globFilter(dir)) this.fsw._emit(EV_ADD_DIR$2, dir, stats);
    }
    parentDir2.add(sysPath$2.basename(dir));
    this.fsw._getWatchedDir(dir);
    let throttler;
    let closer;
    const oDepth = this.fsw.options.depth;
    if ((oDepth == null || depth <= oDepth) && !this.fsw._symlinkPaths.has(realpath2)) {
      if (!target) {
        await this._handleRead(dir, initialAdd, wh, target, dir, depth, throttler);
        if (this.fsw.closed) return;
      }
      closer = this._watchWithNodeFs(dir, (dirPath, stats2) => {
        if (stats2 && stats2.mtimeMs === 0) return;
        this._handleRead(dirPath, false, wh, target, dir, depth, throttler);
      });
    }
    return closer;
  }
  /**
   * Handle added file, directory, or glob pattern.
   * Delegates call to _handleFile / _handleDir after checks.
   * @param {String} path to file or ir
   * @param {Boolean} initialAdd was the file added at watch instantiation?
   * @param {Object} priorWh depth relative to user-supplied path
   * @param {Number} depth Child path actually targeted for watch
   * @param {String=} target Child path actually targeted for watch
   * @returns {Promise}
   */
  async _addToNodeFs(path4, initialAdd, priorWh, depth, target) {
    const ready = this.fsw._emitReady;
    if (this.fsw._isIgnored(path4) || this.fsw.closed) {
      ready();
      return false;
    }
    const wh = this.fsw._getWatchHelpers(path4, depth);
    if (!wh.hasGlob && priorWh) {
      wh.hasGlob = priorWh.hasGlob;
      wh.globFilter = priorWh.globFilter;
      wh.filterPath = (entry) => priorWh.filterPath(entry);
      wh.filterDir = (entry) => priorWh.filterDir(entry);
    }
    try {
      const stats = await statMethods$1[wh.statMethod](wh.watchPath);
      if (this.fsw.closed) return;
      if (this.fsw._isIgnored(wh.watchPath, stats)) {
        ready();
        return false;
      }
      const follow = this.fsw.options.followSymlinks && !path4.includes(STAR) && !path4.includes(BRACE_START$1);
      let closer;
      if (stats.isDirectory()) {
        const absPath = sysPath$2.resolve(path4);
        const targetPath = follow ? await fsrealpath(path4) : path4;
        if (this.fsw.closed) return;
        closer = await this._handleDir(wh.watchPath, stats, initialAdd, depth, target, wh, targetPath);
        if (this.fsw.closed) return;
        if (absPath !== targetPath && targetPath !== void 0) {
          this.fsw._symlinkPaths.set(absPath, targetPath);
        }
      } else if (stats.isSymbolicLink()) {
        const targetPath = follow ? await fsrealpath(path4) : path4;
        if (this.fsw.closed) return;
        const parent = sysPath$2.dirname(wh.watchPath);
        this.fsw._getWatchedDir(parent).add(wh.watchPath);
        this.fsw._emit(EV_ADD$2, wh.watchPath, stats);
        closer = await this._handleDir(parent, stats, initialAdd, depth, path4, wh, targetPath);
        if (this.fsw.closed) return;
        if (targetPath !== void 0) {
          this.fsw._symlinkPaths.set(sysPath$2.resolve(path4), targetPath);
        }
      } else {
        closer = this._handleFile(wh.watchPath, stats, initialAdd);
      }
      ready();
      this.fsw._addPathCloser(path4, closer);
      return false;
    } catch (error2) {
      if (this.fsw._handleError(error2)) {
        ready();
        return path4;
      }
    }
  }
};
var nodefsHandler = NodeFsHandler$1;
var fseventsHandler = { exports: {} };
var fs$3 = import_fs.default;
var sysPath$1 = import_path2.default;
var { promisify: promisify$1 } = import_util.default;
var fsevents;
try {
  fsevents = __require2("fsevents");
} catch (error2) {
  if (process.env.CHOKIDAR_PRINT_FSEVENTS_REQUIRE_ERROR) console.error(error2);
}
if (fsevents) {
  const mtch = process.version.match(/v(\d+)\.(\d+)/);
  if (mtch && mtch[1] && mtch[2]) {
    const maj2 = Number.parseInt(mtch[1], 10);
    const min2 = Number.parseInt(mtch[2], 10);
    if (maj2 === 8 && min2 < 16) {
      fsevents = void 0;
    }
  }
}
var {
  EV_ADD: EV_ADD$1,
  EV_CHANGE: EV_CHANGE$1,
  EV_ADD_DIR: EV_ADD_DIR$1,
  EV_UNLINK: EV_UNLINK$1,
  EV_ERROR: EV_ERROR$1,
  STR_DATA,
  STR_END: STR_END$1,
  FSEVENT_CREATED,
  FSEVENT_MODIFIED,
  FSEVENT_DELETED,
  FSEVENT_MOVED,
  // FSEVENT_CLONED,
  FSEVENT_UNKNOWN,
  FSEVENT_FLAG_MUST_SCAN_SUBDIRS,
  FSEVENT_TYPE_FILE,
  FSEVENT_TYPE_DIRECTORY,
  FSEVENT_TYPE_SYMLINK,
  ROOT_GLOBSTAR,
  DIR_SUFFIX,
  DOT_SLASH,
  FUNCTION_TYPE: FUNCTION_TYPE$1,
  EMPTY_FN: EMPTY_FN$1,
  IDENTITY_FN
} = constants$1;
var Depth = (value2) => isNaN(value2) ? {} : { depth: value2 };
var stat$1 = promisify$1(fs$3.stat);
var lstat = promisify$1(fs$3.lstat);
var realpath = promisify$1(fs$3.realpath);
var statMethods = { stat: stat$1, lstat };
var FSEventsWatchers = /* @__PURE__ */ new Map();
var consolidateThreshhold = 10;
var wrongEventFlags = /* @__PURE__ */ new Set([
  69888,
  70400,
  71424,
  72704,
  73472,
  131328,
  131840,
  262912
]);
var createFSEventsInstance = (path4, callback) => {
  const stop = fsevents.watch(path4, callback);
  return { stop };
};
function setFSEventsListener(path4, realPath, listener2, rawEmitter) {
  let watchPath = sysPath$1.extname(realPath) ? sysPath$1.dirname(realPath) : realPath;
  const parentPath = sysPath$1.dirname(watchPath);
  let cont = FSEventsWatchers.get(watchPath);
  if (couldConsolidate(parentPath)) {
    watchPath = parentPath;
  }
  const resolvedPath = sysPath$1.resolve(path4);
  const hasSymlink = resolvedPath !== realPath;
  const filteredListener = (fullPath, flags, info) => {
    if (hasSymlink) fullPath = fullPath.replace(realPath, resolvedPath);
    if (fullPath === resolvedPath || !fullPath.indexOf(resolvedPath + sysPath$1.sep)) listener2(fullPath, flags, info);
  };
  let watchedParent = false;
  for (const watchedPath of FSEventsWatchers.keys()) {
    if (realPath.indexOf(sysPath$1.resolve(watchedPath) + sysPath$1.sep) === 0) {
      watchPath = watchedPath;
      cont = FSEventsWatchers.get(watchPath);
      watchedParent = true;
      break;
    }
  }
  if (cont || watchedParent) {
    cont.listeners.add(filteredListener);
  } else {
    cont = {
      listeners: /* @__PURE__ */ new Set([filteredListener]),
      rawEmitter,
      watcher: createFSEventsInstance(watchPath, (fullPath, flags) => {
        if (!cont.listeners.size) return;
        if (flags & FSEVENT_FLAG_MUST_SCAN_SUBDIRS) return;
        const info = fsevents.getInfo(fullPath, flags);
        cont.listeners.forEach((list) => {
          list(fullPath, flags, info);
        });
        cont.rawEmitter(info.event, fullPath, info);
      })
    };
    FSEventsWatchers.set(watchPath, cont);
  }
  return () => {
    const lst = cont.listeners;
    lst.delete(filteredListener);
    if (!lst.size) {
      FSEventsWatchers.delete(watchPath);
      if (cont.watcher) return cont.watcher.stop().then(() => {
        cont.rawEmitter = cont.watcher = void 0;
        Object.freeze(cont);
      });
    }
  };
}
var couldConsolidate = (path4) => {
  let count = 0;
  for (const watchPath of FSEventsWatchers.keys()) {
    if (watchPath.indexOf(path4) === 0) {
      count++;
      if (count >= consolidateThreshhold) {
        return true;
      }
    }
  }
  return false;
};
var canUse = () => fsevents && FSEventsWatchers.size < 128;
var calcDepth = (path4, root) => {
  let i = 0;
  while (!path4.indexOf(root) && (path4 = sysPath$1.dirname(path4)) !== root) i++;
  return i;
};
var sameTypes = (info, stats) => info.type === FSEVENT_TYPE_DIRECTORY && stats.isDirectory() || info.type === FSEVENT_TYPE_SYMLINK && stats.isSymbolicLink() || info.type === FSEVENT_TYPE_FILE && stats.isFile();
var FsEventsHandler$1 = class FsEventsHandler {
  /**
   * @param {import('../index').FSWatcher} fsw
   */
  constructor(fsw) {
    this.fsw = fsw;
  }
  checkIgnored(path4, stats) {
    const ipaths = this.fsw._ignoredPaths;
    if (this.fsw._isIgnored(path4, stats)) {
      ipaths.add(path4);
      if (stats && stats.isDirectory()) {
        ipaths.add(path4 + ROOT_GLOBSTAR);
      }
      return true;
    }
    ipaths.delete(path4);
    ipaths.delete(path4 + ROOT_GLOBSTAR);
  }
  addOrChange(path4, fullPath, realPath, parent, watchedDir, item, info, opts) {
    const event = watchedDir.has(item) ? EV_CHANGE$1 : EV_ADD$1;
    this.handleEvent(event, path4, fullPath, realPath, parent, watchedDir, item, info, opts);
  }
  async checkExists(path4, fullPath, realPath, parent, watchedDir, item, info, opts) {
    try {
      const stats = await stat$1(path4);
      if (this.fsw.closed) return;
      if (sameTypes(info, stats)) {
        this.addOrChange(path4, fullPath, realPath, parent, watchedDir, item, info, opts);
      } else {
        this.handleEvent(EV_UNLINK$1, path4, fullPath, realPath, parent, watchedDir, item, info, opts);
      }
    } catch (error2) {
      if (error2.code === "EACCES") {
        this.addOrChange(path4, fullPath, realPath, parent, watchedDir, item, info, opts);
      } else {
        this.handleEvent(EV_UNLINK$1, path4, fullPath, realPath, parent, watchedDir, item, info, opts);
      }
    }
  }
  handleEvent(event, path4, fullPath, realPath, parent, watchedDir, item, info, opts) {
    if (this.fsw.closed || this.checkIgnored(path4)) return;
    if (event === EV_UNLINK$1) {
      const isDirectory2 = info.type === FSEVENT_TYPE_DIRECTORY;
      if (isDirectory2 || watchedDir.has(item)) {
        this.fsw._remove(parent, item, isDirectory2);
      }
    } else {
      if (event === EV_ADD$1) {
        if (info.type === FSEVENT_TYPE_DIRECTORY) this.fsw._getWatchedDir(path4);
        if (info.type === FSEVENT_TYPE_SYMLINK && opts.followSymlinks) {
          const curDepth = opts.depth === void 0 ? void 0 : calcDepth(fullPath, realPath) + 1;
          return this._addToFsEvents(path4, false, true, curDepth);
        }
        this.fsw._getWatchedDir(parent).add(item);
      }
      const eventName = info.type === FSEVENT_TYPE_DIRECTORY ? event + DIR_SUFFIX : event;
      this.fsw._emit(eventName, path4);
      if (eventName === EV_ADD_DIR$1) this._addToFsEvents(path4, false, true);
    }
  }
  /**
   * Handle symlinks encountered during directory scan
   * @param {String} watchPath  - file/dir path to be watched with fsevents
   * @param {String} realPath   - real path (in case of symlinks)
   * @param {Function} transform  - path transformer
   * @param {Function} globFilter - path filter in case a glob pattern was provided
   * @returns {Function} closer for the watcher instance
  */
  _watchWithFsEvents(watchPath, realPath, transform2, globFilter) {
    if (this.fsw.closed || this.fsw._isIgnored(watchPath)) return;
    const opts = this.fsw.options;
    const watchCallback = async (fullPath, flags, info) => {
      if (this.fsw.closed || this.fsw._isIgnored(fullPath)) return;
      if (opts.depth !== void 0 && calcDepth(fullPath, realPath) > opts.depth) return;
      const path4 = transform2(sysPath$1.join(
        watchPath,
        sysPath$1.relative(watchPath, fullPath)
      ));
      if (globFilter && !globFilter(path4)) return;
      const parent = sysPath$1.dirname(path4);
      const item = sysPath$1.basename(path4);
      const watchedDir = this.fsw._getWatchedDir(
        info.type === FSEVENT_TYPE_DIRECTORY ? path4 : parent
      );
      if (wrongEventFlags.has(flags) || info.event === FSEVENT_UNKNOWN) {
        if (typeof opts.ignored === FUNCTION_TYPE$1) {
          let stats;
          try {
            stats = await stat$1(path4);
          } catch (error2) {
          }
          if (this.fsw.closed) return;
          if (this.checkIgnored(path4, stats)) return;
          if (sameTypes(info, stats)) {
            this.addOrChange(path4, fullPath, realPath, parent, watchedDir, item, info, opts);
          } else {
            this.handleEvent(EV_UNLINK$1, path4, fullPath, realPath, parent, watchedDir, item, info, opts);
          }
        } else {
          this.checkExists(path4, fullPath, realPath, parent, watchedDir, item, info, opts);
        }
      } else {
        switch (info.event) {
          case FSEVENT_CREATED:
          case FSEVENT_MODIFIED:
            return this.addOrChange(path4, fullPath, realPath, parent, watchedDir, item, info, opts);
          case FSEVENT_DELETED:
          case FSEVENT_MOVED:
            return this.checkExists(path4, fullPath, realPath, parent, watchedDir, item, info, opts);
        }
      }
    };
    const closer = setFSEventsListener(
      watchPath,
      realPath,
      watchCallback,
      this.fsw._emitRaw
    );
    this.fsw._emitReady();
    return closer;
  }
  /**
   * Handle symlinks encountered during directory scan
   * @param {String} linkPath path to symlink
   * @param {String} fullPath absolute path to the symlink
   * @param {Function} transform pre-existing path transformer
   * @param {Number} curDepth level of subdirectories traversed to where symlink is
   * @returns {Promise<void>}
   */
  async _handleFsEventsSymlink(linkPath, fullPath, transform2, curDepth) {
    if (this.fsw.closed || this.fsw._symlinkPaths.has(fullPath)) return;
    this.fsw._symlinkPaths.set(fullPath, true);
    this.fsw._incrReadyCount();
    try {
      const linkTarget = await realpath(linkPath);
      if (this.fsw.closed) return;
      if (this.fsw._isIgnored(linkTarget)) {
        return this.fsw._emitReady();
      }
      this.fsw._incrReadyCount();
      this._addToFsEvents(linkTarget || linkPath, (path4) => {
        let aliasedPath = linkPath;
        if (linkTarget && linkTarget !== DOT_SLASH) {
          aliasedPath = path4.replace(linkTarget, linkPath);
        } else if (path4 !== DOT_SLASH) {
          aliasedPath = sysPath$1.join(linkPath, path4);
        }
        return transform2(aliasedPath);
      }, false, curDepth);
    } catch (error2) {
      if (this.fsw._handleError(error2)) {
        return this.fsw._emitReady();
      }
    }
  }
  /**
   *
   * @param {Path} newPath
   * @param {fs.Stats} stats
   */
  emitAdd(newPath, stats, processPath2, opts, forceAdd) {
    const pp = processPath2(newPath);
    const isDir = stats.isDirectory();
    const dirObj = this.fsw._getWatchedDir(sysPath$1.dirname(pp));
    const base = sysPath$1.basename(pp);
    if (isDir) this.fsw._getWatchedDir(pp);
    if (dirObj.has(base)) return;
    dirObj.add(base);
    if (!opts.ignoreInitial || forceAdd === true) {
      this.fsw._emit(isDir ? EV_ADD_DIR$1 : EV_ADD$1, pp, stats);
    }
  }
  initWatch(realPath, path4, wh, processPath2) {
    if (this.fsw.closed) return;
    const closer = this._watchWithFsEvents(
      wh.watchPath,
      sysPath$1.resolve(realPath || wh.watchPath),
      processPath2,
      wh.globFilter
    );
    this.fsw._addPathCloser(path4, closer);
  }
  /**
   * Handle added path with fsevents
   * @param {String} path file/dir path or glob pattern
   * @param {Function|Boolean=} transform converts working path to what the user expects
   * @param {Boolean=} forceAdd ensure add is emitted
   * @param {Number=} priorDepth Level of subdirectories already traversed.
   * @returns {Promise<void>}
   */
  async _addToFsEvents(path4, transform2, forceAdd, priorDepth) {
    if (this.fsw.closed) {
      return;
    }
    const opts = this.fsw.options;
    const processPath2 = typeof transform2 === FUNCTION_TYPE$1 ? transform2 : IDENTITY_FN;
    const wh = this.fsw._getWatchHelpers(path4);
    try {
      const stats = await statMethods[wh.statMethod](wh.watchPath);
      if (this.fsw.closed) return;
      if (this.fsw._isIgnored(wh.watchPath, stats)) {
        throw null;
      }
      if (stats.isDirectory()) {
        if (!wh.globFilter) this.emitAdd(processPath2(path4), stats, processPath2, opts, forceAdd);
        if (priorDepth && priorDepth > opts.depth) return;
        this.fsw._readdirp(wh.watchPath, {
          fileFilter: (entry) => wh.filterPath(entry),
          directoryFilter: (entry) => wh.filterDir(entry),
          ...Depth(opts.depth - (priorDepth || 0))
        }).on(STR_DATA, (entry) => {
          if (this.fsw.closed) {
            return;
          }
          if (entry.stats.isDirectory() && !wh.filterPath(entry)) return;
          const joinedPath = sysPath$1.join(wh.watchPath, entry.path);
          const { fullPath } = entry;
          if (wh.followSymlinks && entry.stats.isSymbolicLink()) {
            const curDepth = opts.depth === void 0 ? void 0 : calcDepth(joinedPath, sysPath$1.resolve(wh.watchPath)) + 1;
            this._handleFsEventsSymlink(joinedPath, fullPath, processPath2, curDepth);
          } else {
            this.emitAdd(joinedPath, entry.stats, processPath2, opts, forceAdd);
          }
        }).on(EV_ERROR$1, EMPTY_FN$1).on(STR_END$1, () => {
          this.fsw._emitReady();
        });
      } else {
        this.emitAdd(wh.watchPath, stats, processPath2, opts, forceAdd);
        this.fsw._emitReady();
      }
    } catch (error2) {
      if (!error2 || this.fsw._handleError(error2)) {
        this.fsw._emitReady();
        this.fsw._emitReady();
      }
    }
    if (opts.persistent && forceAdd !== true) {
      if (typeof transform2 === FUNCTION_TYPE$1) {
        this.initWatch(void 0, path4, wh, processPath2);
      } else {
        let realPath;
        try {
          realPath = await realpath(wh.watchPath);
        } catch (e2) {
        }
        this.initWatch(realPath, path4, wh, processPath2);
      }
    }
  }
};
fseventsHandler.exports = FsEventsHandler$1;
fseventsHandler.exports.canUse = canUse;
var fseventsHandlerExports = fseventsHandler.exports;
var { EventEmitter: EventEmitter$2 } = import_events.default;
var fs$2 = import_fs.default;
var sysPath = import_path2.default;
var { promisify } = import_util.default;
var readdirp = readdirp_1;
var anymatch = anymatchExports.default;
var globParent2 = globParent$1;
var isGlob2 = isGlob$2;
var braces = braces_1;
var normalizePath2 = normalizePath$2;
var NodeFsHandler2 = nodefsHandler;
var FsEventsHandler2 = fseventsHandlerExports;
var {
  EV_ALL,
  EV_READY,
  EV_ADD,
  EV_CHANGE,
  EV_UNLINK,
  EV_ADD_DIR,
  EV_UNLINK_DIR,
  EV_RAW,
  EV_ERROR,
  STR_CLOSE,
  STR_END,
  BACK_SLASH_RE,
  DOUBLE_SLASH_RE,
  SLASH_OR_BACK_SLASH_RE,
  DOT_RE,
  REPLACER_RE,
  SLASH,
  SLASH_SLASH,
  BRACE_START,
  BANG,
  ONE_DOT,
  TWO_DOTS,
  GLOBSTAR,
  SLASH_GLOBSTAR,
  ANYMATCH_OPTS,
  STRING_TYPE,
  FUNCTION_TYPE,
  EMPTY_STR,
  EMPTY_FN,
  isWindows: isWindows$1,
  isMacos,
  isIBMi
} = constants$1;
var stat = promisify(fs$2.stat);
var readdir = promisify(fs$2.readdir);
var arrify = (value2 = []) => Array.isArray(value2) ? value2 : [value2];
var flatten = (list, result = []) => {
  list.forEach((item) => {
    if (Array.isArray(item)) {
      flatten(item, result);
    } else {
      result.push(item);
    }
  });
  return result;
};
var unifyPaths = (paths_) => {
  const paths = flatten(arrify(paths_));
  if (!paths.every((p2) => typeof p2 === STRING_TYPE)) {
    throw new TypeError(`Non-string provided as watch path: ${paths}`);
  }
  return paths.map(normalizePathToUnix);
};
var toUnix = (string) => {
  let str = string.replace(BACK_SLASH_RE, SLASH);
  let prepend = false;
  if (str.startsWith(SLASH_SLASH)) {
    prepend = true;
  }
  while (str.match(DOUBLE_SLASH_RE)) {
    str = str.replace(DOUBLE_SLASH_RE, SLASH);
  }
  if (prepend) {
    str = SLASH + str;
  }
  return str;
};
var normalizePathToUnix = (path4) => toUnix(sysPath.normalize(toUnix(path4)));
var normalizeIgnored = (cwd2 = EMPTY_STR) => (path4) => {
  if (typeof path4 !== STRING_TYPE) return path4;
  return normalizePathToUnix(sysPath.isAbsolute(path4) ? path4 : sysPath.join(cwd2, path4));
};
var getAbsolutePath = (path4, cwd2) => {
  if (sysPath.isAbsolute(path4)) {
    return path4;
  }
  if (path4.startsWith(BANG)) {
    return BANG + sysPath.join(cwd2, path4.slice(1));
  }
  return sysPath.join(cwd2, path4);
};
var undef = (opts, key) => opts[key] === void 0;
var DirEntry = class {
  /**
   * @param {Path} dir
   * @param {Function} removeWatcher
   */
  constructor(dir, removeWatcher) {
    this.path = dir;
    this._removeWatcher = removeWatcher;
    this.items = /* @__PURE__ */ new Set();
  }
  add(item) {
    const { items } = this;
    if (!items) return;
    if (item !== ONE_DOT && item !== TWO_DOTS) items.add(item);
  }
  async remove(item) {
    const { items } = this;
    if (!items) return;
    items.delete(item);
    if (items.size > 0) return;
    const dir = this.path;
    try {
      await readdir(dir);
    } catch (err2) {
      if (this._removeWatcher) {
        this._removeWatcher(sysPath.dirname(dir), sysPath.basename(dir));
      }
    }
  }
  has(item) {
    const { items } = this;
    if (!items) return;
    return items.has(item);
  }
  /**
   * @returns {Array<String>}
   */
  getChildren() {
    const { items } = this;
    if (!items) return;
    return [...items.values()];
  }
  dispose() {
    this.items.clear();
    delete this.path;
    delete this._removeWatcher;
    delete this.items;
    Object.freeze(this);
  }
};
var STAT_METHOD_F = "stat";
var STAT_METHOD_L = "lstat";
var WatchHelper = class {
  constructor(path4, watchPath, follow, fsw) {
    this.fsw = fsw;
    this.path = path4 = path4.replace(REPLACER_RE, EMPTY_STR);
    this.watchPath = watchPath;
    this.fullWatchPath = sysPath.resolve(watchPath);
    this.hasGlob = watchPath !== path4;
    if (path4 === EMPTY_STR) this.hasGlob = false;
    this.globSymlink = this.hasGlob && follow ? void 0 : false;
    this.globFilter = this.hasGlob ? anymatch(path4, void 0, ANYMATCH_OPTS) : false;
    this.dirParts = this.getDirParts(path4);
    this.dirParts.forEach((parts) => {
      if (parts.length > 1) parts.pop();
    });
    this.followSymlinks = follow;
    this.statMethod = follow ? STAT_METHOD_F : STAT_METHOD_L;
  }
  checkGlobSymlink(entry) {
    if (this.globSymlink === void 0) {
      this.globSymlink = entry.fullParentDir === this.fullWatchPath ? false : { realPath: entry.fullParentDir, linkPath: this.fullWatchPath };
    }
    if (this.globSymlink) {
      return entry.fullPath.replace(this.globSymlink.realPath, this.globSymlink.linkPath);
    }
    return entry.fullPath;
  }
  entryPath(entry) {
    return sysPath.join(
      this.watchPath,
      sysPath.relative(this.watchPath, this.checkGlobSymlink(entry))
    );
  }
  filterPath(entry) {
    const { stats } = entry;
    if (stats && stats.isSymbolicLink()) return this.filterDir(entry);
    const resolvedPath = this.entryPath(entry);
    const matchesGlob = this.hasGlob && typeof this.globFilter === FUNCTION_TYPE ? this.globFilter(resolvedPath) : true;
    return matchesGlob && this.fsw._isntIgnored(resolvedPath, stats) && this.fsw._hasReadPermissions(stats);
  }
  getDirParts(path4) {
    if (!this.hasGlob) return [];
    const parts = [];
    const expandedPath = path4.includes(BRACE_START) ? braces.expand(path4) : [path4];
    expandedPath.forEach((path5) => {
      parts.push(sysPath.relative(this.watchPath, path5).split(SLASH_OR_BACK_SLASH_RE));
    });
    return parts;
  }
  filterDir(entry) {
    if (this.hasGlob) {
      const entryParts = this.getDirParts(this.checkGlobSymlink(entry));
      let globstar = false;
      this.unmatchedGlob = !this.dirParts.some((parts) => {
        return parts.every((part, i) => {
          if (part === GLOBSTAR) globstar = true;
          return globstar || !entryParts[0][i] || anymatch(part, entryParts[0][i], ANYMATCH_OPTS);
        });
      });
    }
    return !this.unmatchedGlob && this.fsw._isntIgnored(this.entryPath(entry), entry.stats);
  }
};
var FSWatcher = class extends EventEmitter$2 {
  // Not indenting methods for history sake; for now.
  constructor(_opts) {
    super();
    const opts = {};
    if (_opts) Object.assign(opts, _opts);
    this._watched = /* @__PURE__ */ new Map();
    this._closers = /* @__PURE__ */ new Map();
    this._ignoredPaths = /* @__PURE__ */ new Set();
    this._throttled = /* @__PURE__ */ new Map();
    this._symlinkPaths = /* @__PURE__ */ new Map();
    this._streams = /* @__PURE__ */ new Set();
    this.closed = false;
    if (undef(opts, "persistent")) opts.persistent = true;
    if (undef(opts, "ignoreInitial")) opts.ignoreInitial = false;
    if (undef(opts, "ignorePermissionErrors")) opts.ignorePermissionErrors = false;
    if (undef(opts, "interval")) opts.interval = 100;
    if (undef(opts, "binaryInterval")) opts.binaryInterval = 300;
    if (undef(opts, "disableGlobbing")) opts.disableGlobbing = false;
    opts.enableBinaryInterval = opts.binaryInterval !== opts.interval;
    if (undef(opts, "useFsEvents")) opts.useFsEvents = !opts.usePolling;
    const canUseFsEvents = FsEventsHandler2.canUse();
    if (!canUseFsEvents) opts.useFsEvents = false;
    if (undef(opts, "usePolling") && !opts.useFsEvents) {
      opts.usePolling = isMacos;
    }
    if (isIBMi) {
      opts.usePolling = true;
    }
    const envPoll = process.env.CHOKIDAR_USEPOLLING;
    if (envPoll !== void 0) {
      const envLower = envPoll.toLowerCase();
      if (envLower === "false" || envLower === "0") {
        opts.usePolling = false;
      } else if (envLower === "true" || envLower === "1") {
        opts.usePolling = true;
      } else {
        opts.usePolling = !!envLower;
      }
    }
    const envInterval = process.env.CHOKIDAR_INTERVAL;
    if (envInterval) {
      opts.interval = Number.parseInt(envInterval, 10);
    }
    if (undef(opts, "atomic")) opts.atomic = !opts.usePolling && !opts.useFsEvents;
    if (opts.atomic) this._pendingUnlinks = /* @__PURE__ */ new Map();
    if (undef(opts, "followSymlinks")) opts.followSymlinks = true;
    if (undef(opts, "awaitWriteFinish")) opts.awaitWriteFinish = false;
    if (opts.awaitWriteFinish === true) opts.awaitWriteFinish = {};
    const awf = opts.awaitWriteFinish;
    if (awf) {
      if (!awf.stabilityThreshold) awf.stabilityThreshold = 2e3;
      if (!awf.pollInterval) awf.pollInterval = 100;
      this._pendingWrites = /* @__PURE__ */ new Map();
    }
    if (opts.ignored) opts.ignored = arrify(opts.ignored);
    let readyCalls = 0;
    this._emitReady = () => {
      readyCalls++;
      if (readyCalls >= this._readyCount) {
        this._emitReady = EMPTY_FN;
        this._readyEmitted = true;
        process.nextTick(() => this.emit(EV_READY));
      }
    };
    this._emitRaw = (...args) => this.emit(EV_RAW, ...args);
    this._readyEmitted = false;
    this.options = opts;
    if (opts.useFsEvents) {
      this._fsEventsHandler = new FsEventsHandler2(this);
    } else {
      this._nodeFsHandler = new NodeFsHandler2(this);
    }
    Object.freeze(opts);
  }
  // Public methods
  /**
   * Adds paths to be watched on an existing FSWatcher instance
   * @param {Path|Array<Path>} paths_
   * @param {String=} _origAdd private; for handling non-existent paths to be watched
   * @param {Boolean=} _internal private; indicates a non-user add
   * @returns {FSWatcher} for chaining
   */
  add(paths_, _origAdd, _internal) {
    const { cwd: cwd2, disableGlobbing } = this.options;
    this.closed = false;
    let paths = unifyPaths(paths_);
    if (cwd2) {
      paths = paths.map((path4) => {
        const absPath = getAbsolutePath(path4, cwd2);
        if (disableGlobbing || !isGlob2(path4)) {
          return absPath;
        }
        return normalizePath2(absPath);
      });
    }
    paths = paths.filter((path4) => {
      if (path4.startsWith(BANG)) {
        this._ignoredPaths.add(path4.slice(1));
        return false;
      }
      this._ignoredPaths.delete(path4);
      this._ignoredPaths.delete(path4 + SLASH_GLOBSTAR);
      this._userIgnored = void 0;
      return true;
    });
    if (this.options.useFsEvents && this._fsEventsHandler) {
      if (!this._readyCount) this._readyCount = paths.length;
      if (this.options.persistent) this._readyCount += paths.length;
      paths.forEach((path4) => this._fsEventsHandler._addToFsEvents(path4));
    } else {
      if (!this._readyCount) this._readyCount = 0;
      this._readyCount += paths.length;
      Promise.all(
        paths.map(async (path4) => {
          const res = await this._nodeFsHandler._addToNodeFs(path4, !_internal, 0, 0, _origAdd);
          if (res) this._emitReady();
          return res;
        })
      ).then((results) => {
        if (this.closed) return;
        results.filter((item) => item).forEach((item) => {
          this.add(sysPath.dirname(item), sysPath.basename(_origAdd || item));
        });
      });
    }
    return this;
  }
  /**
   * Close watchers or start ignoring events from specified paths.
   * @param {Path|Array<Path>} paths_ - string or array of strings, file/directory paths and/or globs
   * @returns {FSWatcher} for chaining
  */
  unwatch(paths_) {
    if (this.closed) return this;
    const paths = unifyPaths(paths_);
    const { cwd: cwd2 } = this.options;
    paths.forEach((path4) => {
      if (!sysPath.isAbsolute(path4) && !this._closers.has(path4)) {
        if (cwd2) path4 = sysPath.join(cwd2, path4);
        path4 = sysPath.resolve(path4);
      }
      this._closePath(path4);
      this._ignoredPaths.add(path4);
      if (this._watched.has(path4)) {
        this._ignoredPaths.add(path4 + SLASH_GLOBSTAR);
      }
      this._userIgnored = void 0;
    });
    return this;
  }
  /**
   * Close watchers and remove all listeners from watched paths.
   * @returns {Promise<void>}.
  */
  close() {
    if (this.closed) return this._closePromise;
    this.closed = true;
    this.removeAllListeners();
    const closers = [];
    this._closers.forEach((closerList) => closerList.forEach((closer) => {
      const promise = closer();
      if (promise instanceof Promise) closers.push(promise);
    }));
    this._streams.forEach((stream3) => stream3.destroy());
    this._userIgnored = void 0;
    this._readyCount = 0;
    this._readyEmitted = false;
    this._watched.forEach((dirent) => dirent.dispose());
    ["closers", "watched", "streams", "symlinkPaths", "throttled"].forEach((key) => {
      this[`_${key}`].clear();
    });
    this._closePromise = closers.length ? Promise.all(closers).then(() => void 0) : Promise.resolve();
    return this._closePromise;
  }
  /**
   * Expose list of watched paths
   * @returns {Object} for chaining
  */
  getWatched() {
    const watchList = {};
    this._watched.forEach((entry, dir) => {
      const key = this.options.cwd ? sysPath.relative(this.options.cwd, dir) : dir;
      watchList[key || ONE_DOT] = entry.getChildren().sort();
    });
    return watchList;
  }
  emitWithAll(event, args) {
    this.emit(...args);
    if (event !== EV_ERROR) this.emit(EV_ALL, ...args);
  }
  // Common helpers
  // --------------
  /**
   * Normalize and emit events.
   * Calling _emit DOES NOT MEAN emit() would be called!
   * @param {EventName} event Type of event
   * @param {Path} path File or directory path
   * @param {*=} val1 arguments to be passed with event
   * @param {*=} val2
   * @param {*=} val3
   * @returns the error if defined, otherwise the value of the FSWatcher instance's `closed` flag
   */
  async _emit(event, path4, val1, val2, val3) {
    if (this.closed) return;
    const opts = this.options;
    if (isWindows$1) path4 = sysPath.normalize(path4);
    if (opts.cwd) path4 = sysPath.relative(opts.cwd, path4);
    const args = [event, path4];
    if (val3 !== void 0) args.push(val1, val2, val3);
    else if (val2 !== void 0) args.push(val1, val2);
    else if (val1 !== void 0) args.push(val1);
    const awf = opts.awaitWriteFinish;
    let pw;
    if (awf && (pw = this._pendingWrites.get(path4))) {
      pw.lastChange = /* @__PURE__ */ new Date();
      return this;
    }
    if (opts.atomic) {
      if (event === EV_UNLINK) {
        this._pendingUnlinks.set(path4, args);
        setTimeout(() => {
          this._pendingUnlinks.forEach((entry, path5) => {
            this.emit(...entry);
            this.emit(EV_ALL, ...entry);
            this._pendingUnlinks.delete(path5);
          });
        }, typeof opts.atomic === "number" ? opts.atomic : 100);
        return this;
      }
      if (event === EV_ADD && this._pendingUnlinks.has(path4)) {
        event = args[0] = EV_CHANGE;
        this._pendingUnlinks.delete(path4);
      }
    }
    if (awf && (event === EV_ADD || event === EV_CHANGE) && this._readyEmitted) {
      const awfEmit = (err2, stats) => {
        if (err2) {
          event = args[0] = EV_ERROR;
          args[1] = err2;
          this.emitWithAll(event, args);
        } else if (stats) {
          if (args.length > 2) {
            args[2] = stats;
          } else {
            args.push(stats);
          }
          this.emitWithAll(event, args);
        }
      };
      this._awaitWriteFinish(path4, awf.stabilityThreshold, event, awfEmit);
      return this;
    }
    if (event === EV_CHANGE) {
      const isThrottled = !this._throttle(EV_CHANGE, path4, 50);
      if (isThrottled) return this;
    }
    if (opts.alwaysStat && val1 === void 0 && (event === EV_ADD || event === EV_ADD_DIR || event === EV_CHANGE)) {
      const fullPath = opts.cwd ? sysPath.join(opts.cwd, path4) : path4;
      let stats;
      try {
        stats = await stat(fullPath);
      } catch (err2) {
      }
      if (!stats || this.closed) return;
      args.push(stats);
    }
    this.emitWithAll(event, args);
    return this;
  }
  /**
   * Common handler for errors
   * @param {Error} error
   * @returns {Error|Boolean} The error if defined, otherwise the value of the FSWatcher instance's `closed` flag
   */
  _handleError(error2) {
    const code = error2 && error2.code;
    if (error2 && code !== "ENOENT" && code !== "ENOTDIR" && (!this.options.ignorePermissionErrors || code !== "EPERM" && code !== "EACCES")) {
      this.emit(EV_ERROR, error2);
    }
    return error2 || this.closed;
  }
  /**
   * Helper utility for throttling
   * @param {ThrottleType} actionType type being throttled
   * @param {Path} path being acted upon
   * @param {Number} timeout duration of time to suppress duplicate actions
   * @returns {Object|false} tracking object or false if action should be suppressed
   */
  _throttle(actionType, path4, timeout2) {
    if (!this._throttled.has(actionType)) {
      this._throttled.set(actionType, /* @__PURE__ */ new Map());
    }
    const action = this._throttled.get(actionType);
    const actionPath = action.get(path4);
    if (actionPath) {
      actionPath.count++;
      return false;
    }
    let timeoutObject;
    const clear = () => {
      const item = action.get(path4);
      const count = item ? item.count : 0;
      action.delete(path4);
      clearTimeout(timeoutObject);
      if (item) clearTimeout(item.timeoutObject);
      return count;
    };
    timeoutObject = setTimeout(clear, timeout2);
    const thr = { timeoutObject, clear, count: 0 };
    action.set(path4, thr);
    return thr;
  }
  _incrReadyCount() {
    return this._readyCount++;
  }
  /**
   * Awaits write operation to finish.
   * Polls a newly created file for size variations. When files size does not change for 'threshold' milliseconds calls callback.
   * @param {Path} path being acted upon
   * @param {Number} threshold Time in milliseconds a file size must be fixed before acknowledging write OP is finished
   * @param {EventName} event
   * @param {Function} awfEmit Callback to be called when ready for event to be emitted.
   */
  _awaitWriteFinish(path4, threshold, event, awfEmit) {
    let timeoutHandler;
    let fullPath = path4;
    if (this.options.cwd && !sysPath.isAbsolute(path4)) {
      fullPath = sysPath.join(this.options.cwd, path4);
    }
    const now = /* @__PURE__ */ new Date();
    const awaitWriteFinish = (prevStat) => {
      fs$2.stat(fullPath, (err2, curStat) => {
        if (err2 || !this._pendingWrites.has(path4)) {
          if (err2 && err2.code !== "ENOENT") awfEmit(err2);
          return;
        }
        const now2 = Number(/* @__PURE__ */ new Date());
        if (prevStat && curStat.size !== prevStat.size) {
          this._pendingWrites.get(path4).lastChange = now2;
        }
        const pw = this._pendingWrites.get(path4);
        const df = now2 - pw.lastChange;
        if (df >= threshold) {
          this._pendingWrites.delete(path4);
          awfEmit(void 0, curStat);
        } else {
          timeoutHandler = setTimeout(
            awaitWriteFinish,
            this.options.awaitWriteFinish.pollInterval,
            curStat
          );
        }
      });
    };
    if (!this._pendingWrites.has(path4)) {
      this._pendingWrites.set(path4, {
        lastChange: now,
        cancelWait: () => {
          this._pendingWrites.delete(path4);
          clearTimeout(timeoutHandler);
          return event;
        }
      });
      timeoutHandler = setTimeout(
        awaitWriteFinish,
        this.options.awaitWriteFinish.pollInterval
      );
    }
  }
  _getGlobIgnored() {
    return [...this._ignoredPaths.values()];
  }
  /**
   * Determines whether user has asked to ignore this path.
   * @param {Path} path filepath or dir
   * @param {fs.Stats=} stats result of fs.stat
   * @returns {Boolean}
   */
  _isIgnored(path4, stats) {
    if (this.options.atomic && DOT_RE.test(path4)) return true;
    if (!this._userIgnored) {
      const { cwd: cwd2 } = this.options;
      const ign = this.options.ignored;
      const ignored = ign && ign.map(normalizeIgnored(cwd2));
      const paths = arrify(ignored).filter((path5) => typeof path5 === STRING_TYPE && !isGlob2(path5)).map((path5) => path5 + SLASH_GLOBSTAR);
      const list = this._getGlobIgnored().map(normalizeIgnored(cwd2)).concat(ignored, paths);
      this._userIgnored = anymatch(list, void 0, ANYMATCH_OPTS);
    }
    return this._userIgnored([path4, stats]);
  }
  _isntIgnored(path4, stat2) {
    return !this._isIgnored(path4, stat2);
  }
  /**
   * Provides a set of common helpers and properties relating to symlink and glob handling.
   * @param {Path} path file, directory, or glob pattern being watched
   * @param {Number=} depth at any depth > 0, this isn't a glob
   * @returns {WatchHelper} object containing helpers for this path
   */
  _getWatchHelpers(path4, depth) {
    const watchPath = depth || this.options.disableGlobbing || !isGlob2(path4) ? path4 : globParent2(path4);
    const follow = this.options.followSymlinks;
    return new WatchHelper(path4, watchPath, follow, this);
  }
  // Directory helpers
  // -----------------
  /**
   * Provides directory tracking objects
   * @param {String} directory path of the directory
   * @returns {DirEntry} the directory's tracking object
   */
  _getWatchedDir(directory) {
    if (!this._boundRemove) this._boundRemove = this._remove.bind(this);
    const dir = sysPath.resolve(directory);
    if (!this._watched.has(dir)) this._watched.set(dir, new DirEntry(dir, this._boundRemove));
    return this._watched.get(dir);
  }
  // File helpers
  // ------------
  /**
   * Check for read permissions.
   * Based on this answer on SO: https://stackoverflow.com/a/11781404/1358405
   * @param {fs.Stats} stats - object, result of fs_stat
   * @returns {Boolean} indicates whether the file can be read
  */
  _hasReadPermissions(stats) {
    if (this.options.ignorePermissionErrors) return true;
    const md = stats && Number.parseInt(stats.mode, 10);
    const st = md & 511;
    const it = Number.parseInt(st.toString(8)[0], 10);
    return Boolean(4 & it);
  }
  /**
   * Handles emitting unlink events for
   * files and directories, and via recursion, for
   * files and directories within directories that are unlinked
   * @param {String} directory within which the following item is located
   * @param {String} item      base path of item/directory
   * @returns {void}
  */
  _remove(directory, item, isDirectory2) {
    const path4 = sysPath.join(directory, item);
    const fullPath = sysPath.resolve(path4);
    isDirectory2 = isDirectory2 != null ? isDirectory2 : this._watched.has(path4) || this._watched.has(fullPath);
    if (!this._throttle("remove", path4, 100)) return;
    if (!isDirectory2 && !this.options.useFsEvents && this._watched.size === 1) {
      this.add(directory, item, true);
    }
    const wp = this._getWatchedDir(path4);
    const nestedDirectoryChildren = wp.getChildren();
    nestedDirectoryChildren.forEach((nested) => this._remove(path4, nested));
    const parent = this._getWatchedDir(directory);
    const wasTracked = parent.has(item);
    parent.remove(item);
    if (this._symlinkPaths.has(fullPath)) {
      this._symlinkPaths.delete(fullPath);
    }
    let relPath = path4;
    if (this.options.cwd) relPath = sysPath.relative(this.options.cwd, path4);
    if (this.options.awaitWriteFinish && this._pendingWrites.has(relPath)) {
      const event = this._pendingWrites.get(relPath).cancelWait();
      if (event === EV_ADD) return;
    }
    this._watched.delete(path4);
    this._watched.delete(fullPath);
    const eventName = isDirectory2 ? EV_UNLINK_DIR : EV_UNLINK;
    if (wasTracked && !this._isIgnored(path4)) this._emit(eventName, path4);
    if (!this.options.useFsEvents) {
      this._closePath(path4);
    }
  }
  /**
   * Closes all watchers for a path
   * @param {Path} path
   */
  _closePath(path4) {
    this._closeFile(path4);
    const dir = sysPath.dirname(path4);
    this._getWatchedDir(dir).remove(sysPath.basename(path4));
  }
  /**
   * Closes only file-specific watchers
   * @param {Path} path
   */
  _closeFile(path4) {
    const closers = this._closers.get(path4);
    if (!closers) return;
    closers.forEach((closer) => closer());
    this._closers.delete(path4);
  }
  /**
   *
   * @param {Path} path
   * @param {Function} closer
   */
  _addPathCloser(path4, closer) {
    if (!closer) return;
    let list = this._closers.get(path4);
    if (!list) {
      list = [];
      this._closers.set(path4, list);
    }
    list.push(closer);
  }
  _readdirp(root, opts) {
    if (this.closed) return;
    const options2 = { type: EV_ALL, alwaysStat: true, lstat: true, ...opts };
    let stream3 = readdirp(root, options2);
    this._streams.add(stream3);
    stream3.once(STR_CLOSE, () => {
      stream3 = void 0;
    });
    stream3.once(STR_END, () => {
      if (stream3) {
        this._streams.delete(stream3);
        stream3 = void 0;
      }
    });
    return stream3;
  }
};
chokidar.FSWatcher = FSWatcher;
var watch = (paths, options2) => {
  const watcher = new FSWatcher(options2);
  watcher.add(paths);
  return watcher;
};
chokidar.watch = watch;
var shellQuote$1 = {};
var quote = function quote2(xs) {
  return xs.map(function(s2) {
    if (s2 === "") {
      return "''";
    }
    if (s2 && typeof s2 === "object") {
      return s2.op.replace(/(.)/g, "\\$1");
    }
    if (/["\s]/.test(s2) && !/'/.test(s2)) {
      return "'" + s2.replace(/(['\\])/g, "\\$1") + "'";
    }
    if (/["'\s]/.test(s2)) {
      return '"' + s2.replace(/(["\\$`!])/g, "\\$1") + '"';
    }
    return String(s2).replace(/([A-Za-z]:)?([#!"$&'()*,:;<=>?@[\\\]^`{|}])/g, "$1\\$2");
  }).join(" ");
};
var CONTROL = "(?:" + [
  "\\|\\|",
  "\\&\\&",
  ";;",
  "\\|\\&",
  "\\<\\(",
  "\\<\\<\\<",
  ">>",
  ">\\&",
  "<\\&",
  "[&;()|<>]"
].join("|") + ")";
var controlRE = new RegExp("^" + CONTROL + "$");
var META = "|&;()<> \\t";
var SINGLE_QUOTE = '"((\\\\"|[^"])*?)"';
var DOUBLE_QUOTE = "'((\\\\'|[^'])*?)'";
var hash = /^#$/;
var SQ = "'";
var DQ = '"';
var DS = "$";
var TOKEN = "";
var mult = 4294967296;
for (i = 0; i < 4; i++) {
  TOKEN += (mult * Math.random()).toString(16);
}
var i;
var startsWithToken = new RegExp("^" + TOKEN);
function matchAll(s2, r2) {
  var origIndex = r2.lastIndex;
  var matches2 = [];
  var matchObj;
  while (matchObj = r2.exec(s2)) {
    matches2.push(matchObj);
    if (r2.lastIndex === matchObj.index) {
      r2.lastIndex += 1;
    }
  }
  r2.lastIndex = origIndex;
  return matches2;
}
function getVar(env2, pre, key) {
  var r2 = typeof env2 === "function" ? env2(key) : env2[key];
  if (typeof r2 === "undefined" && key != "") {
    r2 = "";
  } else if (typeof r2 === "undefined") {
    r2 = "$";
  }
  if (typeof r2 === "object") {
    return pre + TOKEN + JSON.stringify(r2) + TOKEN;
  }
  return pre + r2;
}
function parseInternal(string, env2, opts) {
  if (!opts) {
    opts = {};
  }
  var BS = opts.escape || "\\";
  var BAREWORD = "(\\" + BS + `['"` + META + `]|[^\\s'"` + META + "])+";
  var chunker = new RegExp([
    "(" + CONTROL + ")",
    // control chars
    "(" + BAREWORD + "|" + SINGLE_QUOTE + "|" + DOUBLE_QUOTE + ")+"
  ].join("|"), "g");
  var matches2 = matchAll(string, chunker);
  if (matches2.length === 0) {
    return [];
  }
  if (!env2) {
    env2 = {};
  }
  var commented = false;
  return matches2.map(function(match) {
    var s2 = match[0];
    if (!s2 || commented) {
      return void 0;
    }
    if (controlRE.test(s2)) {
      return { op: s2 };
    }
    var quote3 = false;
    var esc = false;
    var out = "";
    var isGlob3 = false;
    var i;
    function parseEnvVar() {
      i += 1;
      var varend;
      var varname;
      var char = s2.charAt(i);
      if (char === "{") {
        i += 1;
        if (s2.charAt(i) === "}") {
          throw new Error("Bad substitution: " + s2.slice(i - 2, i + 1));
        }
        varend = s2.indexOf("}", i);
        if (varend < 0) {
          throw new Error("Bad substitution: " + s2.slice(i));
        }
        varname = s2.slice(i, varend);
        i = varend;
      } else if (/[*@#?$!_-]/.test(char)) {
        varname = char;
        i += 1;
      } else {
        var slicedFromI = s2.slice(i);
        varend = slicedFromI.match(/[^\w\d_]/);
        if (!varend) {
          varname = slicedFromI;
          i = s2.length;
        } else {
          varname = slicedFromI.slice(0, varend.index);
          i += varend.index - 1;
        }
      }
      return getVar(env2, "", varname);
    }
    for (i = 0; i < s2.length; i++) {
      var c = s2.charAt(i);
      isGlob3 = isGlob3 || !quote3 && (c === "*" || c === "?");
      if (esc) {
        out += c;
        esc = false;
      } else if (quote3) {
        if (c === quote3) {
          quote3 = false;
        } else if (quote3 == SQ) {
          out += c;
        } else {
          if (c === BS) {
            i += 1;
            c = s2.charAt(i);
            if (c === DQ || c === BS || c === DS) {
              out += c;
            } else {
              out += BS + c;
            }
          } else if (c === DS) {
            out += parseEnvVar();
          } else {
            out += c;
          }
        }
      } else if (c === DQ || c === SQ) {
        quote3 = c;
      } else if (controlRE.test(c)) {
        return { op: s2 };
      } else if (hash.test(c)) {
        commented = true;
        var commentObj = { comment: string.slice(match.index + i + 1) };
        if (out.length) {
          return [out, commentObj];
        }
        return [commentObj];
      } else if (c === BS) {
        esc = true;
      } else if (c === DS) {
        out += parseEnvVar();
      } else {
        out += c;
      }
    }
    if (isGlob3) {
      return { op: "glob", pattern: out };
    }
    return out;
  }).reduce(function(prev, arg) {
    return typeof arg === "undefined" ? prev : prev.concat(arg);
  }, []);
}
var parse$6 = function parse2(s2, env2, opts) {
  var mapped = parseInternal(s2, env2, opts);
  if (typeof env2 !== "function") {
    return mapped;
  }
  return mapped.reduce(function(acc, s3) {
    if (typeof s3 === "object") {
      return acc.concat(s3);
    }
    var xs = s3.split(RegExp("(" + TOKEN + ".*?" + TOKEN + ")", "g"));
    if (xs.length === 1) {
      return acc.concat(xs[0]);
    }
    return acc.concat(xs.filter(Boolean).map(function(x) {
      if (startsWithToken.test(x)) {
        return JSON.parse(x.split(TOKEN)[1]);
      }
      return x;
    }));
  }, []);
};
shellQuote$1.quote = quote;
shellQuote$1.parse = parse$6;
var macos = {
  "/Applications/Atom.app/Contents/MacOS/Atom": "atom",
  "/Applications/Atom Beta.app/Contents/MacOS/Atom Beta": "/Applications/Atom Beta.app/Contents/MacOS/Atom Beta",
  "/Applications/Brackets.app/Contents/MacOS/Brackets": "brackets",
  "/Applications/Sublime Text.app/Contents/MacOS/Sublime Text": "/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl",
  "/Applications/Sublime Text.app/Contents/MacOS/sublime_text": "/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl",
  "/Applications/Sublime Text 2.app/Contents/MacOS/Sublime Text 2": "/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl",
  "/Applications/Sublime Text Dev.app/Contents/MacOS/Sublime Text": "/Applications/Sublime Text Dev.app/Contents/SharedSupport/bin/subl",
  "/Applications/Visual Studio Code.app/Contents/MacOS/Electron": "code",
  "/Applications/Visual Studio Code - Insiders.app/Contents/MacOS/Electron": "code-insiders",
  "/Applications/VSCodium.app/Contents/MacOS/Electron": "codium",
  "/Applications/Cursor.app/Contents/MacOS/Cursor": "cursor",
  "/Applications/AppCode.app/Contents/MacOS/appcode": "/Applications/AppCode.app/Contents/MacOS/appcode",
  "/Applications/CLion.app/Contents/MacOS/clion": "/Applications/CLion.app/Contents/MacOS/clion",
  "/Applications/IntelliJ IDEA.app/Contents/MacOS/idea": "/Applications/IntelliJ IDEA.app/Contents/MacOS/idea",
  "/Applications/IntelliJ IDEA Ultimate.app/Contents/MacOS/idea": "/Applications/IntelliJ IDEA Ultimate.app/Contents/MacOS/idea",
  "/Applications/IntelliJ IDEA Community Edition.app/Contents/MacOS/idea": "/Applications/IntelliJ IDEA Community Edition.app/Contents/MacOS/idea",
  "/Applications/PhpStorm.app/Contents/MacOS/phpstorm": "/Applications/PhpStorm.app/Contents/MacOS/phpstorm",
  "/Applications/PyCharm.app/Contents/MacOS/pycharm": "/Applications/PyCharm.app/Contents/MacOS/pycharm",
  "/Applications/PyCharm CE.app/Contents/MacOS/pycharm": "/Applications/PyCharm CE.app/Contents/MacOS/pycharm",
  "/Applications/RubyMine.app/Contents/MacOS/rubymine": "/Applications/RubyMine.app/Contents/MacOS/rubymine",
  "/Applications/WebStorm.app/Contents/MacOS/webstorm": "/Applications/WebStorm.app/Contents/MacOS/webstorm",
  "/Applications/MacVim.app/Contents/MacOS/MacVim": "mvim",
  "/Applications/GoLand.app/Contents/MacOS/goland": "/Applications/GoLand.app/Contents/MacOS/goland",
  "/Applications/Rider.app/Contents/MacOS/rider": "/Applications/Rider.app/Contents/MacOS/rider",
  "/Applications/Zed.app/Contents/MacOS/zed": "zed"
};
var linux = {
  atom: "atom",
  Brackets: "brackets",
  "code-insiders": "code-insiders",
  code: "code",
  vscodium: "vscodium",
  codium: "codium",
  emacs: "emacs",
  gvim: "gvim",
  idea: "idea",
  "idea.sh": "idea",
  phpstorm: "phpstorm",
  "phpstorm.sh": "phpstorm",
  pycharm: "pycharm",
  "pycharm.sh": "pycharm",
  rubymine: "rubymine",
  "rubymine.sh": "rubymine",
  sublime_text: "subl",
  vim: "vim",
  webstorm: "webstorm",
  "webstorm.sh": "webstorm",
  goland: "goland",
  "goland.sh": "goland",
  rider: "rider",
  "rider.sh": "rider"
};
var windows$1 = [
  "Brackets.exe",
  "Code.exe",
  "Code - Insiders.exe",
  "VSCodium.exe",
  "Cursor.exe",
  "atom.exe",
  "sublime_text.exe",
  "notepad++.exe",
  "clion.exe",
  "clion64.exe",
  "idea.exe",
  "idea64.exe",
  "phpstorm.exe",
  "phpstorm64.exe",
  "pycharm.exe",
  "pycharm64.exe",
  "rubymine.exe",
  "rubymine64.exe",
  "webstorm.exe",
  "webstorm64.exe",
  "goland.exe",
  "goland64.exe",
  "rider.exe",
  "rider64.exe"
];
var path$6 = import_path2.default;
var shellQuote = shellQuote$1;
var childProcess$1 = import_child_process.default;
var COMMON_EDITORS_MACOS = macos;
var COMMON_EDITORS_LINUX = linux;
var COMMON_EDITORS_WIN = windows$1;
var guess = function guessEditor(specifiedEditor) {
  if (specifiedEditor) {
    return shellQuote.parse(specifiedEditor);
  }
  if (process.env.LAUNCH_EDITOR) {
    return [process.env.LAUNCH_EDITOR];
  }
  if (process.versions.webcontainer) {
    return [process.env.EDITOR || "code"];
  }
  try {
    if (process.platform === "darwin") {
      const output = childProcess$1.execSync("ps x -o comm=", {
        stdio: ["pipe", "pipe", "ignore"]
      }).toString();
      const processNames = Object.keys(COMMON_EDITORS_MACOS);
      const processList = output.split("\n");
      for (let i = 0; i < processNames.length; i++) {
        const processName = processNames[i];
        if (processList.includes(processName)) {
          return [COMMON_EDITORS_MACOS[processName]];
        }
        const processNameWithoutApplications = processName.replace("/Applications", "");
        if (output.indexOf(processNameWithoutApplications) !== -1) {
          if (processName !== COMMON_EDITORS_MACOS[processName]) {
            return [COMMON_EDITORS_MACOS[processName]];
          }
          const runningProcess = processList.find((procName) => procName.endsWith(processNameWithoutApplications));
          if (runningProcess !== void 0) {
            return [runningProcess];
          }
        }
      }
    } else if (process.platform === "win32") {
      const output = childProcess$1.execSync(
        'powershell -NoProfile -Command "[Console]::OutputEncoding=[Text.Encoding]::UTF8;Get-CimInstance -Query \\"select executablepath from win32_process where executablepath is not null\\" | % { $_.ExecutablePath }"',
        {
          stdio: ["pipe", "pipe", "ignore"]
        }
      ).toString();
      const runningProcesses = output.split("\r\n");
      for (let i = 0; i < runningProcesses.length; i++) {
        const fullProcessPath = runningProcesses[i].trim();
        const shortProcessName = path$6.basename(fullProcessPath);
        if (COMMON_EDITORS_WIN.indexOf(shortProcessName) !== -1) {
          return [fullProcessPath];
        }
      }
    } else if (process.platform === "linux") {
      const output = childProcess$1.execSync("ps x --no-heading -o comm --sort=comm", {
        stdio: ["pipe", "pipe", "ignore"]
      }).toString();
      const processNames = Object.keys(COMMON_EDITORS_LINUX);
      for (let i = 0; i < processNames.length; i++) {
        const processName = processNames[i];
        if (output.indexOf(processName) !== -1) {
          return [COMMON_EDITORS_LINUX[processName]];
        }
      }
    }
  } catch (ignoreError) {
  }
  if (process.env.VISUAL) {
    return [process.env.VISUAL];
  } else if (process.env.EDITOR) {
    return [process.env.EDITOR];
  }
  return [null];
};
var path$5 = import_path2.default;
var getArgs = function getArgumentsForPosition(editor, fileName, lineNumber, columnNumber = 1) {
  const editorBasename = path$5.basename(editor).replace(/\.(exe|cmd|bat)$/i, "");
  switch (editorBasename) {
    case "atom":
    case "Atom":
    case "Atom Beta":
    case "subl":
    case "sublime":
    case "sublime_text":
    case "wstorm":
    case "charm":
    case "zed":
      return [`${fileName}:${lineNumber}:${columnNumber}`];
    case "notepad++":
      return ["-n" + lineNumber, "-c" + columnNumber, fileName];
    case "vim":
    case "mvim":
      return [`+call cursor(${lineNumber}, ${columnNumber})`, fileName];
    case "joe":
    case "gvim":
      return [`+${lineNumber}`, fileName];
    case "emacs":
    case "emacsclient":
      return [`+${lineNumber}:${columnNumber}`, fileName];
    case "rmate":
    case "mate":
    case "mine":
      return ["--line", lineNumber, fileName];
    case "code":
    case "Code":
    case "code-insiders":
    case "Code - Insiders":
    case "codium":
    case "cursor":
    case "vscodium":
    case "VSCodium":
      return ["-r", "-g", `${fileName}:${lineNumber}:${columnNumber}`];
    case "appcode":
    case "clion":
    case "clion64":
    case "idea":
    case "idea64":
    case "phpstorm":
    case "phpstorm64":
    case "pycharm":
    case "pycharm64":
    case "rubymine":
    case "rubymine64":
    case "webstorm":
    case "webstorm64":
    case "goland":
    case "goland64":
    case "rider":
    case "rider64":
      return ["--line", lineNumber, "--column", columnNumber, fileName];
  }
  if (process.env.LAUNCH_EDITOR) {
    return [fileName, lineNumber, columnNumber];
  }
  return [fileName];
};
var fs$1 = import_fs.default;
var os = import_os.default;
var path$4 = import_path2.default;
var colors = picocolorsExports;
var childProcess = import_child_process.default;
var guessEditor2 = guess;
var getArgumentsForPosition2 = getArgs;
function wrapErrorCallback(cb) {
  return (fileName, errorMessage) => {
    console.log();
    console.log(
      colors.red("Could not open " + path$4.basename(fileName) + " in the editor.")
    );
    if (errorMessage) {
      if (errorMessage[errorMessage.length - 1] !== ".") {
        errorMessage += ".";
      }
      console.log(
        colors.red("The editor process exited with an error: " + errorMessage)
      );
    }
    console.log();
    if (cb) cb(fileName, errorMessage);
  };
}
function isTerminalEditor(editor) {
  switch (editor) {
    case "vim":
    case "emacs":
    case "nano":
      return true;
  }
  return false;
}
var positionRE = /:(\d+)(:(\d+))?$/;
function parseFile(file) {
  if (file.startsWith("file://")) {
    file = import_url.default.fileURLToPath(file);
  }
  const fileName = file.replace(positionRE, "");
  const match = file.match(positionRE);
  const lineNumber = match && match[1];
  const columnNumber = match && match[3];
  return {
    fileName,
    lineNumber,
    columnNumber
  };
}
var _childProcess = null;
function launchEditor(file, specifiedEditor, onErrorCallback) {
  const parsed = parseFile(file);
  let { fileName } = parsed;
  const { lineNumber, columnNumber } = parsed;
  if (!fs$1.existsSync(fileName)) {
    return;
  }
  if (typeof specifiedEditor === "function") {
    onErrorCallback = specifiedEditor;
    specifiedEditor = void 0;
  }
  onErrorCallback = wrapErrorCallback(onErrorCallback);
  const [editor, ...args] = guessEditor2(specifiedEditor);
  if (!editor) {
    onErrorCallback(fileName, null);
    return;
  }
  if (process.platform === "linux" && fileName.startsWith("/mnt/") && /Microsoft/i.test(os.release())) {
    fileName = path$4.relative("", fileName);
  }
  if (lineNumber) {
    const extraArgs = getArgumentsForPosition2(editor, fileName, lineNumber, columnNumber);
    args.push.apply(args, extraArgs);
  } else {
    args.push(fileName);
  }
  if (_childProcess && isTerminalEditor(editor)) {
    _childProcess.kill("SIGKILL");
  }
  if (process.platform === "win32") {
    let escapeCmdArgs = function(cmdArgs) {
      return cmdArgs.replace(/([&|<>,;=^])/g, "^$1");
    }, doubleQuoteIfNeeded = function(str) {
      if (str.includes("^")) {
        return `^"${str}^"`;
      } else if (str.includes(" ")) {
        return `"${str}"`;
      }
      return str;
    };
    const launchCommand = [editor, ...args.map(escapeCmdArgs)].map(doubleQuoteIfNeeded).join(" ");
    _childProcess = childProcess.exec(launchCommand, {
      stdio: "inherit",
      shell: true
    });
  } else {
    _childProcess = childProcess.spawn(editor, args, { stdio: "inherit" });
  }
  _childProcess.on("exit", function(errorCode) {
    _childProcess = null;
    if (errorCode) {
      onErrorCallback(fileName, "(code " + errorCode + ")");
    }
  });
  _childProcess.on("error", function(error2) {
    let { code, message } = error2;
    if ("ENOENT" === code) {
      message = `${message} ('${editor}' command does not exist in 'PATH')`;
    }
    onErrorCallback(fileName, message);
  });
}
var launchEditor_1 = launchEditor;
var url$2 = import_url.default;
var path$3 = import_path2.default;
var launch = launchEditor_1;
var launchEditorMiddleware = (specifiedEditor, srcRoot, onErrorCallback) => {
  if (typeof specifiedEditor === "function") {
    onErrorCallback = specifiedEditor;
    specifiedEditor = void 0;
  }
  if (typeof srcRoot === "function") {
    onErrorCallback = srcRoot;
    srcRoot = void 0;
  }
  srcRoot = srcRoot || process.cwd();
  return function launchEditorMiddleware2(req2, res) {
    const { file } = url$2.parse(req2.url, true).query || {};
    if (!file) {
      res.statusCode = 500;
      res.end(`launch-editor-middleware: required query param "file" is missing.`);
    } else {
      launch(path$3.resolve(srcRoot, file), specifiedEditor, onErrorCallback);
      res.end();
    }
  };
};
var launchEditorMiddleware$1 = getDefaultExportFromCjs(launchEditorMiddleware);
async function resolveHttpServer({ proxy }, app, httpsOptions) {
  if (!httpsOptions) {
    const { createServer: createServer2 } = await import("./node_http-KHBQZBIE.js");
    return createServer2(app);
  }
  if (proxy) {
    const { createServer: createServer2 } = await import("./node_https-QRGWZXHX.js");
    return createServer2(httpsOptions, app);
  } else {
    const { createSecureServer } = await import("./node_http2-KR427MWG.js");
    return createSecureServer(
      {
        // Manually increase the session memory to prevent 502 ENHANCE_YOUR_CALM
        // errors on large numbers of requests
        maxSessionMemory: 1e3,
        ...httpsOptions,
        allowHTTP1: true
      },
      // @ts-expect-error TODO: is this correct?
      app
    );
  }
}
async function resolveHttpsConfig(https2) {
  if (!https2) return void 0;
  const [ca, cert, key, pfx] = await Promise.all([
    readFileIfExists(https2.ca),
    readFileIfExists(https2.cert),
    readFileIfExists(https2.key),
    readFileIfExists(https2.pfx)
  ]);
  return { ...https2, ca, cert, key, pfx };
}
async function readFileIfExists(value2) {
  if (typeof value2 === "string") {
    return import_promises.default.readFile(import_node_path3.default.resolve(value2)).catch(() => value2);
  }
  return value2;
}
async function httpServerStart(httpServer, serverOptions) {
  let { port, strictPort, host, logger } = serverOptions;
  return new Promise((resolve4, reject) => {
    const onError2 = (e2) => {
      if (e2.code === "EADDRINUSE") {
        if (strictPort) {
          httpServer.removeListener("error", onError2);
          reject(new Error(`Port ${port} is already in use`));
        } else {
          logger.info(`Port ${port} is in use, trying another one...`);
          httpServer.listen(++port, host);
        }
      } else {
        httpServer.removeListener("error", onError2);
        reject(e2);
      }
    };
    httpServer.on("error", onError2);
    httpServer.listen(port, host, () => {
      httpServer.removeListener("error", onError2);
      resolve4(port);
    });
  });
}
function setClientErrorHandler(server, logger) {
  server.on("clientError", (err2, socket) => {
    let msg = "400 Bad Request";
    if (err2.code === "HPE_HEADER_OVERFLOW") {
      msg = "431 Request Header Fields Too Large";
      logger.warn(
        colors$1.yellow(
          "Server responded with status code 431. See https://vite.dev/guide/troubleshooting.html#_431-request-header-fields-too-large."
        )
      );
    }
    if (err2.code === "ECONNRESET" || !socket.writable) {
      return;
    }
    socket.end(`HTTP/1.1 ${msg}\r
\r
`);
  });
}
var offset;
function calculateOffsetOnce() {
  if (offset !== void 0) {
    return;
  }
  try {
    new Function("throw new Error(1)")();
  } catch (e2) {
    const match = /:(\d+):\d+\)$/.exec(e2.stack.split("\n")[1]);
    offset = match ? +match[1] - 1 : 0;
  }
}
function ssrRewriteStacktrace(stack, moduleGraph) {
  calculateOffsetOnce();
  return stack.split("\n").map((line) => {
    return line.replace(
      /^ {4}at (?:(\S.*?)\s\()?(.+?):(\d+)(?::(\d+))?\)?/,
      (input, varName, id, line2, column) => {
        var _a2;
        if (!id) return input;
        const mod = moduleGraph.getModuleById(id);
        const rawSourceMap = (_a2 = mod == null ? void 0 : mod.transformResult) == null ? void 0 : _a2.map;
        if (!rawSourceMap) {
          return input;
        }
        const traced = new TraceMap(rawSourceMap);
        const pos = originalPositionFor$1(traced, {
          line: Number(line2) - offset,
          // stacktrace's column is 1-indexed, but sourcemap's one is 0-indexed
          column: Number(column) - 1
        });
        if (!pos.source) {
          return input;
        }
        const trimmedVarName = varName == null ? void 0 : varName.trim();
        const sourceFile = import_node_path3.default.resolve(import_node_path3.default.dirname(id), pos.source);
        const source = `${sourceFile}:${pos.line}:${pos.column + 1}`;
        if (!trimmedVarName || trimmedVarName === "eval") {
          return `    at ${source}`;
        } else {
          return `    at ${trimmedVarName} (${source})`;
        }
      }
    );
  }).join("\n");
}
function rebindErrorStacktrace(e2, stacktrace) {
  const { configurable, writable } = Object.getOwnPropertyDescriptor(
    e2,
    "stack"
  );
  if (configurable) {
    Object.defineProperty(e2, "stack", {
      value: stacktrace,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else if (writable) {
    e2.stack = stacktrace;
  }
}
var rewroteStacktraces = /* @__PURE__ */ new WeakSet();
function ssrFixStacktrace(e2, moduleGraph) {
  if (!e2.stack) return;
  if (rewroteStacktraces.has(e2)) return;
  const stacktrace = ssrRewriteStacktrace(e2.stack, moduleGraph);
  rebindErrorStacktrace(e2, stacktrace);
  rewroteStacktraces.add(e2);
}
function createHMROptions(environment, options2) {
  var _a2;
  if (environment.config.server.hmr === false || options2.hmr === false) {
    return false;
  }
  if (!("api" in environment.hot)) return false;
  return {
    logger: (_a2 = options2.hmr) == null ? void 0 : _a2.logger
  };
}
var prepareStackTrace2 = {
  retrieveFile(id) {
    if ((0, import_node_fs2.existsSync)(id)) {
      return (0, import_node_fs2.readFileSync)(id, "utf-8");
    }
  }
};
function resolveSourceMapOptions(options2) {
  if (options2.sourcemapInterceptor != null) {
    if (options2.sourcemapInterceptor === "prepareStackTrace") {
      return prepareStackTrace2;
    }
    if (typeof options2.sourcemapInterceptor === "object") {
      return { ...prepareStackTrace2, ...options2.sourcemapInterceptor };
    }
    return options2.sourcemapInterceptor;
  }
  if (typeof process !== "undefined" && "setSourceMapsEnabled" in process) {
    return "node";
  }
  return prepareStackTrace2;
}
var createServerModuleRunnerTransport = (options2) => {
  const hmrClient = {
    send: (payload) => {
      if (payload.type !== "custom") {
        throw new Error(
          "Cannot send non-custom events from the client to the server."
        );
      }
      options2.channel.send(payload);
    }
  };
  let handler;
  return {
    connect({ onMessage }) {
      options2.channel.api.outsideEmitter.on("send", onMessage);
      onMessage({ type: "connected" });
      handler = onMessage;
    },
    disconnect() {
      if (handler) {
        options2.channel.api.outsideEmitter.off("send", handler);
      }
    },
    send(payload) {
      if (payload.type !== "custom") {
        throw new Error(
          "Cannot send non-custom events from the server to the client."
        );
      }
      options2.channel.api.innerEmitter.emit(
        payload.event,
        payload.data,
        hmrClient
      );
    }
  };
};
function createServerModuleRunner(environment, options2 = {}) {
  const hmr = createHMROptions(environment, options2);
  return new ModuleRunner(
    {
      ...options2,
      root: environment.config.root,
      transport: createServerModuleRunnerTransport({
        channel: environment.hot
      }),
      hmr,
      sourcemapInterceptor: resolveSourceMapOptions(options2)
    },
    options2.evaluator
  );
}
async function ssrLoadModule(url2, server, fixStacktrace) {
  const environment = server.environments.ssr;
  server._ssrCompatModuleRunner || (server._ssrCompatModuleRunner = new SSRCompatModuleRunner(environment));
  url2 = unwrapId$1(url2);
  return instantiateModule(
    url2,
    server._ssrCompatModuleRunner,
    environment,
    fixStacktrace
  );
}
async function instantiateModule(url2, runner, environment, fixStacktrace) {
  const mod = await environment.moduleGraph.ensureEntryFromUrl(url2);
  if (mod.ssrError) {
    throw mod.ssrError;
  }
  try {
    return await runner.import(url2);
  } catch (e2) {
    if (e2.stack && fixStacktrace) {
      ssrFixStacktrace(e2, environment.moduleGraph);
    }
    environment.logger.error(
      buildErrorMessage(e2, [
        colors$1.red(`Error when evaluating SSR module ${url2}: ${e2.message}`)
      ]),
      {
        timestamp: true,
        clear: environment.config.clearScreen,
        error: e2
      }
    );
    throw e2;
  }
}
var SSRCompatModuleRunner = class extends ModuleRunner {
  constructor(environment) {
    super(
      {
        root: environment.config.root,
        transport: createServerModuleRunnerTransport({
          channel: environment.hot
        }),
        sourcemapInterceptor: false,
        hmr: false
      },
      new ESModulesEvaluator()
    );
    this.environment = environment;
  }
  async directRequest(url2, mod, callstack) {
    const id = mod.meta && "id" in mod.meta && mod.meta.id;
    if (!id) {
      return super.directRequest(url2, mod, callstack);
    }
    const viteMod = this.environment.moduleGraph.getModuleById(id);
    if (!viteMod) {
      return super.directRequest(id, mod, callstack);
    }
    try {
      const exports = await super.directRequest(id, mod, callstack);
      viteMod.ssrModule = exports;
      return exports;
    } catch (err2) {
      viteMod.ssrError = err2;
      throw err2;
    }
  }
};
function extract_names(param) {
  return extract_identifiers(param).map((node2) => node2.name);
}
function extract_identifiers(param, nodes = []) {
  switch (param.type) {
    case "Identifier":
      nodes.push(param);
      break;
    case "MemberExpression":
      let object = param;
      while (object.type === "MemberExpression") {
        object = /** @type {any} */
        object.object;
      }
      nodes.push(
        /** @type {any} */
        object
      );
      break;
    case "ObjectPattern":
      for (const prop of param.properties) {
        if (prop.type === "RestElement") {
          extract_identifiers(prop.argument, nodes);
        } else {
          extract_identifiers(prop.value, nodes);
        }
      }
      break;
    case "ArrayPattern":
      for (const element of param.elements) {
        if (element) extract_identifiers(element, nodes);
      }
      break;
    case "RestElement":
      extract_identifiers(param.argument, nodes);
      break;
    case "AssignmentPattern":
      extract_identifiers(param.left, nodes);
      break;
  }
  return nodes;
}
var WalkerBase2 = class {
  constructor() {
    this.should_skip = false;
    this.should_remove = false;
    this.replacement = null;
    this.context = {
      skip: () => this.should_skip = true,
      remove: () => this.should_remove = true,
      replace: (node2) => this.replacement = node2
    };
  }
  /**
   * @template {Node} Parent
   * @param {Parent | null | undefined} parent
   * @param {keyof Parent | null | undefined} prop
   * @param {number | null | undefined} index
   * @param {Node} node
   */
  replace(parent, prop, index, node2) {
    if (parent && prop) {
      if (index != null) {
        parent[prop][index] = node2;
      } else {
        parent[prop] = node2;
      }
    }
  }
  /**
   * @template {Node} Parent
   * @param {Parent | null | undefined} parent
   * @param {keyof Parent | null | undefined} prop
   * @param {number | null | undefined} index
   */
  remove(parent, prop, index) {
    if (parent && prop) {
      if (index !== null && index !== void 0) {
        parent[prop].splice(index, 1);
      } else {
        delete parent[prop];
      }
    }
  }
};
var SyncWalker2 = class extends WalkerBase2 {
  /**
   *
   * @param {SyncHandler} [enter]
   * @param {SyncHandler} [leave]
   */
  constructor(enter, leave) {
    super();
    this.should_skip = false;
    this.should_remove = false;
    this.replacement = null;
    this.context = {
      skip: () => this.should_skip = true,
      remove: () => this.should_remove = true,
      replace: (node2) => this.replacement = node2
    };
    this.enter = enter;
    this.leave = leave;
  }
  /**
   * @template {Node} Parent
   * @param {Node} node
   * @param {Parent | null} parent
   * @param {keyof Parent} [prop]
   * @param {number | null} [index]
   * @returns {Node | null}
   */
  visit(node2, parent, prop, index) {
    if (node2) {
      if (this.enter) {
        const _should_skip = this.should_skip;
        const _should_remove = this.should_remove;
        const _replacement = this.replacement;
        this.should_skip = false;
        this.should_remove = false;
        this.replacement = null;
        this.enter.call(this.context, node2, parent, prop, index);
        if (this.replacement) {
          node2 = this.replacement;
          this.replace(parent, prop, index, node2);
        }
        if (this.should_remove) {
          this.remove(parent, prop, index);
        }
        const skipped = this.should_skip;
        const removed = this.should_remove;
        this.should_skip = _should_skip;
        this.should_remove = _should_remove;
        this.replacement = _replacement;
        if (skipped) return node2;
        if (removed) return null;
      }
      let key;
      for (key in node2) {
        const value2 = node2[key];
        if (value2 && typeof value2 === "object") {
          if (Array.isArray(value2)) {
            const nodes = (
              /** @type {Array<unknown>} */
              value2
            );
            for (let i = 0; i < nodes.length; i += 1) {
              const item = nodes[i];
              if (isNode(item)) {
                if (!this.visit(item, node2, key, i)) {
                  i--;
                }
              }
            }
          } else if (isNode(value2)) {
            this.visit(value2, node2, key, null);
          }
        }
      }
      if (this.leave) {
        const _replacement = this.replacement;
        const _should_remove = this.should_remove;
        this.replacement = null;
        this.should_remove = false;
        this.leave.call(this.context, node2, parent, prop, index);
        if (this.replacement) {
          node2 = this.replacement;
          this.replace(parent, prop, index, node2);
        }
        if (this.should_remove) {
          this.remove(parent, prop, index);
        }
        const removed = this.should_remove;
        this.replacement = _replacement;
        this.should_remove = _should_remove;
        if (removed) return null;
      }
    }
    return node2;
  }
};
function isNode(value2) {
  return value2 !== null && typeof value2 === "object" && "type" in value2 && typeof value2.type === "string";
}
function walk$1(ast, { enter, leave }) {
  const instance = new SyncWalker2(enter, leave);
  return instance.visit(ast, null);
}
var ssrModuleExportsKey2 = `__vite_ssr_exports__`;
var ssrImportKey2 = `__vite_ssr_import__`;
var ssrDynamicImportKey2 = `__vite_ssr_dynamic_import__`;
var ssrExportAllKey2 = `__vite_ssr_exportAll__`;
var ssrImportMetaKey2 = `__vite_ssr_import_meta__`;
var hashbangRE = /^#!.*\n/;
async function ssrTransform(code, inMap, url2, originalCode, options2) {
  var _a2;
  if (((_a2 = options2 == null ? void 0 : options2.json) == null ? void 0 : _a2.stringify) && isJSONRequest(url2)) {
    return ssrTransformJSON(code, inMap);
  }
  return ssrTransformScript(code, inMap, url2, originalCode);
}
async function ssrTransformJSON(code, inMap) {
  return {
    code: code.replace("export default", `${ssrModuleExportsKey2}.default =`),
    map: inMap,
    deps: [],
    dynamicDeps: [],
    ssr: true
  };
}
async function ssrTransformScript(code, inMap, url2, originalCode) {
  var _a2;
  const s2 = new MagicString(code);
  let ast;
  try {
    ast = await parseAstAsync(code);
  } catch (err2) {
    if (err2.code === "PARSE_ERROR") {
      err2.message = `Parse failure: ${err2.message}
`;
      err2.id = url2;
      if (typeof err2.pos === "number") {
        err2.loc = numberToPos(code, err2.pos);
        err2.loc.file = url2;
        err2.frame = generateCodeFrame(code, err2.pos);
        err2.message += `At file: ${url2}:${err2.loc.line}:${err2.loc.column}`;
      } else {
        err2.message += `At file: ${url2}`;
      }
    }
    throw err2;
  }
  let uid = 0;
  const deps = /* @__PURE__ */ new Set();
  const dynamicDeps = /* @__PURE__ */ new Set();
  const idToImportMap = /* @__PURE__ */ new Map();
  const declaredConst = /* @__PURE__ */ new Set();
  const fileStartIndex = ((_a2 = hashbangRE.exec(code)) == null ? void 0 : _a2[0].length) ?? 0;
  let hoistIndex = fileStartIndex;
  function defineImport(index, importNode, metadata) {
    var _a3;
    const source = importNode.source.value;
    deps.add(source);
    const metadataArg = (((_a3 = metadata == null ? void 0 : metadata.importedNames) == null ? void 0 : _a3.length) ?? 0) > 0 ? `, ${JSON.stringify(metadata)}` : "";
    const importId = `__vite_ssr_import_${uid++}__`;
    const transformedImport = `const ${importId} = await ${ssrImportKey2}(${JSON.stringify(
      source
    )}${metadataArg});`;
    s2.update(importNode.start, importNode.end, transformedImport);
    const nonWhitespaceRegex = /\S/g;
    nonWhitespaceRegex.lastIndex = index;
    nonWhitespaceRegex.exec(code);
    if (importNode.start > nonWhitespaceRegex.lastIndex) {
      s2.move(importNode.start, importNode.end, index);
    } else {
      hoistIndex = importNode.end;
    }
    let linesSpanned = 1;
    for (let i = importNode.start; i < importNode.end; i++) {
      if (code[i] === "\n") {
        linesSpanned++;
      }
    }
    if (linesSpanned > 1) {
      s2.prependRight(importNode.end, "\n".repeat(linesSpanned - 1));
    }
    return importId;
  }
  function defineExport(name, local = name) {
    s2.appendLeft(
      fileStartIndex,
      `Object.defineProperty(${ssrModuleExportsKey2}, ${JSON.stringify(name)}, { enumerable: true, configurable: true, get(){ try { return ${local} } catch {} }});
`
    );
  }
  const imports = [];
  const exports = [];
  const reExportImportIdMap = /* @__PURE__ */ new Map();
  for (const node2 of ast.body) {
    if (node2.type === "ImportDeclaration") {
      imports.push(node2);
    } else if (node2.type === "ExportDefaultDeclaration") {
      exports.push(node2);
    } else if (node2.type === "ExportNamedDeclaration" || node2.type === "ExportAllDeclaration") {
      imports.push(node2);
      exports.push(node2);
    }
  }
  for (const node2 of imports) {
    if (node2.type === "ExportNamedDeclaration") {
      if (node2.source) {
        const importId2 = defineImport(
          hoistIndex,
          node2,
          {
            importedNames: node2.specifiers.map(
              (s22) => getIdentifierNameOrLiteralValue$1(s22.local)
            )
          }
        );
        reExportImportIdMap.set(node2, importId2);
      }
      continue;
    }
    if (node2.type === "ExportAllDeclaration") {
      if (node2.source) {
        const importId2 = defineImport(hoistIndex, node2);
        reExportImportIdMap.set(node2, importId2);
      }
      continue;
    }
    const importId = defineImport(hoistIndex, node2, {
      importedNames: node2.specifiers.map((s22) => {
        if (s22.type === "ImportSpecifier")
          return getIdentifierNameOrLiteralValue$1(s22.imported);
        else if (s22.type === "ImportDefaultSpecifier") return "default";
      }).filter(isDefined)
    });
    for (const spec of node2.specifiers) {
      if (spec.type === "ImportSpecifier") {
        if (spec.imported.type === "Identifier") {
          idToImportMap.set(
            spec.local.name,
            `${importId}.${spec.imported.name}`
          );
        } else {
          idToImportMap.set(
            spec.local.name,
            `${importId}[${JSON.stringify(spec.imported.value)}]`
          );
        }
      } else if (spec.type === "ImportDefaultSpecifier") {
        idToImportMap.set(spec.local.name, `${importId}.default`);
      } else {
        idToImportMap.set(spec.local.name, importId);
      }
    }
  }
  for (const node2 of exports) {
    if (node2.type === "ExportNamedDeclaration") {
      if (node2.declaration) {
        if (node2.declaration.type === "FunctionDeclaration" || node2.declaration.type === "ClassDeclaration") {
          defineExport(node2.declaration.id.name);
        } else {
          for (const declaration of node2.declaration.declarations) {
            const names = extract_names(declaration.id);
            for (const name of names) {
              defineExport(name);
            }
          }
        }
        s2.remove(node2.start, node2.declaration.start);
      } else {
        if (node2.source) {
          const importId = reExportImportIdMap.get(node2);
          for (const spec of node2.specifiers) {
            const exportedAs = getIdentifierNameOrLiteralValue$1(
              spec.exported
            );
            if (spec.local.type === "Identifier") {
              defineExport(exportedAs, `${importId}.${spec.local.name}`);
            } else {
              defineExport(
                exportedAs,
                `${importId}[${JSON.stringify(spec.local.value)}]`
              );
            }
          }
        } else {
          s2.remove(node2.start, node2.end);
          for (const spec of node2.specifiers) {
            const local = spec.local.name;
            const binding = idToImportMap.get(local);
            const exportedAs = getIdentifierNameOrLiteralValue$1(
              spec.exported
            );
            defineExport(exportedAs, binding || local);
          }
        }
      }
    }
    if (node2.type === "ExportDefaultDeclaration") {
      const expressionTypes = ["FunctionExpression", "ClassExpression"];
      if ("id" in node2.declaration && node2.declaration.id && !expressionTypes.includes(node2.declaration.type)) {
        const { name } = node2.declaration.id;
        s2.remove(
          node2.start,
          node2.start + 15
          /* 'export default '.length */
        );
        defineExport("default", name);
      } else {
        const name = `__vite_ssr_export_default__`;
        s2.update(
          node2.start,
          node2.start + 14,
          `const ${name} =`
        );
        defineExport("default", name);
      }
    }
    if (node2.type === "ExportAllDeclaration") {
      const importId = reExportImportIdMap.get(node2);
      if (node2.exported) {
        const exportedAs = getIdentifierNameOrLiteralValue$1(
          node2.exported
        );
        defineExport(exportedAs, `${importId}`);
      } else {
        s2.appendLeft(node2.end, `${ssrExportAllKey2}(${importId});
`);
      }
    }
  }
  walk(ast, {
    onStatements(statements) {
      for (let i = 0; i < statements.length - 1; i++) {
        const stmt = statements[i];
        if (code[stmt.end - 1] !== ";" && stmt.type !== "FunctionDeclaration" && stmt.type !== "ClassDeclaration" && stmt.type !== "BlockStatement" && stmt.type !== "ImportDeclaration") {
          s2.appendLeft(stmt.end, ";");
        }
      }
    },
    onIdentifier(id, parent, parentStack) {
      const grandparent = parentStack[1];
      const binding = idToImportMap.get(id.name);
      if (!binding) {
        return;
      }
      if (isStaticProperty(parent) && parent.shorthand) {
        if (!isNodeInPattern(parent) || isInDestructuringAssignment(parent, parentStack)) {
          s2.appendLeft(id.end, `: ${binding}`);
        }
      } else if (parent.type === "PropertyDefinition" && (grandparent == null ? void 0 : grandparent.type) === "ClassBody" || parent.type === "ClassDeclaration" && id === parent.superClass) {
        if (!declaredConst.has(id.name)) {
          declaredConst.add(id.name);
          const topNode = parentStack[parentStack.length - 2];
          s2.prependRight(topNode.start, `const ${id.name} = ${binding};
`);
        }
      } else if (parent.type === "CallExpression") {
        s2.update(id.start, id.end, binding);
        s2.prependRight(id.start, `(0,`);
        s2.appendLeft(id.end, `)`);
      } else if (
        // don't transform class name identifier
        !(parent.type === "ClassExpression" && id === parent.id)
      ) {
        s2.update(id.start, id.end, binding);
      }
    },
    onImportMeta(node2) {
      s2.update(node2.start, node2.end, ssrImportMetaKey2);
    },
    onDynamicImport(node2) {
      s2.update(node2.start, node2.start + 6, ssrDynamicImportKey2);
      if (node2.type === "ImportExpression" && node2.source.type === "Literal") {
        dynamicDeps.add(node2.source.value);
      }
    }
  });
  let map2;
  if ((inMap == null ? void 0 : inMap.mappings) === "") {
    map2 = inMap;
  } else {
    map2 = s2.generateMap({ hires: "boundary" });
    map2.sources = [import_node_path3.default.basename(url2)];
    map2.sourcesContent = [originalCode];
    if (inMap && inMap.mappings && "sources" in inMap && inMap.sources.length > 0) {
      map2 = combineSourcemaps(url2, [
        map2,
        inMap
      ]);
    }
  }
  return {
    code: s2.toString(),
    map: map2,
    ssr: true,
    deps: [...deps],
    dynamicDeps: [...dynamicDeps]
  };
}
function getIdentifierNameOrLiteralValue$1(node2) {
  return node2.type === "Identifier" ? node2.name : node2.value;
}
var isNodeInPatternWeakSet = /* @__PURE__ */ new WeakSet();
var setIsNodeInPattern = (node2) => isNodeInPatternWeakSet.add(node2);
var isNodeInPattern = (node2) => isNodeInPatternWeakSet.has(node2);
function walk(root, { onIdentifier, onImportMeta, onDynamicImport, onStatements }) {
  const parentStack = [];
  const varKindStack = [];
  const scopeMap = /* @__PURE__ */ new WeakMap();
  const identifiers = [];
  const setScope = (node2, name) => {
    let scopeIds = scopeMap.get(node2);
    if (scopeIds && scopeIds.has(name)) {
      return;
    }
    if (!scopeIds) {
      scopeIds = /* @__PURE__ */ new Set();
      scopeMap.set(node2, scopeIds);
    }
    scopeIds.add(name);
  };
  function isInScope(name, parents) {
    return parents.some((node2) => {
      var _a2;
      return (_a2 = scopeMap.get(node2)) == null ? void 0 : _a2.has(name);
    });
  }
  function handlePattern(p2, parentScope) {
    if (p2.type === "Identifier") {
      setScope(parentScope, p2.name);
    } else if (p2.type === "RestElement") {
      handlePattern(p2.argument, parentScope);
    } else if (p2.type === "ObjectPattern") {
      p2.properties.forEach((property) => {
        if (property.type === "RestElement") {
          setScope(parentScope, property.argument.name);
        } else {
          handlePattern(property.value, parentScope);
        }
      });
    } else if (p2.type === "ArrayPattern") {
      p2.elements.forEach((element) => {
        if (element) {
          handlePattern(element, parentScope);
        }
      });
    } else if (p2.type === "AssignmentPattern") {
      handlePattern(p2.left, parentScope);
    } else {
      setScope(parentScope, p2.name);
    }
  }
  walk$1(root, {
    enter(node2, parent) {
      if (node2.type === "ImportDeclaration") {
        return this.skip();
      }
      if (node2.type === "Program" || node2.type === "BlockStatement" || node2.type === "StaticBlock") {
        onStatements(node2.body);
      } else if (node2.type === "SwitchCase") {
        onStatements(node2.consequent);
      }
      if (parent && !(parent.type === "IfStatement" && node2 === parent.alternate)) {
        parentStack.unshift(parent);
      }
      if (node2.type === "VariableDeclaration") {
        varKindStack.unshift(node2.kind);
      }
      if (node2.type === "MetaProperty" && node2.meta.name === "import") {
        onImportMeta(node2);
      } else if (node2.type === "ImportExpression") {
        onDynamicImport(node2);
      }
      if (node2.type === "Identifier") {
        if (!isInScope(node2.name, parentStack) && isRefIdentifier(node2, parent, parentStack)) {
          identifiers.push([node2, parentStack.slice(0)]);
        }
      } else if (isFunction$1(node2)) {
        if (node2.type === "FunctionDeclaration") {
          const parentScope = findParentScope(parentStack);
          if (parentScope) {
            setScope(parentScope, node2.id.name);
          }
        }
        if (node2.type === "FunctionExpression" && node2.id) {
          setScope(node2, node2.id.name);
        }
        node2.params.forEach((p2) => {
          if (p2.type === "ObjectPattern" || p2.type === "ArrayPattern") {
            handlePattern(p2, node2);
            return;
          }
          walk$1(p2.type === "AssignmentPattern" ? p2.left : p2, {
            enter(child, parent2) {
              if ((parent2 == null ? void 0 : parent2.type) === "AssignmentPattern" && parent2.right === child) {
                return this.skip();
              }
              if (child.type !== "Identifier") return;
              if (isStaticPropertyKey(child, parent2)) return;
              if ((parent2 == null ? void 0 : parent2.type) === "TemplateLiteral" && parent2.expressions.includes(child) || (parent2 == null ? void 0 : parent2.type) === "CallExpression" && parent2.callee === child) {
                return;
              }
              setScope(node2, child.name);
            }
          });
        });
      } else if (node2.type === "ClassDeclaration") {
        const parentScope = findParentScope(parentStack);
        if (parentScope) {
          setScope(parentScope, node2.id.name);
        }
      } else if (node2.type === "ClassExpression" && node2.id) {
        setScope(node2, node2.id.name);
      } else if (node2.type === "Property" && parent.type === "ObjectPattern") {
        setIsNodeInPattern(node2);
      } else if (node2.type === "VariableDeclarator") {
        const parentFunction = findParentScope(
          parentStack,
          varKindStack[0] === "var"
        );
        if (parentFunction) {
          handlePattern(node2.id, parentFunction);
        }
      } else if (node2.type === "CatchClause" && node2.param) {
        handlePattern(node2.param, node2);
      }
    },
    leave(node2, parent) {
      if (parent && !(parent.type === "IfStatement" && node2 === parent.alternate)) {
        parentStack.shift();
      }
      if (node2.type === "VariableDeclaration") {
        varKindStack.shift();
      }
    }
  });
  identifiers.forEach(([node2, stack]) => {
    if (!isInScope(node2.name, stack)) onIdentifier(node2, stack[0], stack);
  });
}
function isRefIdentifier(id, parent, parentStack) {
  if (parent.type === "CatchClause" || (parent.type === "VariableDeclarator" || parent.type === "ClassDeclaration") && parent.id === id) {
    return false;
  }
  if (isFunction$1(parent)) {
    if (parent.id === id) {
      return false;
    }
    if (parent.params.includes(id)) {
      return false;
    }
  }
  if (parent.type === "MethodDefinition" && !parent.computed) {
    return false;
  }
  if (isStaticPropertyKey(id, parent)) {
    return false;
  }
  if (isNodeInPattern(parent) && parent.value === id) {
    return false;
  }
  if (parent.type === "ArrayPattern" && !isInDestructuringAssignment(parent, parentStack)) {
    return false;
  }
  if (parent.type === "MemberExpression" && parent.property === id && !parent.computed) {
    return false;
  }
  if (parent.type === "ExportSpecifier" || parent.type === "ExportAllDeclaration") {
    return false;
  }
  if (id.name === "arguments") {
    return false;
  }
  return true;
}
var isStaticProperty = (node2) => node2.type === "Property" && !node2.computed;
var isStaticPropertyKey = (node2, parent) => parent && isStaticProperty(parent) && parent.key === node2;
var functionNodeTypeRE = /Function(?:Expression|Declaration)$|Method$/;
function isFunction$1(node2) {
  return functionNodeTypeRE.test(node2.type);
}
var blockNodeTypeRE = /^BlockStatement$|^For(?:In|Of)?Statement$/;
function isBlock(node2) {
  return blockNodeTypeRE.test(node2.type);
}
function findParentScope(parentStack, isVar = false) {
  return parentStack.find(isVar ? isFunction$1 : isBlock);
}
function isInDestructuringAssignment(parent, parentStack) {
  if (parent.type === "Property" || parent.type === "ArrayPattern") {
    return parentStack.some((i) => i.type === "AssignmentExpression");
  }
  return false;
}
var isDockerCached;
function hasDockerEnv() {
  try {
    import_node_fs2.default.statSync("/.dockerenv");
    return true;
  } catch {
    return false;
  }
}
function hasDockerCGroup() {
  try {
    return import_node_fs2.default.readFileSync("/proc/self/cgroup", "utf8").includes("docker");
  } catch {
    return false;
  }
}
function isDocker() {
  if (isDockerCached === void 0) {
    isDockerCached = hasDockerEnv() || hasDockerCGroup();
  }
  return isDockerCached;
}
var cachedResult;
var hasContainerEnv = () => {
  try {
    import_node_fs2.default.statSync("/run/.containerenv");
    return true;
  } catch {
    return false;
  }
};
function isInsideContainer() {
  if (cachedResult === void 0) {
    cachedResult = hasContainerEnv() || isDocker();
  }
  return cachedResult;
}
var isWsl = () => {
  if (import_node_process.default.platform !== "linux") {
    return false;
  }
  if (import_node_os.default.release().toLowerCase().includes("microsoft")) {
    if (isInsideContainer()) {
      return false;
    }
    return true;
  }
  try {
    return import_node_fs2.default.readFileSync("/proc/version", "utf8").toLowerCase().includes("microsoft") ? !isInsideContainer() : false;
  } catch {
    return false;
  }
};
var isWsl$1 = import_node_process.default.env.__IS_WSL_TEST__ ? isWsl : isWsl();
function defineLazyProperty(object, propertyName, valueGetter) {
  const define = (value2) => Object.defineProperty(object, propertyName, { value: value2, enumerable: true, writable: true });
  Object.defineProperty(object, propertyName, {
    configurable: true,
    enumerable: true,
    get() {
      const result = valueGetter();
      define(result);
      return result;
    },
    set(value2) {
      define(value2);
    }
  });
  return object;
}
var execFileAsync$3 = (0, import_node_util.promisify)(import_node_child_process.execFile);
async function defaultBrowserId() {
  if (import_node_process.default.platform !== "darwin") {
    throw new Error("macOS only");
  }
  const { stdout } = await execFileAsync$3("defaults", ["read", "com.apple.LaunchServices/com.apple.launchservices.secure", "LSHandlers"]);
  const match = /LSHandlerRoleAll = "(?!-)(?<id>[^"]+?)";\s+?LSHandlerURLScheme = (?:http|https);/.exec(stdout);
  return (match == null ? void 0 : match.groups.id) ?? "com.apple.Safari";
}
var execFileAsync$2 = (0, import_node_util.promisify)(import_node_child_process.execFile);
async function runAppleScript(script, { humanReadableOutput = true } = {}) {
  if (import_node_process.default.platform !== "darwin") {
    throw new Error("macOS only");
  }
  const outputArguments = humanReadableOutput ? [] : ["-ss"];
  const { stdout } = await execFileAsync$2("osascript", ["-e", script, outputArguments]);
  return stdout.trim();
}
async function bundleName(bundleId) {
  return runAppleScript(`tell application "Finder" to set app_path to application file id "${bundleId}" as string
tell application "System Events" to get value of property list item "CFBundleName" of property list file (app_path & ":Contents:Info.plist")`);
}
var execFileAsync$1 = (0, import_node_util.promisify)(import_node_child_process.execFile);
var windowsBrowserProgIds = {
  AppXq0fevzme2pys62n3e0fbqa7peapykr8v: { name: "Edge", id: "com.microsoft.edge.old" },
  MSEdgeDHTML: { name: "Edge", id: "com.microsoft.edge" },
  // On macOS, it's "com.microsoft.edgemac"
  MSEdgeHTM: { name: "Edge", id: "com.microsoft.edge" },
  // Newer Edge/Win10 releases
  "IE.HTTP": { name: "Internet Explorer", id: "com.microsoft.ie" },
  FirefoxURL: { name: "Firefox", id: "org.mozilla.firefox" },
  ChromeHTML: { name: "Chrome", id: "com.google.chrome" },
  BraveHTML: { name: "Brave", id: "com.brave.Browser" },
  BraveBHTML: { name: "Brave Beta", id: "com.brave.Browser.beta" },
  BraveSSHTM: { name: "Brave Nightly", id: "com.brave.Browser.nightly" }
};
var UnknownBrowserError = class extends Error {
};
async function defaultBrowser$1(_execFileAsync = execFileAsync$1) {
  const { stdout } = await _execFileAsync("reg", [
    "QUERY",
    " HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\Shell\\Associations\\UrlAssociations\\http\\UserChoice",
    "/v",
    "ProgId"
  ]);
  const match = /ProgId\s*REG_SZ\s*(?<id>\S+)/.exec(stdout);
  if (!match) {
    throw new UnknownBrowserError(`Cannot find Windows browser in stdout: ${JSON.stringify(stdout)}`);
  }
  const { id } = match.groups;
  const browser = windowsBrowserProgIds[id];
  if (!browser) {
    throw new UnknownBrowserError(`Unknown browser ID: ${id}`);
  }
  return browser;
}
var execFileAsync = (0, import_node_util.promisify)(import_node_child_process.execFile);
var titleize = (string) => string.toLowerCase().replaceAll(/(?:^|\s|-)\S/g, (x) => x.toUpperCase());
async function defaultBrowser() {
  if (import_node_process.default.platform === "darwin") {
    const id = await defaultBrowserId();
    const name = await bundleName(id);
    return { name, id };
  }
  if (import_node_process.default.platform === "linux") {
    const { stdout } = await execFileAsync("xdg-mime", ["query", "default", "x-scheme-handler/http"]);
    const id = stdout.trim();
    const name = titleize(id.replace(/.desktop$/, "").replace("-", " "));
    return { name, id };
  }
  if (import_node_process.default.platform === "win32") {
    return defaultBrowser$1();
  }
  throw new Error("Only macOS, Linux, and Windows are supported");
}
var __dirname2 = import_node_path3.default.dirname((0, import_node_url2.fileURLToPath)(import.meta.url));
var localXdgOpenPath = import_node_path3.default.join(__dirname2, "xdg-open");
var { platform, arch } = import_node_process.default;
var getWslDrivesMountPoint = /* @__PURE__ */ (() => {
  const defaultMountPoint = "/mnt/";
  let mountPoint;
  return async function() {
    if (mountPoint) {
      return mountPoint;
    }
    const configFilePath = "/etc/wsl.conf";
    let isConfigFileExists = false;
    try {
      await import_promises.default.access(configFilePath, import_promises.constants.F_OK);
      isConfigFileExists = true;
    } catch {
    }
    if (!isConfigFileExists) {
      return defaultMountPoint;
    }
    const configContent = await import_promises.default.readFile(configFilePath, { encoding: "utf8" });
    const configMountPoint = new RegExp("(?<!#.*)root\\s*=\\s*(?<mountPoint>.*)", "g").exec(configContent);
    if (!configMountPoint) {
      return defaultMountPoint;
    }
    mountPoint = configMountPoint.groups.mountPoint.trim();
    mountPoint = mountPoint.endsWith("/") ? mountPoint : `${mountPoint}/`;
    return mountPoint;
  };
})();
var pTryEach = async (array, mapper) => {
  let latestError;
  for (const item of array) {
    try {
      return await mapper(item);
    } catch (error2) {
      latestError = error2;
    }
  }
  throw latestError;
};
var baseOpen = async (options2) => {
  options2 = {
    wait: false,
    background: false,
    newInstance: false,
    allowNonzeroExitCode: false,
    ...options2
  };
  if (Array.isArray(options2.app)) {
    return pTryEach(options2.app, (singleApp) => baseOpen({
      ...options2,
      app: singleApp
    }));
  }
  let { name: app, arguments: appArguments = [] } = options2.app ?? {};
  appArguments = [...appArguments];
  if (Array.isArray(app)) {
    return pTryEach(app, (appName) => baseOpen({
      ...options2,
      app: {
        name: appName,
        arguments: appArguments
      }
    }));
  }
  if (app === "browser" || app === "browserPrivate") {
    const ids = {
      "com.google.chrome": "chrome",
      "google-chrome.desktop": "chrome",
      "org.mozilla.firefox": "firefox",
      "firefox.desktop": "firefox",
      "com.microsoft.msedge": "edge",
      "com.microsoft.edge": "edge",
      "com.microsoft.edgemac": "edge",
      "microsoft-edge.desktop": "edge"
    };
    const flags = {
      chrome: "--incognito",
      firefox: "--private-window",
      edge: "--inPrivate"
    };
    const browser = await defaultBrowser();
    if (browser.id in ids) {
      const browserName = ids[browser.id];
      if (app === "browserPrivate") {
        appArguments.push(flags[browserName]);
      }
      return baseOpen({
        ...options2,
        app: {
          name: apps[browserName],
          arguments: appArguments
        }
      });
    }
    throw new Error(`${browser.name} is not supported as a default browser`);
  }
  let command;
  const cliArguments = [];
  const childProcessOptions = {};
  if (platform === "darwin") {
    command = "open";
    if (options2.wait) {
      cliArguments.push("--wait-apps");
    }
    if (options2.background) {
      cliArguments.push("--background");
    }
    if (options2.newInstance) {
      cliArguments.push("--new");
    }
    if (app) {
      cliArguments.push("-a", app);
    }
  } else if (platform === "win32" || isWsl$1 && !isInsideContainer() && !app) {
    const mountPoint = await getWslDrivesMountPoint();
    command = isWsl$1 ? `${mountPoint}c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe` : `${import_node_process.default.env.SYSTEMROOT || import_node_process.default.env.windir || "C:\\Windows"}\\System32\\WindowsPowerShell\\v1.0\\powershell`;
    cliArguments.push(
      "-NoProfile",
      "-NonInteractive",
      "-ExecutionPolicy",
      "Bypass",
      "-EncodedCommand"
    );
    if (!isWsl$1) {
      childProcessOptions.windowsVerbatimArguments = true;
    }
    const encodedArguments = ["Start"];
    if (options2.wait) {
      encodedArguments.push("-Wait");
    }
    if (app) {
      encodedArguments.push(`"\`"${app}\`""`);
      if (options2.target) {
        appArguments.push(options2.target);
      }
    } else if (options2.target) {
      encodedArguments.push(`"${options2.target}"`);
    }
    if (appArguments.length > 0) {
      appArguments = appArguments.map((argument) => `"\`"${argument}\`""`);
      encodedArguments.push("-ArgumentList", appArguments.join(","));
    }
    options2.target = import_node_buffer.Buffer.from(encodedArguments.join(" "), "utf16le").toString("base64");
  } else {
    if (app) {
      command = app;
    } else {
      const isBundled = !__dirname2 || __dirname2 === "/";
      let exeLocalXdgOpen = false;
      try {
        await import_promises.default.access(localXdgOpenPath, import_promises.constants.X_OK);
        exeLocalXdgOpen = true;
      } catch {
      }
      const useSystemXdgOpen = import_node_process.default.versions.electron ?? (platform === "android" || isBundled || !exeLocalXdgOpen);
      command = useSystemXdgOpen ? "xdg-open" : localXdgOpenPath;
    }
    if (appArguments.length > 0) {
      cliArguments.push(...appArguments);
    }
    if (!options2.wait) {
      childProcessOptions.stdio = "ignore";
      childProcessOptions.detached = true;
    }
  }
  if (platform === "darwin" && appArguments.length > 0) {
    cliArguments.push("--args", ...appArguments);
  }
  if (options2.target) {
    cliArguments.push(options2.target);
  }
  const subprocess = import_node_child_process.default.spawn(command, cliArguments, childProcessOptions);
  if (options2.wait) {
    return new Promise((resolve4, reject) => {
      subprocess.once("error", reject);
      subprocess.once("close", (exitCode) => {
        if (!options2.allowNonzeroExitCode && exitCode > 0) {
          reject(new Error(`Exited with code ${exitCode}`));
          return;
        }
        resolve4(subprocess);
      });
    });
  }
  subprocess.unref();
  return subprocess;
};
var open = (target, options2) => {
  if (typeof target !== "string") {
    throw new TypeError("Expected a `target`");
  }
  return baseOpen({
    ...options2,
    target
  });
};
function detectArchBinary(binary) {
  if (typeof binary === "string" || Array.isArray(binary)) {
    return binary;
  }
  const { [arch]: archBinary } = binary;
  if (!archBinary) {
    throw new Error(`${arch} is not supported`);
  }
  return archBinary;
}
function detectPlatformBinary({ [platform]: platformBinary }, { wsl }) {
  if (wsl && isWsl$1) {
    return detectArchBinary(wsl);
  }
  if (!platformBinary) {
    throw new Error(`${platform} is not supported`);
  }
  return detectArchBinary(platformBinary);
}
var apps = {};
defineLazyProperty(apps, "chrome", () => detectPlatformBinary({
  darwin: "google chrome",
  win32: "chrome",
  linux: ["google-chrome", "google-chrome-stable", "chromium"]
}, {
  wsl: {
    ia32: "/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe",
    x64: ["/mnt/c/Program Files/Google/Chrome/Application/chrome.exe", "/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe"]
  }
}));
defineLazyProperty(apps, "firefox", () => detectPlatformBinary({
  darwin: "firefox",
  win32: "C:\\Program Files\\Mozilla Firefox\\firefox.exe",
  linux: "firefox"
}, {
  wsl: "/mnt/c/Program Files/Mozilla Firefox/firefox.exe"
}));
defineLazyProperty(apps, "edge", () => detectPlatformBinary({
  darwin: "microsoft edge",
  win32: "msedge",
  linux: ["microsoft-edge", "microsoft-edge-dev"]
}, {
  wsl: "/mnt/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe"
}));
defineLazyProperty(apps, "browser", () => "browser");
defineLazyProperty(apps, "browserPrivate", () => "browserPrivate");
var crossSpawn = { exports: {} };
var windows;
var hasRequiredWindows;
function requireWindows() {
  if (hasRequiredWindows) return windows;
  hasRequiredWindows = 1;
  windows = isexe2;
  isexe2.sync = sync2;
  var fs2 = import_fs.default;
  function checkPathExt(path4, options2) {
    var pathext = options2.pathExt !== void 0 ? options2.pathExt : process.env.PATHEXT;
    if (!pathext) {
      return true;
    }
    pathext = pathext.split(";");
    if (pathext.indexOf("") !== -1) {
      return true;
    }
    for (var i = 0; i < pathext.length; i++) {
      var p2 = pathext[i].toLowerCase();
      if (p2 && path4.substr(-p2.length).toLowerCase() === p2) {
        return true;
      }
    }
    return false;
  }
  function checkStat(stat2, path4, options2) {
    if (!stat2.isSymbolicLink() && !stat2.isFile()) {
      return false;
    }
    return checkPathExt(path4, options2);
  }
  function isexe2(path4, options2, cb) {
    fs2.stat(path4, function(er, stat2) {
      cb(er, er ? false : checkStat(stat2, path4, options2));
    });
  }
  function sync2(path4, options2) {
    return checkStat(fs2.statSync(path4), path4, options2);
  }
  return windows;
}
var mode;
var hasRequiredMode;
function requireMode() {
  if (hasRequiredMode) return mode;
  hasRequiredMode = 1;
  mode = isexe2;
  isexe2.sync = sync2;
  var fs2 = import_fs.default;
  function isexe2(path4, options2, cb) {
    fs2.stat(path4, function(er, stat2) {
      cb(er, er ? false : checkStat(stat2, options2));
    });
  }
  function sync2(path4, options2) {
    return checkStat(fs2.statSync(path4), options2);
  }
  function checkStat(stat2, options2) {
    return stat2.isFile() && checkMode(stat2, options2);
  }
  function checkMode(stat2, options2) {
    var mod = stat2.mode;
    var uid = stat2.uid;
    var gid = stat2.gid;
    var myUid = options2.uid !== void 0 ? options2.uid : process.getuid && process.getuid();
    var myGid = options2.gid !== void 0 ? options2.gid : process.getgid && process.getgid();
    var u = parseInt("100", 8);
    var g = parseInt("010", 8);
    var o2 = parseInt("001", 8);
    var ug = u | g;
    var ret = mod & o2 || mod & g && gid === myGid || mod & u && uid === myUid || mod & ug && myUid === 0;
    return ret;
  }
  return mode;
}
var core;
if (process.platform === "win32" || commonjsGlobal.TESTING_WINDOWS) {
  core = requireWindows();
} else {
  core = requireMode();
}
var isexe_1 = isexe$1;
isexe$1.sync = sync;
function isexe$1(path4, options2, cb) {
  if (typeof options2 === "function") {
    cb = options2;
    options2 = {};
  }
  if (!cb) {
    if (typeof Promise !== "function") {
      throw new TypeError("callback not provided");
    }
    return new Promise(function(resolve4, reject) {
      isexe$1(path4, options2 || {}, function(er, is) {
        if (er) {
          reject(er);
        } else {
          resolve4(is);
        }
      });
    });
  }
  core(path4, options2 || {}, function(er, is) {
    if (er) {
      if (er.code === "EACCES" || options2 && options2.ignoreErrors) {
        er = null;
        is = false;
      }
    }
    cb(er, is);
  });
}
function sync(path4, options2) {
  try {
    return core.sync(path4, options2 || {});
  } catch (er) {
    if (options2 && options2.ignoreErrors || er.code === "EACCES") {
      return false;
    } else {
      throw er;
    }
  }
}
var isWindows2 = process.platform === "win32" || process.env.OSTYPE === "cygwin" || process.env.OSTYPE === "msys";
var path$2 = import_path2.default;
var COLON = isWindows2 ? ";" : ":";
var isexe = isexe_1;
var getNotFoundError = (cmd) => Object.assign(new Error(`not found: ${cmd}`), { code: "ENOENT" });
var getPathInfo = (cmd, opt) => {
  const colon = opt.colon || COLON;
  const pathEnv = cmd.match(/\//) || isWindows2 && cmd.match(/\\/) ? [""] : [
    // windows always checks the cwd first
    ...isWindows2 ? [process.cwd()] : [],
    ...(opt.path || process.env.PATH || /* istanbul ignore next: very unusual */
    "").split(colon)
  ];
  const pathExtExe = isWindows2 ? opt.pathExt || process.env.PATHEXT || ".EXE;.CMD;.BAT;.COM" : "";
  const pathExt = isWindows2 ? pathExtExe.split(colon) : [""];
  if (isWindows2) {
    if (cmd.indexOf(".") !== -1 && pathExt[0] !== "")
      pathExt.unshift("");
  }
  return {
    pathEnv,
    pathExt,
    pathExtExe
  };
};
var which$1 = (cmd, opt, cb) => {
  if (typeof opt === "function") {
    cb = opt;
    opt = {};
  }
  if (!opt)
    opt = {};
  const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt);
  const found3 = [];
  const step = (i) => new Promise((resolve4, reject) => {
    if (i === pathEnv.length)
      return opt.all && found3.length ? resolve4(found3) : reject(getNotFoundError(cmd));
    const ppRaw = pathEnv[i];
    const pathPart = /^".*"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw;
    const pCmd = path$2.join(pathPart, cmd);
    const p2 = !pathPart && /^\.[\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd : pCmd;
    resolve4(subStep(p2, i, 0));
  });
  const subStep = (p2, i, ii) => new Promise((resolve4, reject) => {
    if (ii === pathExt.length)
      return resolve4(step(i + 1));
    const ext = pathExt[ii];
    isexe(p2 + ext, { pathExt: pathExtExe }, (er, is) => {
      if (!er && is) {
        if (opt.all)
          found3.push(p2 + ext);
        else
          return resolve4(p2 + ext);
      }
      return resolve4(subStep(p2, i, ii + 1));
    });
  });
  return cb ? step(0).then((res) => cb(null, res), cb) : step(0);
};
var whichSync = (cmd, opt) => {
  opt = opt || {};
  const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt);
  const found3 = [];
  for (let i = 0; i < pathEnv.length; i++) {
    const ppRaw = pathEnv[i];
    const pathPart = /^".*"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw;
    const pCmd = path$2.join(pathPart, cmd);
    const p2 = !pathPart && /^\.[\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd : pCmd;
    for (let j = 0; j < pathExt.length; j++) {
      const cur = p2 + pathExt[j];
      try {
        const is = isexe.sync(cur, { pathExt: pathExtExe });
        if (is) {
          if (opt.all)
            found3.push(cur);
          else
            return cur;
        }
      } catch (ex) {
      }
    }
  }
  if (opt.all && found3.length)
    return found3;
  if (opt.nothrow)
    return null;
  throw getNotFoundError(cmd);
};
var which_1 = which$1;
which$1.sync = whichSync;
var pathKey$1 = { exports: {} };
var pathKey = (options2 = {}) => {
  const environment = options2.env || process.env;
  const platform2 = options2.platform || process.platform;
  if (platform2 !== "win32") {
    return "PATH";
  }
  return Object.keys(environment).reverse().find((key) => key.toUpperCase() === "PATH") || "Path";
};
pathKey$1.exports = pathKey;
pathKey$1.exports.default = pathKey;
var pathKeyExports = pathKey$1.exports;
var path$1 = import_path2.default;
var which = which_1;
var getPathKey = pathKeyExports;
function resolveCommandAttempt(parsed, withoutPathExt) {
  const env2 = parsed.options.env || process.env;
  const cwd2 = process.cwd();
  const hasCustomCwd = parsed.options.cwd != null;
  const shouldSwitchCwd = hasCustomCwd && process.chdir !== void 0 && !process.chdir.disabled;
  if (shouldSwitchCwd) {
    try {
      process.chdir(parsed.options.cwd);
    } catch (err2) {
    }
  }
  let resolved;
  try {
    resolved = which.sync(parsed.command, {
      path: env2[getPathKey({ env: env2 })],
      pathExt: withoutPathExt ? path$1.delimiter : void 0
    });
  } catch (e2) {
  } finally {
    if (shouldSwitchCwd) {
      process.chdir(cwd2);
    }
  }
  if (resolved) {
    resolved = path$1.resolve(hasCustomCwd ? parsed.options.cwd : "", resolved);
  }
  return resolved;
}
function resolveCommand$1(parsed) {
  return resolveCommandAttempt(parsed) || resolveCommandAttempt(parsed, true);
}
var resolveCommand_1 = resolveCommand$1;
var _escape = {};
var metaCharsRegExp = /([()\][%!^"`<>&|;, *?])/g;
function escapeCommand(arg) {
  arg = arg.replace(metaCharsRegExp, "^$1");
  return arg;
}
function escapeArgument(arg, doubleEscapeMetaChars) {
  arg = `${arg}`;
  arg = arg.replace(/(?=(\\+?)?)\1"/g, '$1$1\\"');
  arg = arg.replace(/(?=(\\+?)?)\1$/, "$1$1");
  arg = `"${arg}"`;
  arg = arg.replace(metaCharsRegExp, "^$1");
  if (doubleEscapeMetaChars) {
    arg = arg.replace(metaCharsRegExp, "^$1");
  }
  return arg;
}
_escape.command = escapeCommand;
_escape.argument = escapeArgument;
var shebangRegex$1 = /^#!(.*)/;
var shebangRegex = shebangRegex$1;
var shebangCommand$1 = (string = "") => {
  const match = string.match(shebangRegex);
  if (!match) {
    return null;
  }
  const [path4, argument] = match[0].replace(/#! ?/, "").split(" ");
  const binary = path4.split("/").pop();
  if (binary === "env") {
    return argument;
  }
  return argument ? `${binary} ${argument}` : binary;
};
var fs = import_fs.default;
var shebangCommand = shebangCommand$1;
function readShebang$1(command) {
  const size = 150;
  const buffer = Buffer.alloc(size);
  let fd;
  try {
    fd = fs.openSync(command, "r");
    fs.readSync(fd, buffer, 0, size, 0);
    fs.closeSync(fd);
  } catch (e2) {
  }
  return shebangCommand(buffer.toString());
}
var readShebang_1 = readShebang$1;
var path3 = import_path2.default;
var resolveCommand = resolveCommand_1;
var escape$1 = _escape;
var readShebang = readShebang_1;
var isWin$1 = process.platform === "win32";
var isExecutableRegExp = /\.(?:com|exe)$/i;
var isCmdShimRegExp = /node_modules[\\/].bin[\\/][^\\/]+\.cmd$/i;
function detectShebang(parsed) {
  parsed.file = resolveCommand(parsed);
  const shebang = parsed.file && readShebang(parsed.file);
  if (shebang) {
    parsed.args.unshift(parsed.file);
    parsed.command = shebang;
    return resolveCommand(parsed);
  }
  return parsed.file;
}
function parseNonShell(parsed) {
  if (!isWin$1) {
    return parsed;
  }
  const commandFile = detectShebang(parsed);
  const needsShell = !isExecutableRegExp.test(commandFile);
  if (parsed.options.forceShell || needsShell) {
    const needsDoubleEscapeMetaChars = isCmdShimRegExp.test(commandFile);
    parsed.command = path3.normalize(parsed.command);
    parsed.command = escape$1.command(parsed.command);
    parsed.args = parsed.args.map((arg) => escape$1.argument(arg, needsDoubleEscapeMetaChars));
    const shellCommand = [parsed.command].concat(parsed.args).join(" ");
    parsed.args = ["/d", "/s", "/c", `"${shellCommand}"`];
    parsed.command = process.env.comspec || "cmd.exe";
    parsed.options.windowsVerbatimArguments = true;
  }
  return parsed;
}
function parse$5(command, args, options2) {
  if (args && !Array.isArray(args)) {
    options2 = args;
    args = null;
  }
  args = args ? args.slice(0) : [];
  options2 = Object.assign({}, options2);
  const parsed = {
    command,
    args,
    options: options2,
    file: void 0,
    original: {
      command,
      args
    }
  };
  return options2.shell ? parsed : parseNonShell(parsed);
}
var parse_1 = parse$5;
var isWin2 = process.platform === "win32";
function notFoundError(original, syscall) {
  return Object.assign(new Error(`${syscall} ${original.command} ENOENT`), {
    code: "ENOENT",
    errno: "ENOENT",
    syscall: `${syscall} ${original.command}`,
    path: original.command,
    spawnargs: original.args
  });
}
function hookChildProcess(cp2, parsed) {
  if (!isWin2) {
    return;
  }
  const originalEmit = cp2.emit;
  cp2.emit = function(name, arg1) {
    if (name === "exit") {
      const err2 = verifyENOENT(arg1, parsed);
      if (err2) {
        return originalEmit.call(cp2, "error", err2);
      }
    }
    return originalEmit.apply(cp2, arguments);
  };
}
function verifyENOENT(status2, parsed) {
  if (isWin2 && status2 === 1 && !parsed.file) {
    return notFoundError(parsed.original, "spawn");
  }
  return null;
}
function verifyENOENTSync(status2, parsed) {
  if (isWin2 && status2 === 1 && !parsed.file) {
    return notFoundError(parsed.original, "spawnSync");
  }
  return null;
}
var enoent$1 = {
  hookChildProcess,
  verifyENOENT,
  verifyENOENTSync,
  notFoundError
};
var cp = import_child_process.default;
var parse$4 = parse_1;
var enoent = enoent$1;
function spawn(command, args, options2) {
  const parsed = parse$4(command, args, options2);
  const spawned = cp.spawn(parsed.command, parsed.args, parsed.options);
  enoent.hookChildProcess(spawned, parsed);
  return spawned;
}
function spawnSync(command, args, options2) {
  const parsed = parse$4(command, args, options2);
  const result = cp.spawnSync(parsed.command, parsed.args, parsed.options);
  result.error = result.error || enoent.verifyENOENTSync(result.status, parsed);
  return result;
}
crossSpawn.exports = spawn;
crossSpawn.exports.spawn = spawn;
crossSpawn.exports.sync = spawnSync;
crossSpawn.exports._parse = parse$4;
crossSpawn.exports._enoent = enoent;
var crossSpawnExports = crossSpawn.exports;
var spawn$1 = getDefaultExportFromCjs(crossSpawnExports);
function openBrowser(url2, opt, logger) {
  const browser = process.env.BROWSER || "";
  if (browser.toLowerCase().endsWith(".js")) {
    executeNodeScript(browser, url2, logger);
  } else if (browser.toLowerCase() !== "none") {
    const browserArgs = process.env.BROWSER_ARGS ? process.env.BROWSER_ARGS.split(" ") : [];
    startBrowserProcess(browser, browserArgs, url2, logger);
  }
}
function executeNodeScript(scriptPath, url2, logger) {
  const extraArgs = process.argv.slice(2);
  const child = spawn$1(process.execPath, [scriptPath, ...extraArgs, url2], {
    stdio: "inherit"
  });
  child.on("close", (code) => {
    if (code !== 0) {
      logger.error(
        colors$1.red(
          `
The script specified as BROWSER environment variable failed.

${colors$1.cyan(
            scriptPath
          )} exited with code ${code}.`
        ),
        { error: null }
      );
    }
  });
}
var supportedChromiumBrowsers = [
  "Google Chrome Canary",
  "Google Chrome Dev",
  "Google Chrome Beta",
  "Google Chrome",
  "Microsoft Edge",
  "Brave Browser",
  "Vivaldi",
  "Chromium"
];
async function startBrowserProcess(browser, browserArgs, url2, logger) {
  const preferredOSXBrowser = browser === "google chrome" ? "Google Chrome" : browser;
  const shouldTryOpenChromeWithAppleScript = process.platform === "darwin" && (!preferredOSXBrowser || supportedChromiumBrowsers.includes(preferredOSXBrowser));
  if (shouldTryOpenChromeWithAppleScript) {
    try {
      const ps = await execAsync("ps cax");
      const openedBrowser = preferredOSXBrowser && ps.includes(preferredOSXBrowser) ? preferredOSXBrowser : supportedChromiumBrowsers.find((b) => ps.includes(b));
      if (openedBrowser) {
        await execAsync(
          `osascript openChrome.applescript "${url2}" "${openedBrowser}"`,
          {
            cwd: (0, import_node_path3.join)(VITE_PACKAGE_DIR, "bin")
          }
        );
        return true;
      }
    } catch {
    }
  }
  if (process.platform === "darwin" && browser === "open") {
    browser = void 0;
  }
  try {
    const options2 = browser ? { app: { name: browser, arguments: browserArgs } } : {};
    new Promise((_, reject) => {
      open(url2, options2).then((subprocess) => {
        subprocess.on("error", reject);
      }).catch(reject);
    }).catch((err2) => {
      logger.error(err2.stack || err2.message);
    });
    return true;
  } catch {
    return false;
  }
}
function execAsync(command, options2) {
  return new Promise((resolve4, reject) => {
    (0, import_node_child_process.exec)(command, options2, (error2, stdout) => {
      if (error2) {
        reject(error2);
      } else {
        resolve4(stdout.toString());
      }
    });
  });
}
function bindCLIShortcuts(server, opts) {
  if (!server.httpServer || !process.stdin.isTTY || process.env.CI) {
    return;
  }
  const isDev = isDevServer(server);
  if (isDev) {
    server._shortcutsOptions = opts;
  }
  if (opts == null ? void 0 : opts.print) {
    server.config.logger.info(
      colors$1.dim(colors$1.green("  ➜")) + colors$1.dim("  press ") + colors$1.bold("h + enter") + colors$1.dim(" to show help")
    );
  }
  const shortcuts = ((opts == null ? void 0 : opts.customShortcuts) ?? []).concat(
    isDev ? BASE_DEV_SHORTCUTS : BASE_PREVIEW_SHORTCUTS
  );
  let actionRunning = false;
  const onInput = async (input) => {
    if (actionRunning) return;
    if (input === "h") {
      const loggedKeys = /* @__PURE__ */ new Set();
      server.config.logger.info("\n  Shortcuts");
      for (const shortcut2 of shortcuts) {
        if (loggedKeys.has(shortcut2.key)) continue;
        loggedKeys.add(shortcut2.key);
        if (shortcut2.action == null) continue;
        server.config.logger.info(
          colors$1.dim("  press ") + colors$1.bold(`${shortcut2.key} + enter`) + colors$1.dim(` to ${shortcut2.description}`)
        );
      }
      return;
    }
    const shortcut = shortcuts.find((shortcut2) => shortcut2.key === input);
    if (!shortcut || shortcut.action == null) return;
    actionRunning = true;
    await shortcut.action(server);
    actionRunning = false;
  };
  const rl = import_node_readline.default.createInterface({ input: process.stdin });
  rl.on("line", onInput);
  server.httpServer.on("close", () => rl.close());
}
var BASE_DEV_SHORTCUTS = [
  {
    key: "r",
    description: "restart the server",
    async action(server) {
      await restartServerWithUrls(server);
    }
  },
  {
    key: "u",
    description: "show server url",
    action(server) {
      server.config.logger.info("");
      server.printUrls();
    }
  },
  {
    key: "o",
    description: "open in browser",
    action(server) {
      server.openBrowser();
    }
  },
  {
    key: "c",
    description: "clear console",
    action(server) {
      server.config.logger.clearScreen("error");
    }
  },
  {
    key: "q",
    description: "quit",
    async action(server) {
      try {
        await server.close();
      } finally {
        process.exit();
      }
    }
  }
];
var BASE_PREVIEW_SHORTCUTS = [
  {
    key: "o",
    description: "open in browser",
    action(server) {
      var _a2, _b;
      const url2 = ((_a2 = server.resolvedUrls) == null ? void 0 : _a2.local[0]) ?? ((_b = server.resolvedUrls) == null ? void 0 : _b.network[0]);
      if (url2) {
        openBrowser(url2, true, server.config.logger);
      } else {
        server.config.logger.warn("No URL available to open in browser");
      }
    }
  },
  {
    key: "q",
    description: "quit",
    async action(server) {
      try {
        await server.close();
      } finally {
        process.exit();
      }
    }
  }
];
function getResolvedOutDirs(root, outDir, outputOptions) {
  const resolvedOutDir = import_node_path3.default.resolve(root, outDir);
  if (!outputOptions) return /* @__PURE__ */ new Set([resolvedOutDir]);
  return new Set(
    arraify(outputOptions).map(
      ({ dir }) => dir ? import_node_path3.default.resolve(root, dir) : resolvedOutDir
    )
  );
}
function resolveEmptyOutDir(emptyOutDir, root, outDirs, logger) {
  if (emptyOutDir != null) return emptyOutDir;
  for (const outDir of outDirs) {
    if (!normalizePath$3(outDir).startsWith(withTrailingSlash(root))) {
      logger == null ? void 0 : logger.warn(
        colors$1.yellow(
          `
${colors$1.bold(`(!)`)} outDir ${colors$1.white(
            colors$1.dim(outDir)
          )} is not inside project root and will not be emptied.
Use --emptyOutDir to override.
`
        )
      );
      return false;
    }
  }
  return true;
}
function resolveChokidarOptions(options2, resolvedOutDirs, emptyOutDir, cacheDir) {
  const { ignored: ignoredList, ...otherOptions } = options2 ?? {};
  const ignored = [
    "**/.git/**",
    "**/node_modules/**",
    "**/test-results/**",
    // Playwright
    escapePath(cacheDir) + "/**",
    ...arraify(ignoredList || [])
  ];
  if (emptyOutDir) {
    ignored.push(
      ...[...resolvedOutDirs].map((outDir) => escapePath(outDir) + "/**")
    );
  }
  const resolvedWatchOptions = {
    ignored,
    ignoreInitial: true,
    ignorePermissionErrors: true,
    ...otherOptions
  };
  return resolvedWatchOptions;
}
var NoopWatcher = class extends import_node_events.EventEmitter {
  constructor(options2) {
    super();
    this.options = options2;
  }
  add() {
    return this;
  }
  unwatch() {
    return this;
  }
  getWatched() {
    return {};
  }
  ref() {
    return this;
  }
  unref() {
    return this;
  }
  async close() {
  }
};
function createNoopWatcher(options2) {
  return new NoopWatcher(options2);
}
var bufferUtil$1 = { exports: {} };
var BINARY_TYPES$2 = ["nodebuffer", "arraybuffer", "fragments"];
var hasBlob$1 = typeof Blob !== "undefined";
if (hasBlob$1) BINARY_TYPES$2.push("blob");
var constants = {
  BINARY_TYPES: BINARY_TYPES$2,
  EMPTY_BUFFER: Buffer.alloc(0),
  GUID: "258EAFA5-E914-47DA-95CA-C5AB0DC85B11",
  hasBlob: hasBlob$1,
  kForOnEventAttribute: Symbol("kIsForOnEventAttribute"),
  kListener: Symbol("kListener"),
  kStatusCode: Symbol("status-code"),
  kWebSocket: Symbol("websocket"),
  NOOP: () => {
  }
};
var { EMPTY_BUFFER: EMPTY_BUFFER$3 } = constants;
var FastBuffer$2 = Buffer[Symbol.species];
function concat$1(list, totalLength) {
  if (list.length === 0) return EMPTY_BUFFER$3;
  if (list.length === 1) return list[0];
  const target = Buffer.allocUnsafe(totalLength);
  let offset2 = 0;
  for (let i = 0; i < list.length; i++) {
    const buf = list[i];
    target.set(buf, offset2);
    offset2 += buf.length;
  }
  if (offset2 < totalLength) {
    return new FastBuffer$2(target.buffer, target.byteOffset, offset2);
  }
  return target;
}
function _mask(source, mask, output, offset2, length) {
  for (let i = 0; i < length; i++) {
    output[offset2 + i] = source[i] ^ mask[i & 3];
  }
}
function _unmask(buffer, mask) {
  for (let i = 0; i < buffer.length; i++) {
    buffer[i] ^= mask[i & 3];
  }
}
function toArrayBuffer$1(buf) {
  if (buf.length === buf.buffer.byteLength) {
    return buf.buffer;
  }
  return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.length);
}
function toBuffer$2(data) {
  toBuffer$2.readOnly = true;
  if (Buffer.isBuffer(data)) return data;
  let buf;
  if (data instanceof ArrayBuffer) {
    buf = new FastBuffer$2(data);
  } else if (ArrayBuffer.isView(data)) {
    buf = new FastBuffer$2(data.buffer, data.byteOffset, data.byteLength);
  } else {
    buf = Buffer.from(data);
    toBuffer$2.readOnly = false;
  }
  return buf;
}
bufferUtil$1.exports = {
  concat: concat$1,
  mask: _mask,
  toArrayBuffer: toArrayBuffer$1,
  toBuffer: toBuffer$2,
  unmask: _unmask
};
if (!process.env.WS_NO_BUFFER_UTIL) {
  try {
    const bufferUtil2 = __require("bufferutil");
    bufferUtil$1.exports.mask = function(source, mask, output, offset2, length) {
      if (length < 48) _mask(source, mask, output, offset2, length);
      else bufferUtil2.mask(source, mask, output, offset2, length);
    };
    bufferUtil$1.exports.unmask = function(buffer, mask) {
      if (buffer.length < 32) _unmask(buffer, mask);
      else bufferUtil2.unmask(buffer, mask);
    };
  } catch (e2) {
  }
}
var bufferUtilExports = bufferUtil$1.exports;
var kDone = Symbol("kDone");
var kRun = Symbol("kRun");
var Limiter$1 = class Limiter {
  /**
   * Creates a new `Limiter`.
   *
   * @param {Number} [concurrency=Infinity] The maximum number of jobs allowed
   *     to run concurrently
   */
  constructor(concurrency) {
    this[kDone] = () => {
      this.pending--;
      this[kRun]();
    };
    this.concurrency = concurrency || Infinity;
    this.jobs = [];
    this.pending = 0;
  }
  /**
   * Adds a job to the queue.
   *
   * @param {Function} job The job to run
   * @public
   */
  add(job) {
    this.jobs.push(job);
    this[kRun]();
  }
  /**
   * Removes a job from the queue and runs it if possible.
   *
   * @private
   */
  [kRun]() {
    if (this.pending === this.concurrency) return;
    if (this.jobs.length) {
      const job = this.jobs.shift();
      this.pending++;
      job(this[kDone]);
    }
  }
};
var limiter = Limiter$1;
var zlib = import_zlib.default;
var bufferUtil = bufferUtilExports;
var Limiter2 = limiter;
var { kStatusCode: kStatusCode$2 } = constants;
var FastBuffer$1 = Buffer[Symbol.species];
var TRAILER = Buffer.from([0, 0, 255, 255]);
var kPerMessageDeflate = Symbol("permessage-deflate");
var kTotalLength = Symbol("total-length");
var kCallback = Symbol("callback");
var kBuffers = Symbol("buffers");
var kError$1 = Symbol("error");
var zlibLimiter;
var PerMessageDeflate$4 = class PerMessageDeflate {
  /**
   * Creates a PerMessageDeflate instance.
   *
   * @param {Object} [options] Configuration options
   * @param {(Boolean|Number)} [options.clientMaxWindowBits] Advertise support
   *     for, or request, a custom client window size
   * @param {Boolean} [options.clientNoContextTakeover=false] Advertise/
   *     acknowledge disabling of client context takeover
   * @param {Number} [options.concurrencyLimit=10] The number of concurrent
   *     calls to zlib
   * @param {(Boolean|Number)} [options.serverMaxWindowBits] Request/confirm the
   *     use of a custom server window size
   * @param {Boolean} [options.serverNoContextTakeover=false] Request/accept
   *     disabling of server context takeover
   * @param {Number} [options.threshold=1024] Size (in bytes) below which
   *     messages should not be compressed if context takeover is disabled
   * @param {Object} [options.zlibDeflateOptions] Options to pass to zlib on
   *     deflate
   * @param {Object} [options.zlibInflateOptions] Options to pass to zlib on
   *     inflate
   * @param {Boolean} [isServer=false] Create the instance in either server or
   *     client mode
   * @param {Number} [maxPayload=0] The maximum allowed message length
   */
  constructor(options2, isServer, maxPayload) {
    this._maxPayload = maxPayload | 0;
    this._options = options2 || {};
    this._threshold = this._options.threshold !== void 0 ? this._options.threshold : 1024;
    this._isServer = !!isServer;
    this._deflate = null;
    this._inflate = null;
    this.params = null;
    if (!zlibLimiter) {
      const concurrency = this._options.concurrencyLimit !== void 0 ? this._options.concurrencyLimit : 10;
      zlibLimiter = new Limiter2(concurrency);
    }
  }
  /**
   * @type {String}
   */
  static get extensionName() {
    return "permessage-deflate";
  }
  /**
   * Create an extension negotiation offer.
   *
   * @return {Object} Extension parameters
   * @public
   */
  offer() {
    const params = {};
    if (this._options.serverNoContextTakeover) {
      params.server_no_context_takeover = true;
    }
    if (this._options.clientNoContextTakeover) {
      params.client_no_context_takeover = true;
    }
    if (this._options.serverMaxWindowBits) {
      params.server_max_window_bits = this._options.serverMaxWindowBits;
    }
    if (this._options.clientMaxWindowBits) {
      params.client_max_window_bits = this._options.clientMaxWindowBits;
    } else if (this._options.clientMaxWindowBits == null) {
      params.client_max_window_bits = true;
    }
    return params;
  }
  /**
   * Accept an extension negotiation offer/response.
   *
   * @param {Array} configurations The extension negotiation offers/reponse
   * @return {Object} Accepted configuration
   * @public
   */
  accept(configurations) {
    configurations = this.normalizeParams(configurations);
    this.params = this._isServer ? this.acceptAsServer(configurations) : this.acceptAsClient(configurations);
    return this.params;
  }
  /**
   * Releases all resources used by the extension.
   *
   * @public
   */
  cleanup() {
    if (this._inflate) {
      this._inflate.close();
      this._inflate = null;
    }
    if (this._deflate) {
      const callback = this._deflate[kCallback];
      this._deflate.close();
      this._deflate = null;
      if (callback) {
        callback(
          new Error(
            "The deflate stream was closed while data was being processed"
          )
        );
      }
    }
  }
  /**
   *  Accept an extension negotiation offer.
   *
   * @param {Array} offers The extension negotiation offers
   * @return {Object} Accepted configuration
   * @private
   */
  acceptAsServer(offers) {
    const opts = this._options;
    const accepted = offers.find((params) => {
      if (opts.serverNoContextTakeover === false && params.server_no_context_takeover || params.server_max_window_bits && (opts.serverMaxWindowBits === false || typeof opts.serverMaxWindowBits === "number" && opts.serverMaxWindowBits > params.server_max_window_bits) || typeof opts.clientMaxWindowBits === "number" && !params.client_max_window_bits) {
        return false;
      }
      return true;
    });
    if (!accepted) {
      throw new Error("None of the extension offers can be accepted");
    }
    if (opts.serverNoContextTakeover) {
      accepted.server_no_context_takeover = true;
    }
    if (opts.clientNoContextTakeover) {
      accepted.client_no_context_takeover = true;
    }
    if (typeof opts.serverMaxWindowBits === "number") {
      accepted.server_max_window_bits = opts.serverMaxWindowBits;
    }
    if (typeof opts.clientMaxWindowBits === "number") {
      accepted.client_max_window_bits = opts.clientMaxWindowBits;
    } else if (accepted.client_max_window_bits === true || opts.clientMaxWindowBits === false) {
      delete accepted.client_max_window_bits;
    }
    return accepted;
  }
  /**
   * Accept the extension negotiation response.
   *
   * @param {Array} response The extension negotiation response
   * @return {Object} Accepted configuration
   * @private
   */
  acceptAsClient(response) {
    const params = response[0];
    if (this._options.clientNoContextTakeover === false && params.client_no_context_takeover) {
      throw new Error('Unexpected parameter "client_no_context_takeover"');
    }
    if (!params.client_max_window_bits) {
      if (typeof this._options.clientMaxWindowBits === "number") {
        params.client_max_window_bits = this._options.clientMaxWindowBits;
      }
    } else if (this._options.clientMaxWindowBits === false || typeof this._options.clientMaxWindowBits === "number" && params.client_max_window_bits > this._options.clientMaxWindowBits) {
      throw new Error(
        'Unexpected or invalid parameter "client_max_window_bits"'
      );
    }
    return params;
  }
  /**
   * Normalize parameters.
   *
   * @param {Array} configurations The extension negotiation offers/reponse
   * @return {Array} The offers/response with normalized parameters
   * @private
   */
  normalizeParams(configurations) {
    configurations.forEach((params) => {
      Object.keys(params).forEach((key) => {
        let value2 = params[key];
        if (value2.length > 1) {
          throw new Error(`Parameter "${key}" must have only a single value`);
        }
        value2 = value2[0];
        if (key === "client_max_window_bits") {
          if (value2 !== true) {
            const num = +value2;
            if (!Number.isInteger(num) || num < 8 || num > 15) {
              throw new TypeError(
                `Invalid value for parameter "${key}": ${value2}`
              );
            }
            value2 = num;
          } else if (!this._isServer) {
            throw new TypeError(
              `Invalid value for parameter "${key}": ${value2}`
            );
          }
        } else if (key === "server_max_window_bits") {
          const num = +value2;
          if (!Number.isInteger(num) || num < 8 || num > 15) {
            throw new TypeError(
              `Invalid value for parameter "${key}": ${value2}`
            );
          }
          value2 = num;
        } else if (key === "client_no_context_takeover" || key === "server_no_context_takeover") {
          if (value2 !== true) {
            throw new TypeError(
              `Invalid value for parameter "${key}": ${value2}`
            );
          }
        } else {
          throw new Error(`Unknown parameter "${key}"`);
        }
        params[key] = value2;
      });
    });
    return configurations;
  }
  /**
   * Decompress data. Concurrency limited.
   *
   * @param {Buffer} data Compressed data
   * @param {Boolean} fin Specifies whether or not this is the last fragment
   * @param {Function} callback Callback
   * @public
   */
  decompress(data, fin, callback) {
    zlibLimiter.add((done) => {
      this._decompress(data, fin, (err2, result) => {
        done();
        callback(err2, result);
      });
    });
  }
  /**
   * Compress data. Concurrency limited.
   *
   * @param {(Buffer|String)} data Data to compress
   * @param {Boolean} fin Specifies whether or not this is the last fragment
   * @param {Function} callback Callback
   * @public
   */
  compress(data, fin, callback) {
    zlibLimiter.add((done) => {
      this._compress(data, fin, (err2, result) => {
        done();
        callback(err2, result);
      });
    });
  }
  /**
   * Decompress data.
   *
   * @param {Buffer} data Compressed data
   * @param {Boolean} fin Specifies whether or not this is the last fragment
   * @param {Function} callback Callback
   * @private
   */
  _decompress(data, fin, callback) {
    const endpoint = this._isServer ? "client" : "server";
    if (!this._inflate) {
      const key = `${endpoint}_max_window_bits`;
      const windowBits = typeof this.params[key] !== "number" ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key];
      this._inflate = zlib.createInflateRaw({
        ...this._options.zlibInflateOptions,
        windowBits
      });
      this._inflate[kPerMessageDeflate] = this;
      this._inflate[kTotalLength] = 0;
      this._inflate[kBuffers] = [];
      this._inflate.on("error", inflateOnError);
      this._inflate.on("data", inflateOnData);
    }
    this._inflate[kCallback] = callback;
    this._inflate.write(data);
    if (fin) this._inflate.write(TRAILER);
    this._inflate.flush(() => {
      const err2 = this._inflate[kError$1];
      if (err2) {
        this._inflate.close();
        this._inflate = null;
        callback(err2);
        return;
      }
      const data2 = bufferUtil.concat(
        this._inflate[kBuffers],
        this._inflate[kTotalLength]
      );
      if (this._inflate._readableState.endEmitted) {
        this._inflate.close();
        this._inflate = null;
      } else {
        this._inflate[kTotalLength] = 0;
        this._inflate[kBuffers] = [];
        if (fin && this.params[`${endpoint}_no_context_takeover`]) {
          this._inflate.reset();
        }
      }
      callback(null, data2);
    });
  }
  /**
   * Compress data.
   *
   * @param {(Buffer|String)} data Data to compress
   * @param {Boolean} fin Specifies whether or not this is the last fragment
   * @param {Function} callback Callback
   * @private
   */
  _compress(data, fin, callback) {
    const endpoint = this._isServer ? "server" : "client";
    if (!this._deflate) {
      const key = `${endpoint}_max_window_bits`;
      const windowBits = typeof this.params[key] !== "number" ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key];
      this._deflate = zlib.createDeflateRaw({
        ...this._options.zlibDeflateOptions,
        windowBits
      });
      this._deflate[kTotalLength] = 0;
      this._deflate[kBuffers] = [];
      this._deflate.on("data", deflateOnData);
    }
    this._deflate[kCallback] = callback;
    this._deflate.write(data);
    this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {
      if (!this._deflate) {
        return;
      }
      let data2 = bufferUtil.concat(
        this._deflate[kBuffers],
        this._deflate[kTotalLength]
      );
      if (fin) {
        data2 = new FastBuffer$1(data2.buffer, data2.byteOffset, data2.length - 4);
      }
      this._deflate[kCallback] = null;
      this._deflate[kTotalLength] = 0;
      this._deflate[kBuffers] = [];
      if (fin && this.params[`${endpoint}_no_context_takeover`]) {
        this._deflate.reset();
      }
      callback(null, data2);
    });
  }
};
var permessageDeflate = PerMessageDeflate$4;
function deflateOnData(chunk) {
  this[kBuffers].push(chunk);
  this[kTotalLength] += chunk.length;
}
function inflateOnData(chunk) {
  this[kTotalLength] += chunk.length;
  if (this[kPerMessageDeflate]._maxPayload < 1 || this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload) {
    this[kBuffers].push(chunk);
    return;
  }
  this[kError$1] = new RangeError("Max payload size exceeded");
  this[kError$1].code = "WS_ERR_UNSUPPORTED_MESSAGE_LENGTH";
  this[kError$1][kStatusCode$2] = 1009;
  this.removeListener("data", inflateOnData);
  this.reset();
}
function inflateOnError(err2) {
  this[kPerMessageDeflate]._inflate = null;
  err2[kStatusCode$2] = 1007;
  this[kCallback](err2);
}
var validation = { exports: {} };
var { isUtf8 } = import_buffer.default;
var { hasBlob } = constants;
var tokenChars$2 = [
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  // 0 - 15
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  // 16 - 31
  0,
  1,
  0,
  1,
  1,
  1,
  1,
  1,
  0,
  0,
  1,
  1,
  0,
  1,
  1,
  0,
  // 32 - 47
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  0,
  0,
  0,
  0,
  0,
  0,
  // 48 - 63
  0,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  // 64 - 79
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  0,
  0,
  0,
  1,
  1,
  // 80 - 95
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  // 96 - 111
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  0,
  1,
  0,
  1,
  0
  // 112 - 127
];
function isValidStatusCode$2(code) {
  return code >= 1e3 && code <= 1014 && code !== 1004 && code !== 1005 && code !== 1006 || code >= 3e3 && code <= 4999;
}
function _isValidUTF8(buf) {
  const len = buf.length;
  let i = 0;
  while (i < len) {
    if ((buf[i] & 128) === 0) {
      i++;
    } else if ((buf[i] & 224) === 192) {
      if (i + 1 === len || (buf[i + 1] & 192) !== 128 || (buf[i] & 254) === 192) {
        return false;
      }
      i += 2;
    } else if ((buf[i] & 240) === 224) {
      if (i + 2 >= len || (buf[i + 1] & 192) !== 128 || (buf[i + 2] & 192) !== 128 || buf[i] === 224 && (buf[i + 1] & 224) === 128 || // Overlong
      buf[i] === 237 && (buf[i + 1] & 224) === 160) {
        return false;
      }
      i += 3;
    } else if ((buf[i] & 248) === 240) {
      if (i + 3 >= len || (buf[i + 1] & 192) !== 128 || (buf[i + 2] & 192) !== 128 || (buf[i + 3] & 192) !== 128 || buf[i] === 240 && (buf[i + 1] & 240) === 128 || // Overlong
      buf[i] === 244 && buf[i + 1] > 143 || buf[i] > 244) {
        return false;
      }
      i += 4;
    } else {
      return false;
    }
  }
  return true;
}
function isBlob$2(value2) {
  return hasBlob && typeof value2 === "object" && typeof value2.arrayBuffer === "function" && typeof value2.type === "string" && typeof value2.stream === "function" && (value2[Symbol.toStringTag] === "Blob" || value2[Symbol.toStringTag] === "File");
}
validation.exports = {
  isBlob: isBlob$2,
  isValidStatusCode: isValidStatusCode$2,
  isValidUTF8: _isValidUTF8,
  tokenChars: tokenChars$2
};
if (isUtf8) {
  validation.exports.isValidUTF8 = function(buf) {
    return buf.length < 24 ? _isValidUTF8(buf) : isUtf8(buf);
  };
} else if (!process.env.WS_NO_UTF_8_VALIDATE) {
  try {
    const isValidUTF82 = __require("utf-8-validate");
    validation.exports.isValidUTF8 = function(buf) {
      return buf.length < 32 ? _isValidUTF8(buf) : isValidUTF82(buf);
    };
  } catch (e2) {
  }
}
var validationExports = validation.exports;
var { Writable: Writable$1 } = import_stream.default;
var PerMessageDeflate$3 = permessageDeflate;
var {
  BINARY_TYPES: BINARY_TYPES$1,
  EMPTY_BUFFER: EMPTY_BUFFER$2,
  kStatusCode: kStatusCode$1,
  kWebSocket: kWebSocket$3
} = constants;
var { concat, toArrayBuffer, unmask } = bufferUtilExports;
var { isValidStatusCode: isValidStatusCode$1, isValidUTF8 } = validationExports;
var FastBuffer = Buffer[Symbol.species];
var GET_INFO = 0;
var GET_PAYLOAD_LENGTH_16 = 1;
var GET_PAYLOAD_LENGTH_64 = 2;
var GET_MASK = 3;
var GET_DATA = 4;
var INFLATING = 5;
var DEFER_EVENT = 6;
var Receiver$1 = class Receiver extends Writable$1 {
  /**
   * Creates a Receiver instance.
   *
   * @param {Object} [options] Options object
   * @param {Boolean} [options.allowSynchronousEvents=true] Specifies whether
   *     any of the `'message'`, `'ping'`, and `'pong'` events can be emitted
   *     multiple times in the same tick
   * @param {String} [options.binaryType=nodebuffer] The type for binary data
   * @param {Object} [options.extensions] An object containing the negotiated
   *     extensions
   * @param {Boolean} [options.isServer=false] Specifies whether to operate in
   *     client or server mode
   * @param {Number} [options.maxPayload=0] The maximum allowed message length
   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or
   *     not to skip UTF-8 validation for text and close messages
   */
  constructor(options2 = {}) {
    super();
    this._allowSynchronousEvents = options2.allowSynchronousEvents !== void 0 ? options2.allowSynchronousEvents : true;
    this._binaryType = options2.binaryType || BINARY_TYPES$1[0];
    this._extensions = options2.extensions || {};
    this._isServer = !!options2.isServer;
    this._maxPayload = options2.maxPayload | 0;
    this._skipUTF8Validation = !!options2.skipUTF8Validation;
    this[kWebSocket$3] = void 0;
    this._bufferedBytes = 0;
    this._buffers = [];
    this._compressed = false;
    this._payloadLength = 0;
    this._mask = void 0;
    this._fragmented = 0;
    this._masked = false;
    this._fin = false;
    this._opcode = 0;
    this._totalPayloadLength = 0;
    this._messageLength = 0;
    this._fragments = [];
    this._errored = false;
    this._loop = false;
    this._state = GET_INFO;
  }
  /**
   * Implements `Writable.prototype._write()`.
   *
   * @param {Buffer} chunk The chunk of data to write
   * @param {String} encoding The character encoding of `chunk`
   * @param {Function} cb Callback
   * @private
   */
  _write(chunk, encoding, cb) {
    if (this._opcode === 8 && this._state == GET_INFO) return cb();
    this._bufferedBytes += chunk.length;
    this._buffers.push(chunk);
    this.startLoop(cb);
  }
  /**
   * Consumes `n` bytes from the buffered data.
   *
   * @param {Number} n The number of bytes to consume
   * @return {Buffer} The consumed bytes
   * @private
   */
  consume(n2) {
    this._bufferedBytes -= n2;
    if (n2 === this._buffers[0].length) return this._buffers.shift();
    if (n2 < this._buffers[0].length) {
      const buf = this._buffers[0];
      this._buffers[0] = new FastBuffer(
        buf.buffer,
        buf.byteOffset + n2,
        buf.length - n2
      );
      return new FastBuffer(buf.buffer, buf.byteOffset, n2);
    }
    const dst = Buffer.allocUnsafe(n2);
    do {
      const buf = this._buffers[0];
      const offset2 = dst.length - n2;
      if (n2 >= buf.length) {
        dst.set(this._buffers.shift(), offset2);
      } else {
        dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n2), offset2);
        this._buffers[0] = new FastBuffer(
          buf.buffer,
          buf.byteOffset + n2,
          buf.length - n2
        );
      }
      n2 -= buf.length;
    } while (n2 > 0);
    return dst;
  }
  /**
   * Starts the parsing loop.
   *
   * @param {Function} cb Callback
   * @private
   */
  startLoop(cb) {
    this._loop = true;
    do {
      switch (this._state) {
        case GET_INFO:
          this.getInfo(cb);
          break;
        case GET_PAYLOAD_LENGTH_16:
          this.getPayloadLength16(cb);
          break;
        case GET_PAYLOAD_LENGTH_64:
          this.getPayloadLength64(cb);
          break;
        case GET_MASK:
          this.getMask();
          break;
        case GET_DATA:
          this.getData(cb);
          break;
        case INFLATING:
        case DEFER_EVENT:
          this._loop = false;
          return;
      }
    } while (this._loop);
    if (!this._errored) cb();
  }
  /**
   * Reads the first two bytes of a frame.
   *
   * @param {Function} cb Callback
   * @private
   */
  getInfo(cb) {
    if (this._bufferedBytes < 2) {
      this._loop = false;
      return;
    }
    const buf = this.consume(2);
    if ((buf[0] & 48) !== 0) {
      const error2 = this.createError(
        RangeError,
        "RSV2 and RSV3 must be clear",
        true,
        1002,
        "WS_ERR_UNEXPECTED_RSV_2_3"
      );
      cb(error2);
      return;
    }
    const compressed = (buf[0] & 64) === 64;
    if (compressed && !this._extensions[PerMessageDeflate$3.extensionName]) {
      const error2 = this.createError(
        RangeError,
        "RSV1 must be clear",
        true,
        1002,
        "WS_ERR_UNEXPECTED_RSV_1"
      );
      cb(error2);
      return;
    }
    this._fin = (buf[0] & 128) === 128;
    this._opcode = buf[0] & 15;
    this._payloadLength = buf[1] & 127;
    if (this._opcode === 0) {
      if (compressed) {
        const error2 = this.createError(
          RangeError,
          "RSV1 must be clear",
          true,
          1002,
          "WS_ERR_UNEXPECTED_RSV_1"
        );
        cb(error2);
        return;
      }
      if (!this._fragmented) {
        const error2 = this.createError(
          RangeError,
          "invalid opcode 0",
          true,
          1002,
          "WS_ERR_INVALID_OPCODE"
        );
        cb(error2);
        return;
      }
      this._opcode = this._fragmented;
    } else if (this._opcode === 1 || this._opcode === 2) {
      if (this._fragmented) {
        const error2 = this.createError(
          RangeError,
          `invalid opcode ${this._opcode}`,
          true,
          1002,
          "WS_ERR_INVALID_OPCODE"
        );
        cb(error2);
        return;
      }
      this._compressed = compressed;
    } else if (this._opcode > 7 && this._opcode < 11) {
      if (!this._fin) {
        const error2 = this.createError(
          RangeError,
          "FIN must be set",
          true,
          1002,
          "WS_ERR_EXPECTED_FIN"
        );
        cb(error2);
        return;
      }
      if (compressed) {
        const error2 = this.createError(
          RangeError,
          "RSV1 must be clear",
          true,
          1002,
          "WS_ERR_UNEXPECTED_RSV_1"
        );
        cb(error2);
        return;
      }
      if (this._payloadLength > 125 || this._opcode === 8 && this._payloadLength === 1) {
        const error2 = this.createError(
          RangeError,
          `invalid payload length ${this._payloadLength}`,
          true,
          1002,
          "WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH"
        );
        cb(error2);
        return;
      }
    } else {
      const error2 = this.createError(
        RangeError,
        `invalid opcode ${this._opcode}`,
        true,
        1002,
        "WS_ERR_INVALID_OPCODE"
      );
      cb(error2);
      return;
    }
    if (!this._fin && !this._fragmented) this._fragmented = this._opcode;
    this._masked = (buf[1] & 128) === 128;
    if (this._isServer) {
      if (!this._masked) {
        const error2 = this.createError(
          RangeError,
          "MASK must be set",
          true,
          1002,
          "WS_ERR_EXPECTED_MASK"
        );
        cb(error2);
        return;
      }
    } else if (this._masked) {
      const error2 = this.createError(
        RangeError,
        "MASK must be clear",
        true,
        1002,
        "WS_ERR_UNEXPECTED_MASK"
      );
      cb(error2);
      return;
    }
    if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;
    else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;
    else this.haveLength(cb);
  }
  /**
   * Gets extended payload length (7+16).
   *
   * @param {Function} cb Callback
   * @private
   */
  getPayloadLength16(cb) {
    if (this._bufferedBytes < 2) {
      this._loop = false;
      return;
    }
    this._payloadLength = this.consume(2).readUInt16BE(0);
    this.haveLength(cb);
  }
  /**
   * Gets extended payload length (7+64).
   *
   * @param {Function} cb Callback
   * @private
   */
  getPayloadLength64(cb) {
    if (this._bufferedBytes < 8) {
      this._loop = false;
      return;
    }
    const buf = this.consume(8);
    const num = buf.readUInt32BE(0);
    if (num > Math.pow(2, 53 - 32) - 1) {
      const error2 = this.createError(
        RangeError,
        "Unsupported WebSocket frame: payload length > 2^53 - 1",
        false,
        1009,
        "WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH"
      );
      cb(error2);
      return;
    }
    this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);
    this.haveLength(cb);
  }
  /**
   * Payload length has been read.
   *
   * @param {Function} cb Callback
   * @private
   */
  haveLength(cb) {
    if (this._payloadLength && this._opcode < 8) {
      this._totalPayloadLength += this._payloadLength;
      if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {
        const error2 = this.createError(
          RangeError,
          "Max payload size exceeded",
          false,
          1009,
          "WS_ERR_UNSUPPORTED_MESSAGE_LENGTH"
        );
        cb(error2);
        return;
      }
    }
    if (this._masked) this._state = GET_MASK;
    else this._state = GET_DATA;
  }
  /**
   * Reads mask bytes.
   *
   * @private
   */
  getMask() {
    if (this._bufferedBytes < 4) {
      this._loop = false;
      return;
    }
    this._mask = this.consume(4);
    this._state = GET_DATA;
  }
  /**
   * Reads data bytes.
   *
   * @param {Function} cb Callback
   * @private
   */
  getData(cb) {
    let data = EMPTY_BUFFER$2;
    if (this._payloadLength) {
      if (this._bufferedBytes < this._payloadLength) {
        this._loop = false;
        return;
      }
      data = this.consume(this._payloadLength);
      if (this._masked && (this._mask[0] | this._mask[1] | this._mask[2] | this._mask[3]) !== 0) {
        unmask(data, this._mask);
      }
    }
    if (this._opcode > 7) {
      this.controlMessage(data, cb);
      return;
    }
    if (this._compressed) {
      this._state = INFLATING;
      this.decompress(data, cb);
      return;
    }
    if (data.length) {
      this._messageLength = this._totalPayloadLength;
      this._fragments.push(data);
    }
    this.dataMessage(cb);
  }
  /**
   * Decompresses data.
   *
   * @param {Buffer} data Compressed data
   * @param {Function} cb Callback
   * @private
   */
  decompress(data, cb) {
    const perMessageDeflate = this._extensions[PerMessageDeflate$3.extensionName];
    perMessageDeflate.decompress(data, this._fin, (err2, buf) => {
      if (err2) return cb(err2);
      if (buf.length) {
        this._messageLength += buf.length;
        if (this._messageLength > this._maxPayload && this._maxPayload > 0) {
          const error2 = this.createError(
            RangeError,
            "Max payload size exceeded",
            false,
            1009,
            "WS_ERR_UNSUPPORTED_MESSAGE_LENGTH"
          );
          cb(error2);
          return;
        }
        this._fragments.push(buf);
      }
      this.dataMessage(cb);
      if (this._state === GET_INFO) this.startLoop(cb);
    });
  }
  /**
   * Handles a data message.
   *
   * @param {Function} cb Callback
   * @private
   */
  dataMessage(cb) {
    if (!this._fin) {
      this._state = GET_INFO;
      return;
    }
    const messageLength = this._messageLength;
    const fragments = this._fragments;
    this._totalPayloadLength = 0;
    this._messageLength = 0;
    this._fragmented = 0;
    this._fragments = [];
    if (this._opcode === 2) {
      let data;
      if (this._binaryType === "nodebuffer") {
        data = concat(fragments, messageLength);
      } else if (this._binaryType === "arraybuffer") {
        data = toArrayBuffer(concat(fragments, messageLength));
      } else if (this._binaryType === "blob") {
        data = new Blob(fragments);
      } else {
        data = fragments;
      }
      if (this._allowSynchronousEvents) {
        this.emit("message", data, true);
        this._state = GET_INFO;
      } else {
        this._state = DEFER_EVENT;
        setImmediate(() => {
          this.emit("message", data, true);
          this._state = GET_INFO;
          this.startLoop(cb);
        });
      }
    } else {
      const buf = concat(fragments, messageLength);
      if (!this._skipUTF8Validation && !isValidUTF8(buf)) {
        const error2 = this.createError(
          Error,
          "invalid UTF-8 sequence",
          true,
          1007,
          "WS_ERR_INVALID_UTF8"
        );
        cb(error2);
        return;
      }
      if (this._state === INFLATING || this._allowSynchronousEvents) {
        this.emit("message", buf, false);
        this._state = GET_INFO;
      } else {
        this._state = DEFER_EVENT;
        setImmediate(() => {
          this.emit("message", buf, false);
          this._state = GET_INFO;
          this.startLoop(cb);
        });
      }
    }
  }
  /**
   * Handles a control message.
   *
   * @param {Buffer} data Data to handle
   * @return {(Error|RangeError|undefined)} A possible error
   * @private
   */
  controlMessage(data, cb) {
    if (this._opcode === 8) {
      if (data.length === 0) {
        this._loop = false;
        this.emit("conclude", 1005, EMPTY_BUFFER$2);
        this.end();
      } else {
        const code = data.readUInt16BE(0);
        if (!isValidStatusCode$1(code)) {
          const error2 = this.createError(
            RangeError,
            `invalid status code ${code}`,
            true,
            1002,
            "WS_ERR_INVALID_CLOSE_CODE"
          );
          cb(error2);
          return;
        }
        const buf = new FastBuffer(
          data.buffer,
          data.byteOffset + 2,
          data.length - 2
        );
        if (!this._skipUTF8Validation && !isValidUTF8(buf)) {
          const error2 = this.createError(
            Error,
            "invalid UTF-8 sequence",
            true,
            1007,
            "WS_ERR_INVALID_UTF8"
          );
          cb(error2);
          return;
        }
        this._loop = false;
        this.emit("conclude", code, buf);
        this.end();
      }
      this._state = GET_INFO;
      return;
    }
    if (this._allowSynchronousEvents) {
      this.emit(this._opcode === 9 ? "ping" : "pong", data);
      this._state = GET_INFO;
    } else {
      this._state = DEFER_EVENT;
      setImmediate(() => {
        this.emit(this._opcode === 9 ? "ping" : "pong", data);
        this._state = GET_INFO;
        this.startLoop(cb);
      });
    }
  }
  /**
   * Builds an error object.
   *
   * @param {function(new:Error|RangeError)} ErrorCtor The error constructor
   * @param {String} message The error message
   * @param {Boolean} prefix Specifies whether or not to add a default prefix to
   *     `message`
   * @param {Number} statusCode The status code
   * @param {String} errorCode The exposed error code
   * @return {(Error|RangeError)} The error
   * @private
   */
  createError(ErrorCtor, message, prefix, statusCode, errorCode) {
    this._loop = false;
    this._errored = true;
    const err2 = new ErrorCtor(
      prefix ? `Invalid WebSocket frame: ${message}` : message
    );
    Error.captureStackTrace(err2, this.createError);
    err2.code = errorCode;
    err2[kStatusCode$1] = statusCode;
    return err2;
  }
};
var receiver = Receiver$1;
var { randomFillSync } = import_crypto.default;
var PerMessageDeflate$2 = permessageDeflate;
var { EMPTY_BUFFER: EMPTY_BUFFER$1, kWebSocket: kWebSocket$2, NOOP: NOOP$2 } = constants;
var { isBlob: isBlob$1, isValidStatusCode } = validationExports;
var { mask: applyMask, toBuffer: toBuffer$1 } = bufferUtilExports;
var kByteLength = Symbol("kByteLength");
var maskBuffer = Buffer.alloc(4);
var RANDOM_POOL_SIZE = 8 * 1024;
var randomPool;
var randomPoolPointer = RANDOM_POOL_SIZE;
var DEFAULT = 0;
var DEFLATING = 1;
var GET_BLOB_DATA = 2;
var Sender$1 = class Sender {
  /**
   * Creates a Sender instance.
   *
   * @param {Duplex} socket The connection socket
   * @param {Object} [extensions] An object containing the negotiated extensions
   * @param {Function} [generateMask] The function used to generate the masking
   *     key
   */
  constructor(socket, extensions2, generateMask) {
    this._extensions = extensions2 || {};
    if (generateMask) {
      this._generateMask = generateMask;
      this._maskBuffer = Buffer.alloc(4);
    }
    this._socket = socket;
    this._firstFragment = true;
    this._compress = false;
    this._bufferedBytes = 0;
    this._queue = [];
    this._state = DEFAULT;
    this.onerror = NOOP$2;
    this[kWebSocket$2] = void 0;
  }
  /**
   * Frames a piece of data according to the HyBi WebSocket protocol.
   *
   * @param {(Buffer|String)} data The data to frame
   * @param {Object} options Options object
   * @param {Boolean} [options.fin=false] Specifies whether or not to set the
   *     FIN bit
   * @param {Function} [options.generateMask] The function used to generate the
   *     masking key
   * @param {Boolean} [options.mask=false] Specifies whether or not to mask
   *     `data`
   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking
   *     key
   * @param {Number} options.opcode The opcode
   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be
   *     modified
   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the
   *     RSV1 bit
   * @return {(Buffer|String)[]} The framed data
   * @public
   */
  static frame(data, options2) {
    let mask;
    let merge2 = false;
    let offset2 = 2;
    let skipMasking = false;
    if (options2.mask) {
      mask = options2.maskBuffer || maskBuffer;
      if (options2.generateMask) {
        options2.generateMask(mask);
      } else {
        if (randomPoolPointer === RANDOM_POOL_SIZE) {
          if (randomPool === void 0) {
            randomPool = Buffer.alloc(RANDOM_POOL_SIZE);
          }
          randomFillSync(randomPool, 0, RANDOM_POOL_SIZE);
          randomPoolPointer = 0;
        }
        mask[0] = randomPool[randomPoolPointer++];
        mask[1] = randomPool[randomPoolPointer++];
        mask[2] = randomPool[randomPoolPointer++];
        mask[3] = randomPool[randomPoolPointer++];
      }
      skipMasking = (mask[0] | mask[1] | mask[2] | mask[3]) === 0;
      offset2 = 6;
    }
    let dataLength;
    if (typeof data === "string") {
      if ((!options2.mask || skipMasking) && options2[kByteLength] !== void 0) {
        dataLength = options2[kByteLength];
      } else {
        data = Buffer.from(data);
        dataLength = data.length;
      }
    } else {
      dataLength = data.length;
      merge2 = options2.mask && options2.readOnly && !skipMasking;
    }
    let payloadLength = dataLength;
    if (dataLength >= 65536) {
      offset2 += 8;
      payloadLength = 127;
    } else if (dataLength > 125) {
      offset2 += 2;
      payloadLength = 126;
    }
    const target = Buffer.allocUnsafe(merge2 ? dataLength + offset2 : offset2);
    target[0] = options2.fin ? options2.opcode | 128 : options2.opcode;
    if (options2.rsv1) target[0] |= 64;
    target[1] = payloadLength;
    if (payloadLength === 126) {
      target.writeUInt16BE(dataLength, 2);
    } else if (payloadLength === 127) {
      target[2] = target[3] = 0;
      target.writeUIntBE(dataLength, 4, 6);
    }
    if (!options2.mask) return [target, data];
    target[1] |= 128;
    target[offset2 - 4] = mask[0];
    target[offset2 - 3] = mask[1];
    target[offset2 - 2] = mask[2];
    target[offset2 - 1] = mask[3];
    if (skipMasking) return [target, data];
    if (merge2) {
      applyMask(data, mask, target, offset2, dataLength);
      return [target];
    }
    applyMask(data, mask, data, 0, dataLength);
    return [target, data];
  }
  /**
   * Sends a close message to the other peer.
   *
   * @param {Number} [code] The status code component of the body
   * @param {(String|Buffer)} [data] The message component of the body
   * @param {Boolean} [mask=false] Specifies whether or not to mask the message
   * @param {Function} [cb] Callback
   * @public
   */
  close(code, data, mask, cb) {
    let buf;
    if (code === void 0) {
      buf = EMPTY_BUFFER$1;
    } else if (typeof code !== "number" || !isValidStatusCode(code)) {
      throw new TypeError("First argument must be a valid error code number");
    } else if (data === void 0 || !data.length) {
      buf = Buffer.allocUnsafe(2);
      buf.writeUInt16BE(code, 0);
    } else {
      const length = Buffer.byteLength(data);
      if (length > 123) {
        throw new RangeError("The message must not be greater than 123 bytes");
      }
      buf = Buffer.allocUnsafe(2 + length);
      buf.writeUInt16BE(code, 0);
      if (typeof data === "string") {
        buf.write(data, 2);
      } else {
        buf.set(data, 2);
      }
    }
    const options2 = {
      [kByteLength]: buf.length,
      fin: true,
      generateMask: this._generateMask,
      mask,
      maskBuffer: this._maskBuffer,
      opcode: 8,
      readOnly: false,
      rsv1: false
    };
    if (this._state !== DEFAULT) {
      this.enqueue([this.dispatch, buf, false, options2, cb]);
    } else {
      this.sendFrame(Sender.frame(buf, options2), cb);
    }
  }
  /**
   * Sends a ping message to the other peer.
   *
   * @param {*} data The message to send
   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`
   * @param {Function} [cb] Callback
   * @public
   */
  ping(data, mask, cb) {
    let byteLength;
    let readOnly;
    if (typeof data === "string") {
      byteLength = Buffer.byteLength(data);
      readOnly = false;
    } else if (isBlob$1(data)) {
      byteLength = data.size;
      readOnly = false;
    } else {
      data = toBuffer$1(data);
      byteLength = data.length;
      readOnly = toBuffer$1.readOnly;
    }
    if (byteLength > 125) {
      throw new RangeError("The data size must not be greater than 125 bytes");
    }
    const options2 = {
      [kByteLength]: byteLength,
      fin: true,
      generateMask: this._generateMask,
      mask,
      maskBuffer: this._maskBuffer,
      opcode: 9,
      readOnly,
      rsv1: false
    };
    if (isBlob$1(data)) {
      if (this._state !== DEFAULT) {
        this.enqueue([this.getBlobData, data, false, options2, cb]);
      } else {
        this.getBlobData(data, false, options2, cb);
      }
    } else if (this._state !== DEFAULT) {
      this.enqueue([this.dispatch, data, false, options2, cb]);
    } else {
      this.sendFrame(Sender.frame(data, options2), cb);
    }
  }
  /**
   * Sends a pong message to the other peer.
   *
   * @param {*} data The message to send
   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`
   * @param {Function} [cb] Callback
   * @public
   */
  pong(data, mask, cb) {
    let byteLength;
    let readOnly;
    if (typeof data === "string") {
      byteLength = Buffer.byteLength(data);
      readOnly = false;
    } else if (isBlob$1(data)) {
      byteLength = data.size;
      readOnly = false;
    } else {
      data = toBuffer$1(data);
      byteLength = data.length;
      readOnly = toBuffer$1.readOnly;
    }
    if (byteLength > 125) {
      throw new RangeError("The data size must not be greater than 125 bytes");
    }
    const options2 = {
      [kByteLength]: byteLength,
      fin: true,
      generateMask: this._generateMask,
      mask,
      maskBuffer: this._maskBuffer,
      opcode: 10,
      readOnly,
      rsv1: false
    };
    if (isBlob$1(data)) {
      if (this._state !== DEFAULT) {
        this.enqueue([this.getBlobData, data, false, options2, cb]);
      } else {
        this.getBlobData(data, false, options2, cb);
      }
    } else if (this._state !== DEFAULT) {
      this.enqueue([this.dispatch, data, false, options2, cb]);
    } else {
      this.sendFrame(Sender.frame(data, options2), cb);
    }
  }
  /**
   * Sends a data message to the other peer.
   *
   * @param {*} data The message to send
   * @param {Object} options Options object
   * @param {Boolean} [options.binary=false] Specifies whether `data` is binary
   *     or text
   * @param {Boolean} [options.compress=false] Specifies whether or not to
   *     compress `data`
   * @param {Boolean} [options.fin=false] Specifies whether the fragment is the
   *     last one
   * @param {Boolean} [options.mask=false] Specifies whether or not to mask
   *     `data`
   * @param {Function} [cb] Callback
   * @public
   */
  send(data, options2, cb) {
    const perMessageDeflate = this._extensions[PerMessageDeflate$2.extensionName];
    let opcode = options2.binary ? 2 : 1;
    let rsv1 = options2.compress;
    let byteLength;
    let readOnly;
    if (typeof data === "string") {
      byteLength = Buffer.byteLength(data);
      readOnly = false;
    } else if (isBlob$1(data)) {
      byteLength = data.size;
      readOnly = false;
    } else {
      data = toBuffer$1(data);
      byteLength = data.length;
      readOnly = toBuffer$1.readOnly;
    }
    if (this._firstFragment) {
      this._firstFragment = false;
      if (rsv1 && perMessageDeflate && perMessageDeflate.params[perMessageDeflate._isServer ? "server_no_context_takeover" : "client_no_context_takeover"]) {
        rsv1 = byteLength >= perMessageDeflate._threshold;
      }
      this._compress = rsv1;
    } else {
      rsv1 = false;
      opcode = 0;
    }
    if (options2.fin) this._firstFragment = true;
    const opts = {
      [kByteLength]: byteLength,
      fin: options2.fin,
      generateMask: this._generateMask,
      mask: options2.mask,
      maskBuffer: this._maskBuffer,
      opcode,
      readOnly,
      rsv1
    };
    if (isBlob$1(data)) {
      if (this._state !== DEFAULT) {
        this.enqueue([this.getBlobData, data, this._compress, opts, cb]);
      } else {
        this.getBlobData(data, this._compress, opts, cb);
      }
    } else if (this._state !== DEFAULT) {
      this.enqueue([this.dispatch, data, this._compress, opts, cb]);
    } else {
      this.dispatch(data, this._compress, opts, cb);
    }
  }
  /**
   * Gets the contents of a blob as binary data.
   *
   * @param {Blob} blob The blob
   * @param {Boolean} [compress=false] Specifies whether or not to compress
   *     the data
   * @param {Object} options Options object
   * @param {Boolean} [options.fin=false] Specifies whether or not to set the
   *     FIN bit
   * @param {Function} [options.generateMask] The function used to generate the
   *     masking key
   * @param {Boolean} [options.mask=false] Specifies whether or not to mask
   *     `data`
   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking
   *     key
   * @param {Number} options.opcode The opcode
   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be
   *     modified
   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the
   *     RSV1 bit
   * @param {Function} [cb] Callback
   * @private
   */
  getBlobData(blob, compress, options2, cb) {
    this._bufferedBytes += options2[kByteLength];
    this._state = GET_BLOB_DATA;
    blob.arrayBuffer().then((arrayBuffer) => {
      if (this._socket.destroyed) {
        const err2 = new Error(
          "The socket was closed while the blob was being read"
        );
        process.nextTick(callCallbacks, this, err2, cb);
        return;
      }
      this._bufferedBytes -= options2[kByteLength];
      const data = toBuffer$1(arrayBuffer);
      if (!compress) {
        this._state = DEFAULT;
        this.sendFrame(Sender.frame(data, options2), cb);
        this.dequeue();
      } else {
        this.dispatch(data, compress, options2, cb);
      }
    }).catch((err2) => {
      process.nextTick(onError, this, err2, cb);
    });
  }
  /**
   * Dispatches a message.
   *
   * @param {(Buffer|String)} data The message to send
   * @param {Boolean} [compress=false] Specifies whether or not to compress
   *     `data`
   * @param {Object} options Options object
   * @param {Boolean} [options.fin=false] Specifies whether or not to set the
   *     FIN bit
   * @param {Function} [options.generateMask] The function used to generate the
   *     masking key
   * @param {Boolean} [options.mask=false] Specifies whether or not to mask
   *     `data`
   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking
   *     key
   * @param {Number} options.opcode The opcode
   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be
   *     modified
   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the
   *     RSV1 bit
   * @param {Function} [cb] Callback
   * @private
   */
  dispatch(data, compress, options2, cb) {
    if (!compress) {
      this.sendFrame(Sender.frame(data, options2), cb);
      return;
    }
    const perMessageDeflate = this._extensions[PerMessageDeflate$2.extensionName];
    this._bufferedBytes += options2[kByteLength];
    this._state = DEFLATING;
    perMessageDeflate.compress(data, options2.fin, (_, buf) => {
      if (this._socket.destroyed) {
        const err2 = new Error(
          "The socket was closed while data was being compressed"
        );
        callCallbacks(this, err2, cb);
        return;
      }
      this._bufferedBytes -= options2[kByteLength];
      this._state = DEFAULT;
      options2.readOnly = false;
      this.sendFrame(Sender.frame(buf, options2), cb);
      this.dequeue();
    });
  }
  /**
   * Executes queued send operations.
   *
   * @private
   */
  dequeue() {
    while (this._state === DEFAULT && this._queue.length) {
      const params = this._queue.shift();
      this._bufferedBytes -= params[3][kByteLength];
      Reflect.apply(params[0], this, params.slice(1));
    }
  }
  /**
   * Enqueues a send operation.
   *
   * @param {Array} params Send operation parameters.
   * @private
   */
  enqueue(params) {
    this._bufferedBytes += params[3][kByteLength];
    this._queue.push(params);
  }
  /**
   * Sends a frame.
   *
   * @param {(Buffer | String)[]} list The frame to send
   * @param {Function} [cb] Callback
   * @private
   */
  sendFrame(list, cb) {
    if (list.length === 2) {
      this._socket.cork();
      this._socket.write(list[0]);
      this._socket.write(list[1], cb);
      this._socket.uncork();
    } else {
      this._socket.write(list[0], cb);
    }
  }
};
var sender = Sender$1;
function callCallbacks(sender2, err2, cb) {
  if (typeof cb === "function") cb(err2);
  for (let i = 0; i < sender2._queue.length; i++) {
    const params = sender2._queue[i];
    const callback = params[params.length - 1];
    if (typeof callback === "function") callback(err2);
  }
}
function onError(sender2, err2, cb) {
  callCallbacks(sender2, err2, cb);
  sender2.onerror(err2);
}
var { kForOnEventAttribute: kForOnEventAttribute$1, kListener: kListener$1 } = constants;
var kCode = Symbol("kCode");
var kData = Symbol("kData");
var kError = Symbol("kError");
var kMessage = Symbol("kMessage");
var kReason = Symbol("kReason");
var kTarget = Symbol("kTarget");
var kType = Symbol("kType");
var kWasClean = Symbol("kWasClean");
var Event$1 = class Event2 {
  /**
   * Create a new `Event`.
   *
   * @param {String} type The name of the event
   * @throws {TypeError} If the `type` argument is not specified
   */
  constructor(type) {
    this[kTarget] = null;
    this[kType] = type;
  }
  /**
   * @type {*}
   */
  get target() {
    return this[kTarget];
  }
  /**
   * @type {String}
   */
  get type() {
    return this[kType];
  }
};
Object.defineProperty(Event$1.prototype, "target", { enumerable: true });
Object.defineProperty(Event$1.prototype, "type", { enumerable: true });
var CloseEvent = class extends Event$1 {
  /**
   * Create a new `CloseEvent`.
   *
   * @param {String} type The name of the event
   * @param {Object} [options] A dictionary object that allows for setting
   *     attributes via object members of the same name
   * @param {Number} [options.code=0] The status code explaining why the
   *     connection was closed
   * @param {String} [options.reason=''] A human-readable string explaining why
   *     the connection was closed
   * @param {Boolean} [options.wasClean=false] Indicates whether or not the
   *     connection was cleanly closed
   */
  constructor(type, options2 = {}) {
    super(type);
    this[kCode] = options2.code === void 0 ? 0 : options2.code;
    this[kReason] = options2.reason === void 0 ? "" : options2.reason;
    this[kWasClean] = options2.wasClean === void 0 ? false : options2.wasClean;
  }
  /**
   * @type {Number}
   */
  get code() {
    return this[kCode];
  }
  /**
   * @type {String}
   */
  get reason() {
    return this[kReason];
  }
  /**
   * @type {Boolean}
   */
  get wasClean() {
    return this[kWasClean];
  }
};
Object.defineProperty(CloseEvent.prototype, "code", { enumerable: true });
Object.defineProperty(CloseEvent.prototype, "reason", { enumerable: true });
Object.defineProperty(CloseEvent.prototype, "wasClean", { enumerable: true });
var ErrorEvent = class extends Event$1 {
  /**
   * Create a new `ErrorEvent`.
   *
   * @param {String} type The name of the event
   * @param {Object} [options] A dictionary object that allows for setting
   *     attributes via object members of the same name
   * @param {*} [options.error=null] The error that generated this event
   * @param {String} [options.message=''] The error message
   */
  constructor(type, options2 = {}) {
    super(type);
    this[kError] = options2.error === void 0 ? null : options2.error;
    this[kMessage] = options2.message === void 0 ? "" : options2.message;
  }
  /**
   * @type {*}
   */
  get error() {
    return this[kError];
  }
  /**
   * @type {String}
   */
  get message() {
    return this[kMessage];
  }
};
Object.defineProperty(ErrorEvent.prototype, "error", { enumerable: true });
Object.defineProperty(ErrorEvent.prototype, "message", { enumerable: true });
var MessageEvent = class extends Event$1 {
  /**
   * Create a new `MessageEvent`.
   *
   * @param {String} type The name of the event
   * @param {Object} [options] A dictionary object that allows for setting
   *     attributes via object members of the same name
   * @param {*} [options.data=null] The message content
   */
  constructor(type, options2 = {}) {
    super(type);
    this[kData] = options2.data === void 0 ? null : options2.data;
  }
  /**
   * @type {*}
   */
  get data() {
    return this[kData];
  }
};
Object.defineProperty(MessageEvent.prototype, "data", { enumerable: true });
var EventTarget = {
  /**
   * Register an event listener.
   *
   * @param {String} type A string representing the event type to listen for
   * @param {(Function|Object)} handler The listener to add
   * @param {Object} [options] An options object specifies characteristics about
   *     the event listener
   * @param {Boolean} [options.once=false] A `Boolean` indicating that the
   *     listener should be invoked at most once after being added. If `true`,
   *     the listener would be automatically removed when invoked.
   * @public
   */
  addEventListener(type, handler, options2 = {}) {
    for (const listener2 of this.listeners(type)) {
      if (!options2[kForOnEventAttribute$1] && listener2[kListener$1] === handler && !listener2[kForOnEventAttribute$1]) {
        return;
      }
    }
    let wrapper;
    if (type === "message") {
      wrapper = function onMessage(data, isBinary) {
        const event = new MessageEvent("message", {
          data: isBinary ? data : data.toString()
        });
        event[kTarget] = this;
        callListener(handler, this, event);
      };
    } else if (type === "close") {
      wrapper = function onClose(code, message) {
        const event = new CloseEvent("close", {
          code,
          reason: message.toString(),
          wasClean: this._closeFrameReceived && this._closeFrameSent
        });
        event[kTarget] = this;
        callListener(handler, this, event);
      };
    } else if (type === "error") {
      wrapper = function onError2(error2) {
        const event = new ErrorEvent("error", {
          error: error2,
          message: error2.message
        });
        event[kTarget] = this;
        callListener(handler, this, event);
      };
    } else if (type === "open") {
      wrapper = function onOpen() {
        const event = new Event$1("open");
        event[kTarget] = this;
        callListener(handler, this, event);
      };
    } else {
      return;
    }
    wrapper[kForOnEventAttribute$1] = !!options2[kForOnEventAttribute$1];
    wrapper[kListener$1] = handler;
    if (options2.once) {
      this.once(type, wrapper);
    } else {
      this.on(type, wrapper);
    }
  },
  /**
   * Remove an event listener.
   *
   * @param {String} type A string representing the event type to remove
   * @param {(Function|Object)} handler The listener to remove
   * @public
   */
  removeEventListener(type, handler) {
    for (const listener2 of this.listeners(type)) {
      if (listener2[kListener$1] === handler && !listener2[kForOnEventAttribute$1]) {
        this.removeListener(type, listener2);
        break;
      }
    }
  }
};
var eventTarget = {
  EventTarget
};
function callListener(listener2, thisArg, event) {
  if (typeof listener2 === "object" && listener2.handleEvent) {
    listener2.handleEvent.call(listener2, event);
  } else {
    listener2.call(thisArg, event);
  }
}
var { tokenChars: tokenChars$1 } = validationExports;
function push(dest, name, elem) {
  if (dest[name] === void 0) dest[name] = [elem];
  else dest[name].push(elem);
}
function parse$3(header) {
  const offers = /* @__PURE__ */ Object.create(null);
  let params = /* @__PURE__ */ Object.create(null);
  let mustUnescape = false;
  let isEscaping = false;
  let inQuotes = false;
  let extensionName;
  let paramName;
  let start = -1;
  let code = -1;
  let end = -1;
  let i = 0;
  for (; i < header.length; i++) {
    code = header.charCodeAt(i);
    if (extensionName === void 0) {
      if (end === -1 && tokenChars$1[code] === 1) {
        if (start === -1) start = i;
      } else if (i !== 0 && (code === 32 || code === 9)) {
        if (end === -1 && start !== -1) end = i;
      } else if (code === 59 || code === 44) {
        if (start === -1) {
          throw new SyntaxError(`Unexpected character at index ${i}`);
        }
        if (end === -1) end = i;
        const name = header.slice(start, end);
        if (code === 44) {
          push(offers, name, params);
          params = /* @__PURE__ */ Object.create(null);
        } else {
          extensionName = name;
        }
        start = end = -1;
      } else {
        throw new SyntaxError(`Unexpected character at index ${i}`);
      }
    } else if (paramName === void 0) {
      if (end === -1 && tokenChars$1[code] === 1) {
        if (start === -1) start = i;
      } else if (code === 32 || code === 9) {
        if (end === -1 && start !== -1) end = i;
      } else if (code === 59 || code === 44) {
        if (start === -1) {
          throw new SyntaxError(`Unexpected character at index ${i}`);
        }
        if (end === -1) end = i;
        push(params, header.slice(start, end), true);
        if (code === 44) {
          push(offers, extensionName, params);
          params = /* @__PURE__ */ Object.create(null);
          extensionName = void 0;
        }
        start = end = -1;
      } else if (code === 61 && start !== -1 && end === -1) {
        paramName = header.slice(start, i);
        start = end = -1;
      } else {
        throw new SyntaxError(`Unexpected character at index ${i}`);
      }
    } else {
      if (isEscaping) {
        if (tokenChars$1[code] !== 1) {
          throw new SyntaxError(`Unexpected character at index ${i}`);
        }
        if (start === -1) start = i;
        else if (!mustUnescape) mustUnescape = true;
        isEscaping = false;
      } else if (inQuotes) {
        if (tokenChars$1[code] === 1) {
          if (start === -1) start = i;
        } else if (code === 34 && start !== -1) {
          inQuotes = false;
          end = i;
        } else if (code === 92) {
          isEscaping = true;
        } else {
          throw new SyntaxError(`Unexpected character at index ${i}`);
        }
      } else if (code === 34 && header.charCodeAt(i - 1) === 61) {
        inQuotes = true;
      } else if (end === -1 && tokenChars$1[code] === 1) {
        if (start === -1) start = i;
      } else if (start !== -1 && (code === 32 || code === 9)) {
        if (end === -1) end = i;
      } else if (code === 59 || code === 44) {
        if (start === -1) {
          throw new SyntaxError(`Unexpected character at index ${i}`);
        }
        if (end === -1) end = i;
        let value2 = header.slice(start, end);
        if (mustUnescape) {
          value2 = value2.replace(/\\/g, "");
          mustUnescape = false;
        }
        push(params, paramName, value2);
        if (code === 44) {
          push(offers, extensionName, params);
          params = /* @__PURE__ */ Object.create(null);
          extensionName = void 0;
        }
        paramName = void 0;
        start = end = -1;
      } else {
        throw new SyntaxError(`Unexpected character at index ${i}`);
      }
    }
  }
  if (start === -1 || inQuotes || code === 32 || code === 9) {
    throw new SyntaxError("Unexpected end of input");
  }
  if (end === -1) end = i;
  const token = header.slice(start, end);
  if (extensionName === void 0) {
    push(offers, token, params);
  } else {
    if (paramName === void 0) {
      push(params, token, true);
    } else if (mustUnescape) {
      push(params, paramName, token.replace(/\\/g, ""));
    } else {
      push(params, paramName, token);
    }
    push(offers, extensionName, params);
  }
  return offers;
}
function format$1(extensions2) {
  return Object.keys(extensions2).map((extension2) => {
    let configurations = extensions2[extension2];
    if (!Array.isArray(configurations)) configurations = [configurations];
    return configurations.map((params) => {
      return [extension2].concat(
        Object.keys(params).map((k) => {
          let values = params[k];
          if (!Array.isArray(values)) values = [values];
          return values.map((v) => v === true ? k : `${k}=${v}`).join("; ");
        })
      ).join("; ");
    }).join(", ");
  }).join(", ");
}
var extension$1 = { format: format$1, parse: parse$3 };
var EventEmitter$1 = import_events.default;
var https$2 = import_https.default;
var http$3 = import_http.default;
var net = import_net.default;
var tls = import_tls.default;
var { randomBytes, createHash: createHash$1 } = import_crypto.default;
var { URL: URL$2 } = import_url.default;
var PerMessageDeflate$1 = permessageDeflate;
var Receiver2 = receiver;
var Sender2 = sender;
var { isBlob } = validationExports;
var {
  BINARY_TYPES,
  EMPTY_BUFFER,
  GUID: GUID$1,
  kForOnEventAttribute,
  kListener,
  kStatusCode,
  kWebSocket: kWebSocket$1,
  NOOP: NOOP$1
} = constants;
var {
  EventTarget: { addEventListener, removeEventListener }
} = eventTarget;
var { format, parse: parse$2 } = extension$1;
var { toBuffer } = bufferUtilExports;
var closeTimeout = 30 * 1e3;
var kAborted = Symbol("kAborted");
var protocolVersions = [8, 13];
var readyStates = ["CONNECTING", "OPEN", "CLOSING", "CLOSED"];
var subprotocolRegex = /^[!#$%&'*+\-.0-9A-Z^_`|a-z~]+$/;
var WebSocket$1 = class WebSocket extends EventEmitter$1 {
  /**
   * Create a new `WebSocket`.
   *
   * @param {(String|URL)} address The URL to which to connect
   * @param {(String|String[])} [protocols] The subprotocols
   * @param {Object} [options] Connection options
   */
  constructor(address, protocols, options2) {
    super();
    this._binaryType = BINARY_TYPES[0];
    this._closeCode = 1006;
    this._closeFrameReceived = false;
    this._closeFrameSent = false;
    this._closeMessage = EMPTY_BUFFER;
    this._closeTimer = null;
    this._errorEmitted = false;
    this._extensions = {};
    this._paused = false;
    this._protocol = "";
    this._readyState = WebSocket.CONNECTING;
    this._receiver = null;
    this._sender = null;
    this._socket = null;
    if (address !== null) {
      this._bufferedAmount = 0;
      this._isServer = false;
      this._redirects = 0;
      if (protocols === void 0) {
        protocols = [];
      } else if (!Array.isArray(protocols)) {
        if (typeof protocols === "object" && protocols !== null) {
          options2 = protocols;
          protocols = [];
        } else {
          protocols = [protocols];
        }
      }
      initAsClient(this, address, protocols, options2);
    } else {
      this._autoPong = options2.autoPong;
      this._isServer = true;
    }
  }
  /**
   * For historical reasons, the custom "nodebuffer" type is used by the default
   * instead of "blob".
   *
   * @type {String}
   */
  get binaryType() {
    return this._binaryType;
  }
  set binaryType(type) {
    if (!BINARY_TYPES.includes(type)) return;
    this._binaryType = type;
    if (this._receiver) this._receiver._binaryType = type;
  }
  /**
   * @type {Number}
   */
  get bufferedAmount() {
    if (!this._socket) return this._bufferedAmount;
    return this._socket._writableState.length + this._sender._bufferedBytes;
  }
  /**
   * @type {String}
   */
  get extensions() {
    return Object.keys(this._extensions).join();
  }
  /**
   * @type {Boolean}
   */
  get isPaused() {
    return this._paused;
  }
  /**
   * @type {Function}
   */
  /* istanbul ignore next */
  get onclose() {
    return null;
  }
  /**
   * @type {Function}
   */
  /* istanbul ignore next */
  get onerror() {
    return null;
  }
  /**
   * @type {Function}
   */
  /* istanbul ignore next */
  get onopen() {
    return null;
  }
  /**
   * @type {Function}
   */
  /* istanbul ignore next */
  get onmessage() {
    return null;
  }
  /**
   * @type {String}
   */
  get protocol() {
    return this._protocol;
  }
  /**
   * @type {Number}
   */
  get readyState() {
    return this._readyState;
  }
  /**
   * @type {String}
   */
  get url() {
    return this._url;
  }
  /**
   * Set up the socket and the internal resources.
   *
   * @param {Duplex} socket The network socket between the server and client
   * @param {Buffer} head The first packet of the upgraded stream
   * @param {Object} options Options object
   * @param {Boolean} [options.allowSynchronousEvents=false] Specifies whether
   *     any of the `'message'`, `'ping'`, and `'pong'` events can be emitted
   *     multiple times in the same tick
   * @param {Function} [options.generateMask] The function used to generate the
   *     masking key
   * @param {Number} [options.maxPayload=0] The maximum allowed message size
   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or
   *     not to skip UTF-8 validation for text and close messages
   * @private
   */
  setSocket(socket, head, options2) {
    const receiver2 = new Receiver2({
      allowSynchronousEvents: options2.allowSynchronousEvents,
      binaryType: this.binaryType,
      extensions: this._extensions,
      isServer: this._isServer,
      maxPayload: options2.maxPayload,
      skipUTF8Validation: options2.skipUTF8Validation
    });
    const sender2 = new Sender2(socket, this._extensions, options2.generateMask);
    this._receiver = receiver2;
    this._sender = sender2;
    this._socket = socket;
    receiver2[kWebSocket$1] = this;
    sender2[kWebSocket$1] = this;
    socket[kWebSocket$1] = this;
    receiver2.on("conclude", receiverOnConclude);
    receiver2.on("drain", receiverOnDrain);
    receiver2.on("error", receiverOnError);
    receiver2.on("message", receiverOnMessage);
    receiver2.on("ping", receiverOnPing);
    receiver2.on("pong", receiverOnPong);
    sender2.onerror = senderOnError;
    if (socket.setTimeout) socket.setTimeout(0);
    if (socket.setNoDelay) socket.setNoDelay();
    if (head.length > 0) socket.unshift(head);
    socket.on("close", socketOnClose);
    socket.on("data", socketOnData);
    socket.on("end", socketOnEnd);
    socket.on("error", socketOnError$1);
    this._readyState = WebSocket.OPEN;
    this.emit("open");
  }
  /**
   * Emit the `'close'` event.
   *
   * @private
   */
  emitClose() {
    if (!this._socket) {
      this._readyState = WebSocket.CLOSED;
      this.emit("close", this._closeCode, this._closeMessage);
      return;
    }
    if (this._extensions[PerMessageDeflate$1.extensionName]) {
      this._extensions[PerMessageDeflate$1.extensionName].cleanup();
    }
    this._receiver.removeAllListeners();
    this._readyState = WebSocket.CLOSED;
    this.emit("close", this._closeCode, this._closeMessage);
  }
  /**
   * Start a closing handshake.
   *
   *          +----------+   +-----------+   +----------+
   *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -
   *    |     +----------+   +-----------+   +----------+     |
   *          +----------+   +-----------+         |
   * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING
   *          +----------+   +-----------+   |
   *    |           |                        |   +---+        |
   *                +------------------------+-->|fin| - - - -
   *    |         +---+                      |   +---+
   *     - - - - -|fin|<---------------------+
   *              +---+
   *
   * @param {Number} [code] Status code explaining why the connection is closing
   * @param {(String|Buffer)} [data] The reason why the connection is
   *     closing
   * @public
   */
  close(code, data) {
    if (this.readyState === WebSocket.CLOSED) return;
    if (this.readyState === WebSocket.CONNECTING) {
      const msg = "WebSocket was closed before the connection was established";
      abortHandshake$1(this, this._req, msg);
      return;
    }
    if (this.readyState === WebSocket.CLOSING) {
      if (this._closeFrameSent && (this._closeFrameReceived || this._receiver._writableState.errorEmitted)) {
        this._socket.end();
      }
      return;
    }
    this._readyState = WebSocket.CLOSING;
    this._sender.close(code, data, !this._isServer, (err2) => {
      if (err2) return;
      this._closeFrameSent = true;
      if (this._closeFrameReceived || this._receiver._writableState.errorEmitted) {
        this._socket.end();
      }
    });
    setCloseTimer(this);
  }
  /**
   * Pause the socket.
   *
   * @public
   */
  pause() {
    if (this.readyState === WebSocket.CONNECTING || this.readyState === WebSocket.CLOSED) {
      return;
    }
    this._paused = true;
    this._socket.pause();
  }
  /**
   * Send a ping.
   *
   * @param {*} [data] The data to send
   * @param {Boolean} [mask] Indicates whether or not to mask `data`
   * @param {Function} [cb] Callback which is executed when the ping is sent
   * @public
   */
  ping(data, mask, cb) {
    if (this.readyState === WebSocket.CONNECTING) {
      throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
    }
    if (typeof data === "function") {
      cb = data;
      data = mask = void 0;
    } else if (typeof mask === "function") {
      cb = mask;
      mask = void 0;
    }
    if (typeof data === "number") data = data.toString();
    if (this.readyState !== WebSocket.OPEN) {
      sendAfterClose(this, data, cb);
      return;
    }
    if (mask === void 0) mask = !this._isServer;
    this._sender.ping(data || EMPTY_BUFFER, mask, cb);
  }
  /**
   * Send a pong.
   *
   * @param {*} [data] The data to send
   * @param {Boolean} [mask] Indicates whether or not to mask `data`
   * @param {Function} [cb] Callback which is executed when the pong is sent
   * @public
   */
  pong(data, mask, cb) {
    if (this.readyState === WebSocket.CONNECTING) {
      throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
    }
    if (typeof data === "function") {
      cb = data;
      data = mask = void 0;
    } else if (typeof mask === "function") {
      cb = mask;
      mask = void 0;
    }
    if (typeof data === "number") data = data.toString();
    if (this.readyState !== WebSocket.OPEN) {
      sendAfterClose(this, data, cb);
      return;
    }
    if (mask === void 0) mask = !this._isServer;
    this._sender.pong(data || EMPTY_BUFFER, mask, cb);
  }
  /**
   * Resume the socket.
   *
   * @public
   */
  resume() {
    if (this.readyState === WebSocket.CONNECTING || this.readyState === WebSocket.CLOSED) {
      return;
    }
    this._paused = false;
    if (!this._receiver._writableState.needDrain) this._socket.resume();
  }
  /**
   * Send a data message.
   *
   * @param {*} data The message to send
   * @param {Object} [options] Options object
   * @param {Boolean} [options.binary] Specifies whether `data` is binary or
   *     text
   * @param {Boolean} [options.compress] Specifies whether or not to compress
   *     `data`
   * @param {Boolean} [options.fin=true] Specifies whether the fragment is the
   *     last one
   * @param {Boolean} [options.mask] Specifies whether or not to mask `data`
   * @param {Function} [cb] Callback which is executed when data is written out
   * @public
   */
  send(data, options2, cb) {
    if (this.readyState === WebSocket.CONNECTING) {
      throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
    }
    if (typeof options2 === "function") {
      cb = options2;
      options2 = {};
    }
    if (typeof data === "number") data = data.toString();
    if (this.readyState !== WebSocket.OPEN) {
      sendAfterClose(this, data, cb);
      return;
    }
    const opts = {
      binary: typeof data !== "string",
      mask: !this._isServer,
      compress: true,
      fin: true,
      ...options2
    };
    if (!this._extensions[PerMessageDeflate$1.extensionName]) {
      opts.compress = false;
    }
    this._sender.send(data || EMPTY_BUFFER, opts, cb);
  }
  /**
   * Forcibly close the connection.
   *
   * @public
   */
  terminate() {
    if (this.readyState === WebSocket.CLOSED) return;
    if (this.readyState === WebSocket.CONNECTING) {
      const msg = "WebSocket was closed before the connection was established";
      abortHandshake$1(this, this._req, msg);
      return;
    }
    if (this._socket) {
      this._readyState = WebSocket.CLOSING;
      this._socket.destroy();
    }
  }
};
Object.defineProperty(WebSocket$1, "CONNECTING", {
  enumerable: true,
  value: readyStates.indexOf("CONNECTING")
});
Object.defineProperty(WebSocket$1.prototype, "CONNECTING", {
  enumerable: true,
  value: readyStates.indexOf("CONNECTING")
});
Object.defineProperty(WebSocket$1, "OPEN", {
  enumerable: true,
  value: readyStates.indexOf("OPEN")
});
Object.defineProperty(WebSocket$1.prototype, "OPEN", {
  enumerable: true,
  value: readyStates.indexOf("OPEN")
});
Object.defineProperty(WebSocket$1, "CLOSING", {
  enumerable: true,
  value: readyStates.indexOf("CLOSING")
});
Object.defineProperty(WebSocket$1.prototype, "CLOSING", {
  enumerable: true,
  value: readyStates.indexOf("CLOSING")
});
Object.defineProperty(WebSocket$1, "CLOSED", {
  enumerable: true,
  value: readyStates.indexOf("CLOSED")
});
Object.defineProperty(WebSocket$1.prototype, "CLOSED", {
  enumerable: true,
  value: readyStates.indexOf("CLOSED")
});
[
  "binaryType",
  "bufferedAmount",
  "extensions",
  "isPaused",
  "protocol",
  "readyState",
  "url"
].forEach((property) => {
  Object.defineProperty(WebSocket$1.prototype, property, { enumerable: true });
});
["open", "error", "close", "message"].forEach((method) => {
  Object.defineProperty(WebSocket$1.prototype, `on${method}`, {
    enumerable: true,
    get() {
      for (const listener2 of this.listeners(method)) {
        if (listener2[kForOnEventAttribute]) return listener2[kListener];
      }
      return null;
    },
    set(handler) {
      for (const listener2 of this.listeners(method)) {
        if (listener2[kForOnEventAttribute]) {
          this.removeListener(method, listener2);
          break;
        }
      }
      if (typeof handler !== "function") return;
      this.addEventListener(method, handler, {
        [kForOnEventAttribute]: true
      });
    }
  });
});
WebSocket$1.prototype.addEventListener = addEventListener;
WebSocket$1.prototype.removeEventListener = removeEventListener;
var websocket = WebSocket$1;
function initAsClient(websocket2, address, protocols, options2) {
  const opts = {
    allowSynchronousEvents: true,
    autoPong: true,
    protocolVersion: protocolVersions[1],
    maxPayload: 100 * 1024 * 1024,
    skipUTF8Validation: false,
    perMessageDeflate: true,
    followRedirects: false,
    maxRedirects: 10,
    ...options2,
    socketPath: void 0,
    hostname: void 0,
    protocol: void 0,
    timeout: void 0,
    method: "GET",
    host: void 0,
    path: void 0,
    port: void 0
  };
  websocket2._autoPong = opts.autoPong;
  if (!protocolVersions.includes(opts.protocolVersion)) {
    throw new RangeError(
      `Unsupported protocol version: ${opts.protocolVersion} (supported versions: ${protocolVersions.join(", ")})`
    );
  }
  let parsedUrl;
  if (address instanceof URL$2) {
    parsedUrl = address;
  } else {
    try {
      parsedUrl = new URL$2(address);
    } catch (e2) {
      throw new SyntaxError(`Invalid URL: ${address}`);
    }
  }
  if (parsedUrl.protocol === "http:") {
    parsedUrl.protocol = "ws:";
  } else if (parsedUrl.protocol === "https:") {
    parsedUrl.protocol = "wss:";
  }
  websocket2._url = parsedUrl.href;
  const isSecure = parsedUrl.protocol === "wss:";
  const isIpcUrl = parsedUrl.protocol === "ws+unix:";
  let invalidUrlMessage;
  if (parsedUrl.protocol !== "ws:" && !isSecure && !isIpcUrl) {
    invalidUrlMessage = `The URL's protocol must be one of "ws:", "wss:", "http:", "https", or "ws+unix:"`;
  } else if (isIpcUrl && !parsedUrl.pathname) {
    invalidUrlMessage = "The URL's pathname is empty";
  } else if (parsedUrl.hash) {
    invalidUrlMessage = "The URL contains a fragment identifier";
  }
  if (invalidUrlMessage) {
    const err2 = new SyntaxError(invalidUrlMessage);
    if (websocket2._redirects === 0) {
      throw err2;
    } else {
      emitErrorAndClose(websocket2, err2);
      return;
    }
  }
  const defaultPort = isSecure ? 443 : 80;
  const key = randomBytes(16).toString("base64");
  const request = isSecure ? https$2.request : http$3.request;
  const protocolSet = /* @__PURE__ */ new Set();
  let perMessageDeflate;
  opts.createConnection = opts.createConnection || (isSecure ? tlsConnect : netConnect);
  opts.defaultPort = opts.defaultPort || defaultPort;
  opts.port = parsedUrl.port || defaultPort;
  opts.host = parsedUrl.hostname.startsWith("[") ? parsedUrl.hostname.slice(1, -1) : parsedUrl.hostname;
  opts.headers = {
    ...opts.headers,
    "Sec-WebSocket-Version": opts.protocolVersion,
    "Sec-WebSocket-Key": key,
    Connection: "Upgrade",
    Upgrade: "websocket"
  };
  opts.path = parsedUrl.pathname + parsedUrl.search;
  opts.timeout = opts.handshakeTimeout;
  if (opts.perMessageDeflate) {
    perMessageDeflate = new PerMessageDeflate$1(
      opts.perMessageDeflate !== true ? opts.perMessageDeflate : {},
      false,
      opts.maxPayload
    );
    opts.headers["Sec-WebSocket-Extensions"] = format({
      [PerMessageDeflate$1.extensionName]: perMessageDeflate.offer()
    });
  }
  if (protocols.length) {
    for (const protocol of protocols) {
      if (typeof protocol !== "string" || !subprotocolRegex.test(protocol) || protocolSet.has(protocol)) {
        throw new SyntaxError(
          "An invalid or duplicated subprotocol was specified"
        );
      }
      protocolSet.add(protocol);
    }
    opts.headers["Sec-WebSocket-Protocol"] = protocols.join(",");
  }
  if (opts.origin) {
    if (opts.protocolVersion < 13) {
      opts.headers["Sec-WebSocket-Origin"] = opts.origin;
    } else {
      opts.headers.Origin = opts.origin;
    }
  }
  if (parsedUrl.username || parsedUrl.password) {
    opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;
  }
  if (isIpcUrl) {
    const parts = opts.path.split(":");
    opts.socketPath = parts[0];
    opts.path = parts[1];
  }
  let req2;
  if (opts.followRedirects) {
    if (websocket2._redirects === 0) {
      websocket2._originalIpc = isIpcUrl;
      websocket2._originalSecure = isSecure;
      websocket2._originalHostOrSocketPath = isIpcUrl ? opts.socketPath : parsedUrl.host;
      const headers = options2 && options2.headers;
      options2 = { ...options2, headers: {} };
      if (headers) {
        for (const [key2, value2] of Object.entries(headers)) {
          options2.headers[key2.toLowerCase()] = value2;
        }
      }
    } else if (websocket2.listenerCount("redirect") === 0) {
      const isSameHost = isIpcUrl ? websocket2._originalIpc ? opts.socketPath === websocket2._originalHostOrSocketPath : false : websocket2._originalIpc ? false : parsedUrl.host === websocket2._originalHostOrSocketPath;
      if (!isSameHost || websocket2._originalSecure && !isSecure) {
        delete opts.headers.authorization;
        delete opts.headers.cookie;
        if (!isSameHost) delete opts.headers.host;
        opts.auth = void 0;
      }
    }
    if (opts.auth && !options2.headers.authorization) {
      options2.headers.authorization = "Basic " + Buffer.from(opts.auth).toString("base64");
    }
    req2 = websocket2._req = request(opts);
    if (websocket2._redirects) {
      websocket2.emit("redirect", websocket2.url, req2);
    }
  } else {
    req2 = websocket2._req = request(opts);
  }
  if (opts.timeout) {
    req2.on("timeout", () => {
      abortHandshake$1(websocket2, req2, "Opening handshake has timed out");
    });
  }
  req2.on("error", (err2) => {
    if (req2 === null || req2[kAborted]) return;
    req2 = websocket2._req = null;
    emitErrorAndClose(websocket2, err2);
  });
  req2.on("response", (res) => {
    const location2 = res.headers.location;
    const statusCode = res.statusCode;
    if (location2 && opts.followRedirects && statusCode >= 300 && statusCode < 400) {
      if (++websocket2._redirects > opts.maxRedirects) {
        abortHandshake$1(websocket2, req2, "Maximum redirects exceeded");
        return;
      }
      req2.abort();
      let addr;
      try {
        addr = new URL$2(location2, address);
      } catch (e2) {
        const err2 = new SyntaxError(`Invalid URL: ${location2}`);
        emitErrorAndClose(websocket2, err2);
        return;
      }
      initAsClient(websocket2, addr, protocols, options2);
    } else if (!websocket2.emit("unexpected-response", req2, res)) {
      abortHandshake$1(
        websocket2,
        req2,
        `Unexpected server response: ${res.statusCode}`
      );
    }
  });
  req2.on("upgrade", (res, socket, head) => {
    websocket2.emit("upgrade", res);
    if (websocket2.readyState !== WebSocket$1.CONNECTING) return;
    req2 = websocket2._req = null;
    const upgrade = res.headers.upgrade;
    if (upgrade === void 0 || upgrade.toLowerCase() !== "websocket") {
      abortHandshake$1(websocket2, socket, "Invalid Upgrade header");
      return;
    }
    const digest = createHash$1("sha1").update(key + GUID$1).digest("base64");
    if (res.headers["sec-websocket-accept"] !== digest) {
      abortHandshake$1(websocket2, socket, "Invalid Sec-WebSocket-Accept header");
      return;
    }
    const serverProt = res.headers["sec-websocket-protocol"];
    let protError;
    if (serverProt !== void 0) {
      if (!protocolSet.size) {
        protError = "Server sent a subprotocol but none was requested";
      } else if (!protocolSet.has(serverProt)) {
        protError = "Server sent an invalid subprotocol";
      }
    } else if (protocolSet.size) {
      protError = "Server sent no subprotocol";
    }
    if (protError) {
      abortHandshake$1(websocket2, socket, protError);
      return;
    }
    if (serverProt) websocket2._protocol = serverProt;
    const secWebSocketExtensions = res.headers["sec-websocket-extensions"];
    if (secWebSocketExtensions !== void 0) {
      if (!perMessageDeflate) {
        const message = "Server sent a Sec-WebSocket-Extensions header but no extension was requested";
        abortHandshake$1(websocket2, socket, message);
        return;
      }
      let extensions2;
      try {
        extensions2 = parse$2(secWebSocketExtensions);
      } catch (err2) {
        const message = "Invalid Sec-WebSocket-Extensions header";
        abortHandshake$1(websocket2, socket, message);
        return;
      }
      const extensionNames = Object.keys(extensions2);
      if (extensionNames.length !== 1 || extensionNames[0] !== PerMessageDeflate$1.extensionName) {
        const message = "Server indicated an extension that was not requested";
        abortHandshake$1(websocket2, socket, message);
        return;
      }
      try {
        perMessageDeflate.accept(extensions2[PerMessageDeflate$1.extensionName]);
      } catch (err2) {
        const message = "Invalid Sec-WebSocket-Extensions header";
        abortHandshake$1(websocket2, socket, message);
        return;
      }
      websocket2._extensions[PerMessageDeflate$1.extensionName] = perMessageDeflate;
    }
    websocket2.setSocket(socket, head, {
      allowSynchronousEvents: opts.allowSynchronousEvents,
      generateMask: opts.generateMask,
      maxPayload: opts.maxPayload,
      skipUTF8Validation: opts.skipUTF8Validation
    });
  });
  if (opts.finishRequest) {
    opts.finishRequest(req2, websocket2);
  } else {
    req2.end();
  }
}
function emitErrorAndClose(websocket2, err2) {
  websocket2._readyState = WebSocket$1.CLOSING;
  websocket2._errorEmitted = true;
  websocket2.emit("error", err2);
  websocket2.emitClose();
}
function netConnect(options2) {
  options2.path = options2.socketPath;
  return net.connect(options2);
}
function tlsConnect(options2) {
  options2.path = void 0;
  if (!options2.servername && options2.servername !== "") {
    options2.servername = net.isIP(options2.host) ? "" : options2.host;
  }
  return tls.connect(options2);
}
function abortHandshake$1(websocket2, stream3, message) {
  websocket2._readyState = WebSocket$1.CLOSING;
  const err2 = new Error(message);
  Error.captureStackTrace(err2, abortHandshake$1);
  if (stream3.setHeader) {
    stream3[kAborted] = true;
    stream3.abort();
    if (stream3.socket && !stream3.socket.destroyed) {
      stream3.socket.destroy();
    }
    process.nextTick(emitErrorAndClose, websocket2, err2);
  } else {
    stream3.destroy(err2);
    stream3.once("error", websocket2.emit.bind(websocket2, "error"));
    stream3.once("close", websocket2.emitClose.bind(websocket2));
  }
}
function sendAfterClose(websocket2, data, cb) {
  if (data) {
    const length = isBlob(data) ? data.size : toBuffer(data).length;
    if (websocket2._socket) websocket2._sender._bufferedBytes += length;
    else websocket2._bufferedAmount += length;
  }
  if (cb) {
    const err2 = new Error(
      `WebSocket is not open: readyState ${websocket2.readyState} (${readyStates[websocket2.readyState]})`
    );
    process.nextTick(cb, err2);
  }
}
function receiverOnConclude(code, reason) {
  const websocket2 = this[kWebSocket$1];
  websocket2._closeFrameReceived = true;
  websocket2._closeMessage = reason;
  websocket2._closeCode = code;
  if (websocket2._socket[kWebSocket$1] === void 0) return;
  websocket2._socket.removeListener("data", socketOnData);
  process.nextTick(resume, websocket2._socket);
  if (code === 1005) websocket2.close();
  else websocket2.close(code, reason);
}
function receiverOnDrain() {
  const websocket2 = this[kWebSocket$1];
  if (!websocket2.isPaused) websocket2._socket.resume();
}
function receiverOnError(err2) {
  const websocket2 = this[kWebSocket$1];
  if (websocket2._socket[kWebSocket$1] !== void 0) {
    websocket2._socket.removeListener("data", socketOnData);
    process.nextTick(resume, websocket2._socket);
    websocket2.close(err2[kStatusCode]);
  }
  if (!websocket2._errorEmitted) {
    websocket2._errorEmitted = true;
    websocket2.emit("error", err2);
  }
}
function receiverOnFinish() {
  this[kWebSocket$1].emitClose();
}
function receiverOnMessage(data, isBinary) {
  this[kWebSocket$1].emit("message", data, isBinary);
}
function receiverOnPing(data) {
  const websocket2 = this[kWebSocket$1];
  if (websocket2._autoPong) websocket2.pong(data, !this._isServer, NOOP$1);
  websocket2.emit("ping", data);
}
function receiverOnPong(data) {
  this[kWebSocket$1].emit("pong", data);
}
function resume(stream3) {
  stream3.resume();
}
function senderOnError(err2) {
  const websocket2 = this[kWebSocket$1];
  if (websocket2.readyState === WebSocket$1.CLOSED) return;
  if (websocket2.readyState === WebSocket$1.OPEN) {
    websocket2._readyState = WebSocket$1.CLOSING;
    setCloseTimer(websocket2);
  }
  this._socket.end();
  if (!websocket2._errorEmitted) {
    websocket2._errorEmitted = true;
    websocket2.emit("error", err2);
  }
}
function setCloseTimer(websocket2) {
  websocket2._closeTimer = setTimeout(
    websocket2._socket.destroy.bind(websocket2._socket),
    closeTimeout
  );
}
function socketOnClose() {
  const websocket2 = this[kWebSocket$1];
  this.removeListener("close", socketOnClose);
  this.removeListener("data", socketOnData);
  this.removeListener("end", socketOnEnd);
  websocket2._readyState = WebSocket$1.CLOSING;
  let chunk;
  if (!this._readableState.endEmitted && !websocket2._closeFrameReceived && !websocket2._receiver._writableState.errorEmitted && (chunk = websocket2._socket.read()) !== null) {
    websocket2._receiver.write(chunk);
  }
  websocket2._receiver.end();
  this[kWebSocket$1] = void 0;
  clearTimeout(websocket2._closeTimer);
  if (websocket2._receiver._writableState.finished || websocket2._receiver._writableState.errorEmitted) {
    websocket2.emitClose();
  } else {
    websocket2._receiver.on("error", receiverOnFinish);
    websocket2._receiver.on("finish", receiverOnFinish);
  }
}
function socketOnData(chunk) {
  if (!this[kWebSocket$1]._receiver.write(chunk)) {
    this.pause();
  }
}
function socketOnEnd() {
  const websocket2 = this[kWebSocket$1];
  websocket2._readyState = WebSocket$1.CLOSING;
  websocket2._receiver.end();
  this.end();
}
function socketOnError$1() {
  const websocket2 = this[kWebSocket$1];
  this.removeListener("error", socketOnError$1);
  this.on("error", NOOP$1);
  if (websocket2) {
    websocket2._readyState = WebSocket$1.CLOSING;
    this.destroy();
  }
}
var { tokenChars } = validationExports;
function parse$1(header) {
  const protocols = /* @__PURE__ */ new Set();
  let start = -1;
  let end = -1;
  let i = 0;
  for (i; i < header.length; i++) {
    const code = header.charCodeAt(i);
    if (end === -1 && tokenChars[code] === 1) {
      if (start === -1) start = i;
    } else if (i !== 0 && (code === 32 || code === 9)) {
      if (end === -1 && start !== -1) end = i;
    } else if (code === 44) {
      if (start === -1) {
        throw new SyntaxError(`Unexpected character at index ${i}`);
      }
      if (end === -1) end = i;
      const protocol2 = header.slice(start, end);
      if (protocols.has(protocol2)) {
        throw new SyntaxError(`The "${protocol2}" subprotocol is duplicated`);
      }
      protocols.add(protocol2);
      start = end = -1;
    } else {
      throw new SyntaxError(`Unexpected character at index ${i}`);
    }
  }
  if (start === -1 || end !== -1) {
    throw new SyntaxError("Unexpected end of input");
  }
  const protocol = header.slice(start, i);
  if (protocols.has(protocol)) {
    throw new SyntaxError(`The "${protocol}" subprotocol is duplicated`);
  }
  protocols.add(protocol);
  return protocols;
}
var subprotocol$1 = { parse: parse$1 };
var EventEmitter = import_events.default;
var http$2 = import_http.default;
var { createHash } = import_crypto.default;
var extension = extension$1;
var PerMessageDeflate2 = permessageDeflate;
var subprotocol = subprotocol$1;
var WebSocket2 = websocket;
var { GUID, kWebSocket } = constants;
var keyRegex = /^[+/0-9A-Za-z]{22}==$/;
var RUNNING = 0;
var CLOSING = 1;
var CLOSED = 2;
var WebSocketServer = class extends EventEmitter {
  /**
   * Create a `WebSocketServer` instance.
   *
   * @param {Object} options Configuration options
   * @param {Boolean} [options.allowSynchronousEvents=true] Specifies whether
   *     any of the `'message'`, `'ping'`, and `'pong'` events can be emitted
   *     multiple times in the same tick
   * @param {Boolean} [options.autoPong=true] Specifies whether or not to
   *     automatically send a pong in response to a ping
   * @param {Number} [options.backlog=511] The maximum length of the queue of
   *     pending connections
   * @param {Boolean} [options.clientTracking=true] Specifies whether or not to
   *     track clients
   * @param {Function} [options.handleProtocols] A hook to handle protocols
   * @param {String} [options.host] The hostname where to bind the server
   * @param {Number} [options.maxPayload=104857600] The maximum allowed message
   *     size
   * @param {Boolean} [options.noServer=false] Enable no server mode
   * @param {String} [options.path] Accept only connections matching this path
   * @param {(Boolean|Object)} [options.perMessageDeflate=false] Enable/disable
   *     permessage-deflate
   * @param {Number} [options.port] The port where to bind the server
   * @param {(http.Server|https.Server)} [options.server] A pre-created HTTP/S
   *     server to use
   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or
   *     not to skip UTF-8 validation for text and close messages
   * @param {Function} [options.verifyClient] A hook to reject connections
   * @param {Function} [options.WebSocket=WebSocket] Specifies the `WebSocket`
   *     class to use. It must be the `WebSocket` class or class that extends it
   * @param {Function} [callback] A listener for the `listening` event
   */
  constructor(options2, callback) {
    super();
    options2 = {
      allowSynchronousEvents: true,
      autoPong: true,
      maxPayload: 100 * 1024 * 1024,
      skipUTF8Validation: false,
      perMessageDeflate: false,
      handleProtocols: null,
      clientTracking: true,
      verifyClient: null,
      noServer: false,
      backlog: null,
      // use default (511 as implemented in net.js)
      server: null,
      host: null,
      path: null,
      port: null,
      WebSocket: WebSocket2,
      ...options2
    };
    if (options2.port == null && !options2.server && !options2.noServer || options2.port != null && (options2.server || options2.noServer) || options2.server && options2.noServer) {
      throw new TypeError(
        'One and only one of the "port", "server", or "noServer" options must be specified'
      );
    }
    if (options2.port != null) {
      this._server = http$2.createServer((req2, res) => {
        const body = http$2.STATUS_CODES[426];
        res.writeHead(426, {
          "Content-Length": body.length,
          "Content-Type": "text/plain"
        });
        res.end(body);
      });
      this._server.listen(
        options2.port,
        options2.host,
        options2.backlog,
        callback
      );
    } else if (options2.server) {
      this._server = options2.server;
    }
    if (this._server) {
      const emitConnection = this.emit.bind(this, "connection");
      this._removeListeners = addListeners(this._server, {
        listening: this.emit.bind(this, "listening"),
        error: this.emit.bind(this, "error"),
        upgrade: (req2, socket, head) => {
          this.handleUpgrade(req2, socket, head, emitConnection);
        }
      });
    }
    if (options2.perMessageDeflate === true) options2.perMessageDeflate = {};
    if (options2.clientTracking) {
      this.clients = /* @__PURE__ */ new Set();
      this._shouldEmitClose = false;
    }
    this.options = options2;
    this._state = RUNNING;
  }
  /**
   * Returns the bound address, the address family name, and port of the server
   * as reported by the operating system if listening on an IP socket.
   * If the server is listening on a pipe or UNIX domain socket, the name is
   * returned as a string.
   *
   * @return {(Object|String|null)} The address of the server
   * @public
   */
  address() {
    if (this.options.noServer) {
      throw new Error('The server is operating in "noServer" mode');
    }
    if (!this._server) return null;
    return this._server.address();
  }
  /**
   * Stop the server from accepting new connections and emit the `'close'` event
   * when all existing connections are closed.
   *
   * @param {Function} [cb] A one-time listener for the `'close'` event
   * @public
   */
  close(cb) {
    if (this._state === CLOSED) {
      if (cb) {
        this.once("close", () => {
          cb(new Error("The server is not running"));
        });
      }
      process.nextTick(emitClose, this);
      return;
    }
    if (cb) this.once("close", cb);
    if (this._state === CLOSING) return;
    this._state = CLOSING;
    if (this.options.noServer || this.options.server) {
      if (this._server) {
        this._removeListeners();
        this._removeListeners = this._server = null;
      }
      if (this.clients) {
        if (!this.clients.size) {
          process.nextTick(emitClose, this);
        } else {
          this._shouldEmitClose = true;
        }
      } else {
        process.nextTick(emitClose, this);
      }
    } else {
      const server = this._server;
      this._removeListeners();
      this._removeListeners = this._server = null;
      server.close(() => {
        emitClose(this);
      });
    }
  }
  /**
   * See if a given request should be handled by this server instance.
   *
   * @param {http.IncomingMessage} req Request object to inspect
   * @return {Boolean} `true` if the request is valid, else `false`
   * @public
   */
  shouldHandle(req2) {
    if (this.options.path) {
      const index = req2.url.indexOf("?");
      const pathname = index !== -1 ? req2.url.slice(0, index) : req2.url;
      if (pathname !== this.options.path) return false;
    }
    return true;
  }
  /**
   * Handle a HTTP Upgrade request.
   *
   * @param {http.IncomingMessage} req The request object
   * @param {Duplex} socket The network socket between the server and client
   * @param {Buffer} head The first packet of the upgraded stream
   * @param {Function} cb Callback
   * @public
   */
  handleUpgrade(req2, socket, head, cb) {
    socket.on("error", socketOnError);
    const key = req2.headers["sec-websocket-key"];
    const upgrade = req2.headers.upgrade;
    const version3 = +req2.headers["sec-websocket-version"];
    if (req2.method !== "GET") {
      const message = "Invalid HTTP method";
      abortHandshakeOrEmitwsClientError(this, req2, socket, 405, message);
      return;
    }
    if (upgrade === void 0 || upgrade.toLowerCase() !== "websocket") {
      const message = "Invalid Upgrade header";
      abortHandshakeOrEmitwsClientError(this, req2, socket, 400, message);
      return;
    }
    if (key === void 0 || !keyRegex.test(key)) {
      const message = "Missing or invalid Sec-WebSocket-Key header";
      abortHandshakeOrEmitwsClientError(this, req2, socket, 400, message);
      return;
    }
    if (version3 !== 8 && version3 !== 13) {
      const message = "Missing or invalid Sec-WebSocket-Version header";
      abortHandshakeOrEmitwsClientError(this, req2, socket, 400, message);
      return;
    }
    if (!this.shouldHandle(req2)) {
      abortHandshake(socket, 400);
      return;
    }
    const secWebSocketProtocol = req2.headers["sec-websocket-protocol"];
    let protocols = /* @__PURE__ */ new Set();
    if (secWebSocketProtocol !== void 0) {
      try {
        protocols = subprotocol.parse(secWebSocketProtocol);
      } catch (err2) {
        const message = "Invalid Sec-WebSocket-Protocol header";
        abortHandshakeOrEmitwsClientError(this, req2, socket, 400, message);
        return;
      }
    }
    const secWebSocketExtensions = req2.headers["sec-websocket-extensions"];
    const extensions2 = {};
    if (this.options.perMessageDeflate && secWebSocketExtensions !== void 0) {
      const perMessageDeflate = new PerMessageDeflate2(
        this.options.perMessageDeflate,
        true,
        this.options.maxPayload
      );
      try {
        const offers = extension.parse(secWebSocketExtensions);
        if (offers[PerMessageDeflate2.extensionName]) {
          perMessageDeflate.accept(offers[PerMessageDeflate2.extensionName]);
          extensions2[PerMessageDeflate2.extensionName] = perMessageDeflate;
        }
      } catch (err2) {
        const message = "Invalid or unacceptable Sec-WebSocket-Extensions header";
        abortHandshakeOrEmitwsClientError(this, req2, socket, 400, message);
        return;
      }
    }
    if (this.options.verifyClient) {
      const info = {
        origin: req2.headers[`${version3 === 8 ? "sec-websocket-origin" : "origin"}`],
        secure: !!(req2.socket.authorized || req2.socket.encrypted),
        req: req2
      };
      if (this.options.verifyClient.length === 2) {
        this.options.verifyClient(info, (verified, code, message, headers) => {
          if (!verified) {
            return abortHandshake(socket, code || 401, message, headers);
          }
          this.completeUpgrade(
            extensions2,
            key,
            protocols,
            req2,
            socket,
            head,
            cb
          );
        });
        return;
      }
      if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);
    }
    this.completeUpgrade(extensions2, key, protocols, req2, socket, head, cb);
  }
  /**
   * Upgrade the connection to WebSocket.
   *
   * @param {Object} extensions The accepted extensions
   * @param {String} key The value of the `Sec-WebSocket-Key` header
   * @param {Set} protocols The subprotocols
   * @param {http.IncomingMessage} req The request object
   * @param {Duplex} socket The network socket between the server and client
   * @param {Buffer} head The first packet of the upgraded stream
   * @param {Function} cb Callback
   * @throws {Error} If called more than once with the same socket
   * @private
   */
  completeUpgrade(extensions2, key, protocols, req2, socket, head, cb) {
    if (!socket.readable || !socket.writable) return socket.destroy();
    if (socket[kWebSocket]) {
      throw new Error(
        "server.handleUpgrade() was called more than once with the same socket, possibly due to a misconfiguration"
      );
    }
    if (this._state > RUNNING) return abortHandshake(socket, 503);
    const digest = createHash("sha1").update(key + GUID).digest("base64");
    const headers = [
      "HTTP/1.1 101 Switching Protocols",
      "Upgrade: websocket",
      "Connection: Upgrade",
      `Sec-WebSocket-Accept: ${digest}`
    ];
    const ws = new this.options.WebSocket(null, void 0, this.options);
    if (protocols.size) {
      const protocol = this.options.handleProtocols ? this.options.handleProtocols(protocols, req2) : protocols.values().next().value;
      if (protocol) {
        headers.push(`Sec-WebSocket-Protocol: ${protocol}`);
        ws._protocol = protocol;
      }
    }
    if (extensions2[PerMessageDeflate2.extensionName]) {
      const params = extensions2[PerMessageDeflate2.extensionName].params;
      const value2 = extension.format({
        [PerMessageDeflate2.extensionName]: [params]
      });
      headers.push(`Sec-WebSocket-Extensions: ${value2}`);
      ws._extensions = extensions2;
    }
    this.emit("headers", headers, req2);
    socket.write(headers.concat("\r\n").join("\r\n"));
    socket.removeListener("error", socketOnError);
    ws.setSocket(socket, head, {
      allowSynchronousEvents: this.options.allowSynchronousEvents,
      maxPayload: this.options.maxPayload,
      skipUTF8Validation: this.options.skipUTF8Validation
    });
    if (this.clients) {
      this.clients.add(ws);
      ws.on("close", () => {
        this.clients.delete(ws);
        if (this._shouldEmitClose && !this.clients.size) {
          process.nextTick(emitClose, this);
        }
      });
    }
    cb(ws, req2);
  }
};
var websocketServer = WebSocketServer;
function addListeners(server, map2) {
  for (const event of Object.keys(map2)) server.on(event, map2[event]);
  return function removeListeners() {
    for (const event of Object.keys(map2)) {
      server.removeListener(event, map2[event]);
    }
  };
}
function emitClose(server) {
  server._state = CLOSED;
  server.emit("close");
}
function socketOnError() {
  this.destroy();
}
function abortHandshake(socket, code, message, headers) {
  message = message || http$2.STATUS_CODES[code];
  headers = {
    Connection: "close",
    "Content-Type": "text/html",
    "Content-Length": Buffer.byteLength(message),
    ...headers
  };
  socket.once("finish", socket.destroy);
  socket.end(
    `HTTP/1.1 ${code} ${http$2.STATUS_CODES[code]}\r
` + Object.keys(headers).map((h2) => `${h2}: ${headers[h2]}`).join("\r\n") + "\r\n\r\n" + message
  );
}
function abortHandshakeOrEmitwsClientError(server, req2, socket, code, message) {
  if (server.listenerCount("wsClientError")) {
    const err2 = new Error(message);
    Error.captureStackTrace(err2, abortHandshakeOrEmitwsClientError);
    server.emit("wsClientError", err2, socket, req2);
  } else {
    abortHandshake(socket, code, message);
  }
}
var WebSocketServerRaw_ = getDefaultExportFromCjs(websocketServer);
var allowedHostsServerCache = /* @__PURE__ */ new WeakMap();
var allowedHostsPreviewCache = /* @__PURE__ */ new WeakMap();
var isFileOrExtensionProtocolRE = /^(?:file|.+-extension):/i;
function getAdditionalAllowedHosts(resolvedServerOptions, resolvedPreviewOptions) {
  const list = [];
  if (typeof resolvedServerOptions.host === "string" && resolvedServerOptions.host) {
    list.push(resolvedServerOptions.host);
  }
  if (typeof resolvedServerOptions.hmr === "object" && resolvedServerOptions.hmr.host) {
    list.push(resolvedServerOptions.hmr.host);
  }
  if (typeof resolvedPreviewOptions.host === "string" && resolvedPreviewOptions.host) {
    list.push(resolvedPreviewOptions.host);
  }
  if (resolvedServerOptions.origin) {
    try {
      const serverOriginUrl = new URL(resolvedServerOptions.origin);
      list.push(serverOriginUrl.hostname);
    } catch {
    }
  }
  return list;
}
function isHostAllowedWithoutCache(allowedHosts, additionalAllowedHosts, host) {
  if (isFileOrExtensionProtocolRE.test(host)) {
    return true;
  }
  const trimmedHost = host.trim();
  if (trimmedHost[0] === "[") {
    const endIpv6 = trimmedHost.indexOf("]");
    if (endIpv6 < 0) {
      return false;
    }
    return import_node_net.default.isIP(trimmedHost.slice(1, endIpv6)) === 6;
  }
  const colonPos = trimmedHost.indexOf(":");
  const hostname = colonPos === -1 ? trimmedHost : trimmedHost.slice(0, colonPos);
  if (import_node_net.default.isIP(hostname) === 4) {
    return true;
  }
  if (hostname === "localhost" || hostname.endsWith(".localhost")) {
    return true;
  }
  for (const additionalAllowedHost of additionalAllowedHosts) {
    if (additionalAllowedHost === hostname) {
      return true;
    }
  }
  for (const allowedHost of allowedHosts) {
    if (allowedHost === hostname) {
      return true;
    }
    if (allowedHost[0] === "." && (allowedHost.slice(1) === hostname || hostname.endsWith(allowedHost))) {
      return true;
    }
  }
  return false;
}
function isHostAllowed(config2, isPreview, host) {
  const allowedHosts = isPreview ? config2.preview.allowedHosts : config2.server.allowedHosts;
  if (allowedHosts === true) {
    return true;
  }
  const cache = isPreview ? allowedHostsPreviewCache : allowedHostsServerCache;
  if (!cache.has(config2)) {
    cache.set(config2, /* @__PURE__ */ new Set());
  }
  const cachedAllowedHosts = cache.get(config2);
  if (cachedAllowedHosts.has(host)) {
    return true;
  }
  const result = isHostAllowedWithoutCache(
    allowedHosts,
    config2.additionalAllowedHosts,
    host
  );
  if (result) {
    cachedAllowedHosts.add(host);
  }
  return result;
}
function hostCheckMiddleware(config2, isPreview) {
  return function viteHostCheckMiddleware(req2, res, next) {
    const hostHeader = req2.headers.host;
    if (!hostHeader || !isHostAllowed(config2, isPreview, hostHeader)) {
      const hostname = hostHeader == null ? void 0 : hostHeader.replace(/:\d+$/, "");
      const hostnameWithQuotes = JSON.stringify(hostname);
      const optionName = `${isPreview ? "preview" : "server"}.allowedHosts`;
      res.writeHead(403, {
        "Content-Type": "text/plain"
      });
      res.end(
        `Blocked request. This host (${hostnameWithQuotes}) is not allowed.
To allow this host, add ${hostnameWithQuotes} to \`${optionName}\` in vite.config.js.`
      );
      return;
    }
    return next();
  };
}
var WebSocketServerRaw = process.versions.bun ? (
  // @ts-expect-error: Bun defines `import.meta.require`
  import.meta.require("ws").WebSocketServer
) : WebSocketServerRaw_;
var HMR_HEADER = "vite-hmr";
var isWebSocketServer = Symbol("isWebSocketServer");
var wsServerEvents = [
  "connection",
  "error",
  "headers",
  "listening",
  "message"
];
function noop$2() {
}
function hasValidToken(config2, url2) {
  const token = url2.searchParams.get("token");
  if (!token) return false;
  try {
    const isValidToken = import_node_crypto.default.timingSafeEqual(
      Buffer.from(token),
      Buffer.from(config2.webSocketToken)
    );
    return isValidToken;
  } catch {
  }
  return false;
}
function createWebSocketServer(server, config2, httpsOptions) {
  if (config2.server.ws === false) {
    return {
      [isWebSocketServer]: true,
      get clients() {
        return /* @__PURE__ */ new Set();
      },
      async close() {
      },
      on: noop$2,
      off: noop$2,
      setInvokeHandler: noop$2,
      handleInvoke: async () => ({
        error: {
          name: "TransportError",
          message: "handleInvoke not implemented",
          stack: new Error().stack
        }
      }),
      listen: noop$2,
      send: noop$2
    };
  }
  let wsHttpServer = void 0;
  const hmr = isObject$1(config2.server.hmr) && config2.server.hmr;
  const hmrServer = hmr && hmr.server;
  const hmrPort = hmr && hmr.port;
  const portsAreCompatible = !hmrPort || hmrPort === config2.server.port;
  const wsServer = hmrServer || portsAreCompatible && server;
  let hmrServerWsListener;
  const customListeners = /* @__PURE__ */ new Map();
  const clientsMap = /* @__PURE__ */ new WeakMap();
  const port = hmrPort || 24678;
  const host = hmr && hmr.host || void 0;
  const shouldHandle = (req2) => {
    var _a2;
    const protocol = req2.headers["sec-websocket-protocol"];
    if (protocol === "vite-ping") return true;
    const hostHeader = req2.headers.host;
    if (!hostHeader || !isHostAllowed(config2, false, hostHeader)) {
      return false;
    }
    if ((_a2 = config2.legacy) == null ? void 0 : _a2.skipWebSocketTokenCheck) {
      return true;
    }
    if (req2.headers.origin) {
      const parsedUrl = new URL(`http://example.com${req2.url}`);
      return hasValidToken(config2, parsedUrl);
    }
    return true;
  };
  const handleUpgrade = (req2, socket, head, isPing) => {
    wss.handleUpgrade(req2, socket, head, (ws) => {
      if (isPing) {
        ws.close(
          /* Normal Closure */
          1e3
        );
        return;
      }
      wss.emit("connection", ws, req2);
    });
  };
  const wss = new WebSocketServerRaw({ noServer: true });
  wss.shouldHandle = shouldHandle;
  if (wsServer) {
    let hmrBase = config2.base;
    const hmrPath = hmr ? hmr.path : void 0;
    if (hmrPath) {
      hmrBase = import_node_path3.default.posix.join(hmrBase, hmrPath);
    }
    hmrServerWsListener = (req2, socket, head) => {
      const protocol = req2.headers["sec-websocket-protocol"];
      const parsedUrl = new URL(`http://example.com${req2.url}`);
      if ([HMR_HEADER, "vite-ping"].includes(protocol) && parsedUrl.pathname === hmrBase) {
        handleUpgrade(req2, socket, head, protocol === "vite-ping");
      }
    };
    wsServer.on("upgrade", hmrServerWsListener);
  } else {
    const route = (_, res) => {
      const statusCode = 426;
      const body = import_node_http.STATUS_CODES[statusCode];
      if (!body)
        throw new Error(`No body text found for the ${statusCode} status code`);
      res.writeHead(statusCode, {
        "Content-Length": body.length,
        "Content-Type": "text/plain"
      });
      res.end(body);
    };
    if (httpsOptions) {
      wsHttpServer = (0, import_node_https.createServer)(httpsOptions, route);
    } else {
      wsHttpServer = (0, import_node_http.createServer)(route);
    }
    wsHttpServer.on("upgrade", (req2, socket, head) => {
      const protocol = req2.headers["sec-websocket-protocol"];
      if (protocol === "vite-ping" && server && !server.listening) {
        req2.destroy();
        return;
      }
      handleUpgrade(req2, socket, head, protocol === "vite-ping");
    });
    wsHttpServer.on("error", (e2) => {
      if (e2.code === "EADDRINUSE") {
        config2.logger.error(
          colors$1.red(
            `WebSocket server error: Port ${e2.port} is already in use`
          ),
          { error: e2 }
        );
      } else {
        config2.logger.error(
          colors$1.red(`WebSocket server error:
${e2.stack || e2.message}`),
          { error: e2 }
        );
      }
    });
  }
  wss.on("connection", (socket) => {
    socket.on("message", (raw) => {
      if (!customListeners.size) return;
      let parsed;
      try {
        parsed = JSON.parse(String(raw));
      } catch {
      }
      if (!parsed || parsed.type !== "custom" || !parsed.event) return;
      const listeners = customListeners.get(parsed.event);
      if (!(listeners == null ? void 0 : listeners.size)) return;
      const client = getSocketClient(socket);
      listeners.forEach(
        (listener2) => listener2(parsed.data, client, parsed.invoke)
      );
    });
    socket.on("error", (err2) => {
      config2.logger.error(`${colors$1.red(`ws error:`)}
${err2.stack}`, {
        timestamp: true,
        error: err2
      });
    });
    socket.send(JSON.stringify({ type: "connected" }));
    if (bufferedError) {
      socket.send(JSON.stringify(bufferedError));
      bufferedError = null;
    }
  });
  wss.on("error", (e2) => {
    if (e2.code === "EADDRINUSE") {
      config2.logger.error(
        colors$1.red(`WebSocket server error: Port ${e2.port} is already in use`),
        { error: e2 }
      );
    } else {
      config2.logger.error(
        colors$1.red(`WebSocket server error:
${e2.stack || e2.message}`),
        { error: e2 }
      );
    }
  });
  function getSocketClient(socket) {
    if (!clientsMap.has(socket)) {
      clientsMap.set(socket, {
        send: (...args) => {
          let payload;
          if (typeof args[0] === "string") {
            payload = {
              type: "custom",
              event: args[0],
              data: args[1]
            };
          } else {
            payload = args[0];
          }
          socket.send(JSON.stringify(payload));
        },
        socket
      });
    }
    return clientsMap.get(socket);
  }
  let bufferedError = null;
  const normalizedHotChannel = normalizeHotChannel(
    {
      send(payload) {
        if (payload.type === "error" && !wss.clients.size) {
          bufferedError = payload;
          return;
        }
        const stringified = JSON.stringify(payload);
        wss.clients.forEach((client) => {
          if (client.readyState === 1) {
            client.send(stringified);
          }
        });
      },
      on(event, fn) {
        if (!customListeners.has(event)) {
          customListeners.set(event, /* @__PURE__ */ new Set());
        }
        customListeners.get(event).add(fn);
      },
      off(event, fn) {
        var _a2;
        (_a2 = customListeners.get(event)) == null ? void 0 : _a2.delete(fn);
      },
      listen() {
        wsHttpServer == null ? void 0 : wsHttpServer.listen(port, host);
      },
      close() {
        if (hmrServerWsListener && wsServer) {
          wsServer.off("upgrade", hmrServerWsListener);
        }
        return new Promise((resolve4, reject) => {
          wss.clients.forEach((client) => {
            client.terminate();
          });
          wss.close((err2) => {
            if (err2) {
              reject(err2);
            } else {
              if (wsHttpServer) {
                wsHttpServer.close((err22) => {
                  if (err22) {
                    reject(err22);
                  } else {
                    resolve4();
                  }
                });
              } else {
                resolve4();
              }
            }
          });
        });
      }
    },
    config2.server.hmr !== false,
    // Don't normalize client as we already handles the send, and to keep `.socket`
    false
  );
  return {
    ...normalizedHotChannel,
    on: (event, fn) => {
      if (wsServerEvents.includes(event)) {
        wss.on(event, fn);
        return;
      }
      normalizedHotChannel.on(event, fn);
    },
    off: (event, fn) => {
      if (wsServerEvents.includes(event)) {
        wss.off(event, fn);
        return;
      }
      normalizedHotChannel.off(event, fn);
    },
    async close() {
      await normalizedHotChannel.close();
    },
    [isWebSocketServer]: true,
    get clients() {
      return new Set(Array.from(wss.clients).map(getSocketClient));
    }
  };
}
function baseMiddleware(rawBase, middlewareMode) {
  return function viteBaseMiddleware(req2, res, next) {
    var _a2;
    const url2 = req2.url;
    const pathname = cleanUrl2(url2);
    const base = rawBase;
    if (pathname.startsWith(base)) {
      req2.url = stripBase(url2, base);
      return next();
    }
    if (middlewareMode) {
      return next();
    }
    if (pathname === "/" || pathname === "/index.html") {
      res.writeHead(302, {
        Location: base + url2.slice(pathname.length)
      });
      res.end();
      return;
    }
    const redirectPath = withTrailingSlash(url2) !== base ? joinUrlSegments(base, url2) : base;
    if ((_a2 = req2.headers.accept) == null ? void 0 : _a2.includes("text/html")) {
      res.writeHead(404, {
        "Content-Type": "text/html"
      });
      res.end(
        `The server is configured with a public base URL of ${base} - did you mean to visit <a href="${redirectPath}">${redirectPath}</a> instead?`
      );
      return;
    } else {
      res.writeHead(404, {
        "Content-Type": "text/plain"
      });
      res.end(
        `The server is configured with a public base URL of ${base} - did you mean to visit ${redirectPath} instead?`
      );
      return;
    }
  };
}
var httpProxy$3 = { exports: {} };
var eventemitter3 = { exports: {} };
(function(module) {
  var has = Object.prototype.hasOwnProperty, prefix = "~";
  function Events() {
  }
  if (Object.create) {
    Events.prototype = /* @__PURE__ */ Object.create(null);
    if (!new Events().__proto__) prefix = false;
  }
  function EE(fn, context, once) {
    this.fn = fn;
    this.context = context;
    this.once = once || false;
  }
  function addListener(emitter, event, fn, context, once) {
    if (typeof fn !== "function") {
      throw new TypeError("The listener must be a function");
    }
    var listener2 = new EE(fn, context || emitter, once), evt = prefix ? prefix + event : event;
    if (!emitter._events[evt]) emitter._events[evt] = listener2, emitter._eventsCount++;
    else if (!emitter._events[evt].fn) emitter._events[evt].push(listener2);
    else emitter._events[evt] = [emitter._events[evt], listener2];
    return emitter;
  }
  function clearEvent(emitter, evt) {
    if (--emitter._eventsCount === 0) emitter._events = new Events();
    else delete emitter._events[evt];
  }
  function EventEmitter2() {
    this._events = new Events();
    this._eventsCount = 0;
  }
  EventEmitter2.prototype.eventNames = function eventNames() {
    var names = [], events2, name;
    if (this._eventsCount === 0) return names;
    for (name in events2 = this._events) {
      if (has.call(events2, name)) names.push(prefix ? name.slice(1) : name);
    }
    if (Object.getOwnPropertySymbols) {
      return names.concat(Object.getOwnPropertySymbols(events2));
    }
    return names;
  };
  EventEmitter2.prototype.listeners = function listeners(event) {
    var evt = prefix ? prefix + event : event, handlers = this._events[evt];
    if (!handlers) return [];
    if (handlers.fn) return [handlers.fn];
    for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
      ee[i] = handlers[i].fn;
    }
    return ee;
  };
  EventEmitter2.prototype.listenerCount = function listenerCount(event) {
    var evt = prefix ? prefix + event : event, listeners = this._events[evt];
    if (!listeners) return 0;
    if (listeners.fn) return 1;
    return listeners.length;
  };
  EventEmitter2.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
    var evt = prefix ? prefix + event : event;
    if (!this._events[evt]) return false;
    var listeners = this._events[evt], len = arguments.length, args, i;
    if (listeners.fn) {
      if (listeners.once) this.removeListener(event, listeners.fn, void 0, true);
      switch (len) {
        case 1:
          return listeners.fn.call(listeners.context), true;
        case 2:
          return listeners.fn.call(listeners.context, a1), true;
        case 3:
          return listeners.fn.call(listeners.context, a1, a2), true;
        case 4:
          return listeners.fn.call(listeners.context, a1, a2, a3), true;
        case 5:
          return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
        case 6:
          return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
      }
      for (i = 1, args = new Array(len - 1); i < len; i++) {
        args[i - 1] = arguments[i];
      }
      listeners.fn.apply(listeners.context, args);
    } else {
      var length = listeners.length, j;
      for (i = 0; i < length; i++) {
        if (listeners[i].once) this.removeListener(event, listeners[i].fn, void 0, true);
        switch (len) {
          case 1:
            listeners[i].fn.call(listeners[i].context);
            break;
          case 2:
            listeners[i].fn.call(listeners[i].context, a1);
            break;
          case 3:
            listeners[i].fn.call(listeners[i].context, a1, a2);
            break;
          case 4:
            listeners[i].fn.call(listeners[i].context, a1, a2, a3);
            break;
          default:
            if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) {
              args[j - 1] = arguments[j];
            }
            listeners[i].fn.apply(listeners[i].context, args);
        }
      }
    }
    return true;
  };
  EventEmitter2.prototype.on = function on(event, fn, context) {
    return addListener(this, event, fn, context, false);
  };
  EventEmitter2.prototype.once = function once(event, fn, context) {
    return addListener(this, event, fn, context, true);
  };
  EventEmitter2.prototype.removeListener = function removeListener(event, fn, context, once) {
    var evt = prefix ? prefix + event : event;
    if (!this._events[evt]) return this;
    if (!fn) {
      clearEvent(this, evt);
      return this;
    }
    var listeners = this._events[evt];
    if (listeners.fn) {
      if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
        clearEvent(this, evt);
      }
    } else {
      for (var i = 0, events2 = [], length = listeners.length; i < length; i++) {
        if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
          events2.push(listeners[i]);
        }
      }
      if (events2.length) this._events[evt] = events2.length === 1 ? events2[0] : events2;
      else clearEvent(this, evt);
    }
    return this;
  };
  EventEmitter2.prototype.removeAllListeners = function removeAllListeners(event) {
    var evt;
    if (event) {
      evt = prefix ? prefix + event : event;
      if (this._events[evt]) clearEvent(this, evt);
    } else {
      this._events = new Events();
      this._eventsCount = 0;
    }
    return this;
  };
  EventEmitter2.prototype.off = EventEmitter2.prototype.removeListener;
  EventEmitter2.prototype.addListener = EventEmitter2.prototype.on;
  EventEmitter2.prefixed = prefix;
  EventEmitter2.EventEmitter = EventEmitter2;
  {
    module.exports = EventEmitter2;
  }
})(eventemitter3);
var eventemitter3Exports = eventemitter3.exports;
var common$3 = {};
var requiresPort = function required(port, protocol) {
  protocol = protocol.split(":")[0];
  port = +port;
  if (!port) return false;
  switch (protocol) {
    case "http":
    case "ws":
      return port !== 80;
    case "https":
    case "wss":
      return port !== 443;
    case "ftp":
      return port !== 21;
    case "gopher":
      return port !== 70;
    case "file":
      return false;
  }
  return port !== 0;
};
(function(exports) {
  var common2 = exports, url2 = import_url.default, required2 = requiresPort;
  var upgradeHeader = /(^|,)\s*upgrade\s*($|,)/i, isSSL = /^https|wss/;
  common2.isSSL = isSSL;
  common2.setupOutgoing = function(outgoing, options2, req2, forward) {
    outgoing.port = options2[forward || "target"].port || (isSSL.test(options2[forward || "target"].protocol) ? 443 : 80);
    [
      "host",
      "hostname",
      "socketPath",
      "pfx",
      "key",
      "passphrase",
      "cert",
      "ca",
      "ciphers",
      "secureProtocol"
    ].forEach(
      function(e2) {
        outgoing[e2] = options2[forward || "target"][e2];
      }
    );
    outgoing.method = options2.method || req2.method;
    outgoing.headers = Object.assign({}, req2.headers);
    if (options2.headers) {
      Object.assign(outgoing.headers, options2.headers);
    }
    if (options2.auth) {
      outgoing.auth = options2.auth;
    }
    if (options2.ca) {
      outgoing.ca = options2.ca;
    }
    if (isSSL.test(options2[forward || "target"].protocol)) {
      outgoing.rejectUnauthorized = typeof options2.secure === "undefined" ? true : options2.secure;
    }
    outgoing.agent = options2.agent || false;
    outgoing.localAddress = options2.localAddress;
    if (!outgoing.agent) {
      outgoing.headers = outgoing.headers || {};
      if (typeof outgoing.headers.connection !== "string" || !upgradeHeader.test(outgoing.headers.connection)) {
        outgoing.headers.connection = "close";
      }
    }
    var target = options2[forward || "target"];
    var targetPath = target && options2.prependPath !== false ? target.path || "" : "";
    var outgoingPath = !options2.toProxy ? url2.parse(req2.url).path || "" : req2.url;
    outgoingPath = !options2.ignorePath ? outgoingPath : "";
    outgoing.path = common2.urlJoin(targetPath, outgoingPath);
    if (options2.changeOrigin) {
      outgoing.headers.host = required2(outgoing.port, options2[forward || "target"].protocol) && !hasPort(outgoing.host) ? outgoing.host + ":" + outgoing.port : outgoing.host;
    }
    return outgoing;
  };
  common2.setupSocket = function(socket) {
    socket.setTimeout(0);
    socket.setNoDelay(true);
    socket.setKeepAlive(true, 0);
    return socket;
  };
  common2.getPort = function(req2) {
    var res = req2.headers.host ? req2.headers.host.match(/:(\d+)/) : "";
    return res ? res[1] : common2.hasEncryptedConnection(req2) ? "443" : "80";
  };
  common2.hasEncryptedConnection = function(req2) {
    return Boolean(req2.connection.encrypted || req2.connection.pair);
  };
  common2.urlJoin = function() {
    var args = Array.prototype.slice.call(arguments), lastIndex = args.length - 1, last = args[lastIndex], lastSegs = last.split("?"), retSegs;
    args[lastIndex] = lastSegs.shift();
    retSegs = [
      args.filter(Boolean).join("/").replace(/\/+/g, "/").replace("http:/", "http://").replace("https:/", "https://")
    ];
    retSegs.push.apply(retSegs, lastSegs);
    return retSegs.join("?");
  };
  common2.rewriteCookieProperty = function rewriteCookieProperty(header, config2, property) {
    if (Array.isArray(header)) {
      return header.map(function(headerElement) {
        return rewriteCookieProperty(headerElement, config2, property);
      });
    }
    return header.replace(new RegExp("(;\\s*" + property + "=)([^;]+)", "i"), function(match, prefix, previousValue) {
      var newValue;
      if (previousValue in config2) {
        newValue = config2[previousValue];
      } else if ("*" in config2) {
        newValue = config2["*"];
      } else {
        return match;
      }
      if (newValue) {
        return prefix + newValue;
      } else {
        return "";
      }
    });
  };
  function hasPort(host) {
    return !!~host.indexOf(":");
  }
})(common$3);
var url$1 = import_url.default;
var common$2 = common$3;
var redirectRegex = /^201|30(1|2|7|8)$/;
var webOutgoing = {
  // <--
  /**
   * If is a HTTP 1.0 request, remove chunk headers
   *
   * @param {ClientRequest} Req Request object
   * @param {IncomingMessage} Res Response object
   * @param {proxyResponse} Res Response object from the proxy request
   *
   * @api private
   */
  removeChunked: function removeChunked(req2, res, proxyRes) {
    if (req2.httpVersion === "1.0") {
      delete proxyRes.headers["transfer-encoding"];
    }
  },
  /**
   * If is a HTTP 1.0 request, set the correct connection header
   * or if connection header not present, then use `keep-alive`
   *
   * @param {ClientRequest} Req Request object
   * @param {IncomingMessage} Res Response object
   * @param {proxyResponse} Res Response object from the proxy request
   *
   * @api private
   */
  setConnection: function setConnection(req2, res, proxyRes) {
    if (req2.httpVersion === "1.0") {
      proxyRes.headers.connection = req2.headers.connection || "close";
    } else if (req2.httpVersion !== "2.0" && !proxyRes.headers.connection) {
      proxyRes.headers.connection = req2.headers.connection || "keep-alive";
    }
  },
  setRedirectHostRewrite: function setRedirectHostRewrite(req2, res, proxyRes, options2) {
    if ((options2.hostRewrite || options2.autoRewrite || options2.protocolRewrite) && proxyRes.headers["location"] && redirectRegex.test(proxyRes.statusCode)) {
      var target = url$1.parse(options2.target);
      var u = url$1.parse(proxyRes.headers["location"]);
      if (target.host != u.host) {
        return;
      }
      if (options2.hostRewrite) {
        u.host = options2.hostRewrite;
      } else if (options2.autoRewrite) {
        u.host = req2.headers["host"];
      }
      if (options2.protocolRewrite) {
        u.protocol = options2.protocolRewrite;
      }
      proxyRes.headers["location"] = u.format();
    }
  },
  /**
   * Copy headers from proxyResponse to response
   * set each header in response object.
   *
   * @param {ClientRequest} Req Request object
   * @param {IncomingMessage} Res Response object
   * @param {proxyResponse} Res Response object from the proxy request
   * @param {Object} Options options.cookieDomainRewrite: Config to rewrite cookie domain
   *
   * @api private
   */
  writeHeaders: function writeHeaders(req2, res, proxyRes, options2) {
    var rewriteCookieDomainConfig = options2.cookieDomainRewrite, rewriteCookiePathConfig = options2.cookiePathRewrite, preserveHeaderKeyCase = options2.preserveHeaderKeyCase, rawHeaderKeyMap, setHeader = function(key2, header) {
      if (header == void 0) return;
      if (rewriteCookieDomainConfig && key2.toLowerCase() === "set-cookie") {
        header = common$2.rewriteCookieProperty(header, rewriteCookieDomainConfig, "domain");
      }
      if (rewriteCookiePathConfig && key2.toLowerCase() === "set-cookie") {
        header = common$2.rewriteCookieProperty(header, rewriteCookiePathConfig, "path");
      }
      res.setHeader(String(key2).trim(), header);
    };
    if (typeof rewriteCookieDomainConfig === "string") {
      rewriteCookieDomainConfig = { "*": rewriteCookieDomainConfig };
    }
    if (typeof rewriteCookiePathConfig === "string") {
      rewriteCookiePathConfig = { "*": rewriteCookiePathConfig };
    }
    if (preserveHeaderKeyCase && proxyRes.rawHeaders != void 0) {
      rawHeaderKeyMap = {};
      for (var i = 0; i < proxyRes.rawHeaders.length; i += 2) {
        var key = proxyRes.rawHeaders[i];
        rawHeaderKeyMap[key.toLowerCase()] = key;
      }
    }
    Object.keys(proxyRes.headers).forEach(function(key2) {
      var header = proxyRes.headers[key2];
      if (preserveHeaderKeyCase && rawHeaderKeyMap) {
        key2 = rawHeaderKeyMap[key2] || key2;
      }
      setHeader(key2, header);
    });
  },
  /**
   * Set the statusCode from the proxyResponse
   *
   * @param {ClientRequest} Req Request object
   * @param {IncomingMessage} Res Response object
   * @param {proxyResponse} Res Response object from the proxy request
   *
   * @api private
   */
  writeStatusCode: function writeStatusCode(req2, res, proxyRes) {
    if (proxyRes.statusMessage) {
      res.statusCode = proxyRes.statusCode;
      res.statusMessage = proxyRes.statusMessage;
    } else {
      res.statusCode = proxyRes.statusCode;
    }
  }
};
var followRedirects$1 = { exports: {} };
var debug$7;
var debug_1 = function() {
  if (!debug$7) {
    try {
      debug$7 = nodeExports$1("follow-redirects");
    } catch (error2) {
    }
    if (typeof debug$7 !== "function") {
      debug$7 = function() {
      };
    }
  }
  debug$7.apply(null, arguments);
};
var url = import_url.default;
var URL$1 = url.URL;
var http$1 = import_http.default;
var https$1 = import_https.default;
var Writable = import_stream.default.Writable;
var assert = import_assert.default;
var debug$6 = debug_1;
(function detectUnsupportedEnvironment() {
  var looksLikeNode = typeof process !== "undefined";
  var looksLikeBrowser = typeof window !== "undefined" && typeof document !== "undefined";
  var looksLikeV8 = isFunction(Error.captureStackTrace);
  if (!looksLikeNode && (looksLikeBrowser || !looksLikeV8)) {
    console.warn("The follow-redirects package should be excluded from browser builds.");
  }
})();
var useNativeURL = false;
try {
  assert(new URL$1(""));
} catch (error2) {
  useNativeURL = error2.code === "ERR_INVALID_URL";
}
var preservedUrlFields = [
  "auth",
  "host",
  "hostname",
  "href",
  "path",
  "pathname",
  "port",
  "protocol",
  "query",
  "search",
  "hash"
];
var events = ["abort", "aborted", "connect", "error", "socket", "timeout"];
var eventHandlers = /* @__PURE__ */ Object.create(null);
events.forEach(function(event) {
  eventHandlers[event] = function(arg1, arg2, arg3) {
    this._redirectable.emit(event, arg1, arg2, arg3);
  };
});
var InvalidUrlError = createErrorType(
  "ERR_INVALID_URL",
  "Invalid URL",
  TypeError
);
var RedirectionError = createErrorType(
  "ERR_FR_REDIRECTION_FAILURE",
  "Redirected request failed"
);
var TooManyRedirectsError = createErrorType(
  "ERR_FR_TOO_MANY_REDIRECTS",
  "Maximum number of redirects exceeded",
  RedirectionError
);
var MaxBodyLengthExceededError = createErrorType(
  "ERR_FR_MAX_BODY_LENGTH_EXCEEDED",
  "Request body larger than maxBodyLength limit"
);
var WriteAfterEndError = createErrorType(
  "ERR_STREAM_WRITE_AFTER_END",
  "write after end"
);
var destroy = Writable.prototype.destroy || noop$1;
function RedirectableRequest(options2, responseCallback) {
  Writable.call(this);
  this._sanitizeOptions(options2);
  this._options = options2;
  this._ended = false;
  this._ending = false;
  this._redirectCount = 0;
  this._redirects = [];
  this._requestBodyLength = 0;
  this._requestBodyBuffers = [];
  if (responseCallback) {
    this.on("response", responseCallback);
  }
  var self2 = this;
  this._onNativeResponse = function(response) {
    try {
      self2._processResponse(response);
    } catch (cause) {
      self2.emit("error", cause instanceof RedirectionError ? cause : new RedirectionError({ cause }));
    }
  };
  this._performRequest();
}
RedirectableRequest.prototype = Object.create(Writable.prototype);
RedirectableRequest.prototype.abort = function() {
  destroyRequest(this._currentRequest);
  this._currentRequest.abort();
  this.emit("abort");
};
RedirectableRequest.prototype.destroy = function(error2) {
  destroyRequest(this._currentRequest, error2);
  destroy.call(this, error2);
  return this;
};
RedirectableRequest.prototype.write = function(data, encoding, callback) {
  if (this._ending) {
    throw new WriteAfterEndError();
  }
  if (!isString(data) && !isBuffer(data)) {
    throw new TypeError("data should be a string, Buffer or Uint8Array");
  }
  if (isFunction(encoding)) {
    callback = encoding;
    encoding = null;
  }
  if (data.length === 0) {
    if (callback) {
      callback();
    }
    return;
  }
  if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {
    this._requestBodyLength += data.length;
    this._requestBodyBuffers.push({ data, encoding });
    this._currentRequest.write(data, encoding, callback);
  } else {
    this.emit("error", new MaxBodyLengthExceededError());
    this.abort();
  }
};
RedirectableRequest.prototype.end = function(data, encoding, callback) {
  if (isFunction(data)) {
    callback = data;
    data = encoding = null;
  } else if (isFunction(encoding)) {
    callback = encoding;
    encoding = null;
  }
  if (!data) {
    this._ended = this._ending = true;
    this._currentRequest.end(null, null, callback);
  } else {
    var self2 = this;
    var currentRequest = this._currentRequest;
    this.write(data, encoding, function() {
      self2._ended = true;
      currentRequest.end(null, null, callback);
    });
    this._ending = true;
  }
};
RedirectableRequest.prototype.setHeader = function(name, value2) {
  this._options.headers[name] = value2;
  this._currentRequest.setHeader(name, value2);
};
RedirectableRequest.prototype.removeHeader = function(name) {
  delete this._options.headers[name];
  this._currentRequest.removeHeader(name);
};
RedirectableRequest.prototype.setTimeout = function(msecs, callback) {
  var self2 = this;
  function destroyOnTimeout(socket) {
    socket.setTimeout(msecs);
    socket.removeListener("timeout", socket.destroy);
    socket.addListener("timeout", socket.destroy);
  }
  function startTimer(socket) {
    if (self2._timeout) {
      clearTimeout(self2._timeout);
    }
    self2._timeout = setTimeout(function() {
      self2.emit("timeout");
      clearTimer();
    }, msecs);
    destroyOnTimeout(socket);
  }
  function clearTimer() {
    if (self2._timeout) {
      clearTimeout(self2._timeout);
      self2._timeout = null;
    }
    self2.removeListener("abort", clearTimer);
    self2.removeListener("error", clearTimer);
    self2.removeListener("response", clearTimer);
    self2.removeListener("close", clearTimer);
    if (callback) {
      self2.removeListener("timeout", callback);
    }
    if (!self2.socket) {
      self2._currentRequest.removeListener("socket", startTimer);
    }
  }
  if (callback) {
    this.on("timeout", callback);
  }
  if (this.socket) {
    startTimer(this.socket);
  } else {
    this._currentRequest.once("socket", startTimer);
  }
  this.on("socket", destroyOnTimeout);
  this.on("abort", clearTimer);
  this.on("error", clearTimer);
  this.on("response", clearTimer);
  this.on("close", clearTimer);
  return this;
};
[
  "flushHeaders",
  "getHeader",
  "setNoDelay",
  "setSocketKeepAlive"
].forEach(function(method) {
  RedirectableRequest.prototype[method] = function(a, b) {
    return this._currentRequest[method](a, b);
  };
});
["aborted", "connection", "socket"].forEach(function(property) {
  Object.defineProperty(RedirectableRequest.prototype, property, {
    get: function() {
      return this._currentRequest[property];
    }
  });
});
RedirectableRequest.prototype._sanitizeOptions = function(options2) {
  if (!options2.headers) {
    options2.headers = {};
  }
  if (options2.host) {
    if (!options2.hostname) {
      options2.hostname = options2.host;
    }
    delete options2.host;
  }
  if (!options2.pathname && options2.path) {
    var searchPos = options2.path.indexOf("?");
    if (searchPos < 0) {
      options2.pathname = options2.path;
    } else {
      options2.pathname = options2.path.substring(0, searchPos);
      options2.search = options2.path.substring(searchPos);
    }
  }
};
RedirectableRequest.prototype._performRequest = function() {
  var protocol = this._options.protocol;
  var nativeProtocol = this._options.nativeProtocols[protocol];
  if (!nativeProtocol) {
    throw new TypeError("Unsupported protocol " + protocol);
  }
  if (this._options.agents) {
    var scheme = protocol.slice(0, -1);
    this._options.agent = this._options.agents[scheme];
  }
  var request = this._currentRequest = nativeProtocol.request(this._options, this._onNativeResponse);
  request._redirectable = this;
  for (var event of events) {
    request.on(event, eventHandlers[event]);
  }
  this._currentUrl = /^\//.test(this._options.path) ? url.format(this._options) : (
    // When making a request to a proxy, […]
    // a client MUST send the target URI in absolute-form […].
    this._options.path
  );
  if (this._isRedirect) {
    var i = 0;
    var self2 = this;
    var buffers = this._requestBodyBuffers;
    (function writeNext(error2) {
      if (request === self2._currentRequest) {
        if (error2) {
          self2.emit("error", error2);
        } else if (i < buffers.length) {
          var buffer = buffers[i++];
          if (!request.finished) {
            request.write(buffer.data, buffer.encoding, writeNext);
          }
        } else if (self2._ended) {
          request.end();
        }
      }
    })();
  }
};
RedirectableRequest.prototype._processResponse = function(response) {
  var statusCode = response.statusCode;
  if (this._options.trackRedirects) {
    this._redirects.push({
      url: this._currentUrl,
      headers: response.headers,
      statusCode
    });
  }
  var location2 = response.headers.location;
  if (!location2 || this._options.followRedirects === false || statusCode < 300 || statusCode >= 400) {
    response.responseUrl = this._currentUrl;
    response.redirects = this._redirects;
    this.emit("response", response);
    this._requestBodyBuffers = [];
    return;
  }
  destroyRequest(this._currentRequest);
  response.destroy();
  if (++this._redirectCount > this._options.maxRedirects) {
    throw new TooManyRedirectsError();
  }
  var requestHeaders;
  var beforeRedirect = this._options.beforeRedirect;
  if (beforeRedirect) {
    requestHeaders = Object.assign({
      // The Host header was set by nativeProtocol.request
      Host: response.req.getHeader("host")
    }, this._options.headers);
  }
  var method = this._options.method;
  if ((statusCode === 301 || statusCode === 302) && this._options.method === "POST" || // RFC7231§6.4.4: The 303 (See Other) status code indicates that
  // the server is redirecting the user agent to a different resource […]
  // A user agent can perform a retrieval request targeting that URI
  // (a GET or HEAD request if using HTTP) […]
  statusCode === 303 && !/^(?:GET|HEAD)$/.test(this._options.method)) {
    this._options.method = "GET";
    this._requestBodyBuffers = [];
    removeMatchingHeaders(/^content-/i, this._options.headers);
  }
  var currentHostHeader = removeMatchingHeaders(/^host$/i, this._options.headers);
  var currentUrlParts = parseUrl(this._currentUrl);
  var currentHost = currentHostHeader || currentUrlParts.host;
  var currentUrl = /^\w+:/.test(location2) ? this._currentUrl : url.format(Object.assign(currentUrlParts, { host: currentHost }));
  var redirectUrl = resolveUrl(location2, currentUrl);
  debug$6("redirecting to", redirectUrl.href);
  this._isRedirect = true;
  spreadUrlObject(redirectUrl, this._options);
  if (redirectUrl.protocol !== currentUrlParts.protocol && redirectUrl.protocol !== "https:" || redirectUrl.host !== currentHost && !isSubdomain(redirectUrl.host, currentHost)) {
    removeMatchingHeaders(/^(?:(?:proxy-)?authorization|cookie)$/i, this._options.headers);
  }
  if (isFunction(beforeRedirect)) {
    var responseDetails = {
      headers: response.headers,
      statusCode
    };
    var requestDetails = {
      url: currentUrl,
      method,
      headers: requestHeaders
    };
    beforeRedirect(this._options, responseDetails, requestDetails);
    this._sanitizeOptions(this._options);
  }
  this._performRequest();
};
function wrap(protocols) {
  var exports = {
    maxRedirects: 21,
    maxBodyLength: 10 * 1024 * 1024
  };
  var nativeProtocols = {};
  Object.keys(protocols).forEach(function(scheme) {
    var protocol = scheme + ":";
    var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];
    var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol);
    function request(input, options2, callback) {
      if (isURL(input)) {
        input = spreadUrlObject(input);
      } else if (isString(input)) {
        input = spreadUrlObject(parseUrl(input));
      } else {
        callback = options2;
        options2 = validateUrl(input);
        input = { protocol };
      }
      if (isFunction(options2)) {
        callback = options2;
        options2 = null;
      }
      options2 = Object.assign({
        maxRedirects: exports.maxRedirects,
        maxBodyLength: exports.maxBodyLength
      }, input, options2);
      options2.nativeProtocols = nativeProtocols;
      if (!isString(options2.host) && !isString(options2.hostname)) {
        options2.hostname = "::1";
      }
      assert.equal(options2.protocol, protocol, "protocol mismatch");
      debug$6("options", options2);
      return new RedirectableRequest(options2, callback);
    }
    function get2(input, options2, callback) {
      var wrappedRequest = wrappedProtocol.request(input, options2, callback);
      wrappedRequest.end();
      return wrappedRequest;
    }
    Object.defineProperties(wrappedProtocol, {
      request: { value: request, configurable: true, enumerable: true, writable: true },
      get: { value: get2, configurable: true, enumerable: true, writable: true }
    });
  });
  return exports;
}
function noop$1() {
}
function parseUrl(input) {
  var parsed;
  if (useNativeURL) {
    parsed = new URL$1(input);
  } else {
    parsed = validateUrl(url.parse(input));
    if (!isString(parsed.protocol)) {
      throw new InvalidUrlError({ input });
    }
  }
  return parsed;
}
function resolveUrl(relative2, base) {
  return useNativeURL ? new URL$1(relative2, base) : parseUrl(url.resolve(base, relative2));
}
function validateUrl(input) {
  if (/^\[/.test(input.hostname) && !/^\[[:0-9a-f]+\]$/i.test(input.hostname)) {
    throw new InvalidUrlError({ input: input.href || input });
  }
  if (/^\[/.test(input.host) && !/^\[[:0-9a-f]+\](:\d+)?$/i.test(input.host)) {
    throw new InvalidUrlError({ input: input.href || input });
  }
  return input;
}
function spreadUrlObject(urlObject, target) {
  var spread = target || {};
  for (var key of preservedUrlFields) {
    spread[key] = urlObject[key];
  }
  if (spread.hostname.startsWith("[")) {
    spread.hostname = spread.hostname.slice(1, -1);
  }
  if (spread.port !== "") {
    spread.port = Number(spread.port);
  }
  spread.path = spread.search ? spread.pathname + spread.search : spread.pathname;
  return spread;
}
function removeMatchingHeaders(regex, headers) {
  var lastValue;
  for (var header in headers) {
    if (regex.test(header)) {
      lastValue = headers[header];
      delete headers[header];
    }
  }
  return lastValue === null || typeof lastValue === "undefined" ? void 0 : String(lastValue).trim();
}
function createErrorType(code, message, baseClass) {
  function CustomError(properties) {
    if (isFunction(Error.captureStackTrace)) {
      Error.captureStackTrace(this, this.constructor);
    }
    Object.assign(this, properties || {});
    this.code = code;
    this.message = this.cause ? message + ": " + this.cause.message : message;
  }
  CustomError.prototype = new (baseClass || Error)();
  Object.defineProperties(CustomError.prototype, {
    constructor: {
      value: CustomError,
      enumerable: false
    },
    name: {
      value: "Error [" + code + "]",
      enumerable: false
    }
  });
  return CustomError;
}
function destroyRequest(request, error2) {
  for (var event of events) {
    request.removeListener(event, eventHandlers[event]);
  }
  request.on("error", noop$1);
  request.destroy(error2);
}
function isSubdomain(subdomain, domain) {
  assert(isString(subdomain) && isString(domain));
  var dot = subdomain.length - domain.length - 1;
  return dot > 0 && subdomain[dot] === "." && subdomain.endsWith(domain);
}
function isString(value2) {
  return typeof value2 === "string" || value2 instanceof String;
}
function isFunction(value2) {
  return typeof value2 === "function";
}
function isBuffer(value2) {
  return typeof value2 === "object" && "length" in value2;
}
function isURL(value2) {
  return URL$1 && value2 instanceof URL$1;
}
followRedirects$1.exports = wrap({ http: http$1, https: https$1 });
followRedirects$1.exports.wrap = wrap;
var followRedirectsExports = followRedirects$1.exports;
var httpNative = import_http.default;
var httpsNative = import_https.default;
var web_o = webOutgoing;
var common$1 = common$3;
var followRedirects = followRedirectsExports;
web_o = Object.keys(web_o).map(function(pass) {
  return web_o[pass];
});
var nativeAgents = { http: httpNative, https: httpsNative };
var webIncoming = {
  /**
   * Sets `content-length` to '0' if request is of DELETE type.
   *
   * @param {ClientRequest} Req Request object
   * @param {IncomingMessage} Res Response object
   * @param {Object} Options Config object passed to the proxy
   *
   * @api private
   */
  deleteLength: function deleteLength(req2, res, options2) {
    if ((req2.method === "DELETE" || req2.method === "OPTIONS") && !req2.headers["content-length"]) {
      req2.headers["content-length"] = "0";
      delete req2.headers["transfer-encoding"];
    }
  },
  /**
   * Sets timeout in request socket if it was specified in options.
   *
   * @param {ClientRequest} Req Request object
   * @param {IncomingMessage} Res Response object
   * @param {Object} Options Config object passed to the proxy
   *
   * @api private
   */
  timeout: function timeout(req2, res, options2) {
    if (options2.timeout) {
      req2.socket.setTimeout(options2.timeout);
    }
  },
  /**
   * Sets `x-forwarded-*` headers if specified in config.
   *
   * @param {ClientRequest} Req Request object
   * @param {IncomingMessage} Res Response object
   * @param {Object} Options Config object passed to the proxy
   *
   * @api private
   */
  XHeaders: function XHeaders(req2, res, options2) {
    if (!options2.xfwd) return;
    var encrypted = req2.isSpdy || common$1.hasEncryptedConnection(req2);
    var values = {
      for: req2.connection.remoteAddress || req2.socket.remoteAddress,
      port: common$1.getPort(req2),
      proto: encrypted ? "https" : "http"
    };
    ["for", "port", "proto"].forEach(function(header) {
      req2.headers["x-forwarded-" + header] = (req2.headers["x-forwarded-" + header] || "") + (req2.headers["x-forwarded-" + header] ? "," : "") + values[header];
    });
    req2.headers["x-forwarded-host"] = req2.headers["x-forwarded-host"] || req2.headers["host"] || "";
  },
  /**
   * Does the actual proxying. If `forward` is enabled fires up
   * a ForwardStream, same happens for ProxyStream. The request
   * just dies otherwise.
   *
   * @param {ClientRequest} Req Request object
   * @param {IncomingMessage} Res Response object
   * @param {Object} Options Config object passed to the proxy
   *
   * @api private
   */
  stream: function stream(req2, res, options2, _, server, clb) {
    server.emit("start", req2, res, options2.target || options2.forward);
    var agents = options2.followRedirects ? followRedirects : nativeAgents;
    var http2 = agents.http;
    var https2 = agents.https;
    if (options2.forward) {
      var forwardReq = (options2.forward.protocol === "https:" ? https2 : http2).request(
        common$1.setupOutgoing(options2.ssl || {}, options2, req2, "forward")
      );
      var forwardError = createErrorHandler(forwardReq, options2.forward);
      req2.on("error", forwardError);
      forwardReq.on("error", forwardError);
      (options2.buffer || req2).pipe(forwardReq);
      if (!options2.target) {
        return res.end();
      }
    }
    var proxyReq = (options2.target.protocol === "https:" ? https2 : http2).request(
      common$1.setupOutgoing(options2.ssl || {}, options2, req2)
    );
    proxyReq.on("socket", function(socket) {
      if (server && !proxyReq.getHeader("expect")) {
        server.emit("proxyReq", proxyReq, req2, res, options2);
      }
    });
    if (options2.proxyTimeout) {
      proxyReq.setTimeout(options2.proxyTimeout, function() {
        proxyReq.abort();
      });
    }
    req2.on("aborted", function() {
      proxyReq.abort();
    });
    var proxyError = createErrorHandler(proxyReq, options2.target);
    req2.on("error", proxyError);
    proxyReq.on("error", proxyError);
    function createErrorHandler(proxyReq2, url2) {
      return function proxyError2(err2) {
        if (req2.socket.destroyed && err2.code === "ECONNRESET") {
          server.emit("econnreset", err2, req2, res, url2);
          return proxyReq2.abort();
        }
        if (clb) {
          clb(err2, req2, res, url2);
        } else {
          server.emit("error", err2, req2, res, url2);
        }
      };
    }
    (options2.buffer || req2).pipe(proxyReq);
    proxyReq.on("response", function(proxyRes) {
      if (server) {
        server.emit("proxyRes", proxyRes, req2, res);
      }
      if (!res.headersSent && !options2.selfHandleResponse) {
        for (var i = 0; i < web_o.length; i++) {
          if (web_o[i](req2, res, proxyRes, options2)) {
            break;
          }
        }
      }
      if (!res.finished) {
        proxyRes.on("end", function() {
          if (server) server.emit("end", req2, res, proxyRes);
        });
        if (!options2.selfHandleResponse) proxyRes.pipe(res);
      } else {
        if (server) server.emit("end", req2, res, proxyRes);
      }
    });
  }
};
var http = import_http.default;
var https = import_https.default;
var common = common$3;
var wsIncoming = {
  /**
   * WebSocket requests must have the `GET` method and
   * the `upgrade:websocket` header
   *
   * @param {ClientRequest} Req Request object
   * @param {Socket} Websocket
   *
   * @api private
   */
  checkMethodAndHeader: function checkMethodAndHeader(req2, socket) {
    if (req2.method !== "GET" || !req2.headers.upgrade) {
      socket.destroy();
      return true;
    }
    if (req2.headers.upgrade.toLowerCase() !== "websocket") {
      socket.destroy();
      return true;
    }
  },
  /**
   * Sets `x-forwarded-*` headers if specified in config.
   *
   * @param {ClientRequest} Req Request object
   * @param {Socket} Websocket
   * @param {Object} Options Config object passed to the proxy
   *
   * @api private
   */
  XHeaders: function XHeaders2(req2, socket, options2) {
    if (!options2.xfwd) return;
    var values = {
      for: req2.connection.remoteAddress || req2.socket.remoteAddress,
      port: common.getPort(req2),
      proto: common.hasEncryptedConnection(req2) ? "wss" : "ws"
    };
    ["for", "port", "proto"].forEach(function(header) {
      req2.headers["x-forwarded-" + header] = (req2.headers["x-forwarded-" + header] || "") + (req2.headers["x-forwarded-" + header] ? "," : "") + values[header];
    });
  },
  /**
   * Does the actual proxying. Make the request and upgrade it
   * send the Switching Protocols request and pipe the sockets.
   *
   * @param {ClientRequest} Req Request object
   * @param {Socket} Websocket
   * @param {Object} Options Config object passed to the proxy
   *
   * @api private
   */
  stream: function stream2(req2, socket, options2, head, server, clb) {
    var createHttpHeader = function(line, headers) {
      return Object.keys(headers).reduce(function(head2, key) {
        var value2 = headers[key];
        if (!Array.isArray(value2)) {
          head2.push(key + ": " + value2);
          return head2;
        }
        for (var i = 0; i < value2.length; i++) {
          head2.push(key + ": " + value2[i]);
        }
        return head2;
      }, [line]).join("\r\n") + "\r\n\r\n";
    };
    common.setupSocket(socket);
    if (head && head.length) socket.unshift(head);
    var proxyReq = (common.isSSL.test(options2.target.protocol) ? https : http).request(
      common.setupOutgoing(options2.ssl || {}, options2, req2)
    );
    if (server) {
      server.emit("proxyReqWs", proxyReq, req2, socket, options2, head);
    }
    proxyReq.on("error", onOutgoingError);
    proxyReq.on("response", function(res) {
      if (!res.upgrade) {
        socket.write(createHttpHeader("HTTP/" + res.httpVersion + " " + res.statusCode + " " + res.statusMessage, res.headers));
        res.pipe(socket);
      }
    });
    proxyReq.on("upgrade", function(proxyRes, proxySocket, proxyHead) {
      proxySocket.on("error", onOutgoingError);
      proxySocket.on("end", function() {
        server.emit("close", proxyRes, proxySocket, proxyHead);
      });
      socket.on("error", function() {
        proxySocket.end();
      });
      common.setupSocket(proxySocket);
      if (proxyHead && proxyHead.length) proxySocket.unshift(proxyHead);
      socket.write(createHttpHeader("HTTP/1.1 101 Switching Protocols", proxyRes.headers));
      proxySocket.pipe(socket).pipe(proxySocket);
      server.emit("open", proxySocket);
      server.emit("proxySocket", proxySocket);
    });
    return proxyReq.end();
    function onOutgoingError(err2) {
      if (clb) {
        clb(err2, req2, socket);
      } else {
        server.emit("error", err2, req2, socket);
      }
      socket.end();
    }
  }
};
(function(module) {
  var httpProxy2 = module.exports, parse_url = import_url.default.parse, EE3 = eventemitter3Exports, http2 = import_http.default, https2 = import_https.default, web = webIncoming, ws = wsIncoming;
  httpProxy2.Server = ProxyServer2;
  function createRightProxy(type) {
    return function(options2) {
      return function(req2, res) {
        var passes = type === "ws" ? this.wsPasses : this.webPasses, args = [].slice.call(arguments), cntr = args.length - 1, head, cbl;
        if (typeof args[cntr] === "function") {
          cbl = args[cntr];
          cntr--;
        }
        var requestOptions = options2;
        if (!(args[cntr] instanceof Buffer) && args[cntr] !== res) {
          requestOptions = Object.assign({}, options2);
          Object.assign(requestOptions, args[cntr]);
          cntr--;
        }
        if (args[cntr] instanceof Buffer) {
          head = args[cntr];
        }
        ["target", "forward"].forEach(function(e2) {
          if (typeof requestOptions[e2] === "string")
            requestOptions[e2] = parse_url(requestOptions[e2]);
        });
        if (!requestOptions.target && !requestOptions.forward) {
          return this.emit("error", new Error("Must provide a proper URL as target"));
        }
        for (var i = 0; i < passes.length; i++) {
          if (passes[i](req2, res, requestOptions, head, this, cbl)) {
            break;
          }
        }
      };
    };
  }
  httpProxy2.createRightProxy = createRightProxy;
  function ProxyServer2(options2) {
    EE3.call(this);
    options2 = options2 || {};
    options2.prependPath = options2.prependPath === false ? false : true;
    this.web = this.proxyRequest = createRightProxy("web")(options2);
    this.ws = this.proxyWebsocketRequest = createRightProxy("ws")(options2);
    this.options = options2;
    this.webPasses = Object.keys(web).map(function(pass) {
      return web[pass];
    });
    this.wsPasses = Object.keys(ws).map(function(pass) {
      return ws[pass];
    });
    this.on("error", this.onError, this);
  }
  import_util.default.inherits(ProxyServer2, EE3);
  ProxyServer2.prototype.onError = function(err2) {
    if (this.listeners("error").length === 1) {
      throw err2;
    }
  };
  ProxyServer2.prototype.listen = function(port, hostname) {
    var self2 = this, closure = function(req2, res) {
      self2.web(req2, res);
    };
    this._server = this.options.ssl ? https2.createServer(this.options.ssl, closure) : http2.createServer(closure);
    if (this.options.ws) {
      this._server.on("upgrade", function(req2, socket, head) {
        self2.ws(req2, socket, head);
      });
    }
    this._server.listen(port, hostname);
    return this;
  };
  ProxyServer2.prototype.close = function(callback) {
    var self2 = this;
    if (this._server) {
      this._server.close(done);
    }
    function done() {
      self2._server = null;
      if (callback) {
        callback.apply(null, arguments);
      }
    }
  };
  ProxyServer2.prototype.before = function(type, passName, callback) {
    if (type !== "ws" && type !== "web") {
      throw new Error("type must be `web` or `ws`");
    }
    var passes = type === "ws" ? this.wsPasses : this.webPasses, i = false;
    passes.forEach(function(v, idx) {
      if (v.name === passName) i = idx;
    });
    if (i === false) throw new Error("No such pass");
    passes.splice(i, 0, callback);
  };
  ProxyServer2.prototype.after = function(type, passName, callback) {
    if (type !== "ws" && type !== "web") {
      throw new Error("type must be `web` or `ws`");
    }
    var passes = type === "ws" ? this.wsPasses : this.webPasses, i = false;
    passes.forEach(function(v, idx) {
      if (v.name === passName) i = idx;
    });
    if (i === false) throw new Error("No such pass");
    passes.splice(i++, 0, callback);
  };
})(httpProxy$3);
var httpProxyExports = httpProxy$3.exports;
var ProxyServer = httpProxyExports.Server;
function createProxyServer(options2) {
  return new ProxyServer(options2);
}
ProxyServer.createProxyServer = createProxyServer;
ProxyServer.createServer = createProxyServer;
ProxyServer.createProxy = createProxyServer;
var httpProxy$2 = ProxyServer;
var httpProxy = httpProxy$2;
var httpProxy$1 = getDefaultExportFromCjs(httpProxy);
var debug$5 = createDebugger("vite:proxy");
var rewriteOriginHeader = (proxyReq, options2, config2) => {
  if (options2.rewriteWsOrigin) {
    const { target } = options2;
    if (proxyReq.headersSent) {
      config2.logger.warn(
        colors$1.yellow(
          `Unable to rewrite Origin header as headers are already sent.`
        )
      );
      return;
    }
    if (proxyReq.getHeader("origin") && target) {
      const changedOrigin = typeof target === "object" ? `${target.protocol}//${target.host}` : target;
      proxyReq.setHeader("origin", changedOrigin);
    }
  }
};
function proxyMiddleware(httpServer, options2, config2) {
  const proxies = {};
  Object.keys(options2).forEach((context) => {
    let opts = options2[context];
    if (!opts) {
      return;
    }
    if (typeof opts === "string") {
      opts = { target: opts, changeOrigin: true };
    }
    const proxy = httpProxy$1.createProxyServer(opts);
    if (opts.configure) {
      opts.configure(proxy, opts);
    }
    proxy.on("error", (err2, _req, originalRes) => {
      const res = originalRes;
      if (!res) {
        config2.logger.error(
          `${colors$1.red(`http proxy error: ${err2.message}`)}
${err2.stack}`,
          {
            timestamp: true,
            error: err2
          }
        );
      } else if ("req" in res) {
        config2.logger.error(
          `${colors$1.red(`http proxy error: ${originalRes.req.url}`)}
${err2.stack}`,
          {
            timestamp: true,
            error: err2
          }
        );
        if (!res.headersSent && !res.writableEnded) {
          res.writeHead(500, {
            "Content-Type": "text/plain"
          }).end();
        }
      } else {
        config2.logger.error(`${colors$1.red(`ws proxy error:`)}
${err2.stack}`, {
          timestamp: true,
          error: err2
        });
        res.end();
      }
    });
    proxy.on("proxyReqWs", (proxyReq, _req, socket, options22) => {
      rewriteOriginHeader(proxyReq, options22, config2);
      socket.on("error", (err2) => {
        config2.logger.error(
          `${colors$1.red(`ws proxy socket error:`)}
${err2.stack}`,
          {
            timestamp: true,
            error: err2
          }
        );
      });
    });
    proxy.on("proxyRes", (proxyRes, _req, res) => {
      res.on("close", () => {
        if (!res.writableEnded) {
          debug$5 == null ? void 0 : debug$5("destroying proxyRes in proxyRes close event");
          proxyRes.destroy();
        }
      });
    });
    proxies[context] = [proxy, { ...opts }];
  });
  if (httpServer) {
    httpServer.on("upgrade", async (req2, socket, head) => {
      var _a2, _b;
      const url2 = req2.url;
      for (const context in proxies) {
        if (doesProxyContextMatchUrl(context, url2)) {
          const [proxy, opts] = proxies[context];
          if (opts.ws || ((_a2 = opts.target) == null ? void 0 : _a2.toString().startsWith("ws:")) || ((_b = opts.target) == null ? void 0 : _b.toString().startsWith("wss:"))) {
            if (opts.bypass) {
              try {
                const bypassResult = await opts.bypass(req2, void 0, opts);
                if (typeof bypassResult === "string") {
                  debug$5 == null ? void 0 : debug$5(`bypass: ${req2.url} -> ${bypassResult}`);
                  req2.url = bypassResult;
                  return;
                }
                if (bypassResult === false) {
                  debug$5 == null ? void 0 : debug$5(`bypass: ${req2.url} -> 404`);
                  socket.end("HTTP/1.1 404 Not Found\r\n\r\n", "");
                  return;
                }
              } catch (err2) {
                config2.logger.error(
                  `${colors$1.red(`ws proxy bypass error:`)}
${err2.stack}`,
                  {
                    timestamp: true,
                    error: err2
                  }
                );
                return;
              }
            }
            if (opts.rewrite) {
              req2.url = opts.rewrite(url2);
            }
            debug$5 == null ? void 0 : debug$5(`${req2.url} -> ws ${opts.target}`);
            proxy.ws(req2, socket, head);
            return;
          }
        }
      }
    });
  }
  return async function viteProxyMiddleware(req2, res, next) {
    const url2 = req2.url;
    for (const context in proxies) {
      if (doesProxyContextMatchUrl(context, url2)) {
        const [proxy, opts] = proxies[context];
        const options22 = {};
        if (opts.bypass) {
          try {
            const bypassResult = await opts.bypass(req2, res, opts);
            if (typeof bypassResult === "string") {
              debug$5 == null ? void 0 : debug$5(`bypass: ${req2.url} -> ${bypassResult}`);
              req2.url = bypassResult;
              if (res.writableEnded) {
                return;
              }
              return next();
            }
            if (bypassResult === false) {
              debug$5 == null ? void 0 : debug$5(`bypass: ${req2.url} -> 404`);
              res.statusCode = 404;
              return res.end();
            }
          } catch (e2) {
            debug$5 == null ? void 0 : debug$5(`bypass: ${req2.url} -> ${e2}`);
            return next(e2);
          }
        }
        debug$5 == null ? void 0 : debug$5(`${req2.url} -> ${opts.target || opts.forward}`);
        if (opts.rewrite) {
          req2.url = opts.rewrite(req2.url);
        }
        proxy.web(req2, res, options22);
        return;
      }
    }
    next();
  };
}
function doesProxyContextMatchUrl(context, url2) {
  return context[0] === "^" && new RegExp(context).test(url2) || url2.startsWith(context);
}
var debug$4 = createDebugger("vite:html-fallback");
function htmlFallbackMiddleware(root, spaFallback) {
  return function viteHtmlFallbackMiddleware(req2, _res, next) {
    if (
      // Only accept GET or HEAD
      req2.method !== "GET" && req2.method !== "HEAD" || // Exclude default favicon requests
      req2.url === "/favicon.ico" || // Require Accept: text/html or */*
      !(req2.headers.accept === void 0 || // equivalent to `Accept: */*`
      req2.headers.accept === "" || // equivalent to `Accept: */*`
      req2.headers.accept.includes("text/html") || req2.headers.accept.includes("*/*"))
    ) {
      return next();
    }
    const url2 = cleanUrl2(req2.url);
    const pathname = decodeURIComponent(url2);
    if (pathname.endsWith(".html")) {
      const filePath = import_node_path3.default.join(root, pathname);
      if (import_node_fs2.default.existsSync(filePath)) {
        debug$4 == null ? void 0 : debug$4(`Rewriting ${req2.method} ${req2.url} to ${url2}`);
        req2.url = url2;
        return next();
      }
    } else if (pathname.endsWith("/")) {
      const filePath = import_node_path3.default.join(root, pathname, "index.html");
      if (import_node_fs2.default.existsSync(filePath)) {
        const newUrl = url2 + "index.html";
        debug$4 == null ? void 0 : debug$4(`Rewriting ${req2.method} ${req2.url} to ${newUrl}`);
        req2.url = newUrl;
        return next();
      }
    } else {
      const filePath = import_node_path3.default.join(root, pathname + ".html");
      if (import_node_fs2.default.existsSync(filePath)) {
        const newUrl = url2 + ".html";
        debug$4 == null ? void 0 : debug$4(`Rewriting ${req2.method} ${req2.url} to ${newUrl}`);
        req2.url = newUrl;
        return next();
      }
    }
    if (spaFallback) {
      debug$4 == null ? void 0 : debug$4(`Rewriting ${req2.method} ${req2.url} to /index.html`);
      req2.url = "/index.html";
    }
    next();
  };
}
var etag_1 = etag;
var crypto = import_crypto.default;
var Stats = import_fs.default.Stats;
var toString = Object.prototype.toString;
function entitytag(entity) {
  if (entity.length === 0) {
    return '"0-2jmj7l5rSw0yVb/vlWAYkK/YBwk"';
  }
  var hash2 = crypto.createHash("sha1").update(entity, "utf8").digest("base64").substring(0, 27);
  var len = typeof entity === "string" ? Buffer.byteLength(entity, "utf8") : entity.length;
  return '"' + len.toString(16) + "-" + hash2 + '"';
}
function etag(entity, options2) {
  if (entity == null) {
    throw new TypeError("argument entity is required");
  }
  var isStats = isstats(entity);
  var weak = options2 && typeof options2.weak === "boolean" ? options2.weak : isStats;
  if (!isStats && typeof entity !== "string" && !Buffer.isBuffer(entity)) {
    throw new TypeError("argument entity must be string, Buffer, or fs.Stats");
  }
  var tag = isStats ? stattag(entity) : entitytag(entity);
  return weak ? "W/" + tag : tag;
}
function isstats(obj) {
  if (typeof Stats === "function" && obj instanceof Stats) {
    return true;
  }
  return obj && typeof obj === "object" && "ctime" in obj && toString.call(obj.ctime) === "[object Date]" && "mtime" in obj && toString.call(obj.mtime) === "[object Date]" && "ino" in obj && typeof obj.ino === "number" && "size" in obj && typeof obj.size === "number";
}
function stattag(stat2) {
  var mtime = stat2.mtime.getTime().toString(16);
  var size = stat2.size.toString(16);
  return '"' + size + "-" + mtime + '"';
}
var getEtag = getDefaultExportFromCjs(etag_1);
var debug$3 = createDebugger("vite:send", {
  onlyWhenFocused: true
});
var alias = {
  js: "text/javascript",
  css: "text/css",
  html: "text/html",
  json: "application/json"
};
function send$1(req2, res, content, type, options2) {
  const {
    etag: etag2 = getEtag(content, { weak: true }),
    cacheControl = "no-cache",
    headers,
    map: map2
  } = options2;
  if (res.writableEnded) {
    return;
  }
  if (req2.headers["if-none-match"] === etag2) {
    res.statusCode = 304;
    res.end();
    return;
  }
  res.setHeader("Content-Type", alias[type] || type);
  res.setHeader("Cache-Control", cacheControl);
  res.setHeader("Etag", etag2);
  if (headers) {
    for (const name in headers) {
      res.setHeader(name, headers[name]);
    }
  }
  if (map2 && "version" in map2 && map2.mappings) {
    if (type === "js" || type === "css") {
      content = getCodeWithSourcemap(type, content.toString(), map2);
    }
  } else if (type === "js" && (!map2 || map2.mappings !== "")) {
    const code = content.toString();
    if (convertSourceMap.mapFileCommentRegex.test(code)) {
      debug$3 == null ? void 0 : debug$3(`Skipped injecting fallback sourcemap for ${req2.url}`);
    } else {
      const urlWithoutTimestamp = removeTimestampQuery(req2.url);
      const ms2 = new MagicString(code);
      content = getCodeWithSourcemap(
        type,
        code,
        ms2.generateMap({
          source: import_node_path3.default.basename(urlWithoutTimestamp),
          hires: "boundary",
          includeContent: true
        })
      );
    }
  }
  res.statusCode = 200;
  res.end(content);
  return;
}
function totalist(dir, callback, pre = "") {
  dir = (0, import_path2.resolve)(".", dir);
  let arr = (0, import_fs.readdirSync)(dir);
  let i = 0, abs, stats;
  for (; i < arr.length; i++) {
    abs = (0, import_path2.join)(dir, arr[i]);
    stats = (0, import_fs.statSync)(abs);
    stats.isDirectory() ? totalist(abs, callback, (0, import_path2.join)(pre, arr[i])) : callback((0, import_path2.join)(pre, arr[i]), abs, stats);
  }
}
function parse3(req2) {
  let raw = req2.url;
  if (raw == null) return;
  let prev = req2._parsedUrl;
  if (prev && prev.raw === raw) return prev;
  let pathname = raw, search = "", query;
  if (raw.length > 1) {
    let idx = raw.indexOf("?", 1);
    if (idx !== -1) {
      search = raw.substring(idx);
      pathname = raw.substring(0, idx);
      if (search.length > 1) {
        query = qs.parse(search.substring(1));
      }
    }
  }
  return req2._parsedUrl = { pathname, search, query, raw };
}
var noop2 = () => {
};
function isMatch(uri, arr) {
  for (let i = 0; i < arr.length; i++) {
    if (arr[i].test(uri)) return true;
  }
}
function toAssume(uri, extns) {
  let i = 0, x, len = uri.length - 1;
  if (uri.charCodeAt(len) === 47) {
    uri = uri.substring(0, len);
  }
  let arr = [], tmp = `${uri}/index`;
  for (; i < extns.length; i++) {
    x = extns[i] ? `.${extns[i]}` : "";
    if (uri) arr.push(uri + x);
    arr.push(tmp + x);
  }
  return arr;
}
function viaCache(cache, uri, extns) {
  let i = 0, data, arr = toAssume(uri, extns);
  for (; i < arr.length; i++) {
    if (data = cache[arr[i]]) return data;
  }
}
function viaLocal(dir, isEtag, uri, extns, shouldServe) {
  let i = 0, arr = toAssume(uri, extns);
  let abs, stats, name, headers;
  for (; i < arr.length; i++) {
    abs = (0, import_node_path3.normalize)((0, import_node_path3.join)(dir, name = arr[i]));
    if (abs.startsWith(dir) && fs$8.existsSync(abs)) {
      stats = fs$8.statSync(abs);
      if (stats.isDirectory()) continue;
      if (shouldServe && !shouldServe(abs)) continue;
      headers = toHeaders(name, stats, isEtag);
      headers["Cache-Control"] = isEtag ? "no-cache" : "no-store";
      return { abs, stats, headers };
    }
  }
}
function is404(req2, res) {
  return res.statusCode = 404, res.end();
}
function send(req2, res, file, stats, headers) {
  let code = 200, tmp, opts = {};
  headers = { ...headers };
  for (let key in headers) {
    tmp = res.getHeader(key);
    if (tmp) headers[key] = tmp;
  }
  if (tmp = res.getHeader("content-type")) {
    headers["Content-Type"] = tmp;
  }
  if (req2.headers.range) {
    code = 206;
    let [x, y2] = req2.headers.range.replace("bytes=", "").split("-");
    let end = opts.end = parseInt(y2, 10) || stats.size - 1;
    let start = opts.start = parseInt(x, 10) || 0;
    if (end >= stats.size) {
      end = stats.size - 1;
    }
    if (start >= stats.size) {
      res.setHeader("Content-Range", `bytes */${stats.size}`);
      res.statusCode = 416;
      return res.end();
    }
    headers["Content-Range"] = `bytes ${start}-${end}/${stats.size}`;
    headers["Content-Length"] = end - start + 1;
    headers["Accept-Ranges"] = "bytes";
  }
  res.writeHead(code, headers);
  fs$8.createReadStream(file, opts).pipe(res);
}
var ENCODING = {
  ".br": "br",
  ".gz": "gzip"
};
function toHeaders(name, stats, isEtag) {
  let enc = ENCODING[name.slice(-3)];
  let ctype = lookup(name.slice(0, enc && -3)) || "";
  if (ctype === "text/html") ctype += ";charset=utf-8";
  let headers = {
    "Content-Length": stats.size,
    "Content-Type": ctype,
    "Last-Modified": stats.mtime.toUTCString()
  };
  if (enc) headers["Content-Encoding"] = enc;
  if (isEtag) headers["ETag"] = `W/"${stats.size}-${stats.mtime.getTime()}"`;
  return headers;
}
function sirv(dir, opts = {}) {
  dir = (0, import_node_path3.resolve)(dir || ".");
  let isNotFound = opts.onNoMatch || is404;
  let setHeaders2 = opts.setHeaders || noop2;
  let extensions2 = opts.extensions || ["html", "htm"];
  let gzips = opts.gzip && extensions2.map((x) => `${x}.gz`).concat("gz");
  let brots = opts.brotli && extensions2.map((x) => `${x}.br`).concat("br");
  const FILES = {};
  let fallback = "/";
  let isEtag = !!opts.etag;
  let isSPA = !!opts.single;
  if (typeof opts.single === "string") {
    let idx = opts.single.lastIndexOf(".");
    fallback += !!~idx ? opts.single.substring(0, idx) : opts.single;
  }
  let ignores = [];
  if (opts.ignores !== false) {
    ignores.push(/[/]([A-Za-z\s\d~$._-]+\.\w+){1,}$/);
    if (opts.dotfiles) ignores.push(/\/\.\w/);
    else ignores.push(/\/\.well-known/);
    [].concat(opts.ignores || []).forEach((x) => {
      ignores.push(new RegExp(x, "i"));
    });
  }
  let cc = opts.maxAge != null && `public,max-age=${opts.maxAge}`;
  if (cc && opts.immutable) cc += ",immutable";
  else if (cc && opts.maxAge === 0) cc += ",must-revalidate";
  if (!opts.dev) {
    totalist(dir, (name, abs, stats) => {
      if (/\.well-known[\\+\/]/.test(name)) ;
      else if (!opts.dotfiles && /(^\.|[\\+|\/+]\.)/.test(name)) return;
      let headers = toHeaders(name, stats, isEtag);
      if (cc) headers["Cache-Control"] = cc;
      FILES["/" + name.normalize().replace(/\\+/g, "/")] = { abs, stats, headers };
    });
  }
  let lookup2 = opts.dev ? viaLocal.bind(0, dir, isEtag) : viaCache.bind(0, FILES);
  return function(req2, res, next) {
    let extns = [""];
    let pathname = parse3(req2).pathname;
    let val = req2.headers["accept-encoding"] || "";
    if (gzips && val.includes("gzip")) extns.unshift(...gzips);
    if (brots && /(br|brotli)/i.test(val)) extns.unshift(...brots);
    extns.push(...extensions2);
    if (pathname.indexOf("%") !== -1) {
      try {
        pathname = decodeURI(pathname);
      } catch (err2) {
      }
    }
    let data = lookup2(pathname, extns, opts.shouldServe) || isSPA && !isMatch(pathname, ignores) && lookup2(fallback, extns, opts.shouldServe);
    if (!data) return next ? next() : isNotFound(req2, res);
    if (isEtag && req2.headers["if-none-match"] === data.headers["ETag"]) {
      res.writeHead(304);
      return res.end();
    }
    if (gzips || brots) {
      res.setHeader("Vary", "Accept-Encoding");
    }
    setHeaders2(res, pathname, data.stats);
    send(req2, res, data.abs, data.stats, data.headers);
  };
}
var knownJavascriptExtensionRE = /\.(?:[tj]sx?|[cm][tj]s)$/;
var ERR_DENIED_FILE = "ERR_DENIED_FILE";
var sirvOptions = ({
  config: config2,
  getHeaders,
  disableFsServeCheck
}) => {
  return {
    dev: true,
    etag: true,
    extensions: [],
    setHeaders(res, pathname) {
      if (knownJavascriptExtensionRE.test(pathname)) {
        res.setHeader("Content-Type", "text/javascript");
      }
      const headers = getHeaders();
      if (headers) {
        for (const name in headers) {
          res.setHeader(name, headers[name]);
        }
      }
    },
    shouldServe: disableFsServeCheck ? void 0 : (filePath) => {
      const servingAccessResult = checkLoadingAccess(config2, filePath);
      if (servingAccessResult === "denied") {
        const error2 = new Error("denied access");
        error2.code = ERR_DENIED_FILE;
        error2.path = filePath;
        throw error2;
      }
      if (servingAccessResult === "fallback") {
        return false;
      }
      return true;
    }
  };
};
function servePublicMiddleware(server, publicFiles) {
  const dir = server.config.publicDir;
  const serve = sirv(
    dir,
    sirvOptions({
      config: server.config,
      getHeaders: () => server.config.server.headers,
      disableFsServeCheck: true
    })
  );
  const toFilePath = (url2) => {
    let filePath = cleanUrl2(url2);
    if (filePath.indexOf("%") !== -1) {
      try {
        filePath = decodeURI(filePath);
      } catch {
      }
    }
    return normalizePath$3(filePath);
  };
  return function viteServePublicMiddleware(req2, res, next) {
    if (publicFiles && !publicFiles.has(toFilePath(req2.url)) || isImportRequest(req2.url) || isInternalRequest(req2.url) || // for `/public-file.js?url` to be transformed
    urlRE$1.test(req2.url)) {
      return next();
    }
    serve(req2, res, next);
  };
}
function serveStaticMiddleware(server) {
  const dir = server.config.root;
  const serve = sirv(
    dir,
    sirvOptions({
      config: server.config,
      getHeaders: () => server.config.server.headers
    })
  );
  return function viteServeStaticMiddleware(req2, res, next) {
    var _a2;
    const cleanedUrl = cleanUrl2(req2.url);
    if (cleanedUrl.endsWith("/") || import_node_path3.default.extname(cleanedUrl) === ".html" || isInternalRequest(req2.url) || // skip url starting with // as these will be interpreted as
    // scheme relative URLs by new URL() and will not be a valid file path
    ((_a2 = req2.url) == null ? void 0 : _a2.startsWith("//"))) {
      return next();
    }
    const url2 = new URL(req2.url, "http://example.com");
    const pathname = decodeURI(url2.pathname);
    let redirectedPathname;
    for (const { find: find2, replacement } of server.config.resolve.alias) {
      const matches2 = typeof find2 === "string" ? pathname.startsWith(find2) : find2.test(pathname);
      if (matches2) {
        redirectedPathname = pathname.replace(find2, replacement);
        break;
      }
    }
    if (redirectedPathname) {
      if (redirectedPathname.startsWith(withTrailingSlash(dir))) {
        redirectedPathname = redirectedPathname.slice(dir.length);
      }
    }
    const resolvedPathname = redirectedPathname || pathname;
    let fileUrl = import_node_path3.default.resolve(dir, removeLeadingSlash(resolvedPathname));
    if (resolvedPathname.endsWith("/") && fileUrl[fileUrl.length - 1] !== "/") {
      fileUrl = withTrailingSlash(fileUrl);
    }
    if (redirectedPathname) {
      url2.pathname = encodeURI(redirectedPathname);
      req2.url = url2.href.slice(url2.origin.length);
    }
    try {
      serve(req2, res, next);
    } catch (e2) {
      if (e2 && "code" in e2 && e2.code === ERR_DENIED_FILE) {
        respondWithAccessDenied(e2.path, server, res);
        return;
      }
      throw e2;
    }
  };
}
function serveRawFsMiddleware(server) {
  const serveFromRoot = sirv(
    "/",
    sirvOptions({
      config: server.config,
      getHeaders: () => server.config.server.headers
    })
  );
  return function viteServeRawFsMiddleware(req2, res, next) {
    if (req2.url.startsWith(FS_PREFIX)) {
      const url2 = new URL(req2.url, "http://example.com");
      const pathname = decodeURI(url2.pathname);
      let newPathname = pathname.slice(FS_PREFIX.length);
      if (isWindows$3) newPathname = newPathname.replace(/^[A-Z]:/i, "");
      url2.pathname = encodeURI(newPathname);
      req2.url = url2.href.slice(url2.origin.length);
      try {
        serveFromRoot(req2, res, next);
      } catch (e2) {
        if (e2 && "code" in e2 && e2.code === ERR_DENIED_FILE) {
          respondWithAccessDenied(e2.path, server, res);
          return;
        }
        throw e2;
      }
    } else {
      next();
    }
  };
}
function isFileServingAllowed(configOrUrl, urlOrServer) {
  const config2 = typeof urlOrServer === "string" ? configOrUrl : urlOrServer.config;
  const url2 = typeof urlOrServer === "string" ? urlOrServer : configOrUrl;
  if (!config2.server.fs.strict) return true;
  const filePath = fsPathFromUrl(url2);
  return isFileLoadingAllowed(config2, filePath);
}
function isUriInFilePath(uri, filePath) {
  return isSameFileUri(uri, filePath) || isParentDirectory(uri, filePath);
}
function isFileLoadingAllowed(config2, filePath) {
  const { fs: fs2 } = config2.server;
  if (!fs2.strict) return true;
  if (config2.fsDenyGlob(filePath)) return false;
  if (config2.safeModulePaths.has(filePath)) return true;
  if (fs2.allow.some((uri) => isUriInFilePath(uri, filePath))) return true;
  return false;
}
function checkLoadingAccess(config2, path22) {
  if (isFileLoadingAllowed(config2, slash$1(path22))) {
    return "allowed";
  }
  if (isFileReadable(path22)) {
    return "denied";
  }
  return "fallback";
}
function checkServingAccess(url2, server) {
  if (isFileServingAllowed(url2, server)) {
    return "allowed";
  }
  if (isFileReadable(cleanUrl2(url2))) {
    return "denied";
  }
  return "fallback";
}
function respondWithAccessDenied(url2, server, res) {
  const urlMessage = `The request url "${url2}" is outside of Vite serving allow list.`;
  const hintMessage = `
${server.config.server.fs.allow.map((i) => `- ${i}`).join("\n")}

Refer to docs https://vite.dev/config/server-options.html#server-fs-allow for configurations and more details.`;
  server.config.logger.error(urlMessage);
  server.config.logger.warnOnce(hintMessage + "\n");
  res.statusCode = 403;
  res.write(renderRestrictedErrorHTML(urlMessage + "\n" + hintMessage));
  res.end();
}
function renderRestrictedErrorHTML(msg) {
  const html = String.raw;
  return html`
    <body>
      <h1>403 Restricted</h1>
      <p>${escapeHtml$2(msg).replace(/\n/g, "<br/>")}</p>
      <style>
        body {
          padding: 1em 2em;
        }
      </style>
    </body>
  `;
}
var ERR_LOAD_URL = "ERR_LOAD_URL";
var ERR_LOAD_PUBLIC_URL = "ERR_LOAD_PUBLIC_URL";
var ERR_DENIED_ID = "ERR_DENIED_ID";
var debugLoad = createDebugger("vite:load");
var debugTransform = createDebugger("vite:transform");
var debugCache$1 = createDebugger("vite:cache");
function transformRequest(environment, url2, options2 = {}) {
  if (!options2.ssr) {
    options2 = { ...options2, ssr: environment.config.consumer === "server" };
  }
  if (environment._closing && environment.config.dev.recoverable)
    throwClosedServerError();
  const cacheKey = `${options2.html ? "html:" : ""}${url2}`;
  const timestamp = Date.now();
  const pending = environment._pendingRequests.get(cacheKey);
  if (pending) {
    return environment.moduleGraph.getModuleByUrl(removeTimestampQuery(url2)).then((module) => {
      if (!module || pending.timestamp > module.lastInvalidationTimestamp) {
        return pending.request;
      } else {
        pending.abort();
        return transformRequest(environment, url2, options2);
      }
    });
  }
  const request = doTransform(environment, url2, options2, timestamp);
  let cleared = false;
  const clearCache = () => {
    if (!cleared) {
      environment._pendingRequests.delete(cacheKey);
      cleared = true;
    }
  };
  environment._pendingRequests.set(cacheKey, {
    request,
    timestamp,
    abort: clearCache
  });
  return request.finally(clearCache);
}
async function doTransform(environment, url2, options2, timestamp) {
  url2 = removeTimestampQuery(url2);
  const { pluginContainer } = environment;
  let module = await environment.moduleGraph.getModuleByUrl(url2);
  if (module) {
    const cached = await getCachedTransformResult(
      environment,
      url2,
      module,
      timestamp
    );
    if (cached) return cached;
  }
  const resolved = module ? void 0 : await pluginContainer.resolveId(url2, void 0) ?? void 0;
  const id = (module == null ? void 0 : module.id) ?? (resolved == null ? void 0 : resolved.id) ?? url2;
  module ?? (module = environment.moduleGraph.getModuleById(id));
  if (module) {
    await environment.moduleGraph._ensureEntryFromUrl(url2, void 0, resolved);
    const cached = await getCachedTransformResult(
      environment,
      url2,
      module,
      timestamp
    );
    if (cached) return cached;
  }
  const result = loadAndTransform(
    environment,
    id,
    url2,
    options2,
    timestamp,
    module,
    resolved
  );
  const { depsOptimizer } = environment;
  if (!(depsOptimizer == null ? void 0 : depsOptimizer.isOptimizedDepFile(id))) {
    environment._registerRequestProcessing(id, () => result);
  }
  return result;
}
async function getCachedTransformResult(environment, url2, module, timestamp) {
  const prettyUrl = debugCache$1 ? prettifyUrl(url2, environment.config.root) : "";
  const softInvalidatedTransformResult = await handleModuleSoftInvalidation(
    environment,
    module,
    timestamp
  );
  if (softInvalidatedTransformResult) {
    debugCache$1 == null ? void 0 : debugCache$1(`[memory-hmr] ${prettyUrl}`);
    return softInvalidatedTransformResult;
  }
  const cached = module.transformResult;
  if (cached) {
    debugCache$1 == null ? void 0 : debugCache$1(`[memory] ${prettyUrl}`);
    return cached;
  }
}
async function loadAndTransform(environment, id, url2, options2, timestamp, mod, resolved) {
  var _a2;
  const { config: config2, pluginContainer, logger } = environment;
  const prettyUrl = debugLoad || debugTransform ? prettifyUrl(url2, config2.root) : "";
  const moduleGraph = environment.moduleGraph;
  if (options2.allowId && !options2.allowId(id)) {
    const err2 = new Error(`Denied ID ${id}`);
    err2.code = ERR_DENIED_ID;
    throw err2;
  }
  let code = null;
  let map2 = null;
  const loadStart = debugLoad ? import_node_perf_hooks.performance.now() : 0;
  const loadResult = await pluginContainer.load(id);
  if (loadResult == null) {
    const file = cleanUrl2(id);
    if (options2.html && !id.endsWith(".html")) {
      return null;
    }
    if (environment.config.consumer === "server" || isFileLoadingAllowed(environment.getTopLevelConfig(), file)) {
      try {
        code = await import_promises.default.readFile(file, "utf-8");
        debugLoad == null ? void 0 : debugLoad(`${timeFrom(loadStart)} [fs] ${prettyUrl}`);
      } catch (e2) {
        if (e2.code !== "ENOENT") {
          if (e2.code === "EISDIR") {
            e2.message = `${e2.message} ${file}`;
          }
          throw e2;
        }
      }
      if (code != null && environment.pluginContainer.watcher) {
        ensureWatchedFile(
          environment.pluginContainer.watcher,
          file,
          config2.root
        );
      }
    }
    if (code) {
      try {
        const extracted = await extractSourcemapFromFile(code, file);
        if (extracted) {
          code = extracted.code;
          map2 = extracted.map;
        }
      } catch (e2) {
        logger.warn(`Failed to load source map for ${file}.
${e2}`, {
          timestamp: true
        });
      }
    }
  } else {
    debugLoad == null ? void 0 : debugLoad(`${timeFrom(loadStart)} [plugin] ${prettyUrl}`);
    if (isObject$1(loadResult)) {
      code = loadResult.code;
      map2 = loadResult.map;
    } else {
      code = loadResult;
    }
  }
  if (code == null) {
    const isPublicFile = checkPublicFile(url2, environment.getTopLevelConfig());
    let publicDirName = import_node_path3.default.relative(config2.root, config2.publicDir);
    if (publicDirName[0] !== ".") publicDirName = "/" + publicDirName;
    const msg = isPublicFile ? `This file is in ${publicDirName} and will be copied as-is during build without going through the plugin transforms, and therefore should not be imported from source code. It can only be referenced via HTML tags.` : `Does the file exist?`;
    const importerMod = (_a2 = moduleGraph.idToModuleMap.get(id)) == null ? void 0 : _a2.importers.values().next().value;
    const importer = (importerMod == null ? void 0 : importerMod.file) || (importerMod == null ? void 0 : importerMod.url);
    const err2 = new Error(
      `Failed to load url ${url2} (resolved id: ${id})${importer ? ` in ${importer}` : ""}. ${msg}`
    );
    err2.code = isPublicFile ? ERR_LOAD_PUBLIC_URL : ERR_LOAD_URL;
    throw err2;
  }
  if (environment._closing && environment.config.dev.recoverable)
    throwClosedServerError();
  mod ?? (mod = await moduleGraph._ensureEntryFromUrl(url2, void 0, resolved));
  const transformStart = debugTransform ? import_node_perf_hooks.performance.now() : 0;
  const transformResult = await pluginContainer.transform(code, id, {
    inMap: map2
  });
  const originalCode = code;
  if (transformResult.code === originalCode) {
    debugTransform == null ? void 0 : debugTransform(
      timeFrom(transformStart) + colors$1.dim(` [skipped] ${prettyUrl}`)
    );
  } else {
    debugTransform == null ? void 0 : debugTransform(`${timeFrom(transformStart)} ${prettyUrl}`);
    code = transformResult.code;
    map2 = transformResult.map;
  }
  let normalizedMap;
  if (typeof map2 === "string") {
    normalizedMap = JSON.parse(map2);
  } else if (map2) {
    normalizedMap = map2;
  } else {
    normalizedMap = null;
  }
  if (normalizedMap && "version" in normalizedMap && mod.file) {
    if (normalizedMap.mappings) {
      await injectSourcesContent(normalizedMap, mod.file, logger);
    }
    const sourcemapPath = `${mod.file}.map`;
    applySourcemapIgnoreList(
      normalizedMap,
      sourcemapPath,
      config2.server.sourcemapIgnoreList,
      logger
    );
    if (import_node_path3.default.isAbsolute(mod.file)) {
      let modDirname;
      for (let sourcesIndex = 0; sourcesIndex < normalizedMap.sources.length; ++sourcesIndex) {
        const sourcePath = normalizedMap.sources[sourcesIndex];
        if (sourcePath) {
          if (import_node_path3.default.isAbsolute(sourcePath)) {
            modDirname ?? (modDirname = import_node_path3.default.dirname(mod.file));
            normalizedMap.sources[sourcesIndex] = import_node_path3.default.relative(
              modDirname,
              sourcePath
            );
          }
        }
      }
    }
  }
  if (environment._closing && environment.config.dev.recoverable)
    throwClosedServerError();
  const topLevelConfig = environment.getTopLevelConfig();
  const result = environment.config.dev.moduleRunnerTransform ? await ssrTransform(code, normalizedMap, url2, originalCode, {
    json: {
      stringify: topLevelConfig.json.stringify === true && topLevelConfig.json.namedExports !== true
    }
  }) : {
    code,
    map: normalizedMap,
    etag: getEtag(code, { weak: true })
  };
  if (timestamp > mod.lastInvalidationTimestamp)
    moduleGraph.updateModuleTransformResult(mod, result);
  return result;
}
async function handleModuleSoftInvalidation(environment, mod, timestamp) {
  const transformResult = mod.invalidationState;
  mod.invalidationState = void 0;
  if (!transformResult || transformResult === "HARD_INVALIDATED") return;
  if (mod.transformResult) {
    throw new Error(
      `Internal server error: Soft-invalidated module "${mod.url}" should not have existing transform result`
    );
  }
  let result;
  if (transformResult.ssr) {
    result = transformResult;
  } else {
    await init;
    const source = transformResult.code;
    const s2 = new MagicString(source);
    const [imports] = parse$d(source, mod.id || void 0);
    for (const imp of imports) {
      let rawUrl = source.slice(imp.s, imp.e);
      if (rawUrl === "import.meta") continue;
      const hasQuotes = rawUrl[0] === '"' || rawUrl[0] === "'";
      if (hasQuotes) {
        rawUrl = rawUrl.slice(1, -1);
      }
      const urlWithoutTimestamp = removeTimestampQuery(rawUrl);
      const hmrUrl = unwrapId$1(
        stripBase(
          removeImportQuery(urlWithoutTimestamp),
          environment.config.base
        )
      );
      for (const importedMod of mod.importedModules) {
        if (importedMod.url !== hmrUrl) continue;
        if (importedMod.lastHMRTimestamp > 0) {
          const replacedUrl = injectQuery(
            urlWithoutTimestamp,
            `t=${importedMod.lastHMRTimestamp}`
          );
          const start = hasQuotes ? imp.s + 1 : imp.s;
          const end = hasQuotes ? imp.e - 1 : imp.e;
          s2.overwrite(start, end, replacedUrl);
        }
        if (imp.d === -1 && environment.config.dev.preTransformRequests) {
          environment.warmupRequest(hmrUrl);
        }
        break;
      }
    }
    const code = s2.toString();
    result = {
      ...transformResult,
      code,
      etag: getEtag(code, { weak: true })
    };
  }
  if (timestamp > mod.lastInvalidationTimestamp)
    environment.moduleGraph.updateModuleTransformResult(mod, result);
  return result;
}
var ALLOWED_META_NAME = [
  "msapplication-tileimage",
  "msapplication-square70x70logo",
  "msapplication-square150x150logo",
  "msapplication-wide310x150logo",
  "msapplication-square310x310logo",
  "msapplication-config",
  "twitter:image"
];
var ALLOWED_META_PROPERTY = [
  "og:image",
  "og:image:url",
  "og:image:secure_url",
  "og:audio",
  "og:audio:secure_url",
  "og:video",
  "og:video:secure_url"
];
var DEFAULT_HTML_ASSET_SOURCES = {
  audio: {
    srcAttributes: ["src"]
  },
  embed: {
    srcAttributes: ["src"]
  },
  img: {
    srcAttributes: ["src"],
    srcsetAttributes: ["srcset"]
  },
  image: {
    srcAttributes: ["href", "xlink:href"]
  },
  input: {
    srcAttributes: ["src"]
  },
  link: {
    srcAttributes: ["href"],
    srcsetAttributes: ["imagesrcset"]
  },
  object: {
    srcAttributes: ["data"]
  },
  source: {
    srcAttributes: ["src"],
    srcsetAttributes: ["srcset"]
  },
  track: {
    srcAttributes: ["src"]
  },
  use: {
    srcAttributes: ["href", "xlink:href"]
  },
  video: {
    srcAttributes: ["src", "poster"]
  },
  meta: {
    srcAttributes: ["content"],
    filter({ attributes }) {
      if (attributes.name && ALLOWED_META_NAME.includes(attributes.name.trim().toLowerCase())) {
        return true;
      }
      if (attributes.property && ALLOWED_META_PROPERTY.includes(attributes.property.trim().toLowerCase())) {
        return true;
      }
      return false;
    }
  }
};
function getNodeAssetAttributes(node2) {
  var _a2, _b;
  const matched = DEFAULT_HTML_ASSET_SOURCES[node2.nodeName];
  if (!matched) return [];
  const attributes = {};
  for (const attr of node2.attrs) {
    attributes[getAttrKey(attr)] = attr.value;
  }
  if ("vite-ignore" in attributes) {
    return [
      {
        type: "remove",
        key: "vite-ignore",
        value: "",
        attributes,
        location: node2.sourceCodeLocation.attrs["vite-ignore"]
      }
    ];
  }
  const actions = [];
  function handleAttributeKey(key, type) {
    const value2 = attributes[key];
    if (!value2) return;
    if (matched.filter && !matched.filter({ key, value: value2, attributes })) return;
    const location2 = node2.sourceCodeLocation.attrs[key];
    actions.push({ type, key, value: value2, attributes, location: location2 });
  }
  (_a2 = matched.srcAttributes) == null ? void 0 : _a2.forEach((key) => handleAttributeKey(key, "src"));
  (_b = matched.srcsetAttributes) == null ? void 0 : _b.forEach((key) => handleAttributeKey(key, "srcset"));
  return actions;
}
function getAttrKey(attr) {
  return attr.prefix === void 0 ? attr.name : `${attr.prefix}:${attr.name}`;
}
var modulePreloadPolyfillId = "vite/modulepreload-polyfill";
var resolvedModulePreloadPolyfillId = "\0" + modulePreloadPolyfillId + ".js";
function modulePreloadPolyfillPlugin(config2) {
  let polyfillString;
  return {
    name: "vite:modulepreload-polyfill",
    resolveId: {
      handler(id) {
        if (id === modulePreloadPolyfillId) {
          return resolvedModulePreloadPolyfillId;
        }
      }
    },
    load: {
      handler(id) {
        if (id === resolvedModulePreloadPolyfillId) {
          if (config2.command !== "build" || this.environment.config.consumer !== "client") {
            return "";
          }
          if (!polyfillString) {
            polyfillString = `${isModernFlag}&&(${polyfill.toString()}());`;
          }
          return { code: polyfillString, moduleSideEffects: true };
        }
      }
    }
  };
}
function polyfill() {
  const relList = document.createElement("link").relList;
  if (relList && relList.supports && relList.supports("modulepreload")) {
    return;
  }
  for (const link of document.querySelectorAll('link[rel="modulepreload"]')) {
    processPreload(link);
  }
  new MutationObserver((mutations) => {
    for (const mutation of mutations) {
      if (mutation.type !== "childList") {
        continue;
      }
      for (const node2 of mutation.addedNodes) {
        if (node2.tagName === "LINK" && node2.rel === "modulepreload")
          processPreload(node2);
      }
    }
  }).observe(document, { childList: true, subtree: true });
  function getFetchOpts(link) {
    const fetchOpts = {};
    if (link.integrity) fetchOpts.integrity = link.integrity;
    if (link.referrerPolicy) fetchOpts.referrerPolicy = link.referrerPolicy;
    if (link.crossOrigin === "use-credentials")
      fetchOpts.credentials = "include";
    else if (link.crossOrigin === "anonymous") fetchOpts.credentials = "omit";
    else fetchOpts.credentials = "same-origin";
    return fetchOpts;
  }
  function processPreload(link) {
    if (link.ep)
      return;
    link.ep = true;
    const fetchOpts = getFetchOpts(link);
    fetch(link.href, fetchOpts);
  }
}
var htmlProxyRE$1 = /[?&]html-proxy=?(?:&inline-css)?(?:&style-attr)?&index=(\d+)\.(?:js|css)$/;
var isHtmlProxyRE = /[?&]html-proxy\b/;
var inlineCSSRE$1 = /__VITE_INLINE_CSS__([a-z\d]{8}_\d+)__/g;
var inlineImportRE = new RegExp(`(?<!(?<!\\.\\.)\\.)\\bimport\\s*\\(("(?:[^"]|(?<=\\\\)")*"|'(?:[^']|(?<=\\\\)')*')\\)`, "dg");
var htmlLangRE = /\.(?:html|htm)$/;
var spaceRe = /[\t\n\f\r ]/;
var importMapRE = /[ \t]*<script[^>]*type\s*=\s*(?:"importmap"|'importmap'|importmap)[^>]*>.*?<\/script>/is;
var moduleScriptRE = /[ \t]*<script[^>]*type\s*=\s*(?:"module"|'module'|module)[^>]*>/i;
var modulePreloadLinkRE = /[ \t]*<link[^>]*rel\s*=\s*(?:"modulepreload"|'modulepreload'|modulepreload)[\s\S]*?\/>/i;
var importMapAppendRE = new RegExp(
  [moduleScriptRE, modulePreloadLinkRE].map((r2) => r2.source).join("|"),
  "i"
);
var isHTMLProxy = (id) => isHtmlProxyRE.test(id);
var isHTMLRequest = (request) => htmlLangRE.test(request);
var htmlProxyMap = /* @__PURE__ */ new WeakMap();
var htmlProxyResult = /* @__PURE__ */ new Map();
function htmlInlineProxyPlugin(config2) {
  htmlProxyMap.set(config2, /* @__PURE__ */ new Map());
  return {
    name: "vite:html-inline-proxy",
    resolveId: {
      handler(id) {
        if (isHTMLProxy(id)) {
          return id;
        }
      }
    },
    load: {
      handler(id) {
        var _a2;
        const proxyMatch = htmlProxyRE$1.exec(id);
        if (proxyMatch) {
          const index = Number(proxyMatch[1]);
          const file = cleanUrl2(id);
          const url2 = file.replace(normalizePath$3(config2.root), "");
          const result = (_a2 = htmlProxyMap.get(config2).get(url2)) == null ? void 0 : _a2[index];
          if (result) {
            return { ...result, moduleSideEffects: true };
          } else {
            throw new Error(`No matching HTML proxy module found from ${id}`);
          }
        }
      }
    }
  };
}
function addToHTMLProxyCache(config2, filePath, index, result) {
  if (!htmlProxyMap.get(config2)) {
    htmlProxyMap.set(config2, /* @__PURE__ */ new Map());
  }
  if (!htmlProxyMap.get(config2).get(filePath)) {
    htmlProxyMap.get(config2).set(filePath, []);
  }
  htmlProxyMap.get(config2).get(filePath)[index] = result;
}
function addToHTMLProxyTransformResult(hash2, code) {
  htmlProxyResult.set(hash2, code);
}
var noInlineLinkRels = /* @__PURE__ */ new Set([
  "icon",
  "apple-touch-icon",
  "apple-touch-startup-image",
  "manifest"
]);
var isAsyncScriptMap = /* @__PURE__ */ new WeakMap();
function nodeIsElement(node2) {
  return node2.nodeName[0] !== "#";
}
function traverseNodes(node2, visitor) {
  if (node2.nodeName === "template") {
    node2 = node2.content;
  }
  visitor(node2);
  if (nodeIsElement(node2) || node2.nodeName === "#document" || node2.nodeName === "#document-fragment") {
    node2.childNodes.forEach((childNode) => traverseNodes(childNode, visitor));
  }
}
async function traverseHtml(html, filePath, visitor) {
  const { parse: parse4 } = await import("./dep-CvfTChi5-RV57SJK2.js");
  const ast = parse4(html, {
    scriptingEnabled: false,
    // parse inside <noscript>
    sourceCodeLocationInfo: true,
    onParseError: (e2) => {
      handleParseError(e2, html, filePath);
    }
  });
  traverseNodes(ast, visitor);
}
function getScriptInfo(node2) {
  var _a2;
  let src2;
  let srcSourceCodeLocation;
  let isModule = false;
  let isAsync = false;
  let isIgnored = false;
  for (const p2 of node2.attrs) {
    if (p2.prefix !== void 0) continue;
    if (p2.name === "src") {
      if (!src2) {
        src2 = p2;
        srcSourceCodeLocation = (_a2 = node2.sourceCodeLocation) == null ? void 0 : _a2.attrs["src"];
      }
    } else if (p2.name === "type" && p2.value === "module") {
      isModule = true;
    } else if (p2.name === "async") {
      isAsync = true;
    } else if (p2.name === "vite-ignore") {
      isIgnored = true;
    }
  }
  return { src: src2, srcSourceCodeLocation, isModule, isAsync, isIgnored };
}
var attrValueStartRE = /=\s*(.)/;
function overwriteAttrValue(s2, sourceCodeLocation, newValue) {
  const srcString = s2.slice(
    sourceCodeLocation.startOffset,
    sourceCodeLocation.endOffset
  );
  const valueStart = attrValueStartRE.exec(srcString);
  if (!valueStart) {
    throw new Error(
      `[vite:html] internal error, failed to overwrite attribute value`
    );
  }
  const wrapOffset = valueStart[1] === '"' || valueStart[1] === "'" ? 1 : 0;
  const valueOffset = valueStart.index + valueStart[0].length - 1;
  s2.update(
    sourceCodeLocation.startOffset + valueOffset + wrapOffset,
    sourceCodeLocation.endOffset - wrapOffset,
    newValue
  );
  return s2;
}
function removeViteIgnoreAttr(s2, sourceCodeLocation) {
  var _a2;
  const loc = (_a2 = sourceCodeLocation.attrs) == null ? void 0 : _a2["vite-ignore"];
  if (loc) {
    s2.remove(loc.startOffset, loc.endOffset);
  }
  return s2;
}
function formatParseError(parserError, id, html) {
  const formattedError = {
    code: parserError.code,
    message: `parse5 error code ${parserError.code}`,
    frame: generateCodeFrame(
      html,
      parserError.startOffset,
      parserError.endOffset
    ),
    loc: {
      file: id,
      line: parserError.startLine,
      column: parserError.startCol
    }
  };
  return formattedError;
}
function handleParseError(parserError, html, filePath) {
  switch (parserError.code) {
    case "missing-doctype":
      return;
    case "abandoned-head-element-child":
      return;
    case "duplicate-attribute":
      return;
    case "non-void-html-element-start-tag-with-trailing-solidus":
      return;
    case "unexpected-question-mark-instead-of-tag-name":
      return;
  }
  const parseError = formatParseError(parserError, filePath, html);
  throw new Error(
    `Unable to parse HTML; ${parseError.message}
 at ${parseError.loc.file}:${parseError.loc.line}:${parseError.loc.column}
${parseError.frame}`
  );
}
function buildHtmlPlugin(config2) {
  const [preHooks, normalHooks, postHooks] = resolveHtmlTransforms(
    config2.plugins,
    config2.logger
  );
  preHooks.unshift(injectCspNonceMetaTagHook(config2));
  preHooks.unshift(preImportMapHook(config2));
  preHooks.push(htmlEnvHook(config2));
  postHooks.push(injectNonceAttributeTagHook(config2));
  postHooks.push(postImportMapHook());
  const processedHtml = perEnvironmentState(() => /* @__PURE__ */ new Map());
  const isExcludedUrl = (url2) => url2[0] === "#" || isExternalUrl(url2) || isDataUrl(url2);
  isAsyncScriptMap.set(config2, /* @__PURE__ */ new Map());
  return {
    name: "vite:build-html",
    transform: {
      async handler(html, id) {
        if (id.endsWith(".html")) {
          id = normalizePath$3(id);
          const relativeUrlPath = normalizePath$3(import_node_path3.default.relative(config2.root, id));
          const publicPath = `/${relativeUrlPath}`;
          const publicBase = getBaseInHTML(relativeUrlPath, config2);
          const publicToRelative = (filename) => publicBase + filename;
          const toOutputPublicFilePath = (url2) => toOutputFilePathInHtml(
            url2.slice(1),
            "public",
            relativeUrlPath,
            "html",
            config2,
            publicToRelative
          );
          const nodeStartWithLeadingWhitespace = (node2) => {
            const startOffset = node2.sourceCodeLocation.startOffset;
            if (startOffset === 0) return 0;
            const lineStartOffset = startOffset - node2.sourceCodeLocation.startCol;
            let isLineEmpty = false;
            try {
              const line = s2.slice(Math.max(0, lineStartOffset), startOffset);
              isLineEmpty = !line.trim();
            } catch {
            }
            return isLineEmpty ? lineStartOffset : startOffset;
          };
          html = await applyHtmlTransforms(html, preHooks, {
            path: publicPath,
            filename: id
          });
          let js = "";
          const s2 = new MagicString(html);
          const scriptUrls = [];
          const styleUrls = [];
          let inlineModuleIndex = -1;
          let everyScriptIsAsync = true;
          let someScriptsAreAsync = false;
          let someScriptsAreDefer = false;
          const assetUrlsPromises = [];
          const namedOutput = Object.keys(
            config2.build.rollupOptions.input || {}
          );
          const processAssetUrl = async (url2, shouldInline2) => {
            if (url2 !== "" && // Empty attribute
            !namedOutput.includes(url2) && // Direct reference to named output
            !namedOutput.includes(removeLeadingSlash(url2))) {
              try {
                return await urlToBuiltUrl(this, url2, id, shouldInline2);
              } catch (e2) {
                if (e2.code !== "ENOENT") {
                  throw e2;
                }
              }
            }
            return url2;
          };
          const setModuleSideEffectPromises = [];
          await traverseHtml(html, id, (node2) => {
            if (!nodeIsElement(node2)) {
              return;
            }
            let shouldRemove = false;
            if (node2.nodeName === "script") {
              const {
                src: src2,
                srcSourceCodeLocation,
                isModule,
                isAsync,
                isIgnored
              } = getScriptInfo(node2);
              if (isIgnored) {
                removeViteIgnoreAttr(s2, node2.sourceCodeLocation);
              } else {
                const url2 = src2 && src2.value;
                const isPublicFile = !!(url2 && checkPublicFile(url2, config2));
                if (isPublicFile) {
                  overwriteAttrValue(
                    s2,
                    srcSourceCodeLocation,
                    partialEncodeURIPath(toOutputPublicFilePath(url2))
                  );
                }
                if (isModule) {
                  inlineModuleIndex++;
                  if (url2 && !isExcludedUrl(url2) && !isPublicFile) {
                    setModuleSideEffectPromises.push(
                      this.resolve(url2, id).then((resolved) => {
                        if (!resolved) {
                          return Promise.reject(
                            new Error(`Failed to resolve ${url2} from ${id}`)
                          );
                        }
                        const moduleInfo = this.getModuleInfo(resolved.id);
                        if (moduleInfo) {
                          moduleInfo.moduleSideEffects = true;
                        } else if (!resolved.external) {
                          return this.load(resolved).then((mod) => {
                            mod.moduleSideEffects = true;
                          });
                        }
                      })
                    );
                    js += `
import ${JSON.stringify(url2)}`;
                    shouldRemove = true;
                  } else if (node2.childNodes.length) {
                    const scriptNode = node2.childNodes.pop();
                    const contents = scriptNode.value;
                    const filePath = id.replace(normalizePath$3(config2.root), "");
                    addToHTMLProxyCache(config2, filePath, inlineModuleIndex, {
                      code: contents
                    });
                    js += `
import "${id}?html-proxy&index=${inlineModuleIndex}.js"`;
                    shouldRemove = true;
                  }
                  everyScriptIsAsync && (everyScriptIsAsync = isAsync);
                  someScriptsAreAsync || (someScriptsAreAsync = isAsync);
                  someScriptsAreDefer || (someScriptsAreDefer = !isAsync);
                } else if (url2 && !isPublicFile) {
                  if (!isExcludedUrl(url2)) {
                    config2.logger.warn(
                      `<script src="${url2}"> in "${publicPath}" can't be bundled without type="module" attribute`
                    );
                  }
                } else if (node2.childNodes.length) {
                  const scriptNode = node2.childNodes.pop();
                  scriptUrls.push(
                    ...extractImportExpressionFromClassicScript(scriptNode)
                  );
                }
              }
            }
            const assetAttributes = getNodeAssetAttributes(node2);
            for (const attr of assetAttributes) {
              if (attr.type === "remove") {
                s2.remove(attr.location.startOffset, attr.location.endOffset);
                continue;
              } else if (attr.type === "srcset") {
                assetUrlsPromises.push(
                  (async () => {
                    const processedEncodedUrl = await processSrcSet(
                      attr.value,
                      async ({ url: url2 }) => {
                        const decodedUrl = decodeURIIfPossible(url2);
                        if (decodedUrl !== void 0 && !isExcludedUrl(decodedUrl)) {
                          const result = await processAssetUrl(url2);
                          return result !== decodedUrl ? encodeURIPath(result) : url2;
                        }
                        return url2;
                      }
                    );
                    if (processedEncodedUrl !== attr.value) {
                      overwriteAttrValue(s2, attr.location, processedEncodedUrl);
                    }
                  })()
                );
              } else if (attr.type === "src") {
                const url2 = decodeURIIfPossible(attr.value);
                if (url2 === void 0) ;
                else if (checkPublicFile(url2, config2)) {
                  overwriteAttrValue(
                    s2,
                    attr.location,
                    partialEncodeURIPath(toOutputPublicFilePath(url2))
                  );
                } else if (!isExcludedUrl(url2)) {
                  if (node2.nodeName === "link" && isCSSRequest(url2) && // should not be converted if following attributes are present (#6748)
                  !("media" in attr.attributes || "disabled" in attr.attributes)) {
                    const importExpression = `
import ${JSON.stringify(url2)}`;
                    styleUrls.push({
                      url: url2,
                      start: nodeStartWithLeadingWhitespace(node2),
                      end: node2.sourceCodeLocation.endOffset
                    });
                    js += importExpression;
                  } else {
                    const isNoInlineLink = node2.nodeName === "link" && attr.attributes.rel && parseRelAttr(attr.attributes.rel).some(
                      (v) => noInlineLinkRels.has(v)
                    );
                    const shouldInline2 = isNoInlineLink ? false : void 0;
                    assetUrlsPromises.push(
                      (async () => {
                        const processedUrl = await processAssetUrl(
                          url2,
                          shouldInline2
                        );
                        if (processedUrl !== url2) {
                          overwriteAttrValue(
                            s2,
                            attr.location,
                            partialEncodeURIPath(processedUrl)
                          );
                        }
                      })()
                    );
                  }
                }
              }
            }
            const inlineStyle = findNeedTransformStyleAttribute(node2);
            if (inlineStyle) {
              inlineModuleIndex++;
              const code = inlineStyle.attr.value;
              const filePath = id.replace(normalizePath$3(config2.root), "");
              addToHTMLProxyCache(config2, filePath, inlineModuleIndex, { code });
              js += `
import "${id}?html-proxy&inline-css&style-attr&index=${inlineModuleIndex}.css"`;
              const hash2 = getHash(cleanUrl2(id));
              overwriteAttrValue(
                s2,
                inlineStyle.location,
                `__VITE_INLINE_CSS__${hash2}_${inlineModuleIndex}__`
              );
            }
            if (node2.nodeName === "style" && node2.childNodes.length) {
              const styleNode = node2.childNodes.pop();
              const filePath = id.replace(normalizePath$3(config2.root), "");
              inlineModuleIndex++;
              addToHTMLProxyCache(config2, filePath, inlineModuleIndex, {
                code: styleNode.value
              });
              js += `
import "${id}?html-proxy&inline-css&index=${inlineModuleIndex}.css"`;
              const hash2 = getHash(cleanUrl2(id));
              s2.update(
                styleNode.sourceCodeLocation.startOffset,
                styleNode.sourceCodeLocation.endOffset,
                `__VITE_INLINE_CSS__${hash2}_${inlineModuleIndex}__`
              );
            }
            if (shouldRemove) {
              s2.remove(
                nodeStartWithLeadingWhitespace(node2),
                node2.sourceCodeLocation.endOffset
              );
            }
          });
          isAsyncScriptMap.get(config2).set(id, everyScriptIsAsync);
          if (someScriptsAreAsync && someScriptsAreDefer) {
            config2.logger.warn(
              `
Mixed async and defer script modules in ${id}, output script will fallback to defer. Every script, including inline ones, need to be marked as async for your output script to be async.`
            );
          }
          await Promise.all(assetUrlsPromises);
          for (const { start, end, url: url2 } of scriptUrls) {
            if (checkPublicFile(url2, config2)) {
              s2.update(
                start,
                end,
                partialEncodeURIPath(toOutputPublicFilePath(url2))
              );
            } else if (!isExcludedUrl(url2)) {
              s2.update(
                start,
                end,
                partialEncodeURIPath(await urlToBuiltUrl(this, url2, id))
              );
            }
          }
          const resolvedStyleUrls = await Promise.all(
            styleUrls.map(async (styleUrl) => ({
              ...styleUrl,
              resolved: await this.resolve(styleUrl.url, id)
            }))
          );
          for (const { start, end, url: url2, resolved } of resolvedStyleUrls) {
            if (resolved == null) {
              config2.logger.warnOnce(
                `
${url2} doesn't exist at build time, it will remain unchanged to be resolved at runtime`
              );
              const importExpression = `
import ${JSON.stringify(url2)}`;
              js = js.replace(importExpression, "");
            } else {
              s2.remove(start, end);
            }
          }
          processedHtml(this).set(id, s2.toString());
          const { modulePreload } = this.environment.config.build;
          if (modulePreload !== false && modulePreload.polyfill && (someScriptsAreAsync || someScriptsAreDefer)) {
            js = `import "${modulePreloadPolyfillId}";
${js}`;
          }
          await Promise.all(setModuleSideEffectPromises);
          return { code: js, moduleSideEffects: "no-treeshake" };
        }
      }
    },
    async generateBundle(options2, bundle) {
      const analyzedImportedCssFiles = /* @__PURE__ */ new Map();
      const inlineEntryChunk = /* @__PURE__ */ new Set();
      const getImportedChunks = (chunk, seen2 = /* @__PURE__ */ new Set()) => {
        const chunks = [];
        chunk.imports.forEach((file) => {
          const importee = bundle[file];
          if (importee) {
            if (importee.type === "chunk" && !seen2.has(file)) {
              seen2.add(file);
              chunks.push(...getImportedChunks(importee, seen2));
              chunks.push(importee);
            }
          } else {
            chunks.push(file);
          }
        });
        return chunks;
      };
      const toScriptTag = (chunkOrUrl, toOutputPath, isAsync) => ({
        tag: "script",
        attrs: {
          ...isAsync ? { async: true } : {},
          type: "module",
          // crossorigin must be set not only for serving assets in a different origin
          // but also to make it possible to preload the script using `<link rel="preload">`.
          // `<script type="module">` used to fetch the script with credential mode `omit`,
          // however `crossorigin` attribute cannot specify that value.
          // https://developer.chrome.com/blog/modulepreload/#ok-so-why-doesnt-link-relpreload-work-for-modules:~:text=For%20%3Cscript%3E,of%20other%20modules.
          // Now `<script type="module">` uses `same origin`: https://github.com/whatwg/html/pull/3656#:~:text=Module%20scripts%20are%20always%20fetched%20with%20credentials%20mode%20%22same%2Dorigin%22%20by%20default%20and%20can%20no%20longer%0Ause%20%22omit%22
          crossorigin: true,
          src: typeof chunkOrUrl === "string" ? chunkOrUrl : toOutputPath(chunkOrUrl.fileName)
        }
      });
      const toPreloadTag = (filename, toOutputPath) => ({
        tag: "link",
        attrs: {
          rel: "modulepreload",
          crossorigin: true,
          href: toOutputPath(filename)
        }
      });
      const toStyleSheetLinkTag = (file, toOutputPath) => ({
        tag: "link",
        attrs: {
          rel: "stylesheet",
          crossorigin: true,
          href: toOutputPath(file)
        }
      });
      const getCssFilesForChunk = (chunk, seenChunks = /* @__PURE__ */ new Set(), seenCss = /* @__PURE__ */ new Set()) => {
        if (seenChunks.has(chunk.fileName)) {
          return [];
        }
        seenChunks.add(chunk.fileName);
        if (analyzedImportedCssFiles.has(chunk)) {
          const files2 = analyzedImportedCssFiles.get(chunk);
          const additionals = files2.filter((file) => !seenCss.has(file));
          additionals.forEach((file) => seenCss.add(file));
          return additionals;
        }
        const files = [];
        chunk.imports.forEach((file) => {
          const importee = bundle[file];
          if ((importee == null ? void 0 : importee.type) === "chunk") {
            files.push(...getCssFilesForChunk(importee, seenChunks, seenCss));
          }
        });
        analyzedImportedCssFiles.set(chunk, files);
        chunk.viteMetadata.importedCss.forEach((file) => {
          if (!seenCss.has(file)) {
            seenCss.add(file);
            files.push(file);
          }
        });
        return files;
      };
      const getCssTagsForChunk = (chunk, toOutputPath) => getCssFilesForChunk(chunk).map(
        (file) => toStyleSheetLinkTag(file, toOutputPath)
      );
      for (const [normalizedId, html] of processedHtml(this)) {
        const relativeUrlPath = normalizePath$3(
          import_node_path3.default.relative(config2.root, normalizedId)
        );
        const assetsBase = getBaseInHTML(relativeUrlPath, config2);
        const toOutputFilePath = (filename, type) => {
          if (isExternalUrl(filename)) {
            return filename;
          } else {
            return toOutputFilePathInHtml(
              filename,
              type,
              relativeUrlPath,
              "html",
              config2,
              (filename2) => assetsBase + filename2
            );
          }
        };
        const toOutputAssetFilePath = (filename) => toOutputFilePath(filename, "asset");
        const toOutputPublicAssetFilePath = (filename) => toOutputFilePath(filename, "public");
        const isAsync = isAsyncScriptMap.get(config2).get(normalizedId);
        let result = html;
        const chunk = Object.values(bundle).find(
          (chunk2) => chunk2.type === "chunk" && chunk2.isEntry && chunk2.facadeModuleId && normalizePath$3(chunk2.facadeModuleId) === normalizedId
        );
        let canInlineEntry = false;
        if (chunk) {
          if (options2.format === "es" && isEntirelyImport(chunk.code)) {
            canInlineEntry = true;
          }
          const imports = getImportedChunks(chunk);
          let assetTags;
          if (canInlineEntry) {
            assetTags = imports.map(
              (chunk2) => toScriptTag(chunk2, toOutputAssetFilePath, isAsync)
            );
          } else {
            const { modulePreload } = this.environment.config.build;
            assetTags = [toScriptTag(chunk, toOutputAssetFilePath, isAsync)];
            if (modulePreload !== false) {
              const resolveDependencies = typeof modulePreload === "object" && modulePreload.resolveDependencies;
              const importsFileNames = imports.filter((chunkOrUrl) => typeof chunkOrUrl !== "string").map((chunk2) => chunk2.fileName);
              const resolvedDeps = resolveDependencies ? resolveDependencies(chunk.fileName, importsFileNames, {
                hostId: relativeUrlPath,
                hostType: "html"
              }) : importsFileNames;
              assetTags.push(
                ...resolvedDeps.map(
                  (i) => toPreloadTag(i, toOutputAssetFilePath)
                )
              );
            }
          }
          assetTags.push(...getCssTagsForChunk(chunk, toOutputAssetFilePath));
          result = injectToHead(result, assetTags);
        }
        if (!this.environment.config.build.cssCodeSplit) {
          const cssBundleName = cssBundleNameCache.get(config2);
          const cssChunk = cssBundleName && Object.values(bundle).find(
            (chunk2) => chunk2.type === "asset" && chunk2.names.includes(cssBundleName)
          );
          if (cssChunk) {
            result = injectToHead(result, [
              {
                tag: "link",
                attrs: {
                  rel: "stylesheet",
                  crossorigin: true,
                  href: toOutputAssetFilePath(cssChunk.fileName)
                }
              }
            ]);
          }
        }
        let match;
        let s2;
        inlineCSSRE$1.lastIndex = 0;
        while (match = inlineCSSRE$1.exec(result)) {
          s2 || (s2 = new MagicString(result));
          const { 0: full, 1: scopedName } = match;
          const cssTransformedCode = htmlProxyResult.get(scopedName);
          s2.update(match.index, match.index + full.length, cssTransformedCode);
        }
        if (s2) {
          result = s2.toString();
        }
        result = await applyHtmlTransforms(
          result,
          [...normalHooks, ...postHooks],
          {
            path: "/" + relativeUrlPath,
            filename: normalizedId,
            bundle,
            chunk
          }
        );
        result = result.replace(assetUrlRE, (_, fileHash, postfix = "") => {
          const file = this.getFileName(fileHash);
          if (chunk) {
            chunk.viteMetadata.importedAssets.add(cleanUrl2(file));
          }
          return encodeURIPath(toOutputAssetFilePath(file)) + postfix;
        });
        result = result.replace(publicAssetUrlRE, (_, fileHash) => {
          const publicAssetPath = toOutputPublicAssetFilePath(
            getPublicAssetFilename(fileHash, config2)
          );
          return encodeURIPath(
            urlCanParse(publicAssetPath) ? publicAssetPath : normalizePath$3(publicAssetPath)
          );
        });
        if (chunk && canInlineEntry) {
          inlineEntryChunk.add(chunk.fileName);
        }
        const shortEmitName = normalizePath$3(
          import_node_path3.default.relative(config2.root, normalizedId)
        );
        this.emitFile({
          type: "asset",
          originalFileName: normalizedId,
          fileName: shortEmitName,
          source: result
        });
      }
      for (const fileName of inlineEntryChunk) {
        delete bundle[fileName];
      }
    }
  };
}
function parseRelAttr(attr) {
  return attr.split(spaceRe).map((v) => v.toLowerCase());
}
function findNeedTransformStyleAttribute(node2) {
  var _a2, _b;
  const attr = node2.attrs.find(
    (prop) => prop.prefix === void 0 && prop.name === "style" && // only url(...) or image-set(...) in css need to emit file
    (prop.value.includes("url(") || prop.value.includes("image-set("))
  );
  if (!attr) return void 0;
  const location2 = (_b = (_a2 = node2.sourceCodeLocation) == null ? void 0 : _a2.attrs) == null ? void 0 : _b["style"];
  return { attr, location: location2 };
}
function extractImportExpressionFromClassicScript(scriptTextNode) {
  const startOffset = scriptTextNode.sourceCodeLocation.startOffset;
  const cleanCode = stripLiteral(scriptTextNode.value);
  const scriptUrls = [];
  let match;
  inlineImportRE.lastIndex = 0;
  while (match = inlineImportRE.exec(cleanCode)) {
    const [, [urlStart, urlEnd]] = match.indices;
    const start = urlStart + 1;
    const end = urlEnd - 1;
    scriptUrls.push({
      start: start + startOffset,
      end: end + startOffset,
      url: scriptTextNode.value.slice(start, end)
    });
  }
  return scriptUrls;
}
function preImportMapHook(config2) {
  return (html, ctx) => {
    const importMapIndex = html.search(importMapRE);
    if (importMapIndex < 0) return;
    const importMapAppendIndex = html.search(importMapAppendRE);
    if (importMapAppendIndex < 0) return;
    if (importMapAppendIndex < importMapIndex) {
      const relativeHtml = normalizePath$3(
        import_node_path3.default.relative(config2.root, ctx.filename)
      );
      config2.logger.warnOnce(
        colors$1.yellow(
          colors$1.bold(
            `(!) <script type="importmap"> should come before <script type="module"> and <link rel="modulepreload"> in /${relativeHtml}`
          )
        )
      );
    }
  };
}
function postImportMapHook() {
  return (html) => {
    if (!importMapAppendRE.test(html)) return;
    let importMap;
    html = html.replace(importMapRE, (match) => {
      importMap = match;
      return "";
    });
    if (importMap) {
      html = html.replace(
        importMapAppendRE,
        (match) => `${importMap}
${match}`
      );
    }
    return html;
  };
}
function injectCspNonceMetaTagHook(config2) {
  return () => {
    var _a2;
    if (!((_a2 = config2.html) == null ? void 0 : _a2.cspNonce)) return;
    return [
      {
        tag: "meta",
        injectTo: "head",
        // use nonce attribute so that it's hidden
        // https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce#accessing_nonces_and_nonce_hiding
        attrs: { property: "csp-nonce", nonce: config2.html.cspNonce }
      }
    ];
  };
}
function htmlEnvHook(config2) {
  const pattern = /%(\S+?)%/g;
  const envPrefix = resolveEnvPrefix({ envPrefix: config2.envPrefix });
  const env2 = { ...config2.env };
  for (const key in config2.define) {
    if (key.startsWith(`import.meta.env.`)) {
      const val = config2.define[key];
      if (typeof val === "string") {
        try {
          const parsed = JSON.parse(val);
          env2[key.slice(16)] = typeof parsed === "string" ? parsed : val;
        } catch {
          env2[key.slice(16)] = val;
        }
      } else {
        env2[key.slice(16)] = JSON.stringify(val);
      }
    }
  }
  return (html, ctx) => {
    return html.replace(pattern, (text, key) => {
      if (key in env2) {
        return env2[key];
      } else {
        if (envPrefix.some((prefix) => key.startsWith(prefix))) {
          const relativeHtml = normalizePath$3(
            import_node_path3.default.relative(config2.root, ctx.filename)
          );
          config2.logger.warn(
            colors$1.yellow(
              colors$1.bold(
                `(!) ${text} is not defined in env variables found in /${relativeHtml}. Is the variable mistyped?`
              )
            )
          );
        }
        return text;
      }
    });
  };
}
function injectNonceAttributeTagHook(config2) {
  const processRelType = /* @__PURE__ */ new Set(["stylesheet", "modulepreload", "preload"]);
  return async (html, { filename }) => {
    var _a2;
    const nonce = (_a2 = config2.html) == null ? void 0 : _a2.cspNonce;
    if (!nonce) return;
    const s2 = new MagicString(html);
    await traverseHtml(html, filename, (node2) => {
      if (!nodeIsElement(node2)) {
        return;
      }
      const { nodeName, attrs, sourceCodeLocation } = node2;
      if (nodeName === "script" || nodeName === "style" || nodeName === "link" && attrs.some(
        (attr) => attr.name === "rel" && parseRelAttr(attr.value).some((a) => processRelType.has(a))
      )) {
        if (attrs.some(({ name }) => name === "nonce")) {
          return;
        }
        const startTagEndOffset = sourceCodeLocation.startTag.endOffset;
        const appendOffset = html[startTagEndOffset - 2] === "/" ? 2 : 1;
        s2.appendRight(startTagEndOffset - appendOffset, ` nonce="${nonce}"`);
      }
    });
    return s2.toString();
  };
}
function resolveHtmlTransforms(plugins2, logger) {
  const preHooks = [];
  const normalHooks = [];
  const postHooks = [];
  for (const plugin of plugins2) {
    const hook = plugin.transformIndexHtml;
    if (!hook) continue;
    if (typeof hook === "function") {
      normalHooks.push(hook);
    } else {
      if (!("order" in hook) && "enforce" in hook) {
        logger.warnOnce(
          colors$1.yellow(
            `plugin '${plugin.name}' uses deprecated 'enforce' option. Use 'order' option instead.`
          )
        );
      }
      if (!("handler" in hook) && "transform" in hook) {
        logger.warnOnce(
          colors$1.yellow(
            `plugin '${plugin.name}' uses deprecated 'transform' option. Use 'handler' option instead.`
          )
        );
      }
      const order = hook.order ?? (hook.enforce === "pre" ? "pre" : void 0);
      const handler = hook.handler ?? hook.transform;
      if (order === "pre") {
        preHooks.push(handler);
      } else if (order === "post") {
        postHooks.push(handler);
      } else {
        normalHooks.push(handler);
      }
    }
  }
  return [preHooks, normalHooks, postHooks];
}
var elementsAllowedInHead = /* @__PURE__ */ new Set([
  "title",
  "base",
  "link",
  "style",
  "meta",
  "script",
  "noscript",
  "template"
]);
function headTagInsertCheck(tags, ctx) {
  var _a2;
  if (!tags.length) return;
  const { logger } = ((_a2 = ctx.server) == null ? void 0 : _a2.config) || {};
  const disallowedTags = tags.filter(
    (tagDescriptor) => !elementsAllowedInHead.has(tagDescriptor.tag)
  );
  if (disallowedTags.length) {
    const dedupedTags = unique(
      disallowedTags.map((tagDescriptor) => `<${tagDescriptor.tag}>`)
    );
    logger == null ? void 0 : logger.warn(
      colors$1.yellow(
        colors$1.bold(
          `[${dedupedTags.join(",")}] can not be used inside the <head> Element, please check the 'injectTo' value`
        )
      )
    );
  }
}
async function applyHtmlTransforms(html, hooks, ctx) {
  for (const hook of hooks) {
    const res = await hook(html, ctx);
    if (!res) {
      continue;
    }
    if (typeof res === "string") {
      html = res;
    } else {
      let tags;
      if (Array.isArray(res)) {
        tags = res;
      } else {
        html = res.html || html;
        tags = res.tags;
      }
      let headTags;
      let headPrependTags;
      let bodyTags;
      let bodyPrependTags;
      for (const tag of tags) {
        switch (tag.injectTo) {
          case "body":
            (bodyTags ?? (bodyTags = [])).push(tag);
            break;
          case "body-prepend":
            (bodyPrependTags ?? (bodyPrependTags = [])).push(tag);
            break;
          case "head":
            (headTags ?? (headTags = [])).push(tag);
            break;
          default:
            (headPrependTags ?? (headPrependTags = [])).push(tag);
        }
      }
      headTagInsertCheck([...headTags || [], ...headPrependTags || []], ctx);
      if (headPrependTags) html = injectToHead(html, headPrependTags, true);
      if (headTags) html = injectToHead(html, headTags);
      if (bodyPrependTags) html = injectToBody(html, bodyPrependTags, true);
      if (bodyTags) html = injectToBody(html, bodyTags);
    }
  }
  return html;
}
var importRE = /\bimport\s*(?:"[^"]*[^\\]"|'[^']*[^\\]');*/g;
var commentRE = /\/\*[\s\S]*?\*\/|\/\/.*$/gm;
function isEntirelyImport(code) {
  return !code.replace(importRE, "").replace(commentRE, "").trim().length;
}
function getBaseInHTML(urlRelativePath, config2) {
  return config2.base === "./" || config2.base === "" ? import_node_path3.default.posix.join(
    import_node_path3.default.posix.relative(urlRelativePath, "").slice(0, -2),
    "./"
  ) : config2.base;
}
var headInjectRE = /([ \t]*)<\/head>/i;
var headPrependInjectRE = /([ \t]*)<head[^>]*>/i;
var htmlInjectRE = /<\/html>/i;
var htmlPrependInjectRE = /([ \t]*)<html[^>]*>/i;
var bodyInjectRE = /([ \t]*)<\/body>/i;
var bodyPrependInjectRE = /([ \t]*)<body[^>]*>/i;
var doctypePrependInjectRE = /<!doctype html>/i;
function injectToHead(html, tags, prepend = false) {
  if (tags.length === 0) return html;
  if (prepend) {
    if (headPrependInjectRE.test(html)) {
      return html.replace(
        headPrependInjectRE,
        (match, p1) => `${match}
${serializeTags(tags, incrementIndent(p1))}`
      );
    }
  } else {
    if (headInjectRE.test(html)) {
      return html.replace(
        headInjectRE,
        (match, p1) => `${serializeTags(tags, incrementIndent(p1))}${match}`
      );
    }
    if (bodyPrependInjectRE.test(html)) {
      return html.replace(
        bodyPrependInjectRE,
        (match, p1) => `${serializeTags(tags, p1)}
${match}`
      );
    }
  }
  return prependInjectFallback(html, tags);
}
function injectToBody(html, tags, prepend = false) {
  if (tags.length === 0) return html;
  if (prepend) {
    if (bodyPrependInjectRE.test(html)) {
      return html.replace(
        bodyPrependInjectRE,
        (match, p1) => `${match}
${serializeTags(tags, incrementIndent(p1))}`
      );
    }
    if (headInjectRE.test(html)) {
      return html.replace(
        headInjectRE,
        (match, p1) => `${match}
${serializeTags(tags, p1)}`
      );
    }
    return prependInjectFallback(html, tags);
  } else {
    if (bodyInjectRE.test(html)) {
      return html.replace(
        bodyInjectRE,
        (match, p1) => `${serializeTags(tags, incrementIndent(p1))}${match}`
      );
    }
    if (htmlInjectRE.test(html)) {
      return html.replace(htmlInjectRE, `${serializeTags(tags)}
$&`);
    }
    return html + `
` + serializeTags(tags);
  }
}
function prependInjectFallback(html, tags) {
  if (htmlPrependInjectRE.test(html)) {
    return html.replace(htmlPrependInjectRE, `$&
${serializeTags(tags)}`);
  }
  if (doctypePrependInjectRE.test(html)) {
    return html.replace(doctypePrependInjectRE, `$&
${serializeTags(tags)}`);
  }
  return serializeTags(tags) + html;
}
var unaryTags = /* @__PURE__ */ new Set(["link", "meta", "base"]);
function serializeTag({ tag, attrs, children }, indent = "") {
  if (unaryTags.has(tag)) {
    return `<${tag}${serializeAttrs(attrs)}>`;
  } else {
    return `<${tag}${serializeAttrs(attrs)}>${serializeTags(
      children,
      incrementIndent(indent)
    )}</${tag}>`;
  }
}
function serializeTags(tags, indent = "") {
  if (typeof tags === "string") {
    return tags;
  } else if (tags && tags.length) {
    return tags.map((tag) => `${indent}${serializeTag(tag, indent)}
`).join("");
  }
  return "";
}
function serializeAttrs(attrs) {
  let res = "";
  for (const key in attrs) {
    if (typeof attrs[key] === "boolean") {
      res += attrs[key] ? ` ${key}` : ``;
    } else {
      res += ` ${key}="${escapeHtml$2(attrs[key])}"`;
    }
  }
  return res;
}
function incrementIndent(indent = "") {
  return `${indent}${indent[0] === "	" ? "	" : "  "}`;
}
function decodeURIIfPossible(input) {
  try {
    return decodeURI(input);
  } catch {
    return;
  }
}
var debugCache = createDebugger("vite:cache");
var knownIgnoreList = /* @__PURE__ */ new Set(["/", "/favicon.ico"]);
var trailingQuerySeparatorsRE = /[?&]+$/;
var urlRE = /[?&]url\b/;
var rawRE = /[?&]raw\b/;
var inlineRE$2 = /[?&]inline\b/;
var svgRE = /\.svg\b/;
function deniedServingAccessForTransform(url2, server, res, next) {
  if (rawRE.test(url2) || urlRE.test(url2) || inlineRE$2.test(url2) || svgRE.test(url2)) {
    const servingAccessResult = checkServingAccess(url2, server);
    if (servingAccessResult === "denied") {
      respondWithAccessDenied(url2, server, res);
      return true;
    }
    if (servingAccessResult === "fallback") {
      next();
      return true;
    }
  }
  return false;
}
function cachedTransformMiddleware(server) {
  return function viteCachedTransformMiddleware(req2, res, next) {
    var _a2;
    const environment = server.environments.client;
    const ifNoneMatch = req2.headers["if-none-match"];
    if (ifNoneMatch) {
      const moduleByEtag = environment.moduleGraph.getModuleByEtag(ifNoneMatch);
      if (((_a2 = moduleByEtag == null ? void 0 : moduleByEtag.transformResult) == null ? void 0 : _a2.etag) === ifNoneMatch && moduleByEtag.url === req2.url) {
        const maybeMixedEtag = isCSSRequest(req2.url);
        if (!maybeMixedEtag) {
          debugCache == null ? void 0 : debugCache(`[304] ${prettifyUrl(req2.url, server.config.root)}`);
          res.statusCode = 304;
          return res.end();
        }
      }
    }
    next();
  };
}
function transformMiddleware(server) {
  const { root, publicDir } = server.config;
  const publicDirInRoot = publicDir.startsWith(withTrailingSlash(root));
  const publicPath = `${publicDir.slice(root.length)}/`;
  return async function viteTransformMiddleware(req2, res, next) {
    var _a2, _b, _c, _d, _e, _f;
    const environment = server.environments.client;
    if (req2.method !== "GET" || knownIgnoreList.has(req2.url)) {
      return next();
    }
    let url2;
    try {
      url2 = decodeURI(removeTimestampQuery(req2.url)).replace(
        NULL_BYTE_PLACEHOLDER2,
        "\0"
      );
    } catch (e2) {
      if (e2 instanceof URIError) {
        server.config.logger.warn(
          colors$1.yellow("Malformed URI sequence in request URL")
        );
        return next();
      }
      return next(e2);
    }
    const withoutQuery = cleanUrl2(url2);
    try {
      const isSourceMap = withoutQuery.endsWith(".map");
      if (isSourceMap) {
        const depsOptimizer = environment.depsOptimizer;
        if (depsOptimizer == null ? void 0 : depsOptimizer.isOptimizedDepUrl(url2)) {
          const sourcemapPath = url2.startsWith(FS_PREFIX) ? fsPathFromId(url2) : normalizePath$3(import_node_path3.default.resolve(server.config.root, url2.slice(1)));
          try {
            const map2 = JSON.parse(
              await import_promises.default.readFile(sourcemapPath, "utf-8")
            );
            applySourcemapIgnoreList(
              map2,
              sourcemapPath,
              server.config.server.sourcemapIgnoreList,
              server.config.logger
            );
            return send$1(req2, res, JSON.stringify(map2), "json", {
              headers: server.config.server.headers
            });
          } catch {
            const dummySourceMap = {
              version: 3,
              file: sourcemapPath.replace(/\.map$/, ""),
              sources: [],
              sourcesContent: [],
              names: [],
              mappings: ";;;;;;;;;"
            };
            return send$1(req2, res, JSON.stringify(dummySourceMap), "json", {
              cacheControl: "no-cache",
              headers: server.config.server.headers
            });
          }
        } else {
          const originalUrl = url2.replace(/\.map($|\?)/, "$1");
          const map2 = (_b = (_a2 = await environment.moduleGraph.getModuleByUrl(originalUrl)) == null ? void 0 : _a2.transformResult) == null ? void 0 : _b.map;
          if (map2) {
            return send$1(req2, res, JSON.stringify(map2), "json", {
              headers: server.config.server.headers
            });
          } else {
            return next();
          }
        }
      }
      if (publicDirInRoot && url2.startsWith(publicPath)) {
        warnAboutExplicitPublicPathInUrl(url2);
      }
      const urlWithoutTrailingQuerySeparators = url2.replace(
        trailingQuerySeparatorsRE,
        ""
      );
      if (deniedServingAccessForTransform(
        urlWithoutTrailingQuerySeparators,
        server,
        res,
        next
      )) {
        return;
      }
      if (req2.headers["sec-fetch-dest"] === "script" || isJSRequest(url2) || isImportRequest(url2) || isCSSRequest(url2) || isHTMLProxy(url2)) {
        url2 = removeImportQuery(url2);
        url2 = unwrapId$1(url2);
        if (isCSSRequest(url2)) {
          if (((_c = req2.headers.accept) == null ? void 0 : _c.includes("text/css")) && !isDirectRequest(url2)) {
            url2 = injectQuery(url2, "direct");
          }
          const ifNoneMatch = req2.headers["if-none-match"];
          if (ifNoneMatch && ((_e = (_d = await environment.moduleGraph.getModuleByUrl(url2)) == null ? void 0 : _d.transformResult) == null ? void 0 : _e.etag) === ifNoneMatch) {
            debugCache == null ? void 0 : debugCache(`[304] ${prettifyUrl(url2, server.config.root)}`);
            res.statusCode = 304;
            return res.end();
          }
        }
        const result = await transformRequest(environment, url2, {
          html: (_f = req2.headers.accept) == null ? void 0 : _f.includes("text/html"),
          allowId(id) {
            return !deniedServingAccessForTransform(id, server, res, next);
          }
        });
        if (result) {
          const depsOptimizer = environment.depsOptimizer;
          const type = isDirectCSSRequest(url2) ? "css" : "js";
          const isDep = DEP_VERSION_RE.test(url2) || (depsOptimizer == null ? void 0 : depsOptimizer.isOptimizedDepUrl(url2));
          return send$1(req2, res, result.code, type, {
            etag: result.etag,
            // allow browser to cache npm deps!
            cacheControl: isDep ? "max-age=31536000,immutable" : "no-cache",
            headers: server.config.server.headers,
            map: result.map
          });
        }
      }
    } catch (e2) {
      if ((e2 == null ? void 0 : e2.code) === ERR_OPTIMIZE_DEPS_PROCESSING_ERROR) {
        if (!res.writableEnded) {
          res.statusCode = 504;
          res.statusMessage = "Optimize Deps Processing Error";
          res.end();
        }
        server.config.logger.error(e2.message);
        return;
      }
      if ((e2 == null ? void 0 : e2.code) === ERR_OUTDATED_OPTIMIZED_DEP2) {
        if (!res.writableEnded) {
          res.statusCode = 504;
          res.statusMessage = "Outdated Optimize Dep";
          res.end();
        }
        return;
      }
      if ((e2 == null ? void 0 : e2.code) === ERR_CLOSED_SERVER) {
        if (!res.writableEnded) {
          res.statusCode = 504;
          res.statusMessage = "Outdated Request";
          res.end();
        }
        return;
      }
      if ((e2 == null ? void 0 : e2.code) === ERR_FILE_NOT_FOUND_IN_OPTIMIZED_DEP_DIR) {
        if (!res.writableEnded) {
          res.statusCode = 404;
          res.end();
        }
        server.config.logger.warn(colors$1.yellow(e2.message));
        return;
      }
      if ((e2 == null ? void 0 : e2.code) === ERR_LOAD_URL) {
        return next();
      }
      if ((e2 == null ? void 0 : e2.code) === ERR_DENIED_ID) {
        return;
      }
      return next(e2);
    }
    next();
  };
  function warnAboutExplicitPublicPathInUrl(url2) {
    let warning;
    if (isImportRequest(url2)) {
      const rawUrl = removeImportQuery(url2);
      if (urlRE.test(url2)) {
        warning = `Assets in the public directory are served at the root path.
Instead of ${colors$1.cyan(rawUrl)}, use ${colors$1.cyan(
          rawUrl.replace(publicPath, "/")
        )}.`;
      } else {
        warning = `Assets in public directory cannot be imported from JavaScript.
If you intend to import that asset, put the file in the src directory, and use ${colors$1.cyan(
          rawUrl.replace(publicPath, "/src/")
        )} instead of ${colors$1.cyan(rawUrl)}.
If you intend to use the URL of that asset, use ${colors$1.cyan(
          injectQuery(rawUrl.replace(publicPath, "/"), "url")
        )}.`;
      }
    } else {
      warning = `Files in the public directory are served at the root path.
Instead of ${colors$1.cyan(url2)}, use ${colors$1.cyan(
        url2.replace(publicPath, "/")
      )}.`;
    }
    server.config.logger.warn(colors$1.yellow(warning));
  }
}
function createDevHtmlTransformFn(config2) {
  const [preHooks, normalHooks, postHooks] = resolveHtmlTransforms(
    config2.plugins,
    config2.logger
  );
  const transformHooks = [
    preImportMapHook(config2),
    injectCspNonceMetaTagHook(config2),
    ...preHooks,
    htmlEnvHook(config2),
    devHtmlHook,
    ...normalHooks,
    ...postHooks,
    injectNonceAttributeTagHook(config2),
    postImportMapHook()
  ];
  return (server, url2, html, originalUrl) => {
    return applyHtmlTransforms(html, transformHooks, {
      path: url2,
      filename: getHtmlFilename(url2, server),
      server,
      originalUrl
    });
  };
}
function getHtmlFilename(url2, server) {
  if (url2.startsWith(FS_PREFIX)) {
    return decodeURIComponent(fsPathFromId(url2));
  } else {
    return decodeURIComponent(
      normalizePath$3(import_node_path3.default.join(server.config.root, url2.slice(1)))
    );
  }
}
function shouldPreTransform(url2, config2) {
  return !checkPublicFile(url2, config2) && (isJSRequest(url2) || isCSSRequest(url2));
}
var wordCharRE = /\w/;
function isBareRelative(url2) {
  return wordCharRE.test(url2[0]) && !url2.includes(":");
}
var processNodeUrl = (url2, useSrcSetReplacer, config2, htmlPath, originalUrl, server, isClassicScriptLink) => {
  const replacer = (url22) => {
    if (url22[0] === "/" && url22[1] !== "/" || // #3230 if some request url (localhost:3000/a/b) return to fallback html, the relative assets
    // path will add `/a/` prefix, it will caused 404.
    //
    // skip if url contains `:` as it implies a url protocol or Windows path that we don't want to replace.
    //
    // rewrite `./index.js` -> `localhost:5173/a/index.js`.
    // rewrite `../index.js` -> `localhost:5173/index.js`.
    // rewrite `relative/index.js` -> `localhost:5173/a/relative/index.js`.
    (url22[0] === "." || isBareRelative(url22)) && originalUrl && originalUrl !== "/" && htmlPath === "/index.html") {
      url22 = import_node_path3.default.posix.join(config2.base, url22);
    }
    let preTransformUrl;
    if (!isClassicScriptLink && shouldPreTransform(url22, config2)) {
      if (url22[0] === "/" && url22[1] !== "/") {
        preTransformUrl = url22;
      } else if (url22[0] === "." || isBareRelative(url22)) {
        preTransformUrl = import_node_path3.default.posix.join(
          config2.base,
          import_node_path3.default.posix.dirname(htmlPath),
          url22
        );
      }
    }
    if (server) {
      const mod = server.environments.client.moduleGraph.urlToModuleMap.get(
        preTransformUrl || url22
      );
      if (mod && mod.lastHMRTimestamp > 0) {
        url22 = injectQuery(url22, `t=${mod.lastHMRTimestamp}`);
      }
    }
    if (server && preTransformUrl) {
      try {
        preTransformUrl = decodeURI(preTransformUrl);
      } catch {
        return url22;
      }
      preTransformRequest(server, preTransformUrl, config2.decodedBase);
    }
    return url22;
  };
  const processedUrl = useSrcSetReplacer ? processSrcSetSync(url2, ({ url: url22 }) => replacer(url22)) : replacer(url2);
  return processedUrl;
};
var devHtmlHook = async (html, { path: htmlPath, filename, server, originalUrl }) => {
  const { config: config2, watcher } = server;
  const base = config2.base || "/";
  const decodedBase = config2.decodedBase || "/";
  let proxyModulePath;
  let proxyModuleUrl;
  const trailingSlash = htmlPath.endsWith("/");
  if (!trailingSlash && import_node_fs2.default.existsSync(filename)) {
    proxyModulePath = htmlPath;
    proxyModuleUrl = proxyModulePath;
  } else {
    const validPath = `${htmlPath}${trailingSlash ? "index.html" : ""}`;
    proxyModulePath = `\0${validPath}`;
    proxyModuleUrl = wrapId$1(proxyModulePath);
  }
  proxyModuleUrl = joinUrlSegments(decodedBase, proxyModuleUrl);
  const s2 = new MagicString(html);
  let inlineModuleIndex = -1;
  const proxyCacheUrl = decodeURI(
    cleanUrl2(proxyModulePath).replace(normalizePath$3(config2.root), "")
  );
  const styleUrl = [];
  const inlineStyles = [];
  const inlineModulePaths = [];
  const addInlineModule = (node2, ext) => {
    inlineModuleIndex++;
    const contentNode = node2.childNodes[0];
    const code = contentNode.value;
    let map2;
    if (proxyModulePath[0] !== "\0") {
      map2 = new MagicString(html).snip(
        contentNode.sourceCodeLocation.startOffset,
        contentNode.sourceCodeLocation.endOffset
      ).generateMap({ hires: "boundary" });
      map2.sources = [filename];
      map2.file = filename;
    }
    addToHTMLProxyCache(config2, proxyCacheUrl, inlineModuleIndex, { code, map: map2 });
    const modulePath = `${proxyModuleUrl}?html-proxy&index=${inlineModuleIndex}.${ext}`;
    inlineModulePaths.push(modulePath);
    s2.update(
      node2.sourceCodeLocation.startOffset,
      node2.sourceCodeLocation.endOffset,
      `<script type="module" src="${modulePath}"><\/script>`
    );
    preTransformRequest(server, modulePath, decodedBase);
  };
  await traverseHtml(html, filename, (node2) => {
    if (!nodeIsElement(node2)) {
      return;
    }
    if (node2.nodeName === "script") {
      const { src: src2, srcSourceCodeLocation, isModule, isIgnored } = getScriptInfo(node2);
      if (isIgnored) {
        removeViteIgnoreAttr(s2, node2.sourceCodeLocation);
      } else if (src2) {
        const processedUrl = processNodeUrl(
          src2.value,
          /* useSrcSetReplacer */
          false,
          config2,
          htmlPath,
          originalUrl,
          server,
          !isModule
        );
        if (processedUrl !== src2.value) {
          overwriteAttrValue(s2, srcSourceCodeLocation, processedUrl);
        }
      } else if (isModule && node2.childNodes.length) {
        addInlineModule(node2, "js");
      } else if (node2.childNodes.length) {
        const scriptNode = node2.childNodes[node2.childNodes.length - 1];
        for (const {
          url: url2,
          start,
          end
        } of extractImportExpressionFromClassicScript(scriptNode)) {
          const processedUrl = processNodeUrl(
            url2,
            false,
            config2,
            htmlPath,
            originalUrl
          );
          if (processedUrl !== url2) {
            s2.update(start, end, processedUrl);
          }
        }
      }
    }
    const inlineStyle = findNeedTransformStyleAttribute(node2);
    if (inlineStyle) {
      inlineModuleIndex++;
      inlineStyles.push({
        index: inlineModuleIndex,
        location: inlineStyle.location,
        code: inlineStyle.attr.value
      });
    }
    if (node2.nodeName === "style" && node2.childNodes.length) {
      const children = node2.childNodes[0];
      styleUrl.push({
        start: children.sourceCodeLocation.startOffset,
        end: children.sourceCodeLocation.endOffset,
        code: children.value
      });
    }
    const assetAttributes = getNodeAssetAttributes(node2);
    for (const attr of assetAttributes) {
      if (attr.type === "remove") {
        s2.remove(attr.location.startOffset, attr.location.endOffset);
      } else {
        const processedUrl = processNodeUrl(
          attr.value,
          attr.type === "srcset",
          config2,
          htmlPath,
          originalUrl
        );
        if (processedUrl !== attr.value) {
          overwriteAttrValue(s2, attr.location, processedUrl);
        }
      }
    }
  });
  const clientModuelGraph = server == null ? void 0 : server.environments.client.moduleGraph;
  if (clientModuelGraph) {
    await Promise.all(
      inlineModulePaths.map(async (url2) => {
        const module = await clientModuelGraph.getModuleByUrl(url2);
        if (module) {
          clientModuelGraph.invalidateModule(module);
        }
      })
    );
  }
  await Promise.all([
    ...styleUrl.map(async ({ start, end, code }, index) => {
      const url2 = `${proxyModulePath}?html-proxy&direct&index=${index}.css`;
      const mod = await server.environments.client.moduleGraph.ensureEntryFromUrl(
        url2,
        false
      );
      ensureWatchedFile(watcher, mod.file, config2.root);
      const result = await server.pluginContainer.transform(code, mod.id, {
        environment: server.environments.client
      });
      let content = "";
      if (result.map && "version" in result.map) {
        if (result.map.mappings) {
          await injectSourcesContent(result.map, proxyModulePath, config2.logger);
        }
        content = getCodeWithSourcemap("css", result.code, result.map);
      } else {
        content = result.code;
      }
      s2.overwrite(start, end, content);
    }),
    ...inlineStyles.map(async ({ index, location: location2, code }) => {
      const url2 = `${proxyModulePath}?html-proxy&inline-css&style-attr&index=${index}.css`;
      const mod = await server.environments.client.moduleGraph.ensureEntryFromUrl(
        url2,
        false
      );
      ensureWatchedFile(watcher, mod.file, config2.root);
      await (server == null ? void 0 : server.pluginContainer.transform(code, mod.id, {
        environment: server.environments.client
      }));
      const hash2 = getHash(cleanUrl2(mod.id));
      const result = htmlProxyResult.get(`${hash2}_${index}`);
      overwriteAttrValue(s2, location2, result ?? "");
    })
  ]);
  html = s2.toString();
  return {
    html,
    tags: [
      {
        tag: "script",
        attrs: {
          type: "module",
          src: import_node_path3.default.posix.join(base, CLIENT_PUBLIC_PATH)
        },
        injectTo: "head-prepend"
      }
    ]
  };
};
function indexHtmlMiddleware(root, server) {
  const isDev = isDevServer(server);
  return async function viteIndexHtmlMiddleware(req2, res, next) {
    if (res.writableEnded) {
      return next();
    }
    const url2 = req2.url && cleanUrl2(req2.url);
    if ((url2 == null ? void 0 : url2.endsWith(".html")) && req2.headers["sec-fetch-dest"] !== "script") {
      let filePath;
      if (isDev && url2.startsWith(FS_PREFIX)) {
        filePath = decodeURIComponent(fsPathFromId(url2));
      } else {
        filePath = import_node_path3.default.join(root, decodeURIComponent(url2));
      }
      if (import_node_fs2.default.existsSync(filePath)) {
        const headers = isDev ? server.config.server.headers : server.config.preview.headers;
        try {
          let html = await import_promises.default.readFile(filePath, "utf-8");
          if (isDev) {
            html = await server.transformIndexHtml(url2, html, req2.originalUrl);
          }
          return send$1(req2, res, html, "html", { headers });
        } catch (e2) {
          return next(e2);
        }
      }
    }
    next();
  };
}
function preTransformRequest(server, decodedUrl, decodedBase) {
  if (!server.config.server.preTransformRequests) return;
  decodedUrl = unwrapId$1(stripBase(decodedUrl, decodedBase));
  server.warmupRequest(decodedUrl);
}
var logTime = createDebugger("vite:time");
function timeMiddleware(root) {
  return function viteTimeMiddleware(req2, res, next) {
    const start = import_node_perf_hooks.performance.now();
    const end = res.end;
    res.end = (...args) => {
      logTime == null ? void 0 : logTime(`${timeFrom(start)} ${prettifyUrl(req2.url, root)}`);
      return end.call(res, ...args);
    };
    next();
  };
}
var EMPTY_OBJECT$1 = Object.freeze({});
var ModuleNode = class {
  constructor(moduleGraph, clientModule, ssrModule) {
    __publicField(this, "_moduleGraph");
    __publicField(this, "_clientModule");
    __publicField(this, "_ssrModule");
    this._moduleGraph = moduleGraph;
    this._clientModule = clientModule;
    this._ssrModule = ssrModule;
  }
  _get(prop) {
    var _a2, _b;
    return ((_a2 = this._clientModule) == null ? void 0 : _a2[prop]) ?? ((_b = this._ssrModule) == null ? void 0 : _b[prop]);
  }
  _set(prop, value2) {
    if (this._clientModule) {
      this._clientModule[prop] = value2;
    }
    if (this._ssrModule) {
      this._ssrModule[prop] = value2;
    }
  }
  _wrapModuleSet(prop, module) {
    if (!module) {
      return /* @__PURE__ */ new Set();
    }
    return createBackwardCompatibleModuleSet(this._moduleGraph, prop, module);
  }
  _getModuleSetUnion(prop) {
    const importedModules = /* @__PURE__ */ new Set();
    const ids = /* @__PURE__ */ new Set();
    if (this._clientModule) {
      for (const mod of this._clientModule[prop]) {
        if (mod.id) ids.add(mod.id);
        importedModules.add(
          this._moduleGraph.getBackwardCompatibleModuleNode(mod)
        );
      }
    }
    if (this._ssrModule) {
      for (const mod of this._ssrModule[prop]) {
        if (mod.id && !ids.has(mod.id)) {
          importedModules.add(
            this._moduleGraph.getBackwardCompatibleModuleNode(mod)
          );
        }
      }
    }
    return importedModules;
  }
  _getModuleInfoUnion(prop) {
    var _a2, _b;
    const _clientValue = (_a2 = this._clientModule) == null ? void 0 : _a2[prop];
    const _ssrValue = (_b = this._ssrModule) == null ? void 0 : _b[prop];
    if (_clientValue == null && _ssrValue == null) return void 0;
    return new Proxy({}, {
      get: (_, key) => {
        if (key === "meta") {
          return this.meta || EMPTY_OBJECT$1;
        }
        if (_clientValue) {
          if (key in _clientValue) {
            return _clientValue[key];
          }
        }
        if (_ssrValue) {
          if (key in _ssrValue) {
            return _ssrValue[key];
          }
        }
      }
    });
  }
  _getModuleObjectUnion(prop) {
    var _a2, _b;
    const _clientValue = (_a2 = this._clientModule) == null ? void 0 : _a2[prop];
    const _ssrValue = (_b = this._ssrModule) == null ? void 0 : _b[prop];
    if (_clientValue == null && _ssrValue == null) return void 0;
    const info = {};
    if (_ssrValue) {
      Object.assign(info, _ssrValue);
    }
    if (_clientValue) {
      Object.assign(info, _clientValue);
    }
    return info;
  }
  get url() {
    return this._get("url");
  }
  set url(value2) {
    this._set("url", value2);
  }
  get id() {
    return this._get("id");
  }
  set id(value2) {
    this._set("id", value2);
  }
  get file() {
    return this._get("file");
  }
  set file(value2) {
    this._set("file", value2);
  }
  get type() {
    return this._get("type");
  }
  // `info` needs special care as it's defined as a proxy in `pluginContainer`,
  // so we also merge it as a proxy too
  get info() {
    return this._getModuleInfoUnion("info");
  }
  get meta() {
    return this._getModuleObjectUnion("meta");
  }
  get importers() {
    return this._getModuleSetUnion("importers");
  }
  get clientImportedModules() {
    return this._wrapModuleSet("importedModules", this._clientModule);
  }
  get ssrImportedModules() {
    return this._wrapModuleSet("importedModules", this._ssrModule);
  }
  get importedModules() {
    return this._getModuleSetUnion("importedModules");
  }
  get acceptedHmrDeps() {
    return this._wrapModuleSet("acceptedHmrDeps", this._clientModule);
  }
  get acceptedHmrExports() {
    var _a2;
    return ((_a2 = this._clientModule) == null ? void 0 : _a2.acceptedHmrExports) ?? null;
  }
  get importedBindings() {
    var _a2;
    return ((_a2 = this._clientModule) == null ? void 0 : _a2.importedBindings) ?? null;
  }
  get isSelfAccepting() {
    var _a2;
    return (_a2 = this._clientModule) == null ? void 0 : _a2.isSelfAccepting;
  }
  get transformResult() {
    var _a2;
    return ((_a2 = this._clientModule) == null ? void 0 : _a2.transformResult) ?? null;
  }
  set transformResult(value2) {
    if (this._clientModule) {
      this._clientModule.transformResult = value2;
    }
  }
  get ssrTransformResult() {
    var _a2;
    return ((_a2 = this._ssrModule) == null ? void 0 : _a2.transformResult) ?? null;
  }
  set ssrTransformResult(value2) {
    if (this._ssrModule) {
      this._ssrModule.transformResult = value2;
    }
  }
  get ssrModule() {
    var _a2;
    return ((_a2 = this._ssrModule) == null ? void 0 : _a2.ssrModule) ?? null;
  }
  get ssrError() {
    var _a2;
    return ((_a2 = this._ssrModule) == null ? void 0 : _a2.ssrError) ?? null;
  }
  get lastHMRTimestamp() {
    var _a2, _b;
    return Math.max(
      ((_a2 = this._clientModule) == null ? void 0 : _a2.lastHMRTimestamp) ?? 0,
      ((_b = this._ssrModule) == null ? void 0 : _b.lastHMRTimestamp) ?? 0
    );
  }
  set lastHMRTimestamp(value2) {
    if (this._clientModule) {
      this._clientModule.lastHMRTimestamp = value2;
    }
    if (this._ssrModule) {
      this._ssrModule.lastHMRTimestamp = value2;
    }
  }
  get lastInvalidationTimestamp() {
    var _a2, _b;
    return Math.max(
      ((_a2 = this._clientModule) == null ? void 0 : _a2.lastInvalidationTimestamp) ?? 0,
      ((_b = this._ssrModule) == null ? void 0 : _b.lastInvalidationTimestamp) ?? 0
    );
  }
  get invalidationState() {
    var _a2;
    return (_a2 = this._clientModule) == null ? void 0 : _a2.invalidationState;
  }
  get ssrInvalidationState() {
    var _a2;
    return (_a2 = this._ssrModule) == null ? void 0 : _a2.invalidationState;
  }
};
function mapIterator(iterable, transform2) {
  return {
    [Symbol.iterator]() {
      return this;
    },
    next() {
      const r2 = iterable.next();
      return r2.done ? r2 : {
        value: transform2(r2.value),
        done: false
      };
    }
  };
}
var ModuleGraph = class {
  constructor(moduleGraphs) {
    /** @internal */
    __publicField(this, "_moduleGraphs");
    __publicField(this, "urlToModuleMap");
    __publicField(this, "idToModuleMap");
    __publicField(this, "etagToModuleMap");
    __publicField(this, "fileToModulesMap");
    __publicField(this, "moduleNodeCache", new DualWeakMap());
    this._moduleGraphs = moduleGraphs;
    const getModuleMapUnion = (prop) => () => {
      if (this._ssr[prop].size === 0) {
        return this._client[prop];
      }
      const map2 = new Map(this._client[prop]);
      for (const [key, module] of this._ssr[prop]) {
        if (!map2.has(key)) {
          map2.set(key, module);
        }
      }
      return map2;
    };
    this.urlToModuleMap = createBackwardCompatibleModuleMap(
      this,
      "urlToModuleMap",
      getModuleMapUnion("urlToModuleMap")
    );
    this.idToModuleMap = createBackwardCompatibleModuleMap(
      this,
      "idToModuleMap",
      getModuleMapUnion("idToModuleMap")
    );
    this.etagToModuleMap = createBackwardCompatibleModuleMap(
      this,
      "etagToModuleMap",
      () => this._client.etagToModuleMap
    );
    this.fileToModulesMap = createBackwardCompatibleFileToModulesMap(this);
  }
  /** @internal */
  get _client() {
    return this._moduleGraphs.client();
  }
  /** @internal */
  get _ssr() {
    return this._moduleGraphs.ssr();
  }
  getModuleById(id) {
    const clientModule = this._client.getModuleById(id);
    const ssrModule = this._ssr.getModuleById(id);
    if (!clientModule && !ssrModule) {
      return;
    }
    return this.getBackwardCompatibleModuleNodeDual(clientModule, ssrModule);
  }
  async getModuleByUrl(url2, _ssr) {
    const [clientModule, ssrModule] = await Promise.all([
      this._client.getModuleByUrl(url2),
      this._ssr.getModuleByUrl(url2)
    ]);
    if (!clientModule && !ssrModule) {
      return;
    }
    return this.getBackwardCompatibleModuleNodeDual(clientModule, ssrModule);
  }
  getModulesByFile(file) {
    const clientModules = this._client.getModulesByFile(file);
    const ssrModules = this._ssr.getModulesByFile(file);
    if (!clientModules && !ssrModules) {
      return void 0;
    }
    const result = /* @__PURE__ */ new Set();
    if (clientModules) {
      for (const mod of clientModules) {
        result.add(this.getBackwardCompatibleBrowserModuleNode(mod));
      }
    }
    if (ssrModules) {
      for (const mod of ssrModules) {
        if (mod.id == null || !this._client.getModuleById(mod.id)) {
          result.add(this.getBackwardCompatibleServerModuleNode(mod));
        }
      }
    }
    return result;
  }
  onFileChange(file) {
    this._client.onFileChange(file);
    this._ssr.onFileChange(file);
  }
  onFileDelete(file) {
    this._client.onFileDelete(file);
    this._ssr.onFileDelete(file);
  }
  /** @internal */
  _getModuleGraph(environment) {
    switch (environment) {
      case "client":
        return this._client;
      case "ssr":
        return this._ssr;
      default:
        throw new Error(`Invalid module node environment ${environment}`);
    }
  }
  invalidateModule(mod, seen2 = /* @__PURE__ */ new Set(), timestamp = Date.now(), isHmr = false, softInvalidate = false) {
    if (mod._clientModule) {
      this._client.invalidateModule(
        mod._clientModule,
        new Set(
          [...seen2].map((mod2) => mod2._clientModule).filter(Boolean)
        ),
        timestamp,
        isHmr,
        softInvalidate
      );
    }
    if (mod._ssrModule) {
      this._ssr.invalidateModule(
        mod._ssrModule,
        new Set(
          [...seen2].map((mod2) => mod2._ssrModule).filter(Boolean)
        ),
        timestamp,
        isHmr,
        softInvalidate
      );
    }
  }
  invalidateAll() {
    this._client.invalidateAll();
    this._ssr.invalidateAll();
  }
  /* TODO: It seems there isn't usage of this method in the ecosystem
     Waiting to check if we really need this for backwards compatibility
  async updateModuleInfo(
    module: ModuleNode,
    importedModules: Set<string | ModuleNode>,
    importedBindings: Map<string, Set<string>> | null,
    acceptedModules: Set<string | ModuleNode>,
    acceptedExports: Set<string> | null,
    isSelfAccepting: boolean,
    ssr?: boolean,
    staticImportedUrls?: Set<string>, // internal
  ): Promise<Set<ModuleNode> | undefined> {
    // Not implemented
  }
  */
  async ensureEntryFromUrl(rawUrl, ssr, setIsSelfAccepting = true) {
    const module = await (ssr ? this._ssr : this._client).ensureEntryFromUrl(
      rawUrl,
      setIsSelfAccepting
    );
    return this.getBackwardCompatibleModuleNode(module);
  }
  createFileOnlyEntry(file) {
    const clientModule = this._client.createFileOnlyEntry(file);
    const ssrModule = this._ssr.createFileOnlyEntry(file);
    return this.getBackwardCompatibleModuleNodeDual(clientModule, ssrModule);
  }
  async resolveUrl(url2, ssr) {
    return ssr ? this._ssr.resolveUrl(url2) : this._client.resolveUrl(url2);
  }
  updateModuleTransformResult(mod, result, ssr) {
    const environment = ssr ? "ssr" : "client";
    this._getModuleGraph(environment).updateModuleTransformResult(
      environment === "client" ? mod._clientModule : mod._ssrModule,
      result
    );
  }
  getModuleByEtag(etag2) {
    const mod = this._client.etagToModuleMap.get(etag2);
    return mod && this.getBackwardCompatibleBrowserModuleNode(mod);
  }
  getBackwardCompatibleBrowserModuleNode(clientModule) {
    return this.getBackwardCompatibleModuleNodeDual(
      clientModule,
      clientModule.id ? this._ssr.getModuleById(clientModule.id) : void 0
    );
  }
  getBackwardCompatibleServerModuleNode(ssrModule) {
    return this.getBackwardCompatibleModuleNodeDual(
      ssrModule.id ? this._client.getModuleById(ssrModule.id) : void 0,
      ssrModule
    );
  }
  getBackwardCompatibleModuleNode(mod) {
    return mod.environment === "client" ? this.getBackwardCompatibleBrowserModuleNode(mod) : this.getBackwardCompatibleServerModuleNode(mod);
  }
  getBackwardCompatibleModuleNodeDual(clientModule, ssrModule) {
    const cached = this.moduleNodeCache.get(clientModule, ssrModule);
    if (cached) {
      return cached;
    }
    const moduleNode = new ModuleNode(this, clientModule, ssrModule);
    this.moduleNodeCache.set(clientModule, ssrModule, moduleNode);
    return moduleNode;
  }
};
var DualWeakMap = class {
  constructor() {
    __publicField(this, "map", /* @__PURE__ */ new WeakMap());
    __publicField(this, "undefinedKey", {});
  }
  get(key1, key2) {
    var _a2;
    const k1 = key1 ?? this.undefinedKey;
    const k2 = key2 ?? this.undefinedKey;
    return (_a2 = this.map.get(k1)) == null ? void 0 : _a2.get(k2);
  }
  set(key1, key2, value2) {
    const k1 = key1 ?? this.undefinedKey;
    const k2 = key2 ?? this.undefinedKey;
    if (!this.map.has(k1)) {
      this.map.set(k1, /* @__PURE__ */ new Map());
    }
    const m2 = this.map.get(k1);
    m2.set(k2, value2);
  }
};
function createBackwardCompatibleModuleSet(moduleGraph, prop, module) {
  return {
    [Symbol.iterator]() {
      return this.keys();
    },
    has(key) {
      if (!key.id) {
        return false;
      }
      const keyModule = moduleGraph._getModuleGraph(module.environment).getModuleById(key.id);
      return keyModule !== void 0 && module[prop].has(keyModule);
    },
    values() {
      return this.keys();
    },
    keys() {
      return mapIterator(
        module[prop].keys(),
        (mod) => moduleGraph.getBackwardCompatibleModuleNode(mod)
      );
    },
    get size() {
      return module[prop].size;
    },
    forEach(callback, thisArg) {
      return module[prop].forEach((mod) => {
        const backwardCompatibleMod = moduleGraph.getBackwardCompatibleModuleNode(mod);
        callback.call(
          thisArg,
          backwardCompatibleMod,
          backwardCompatibleMod,
          this
        );
      });
    }
    // There are several methods missing. We can implement them if downstream
    // projects are relying on them: add, clear, delete, difference, intersection,
    // sDisjointFrom, isSubsetOf, isSupersetOf, symmetricDifference, union
  };
}
function createBackwardCompatibleModuleMap(moduleGraph, prop, getModuleMap) {
  return {
    [Symbol.iterator]() {
      return this.entries();
    },
    get(key) {
      const clientModule = moduleGraph._client[prop].get(key);
      const ssrModule = moduleGraph._ssr[prop].get(key);
      if (!clientModule && !ssrModule) {
        return;
      }
      return moduleGraph.getBackwardCompatibleModuleNodeDual(
        clientModule,
        ssrModule
      );
    },
    set(key, mod) {
      const clientModule = mod._clientModule;
      if (clientModule) {
        moduleGraph._client[prop].set(key, clientModule);
      }
      const ssrModule = mod._ssrModule;
      if (ssrModule) {
        moduleGraph._ssr[prop].set(key, ssrModule);
      }
    },
    keys() {
      return getModuleMap().keys();
    },
    values() {
      return mapIterator(
        getModuleMap().values(),
        (mod) => moduleGraph.getBackwardCompatibleModuleNode(mod)
      );
    },
    entries() {
      return mapIterator(getModuleMap().entries(), ([key, mod]) => [
        key,
        moduleGraph.getBackwardCompatibleModuleNode(mod)
      ]);
    },
    get size() {
      return getModuleMap().size;
    },
    forEach(callback, thisArg) {
      return getModuleMap().forEach((mod, key) => {
        const backwardCompatibleMod = moduleGraph.getBackwardCompatibleModuleNode(mod);
        callback.call(thisArg, backwardCompatibleMod, key, this);
      });
    }
  };
}
function createBackwardCompatibleFileToModulesMap(moduleGraph) {
  const getFileToModulesMap = () => {
    if (!moduleGraph._ssr.fileToModulesMap.size) {
      return moduleGraph._client.fileToModulesMap;
    }
    const map2 = new Map(moduleGraph._client.fileToModulesMap);
    for (const [key, modules] of moduleGraph._ssr.fileToModulesMap) {
      const modulesSet = map2.get(key);
      if (!modulesSet) {
        map2.set(key, modules);
      } else {
        for (const ssrModule of modules) {
          let hasModule = false;
          for (const clientModule of modulesSet) {
            hasModule || (hasModule = clientModule.id === ssrModule.id);
            if (hasModule) {
              break;
            }
          }
          if (!hasModule) {
            modulesSet.add(ssrModule);
          }
        }
      }
    }
    return map2;
  };
  const getBackwardCompatibleModules = (modules) => new Set(
    [...modules].map(
      (mod) => moduleGraph.getBackwardCompatibleModuleNode(mod)
    )
  );
  return {
    [Symbol.iterator]() {
      return this.entries();
    },
    get(key) {
      const clientModules = moduleGraph._client.fileToModulesMap.get(key);
      const ssrModules = moduleGraph._ssr.fileToModulesMap.get(key);
      if (!clientModules && !ssrModules) {
        return;
      }
      const modules = clientModules ?? /* @__PURE__ */ new Set();
      if (ssrModules) {
        for (const ssrModule of ssrModules) {
          if (ssrModule.id) {
            let found3 = false;
            for (const mod of modules) {
              found3 || (found3 = mod.id === ssrModule.id);
              if (found3) {
                break;
              }
            }
            if (!found3) {
              modules.add(ssrModule);
            }
          }
        }
      }
      return getBackwardCompatibleModules(modules);
    },
    keys() {
      return getFileToModulesMap().keys();
    },
    values() {
      return mapIterator(
        getFileToModulesMap().values(),
        getBackwardCompatibleModules
      );
    },
    entries() {
      return mapIterator(getFileToModulesMap().entries(), ([key, modules]) => [
        key,
        getBackwardCompatibleModules(modules)
      ]);
    },
    get size() {
      return getFileToModulesMap().size;
    },
    forEach(callback, thisArg) {
      return getFileToModulesMap().forEach((modules, key) => {
        callback.call(thisArg, getBackwardCompatibleModules(modules), key, this);
      });
    }
  };
}
function notFoundMiddleware() {
  return function vite404Middleware(_, res) {
    res.statusCode = 404;
    res.end();
  };
}
var ROOT_FILES = [
  // '.git',
  // https://pnpm.io/workspaces/
  "pnpm-workspace.yaml",
  // https://rushjs.io/pages/advanced/config_files/
  // 'rush.json',
  // https://nx.dev/latest/react/getting-started/nx-setup
  // 'workspace.json',
  // 'nx.json',
  // https://github.com/lerna/lerna#lernajson
  "lerna.json"
];
function hasWorkspacePackageJSON(root) {
  const path4 = (0, import_node_path3.join)(root, "package.json");
  if (!isFileReadable(path4)) {
    return false;
  }
  try {
    const content = JSON.parse(import_node_fs2.default.readFileSync(path4, "utf-8")) || {};
    return !!content.workspaces;
  } catch {
    return false;
  }
}
function hasRootFile(root) {
  return ROOT_FILES.some((file) => import_node_fs2.default.existsSync((0, import_node_path3.join)(root, file)));
}
function hasPackageJSON(root) {
  const path4 = (0, import_node_path3.join)(root, "package.json");
  return import_node_fs2.default.existsSync(path4);
}
function searchForPackageRoot(current, root = current) {
  if (hasPackageJSON(current)) return current;
  const dir = (0, import_node_path3.dirname)(current);
  if (!dir || dir === current) return root;
  return searchForPackageRoot(dir, root);
}
function searchForWorkspaceRoot(current, root = searchForPackageRoot(current)) {
  if (hasRootFile(current)) return current;
  if (hasWorkspacePackageJSON(current)) return current;
  const dir = (0, import_node_path3.dirname)(current);
  if (!dir || dir === current) return root;
  return searchForWorkspaceRoot(dir, root);
}
function rejectInvalidRequestMiddleware() {
  return function viteRejectInvalidRequestMiddleware(req2, res, next) {
    var _a2;
    if ((_a2 = req2.url) == null ? void 0 : _a2.includes("#")) {
      res.writeHead(400);
      res.end();
      return;
    }
    return next();
  };
}
function createServer(inlineConfig = {}) {
  return _createServer(inlineConfig, { listen: true });
}
async function _createServer(inlineConfig = {}, options2) {
  var _a2;
  const config2 = await resolveConfig(inlineConfig, "serve");
  const initPublicFilesPromise = initPublicFiles(config2);
  const { root, server: serverConfig } = config2;
  const httpsOptions = await resolveHttpsConfig(config2.server.https);
  const { middlewareMode } = serverConfig;
  const resolvedOutDirs = getResolvedOutDirs(
    config2.root,
    config2.build.outDir,
    config2.build.rollupOptions.output
  );
  const emptyOutDir = resolveEmptyOutDir(
    config2.build.emptyOutDir,
    config2.root,
    resolvedOutDirs
  );
  const resolvedWatchOptions = resolveChokidarOptions(
    {
      disableGlobbing: true,
      ...serverConfig.watch
    },
    resolvedOutDirs,
    emptyOutDir,
    config2.cacheDir
  );
  const middlewares = connect$1();
  const httpServer = middlewareMode ? null : await resolveHttpServer(serverConfig, middlewares, httpsOptions);
  const ws = createWebSocketServer(httpServer, config2, httpsOptions);
  const publicFiles = await initPublicFilesPromise;
  const { publicDir } = config2;
  if (httpServer) {
    setClientErrorHandler(httpServer, config2.logger);
  }
  const watchEnabled = serverConfig.watch !== null;
  const watcher = watchEnabled ? chokidar.watch(
    // config file dependencies and env file might be outside of root
    [
      root,
      ...config2.configFileDependencies,
      ...getEnvFilesForMode(config2.mode, config2.envDir),
      // Watch the public directory explicitly because it might be outside
      // of the root directory.
      ...publicDir && publicFiles ? [publicDir] : []
    ],
    resolvedWatchOptions
  ) : createNoopWatcher(resolvedWatchOptions);
  const environments = {};
  for (const [name, environmentOptions] of Object.entries(
    config2.environments
  )) {
    environments[name] = await environmentOptions.dev.createEnvironment(
      name,
      config2,
      {
        ws
      }
    );
  }
  for (const environment of Object.values(environments)) {
    const previousInstance = (_a2 = options2.previousEnvironments) == null ? void 0 : _a2[environment.name];
    await environment.init({ watcher, previousInstance });
  }
  let moduleGraph = new ModuleGraph({
    client: () => environments.client.moduleGraph,
    ssr: () => environments.ssr.moduleGraph
  });
  const pluginContainer = createPluginContainer(environments);
  const closeHttpServer = createServerCloseFn(httpServer);
  const devHtmlTransformFn = createDevHtmlTransformFn(config2);
  let closeServerPromise;
  const closeServer = async () => {
    var _a3;
    if (!middlewareMode) {
      teardownSIGTERMListener(closeServerAndExit);
    }
    await Promise.allSettled([
      watcher.close(),
      ws.close(),
      Promise.allSettled(
        Object.values(server.environments).map(
          (environment) => environment.close()
        )
      ),
      closeHttpServer(),
      (_a3 = server._ssrCompatModuleRunner) == null ? void 0 : _a3.close()
    ]);
    server.resolvedUrls = null;
    server._ssrCompatModuleRunner = void 0;
  };
  let server = {
    config: config2,
    middlewares,
    httpServer,
    watcher,
    ws,
    hot: createDeprecatedHotBroadcaster(ws),
    environments,
    pluginContainer,
    get moduleGraph() {
      warnFutureDeprecation(config2, "removeServerModuleGraph");
      return moduleGraph;
    },
    set moduleGraph(graph) {
      moduleGraph = graph;
    },
    resolvedUrls: null,
    // will be set on listen
    ssrTransform(code, inMap, url2, originalCode = code) {
      return ssrTransform(code, inMap, url2, originalCode, {
        json: {
          stringify: config2.json.stringify === true && config2.json.namedExports !== true
        }
      });
    },
    // environment.transformRequest and .warmupRequest don't take an options param for now,
    // so the logic and error handling needs to be duplicated here.
    // The only param in options that could be important is `html`, but we may remove it as
    // that is part of the internal control flow for the vite dev server to be able to bail
    // out and do the html fallback
    transformRequest(url2, options22) {
      warnFutureDeprecation(
        config2,
        "removeServerTransformRequest",
        "server.transformRequest() is deprecated. Use environment.transformRequest() instead."
      );
      const environment = server.environments[(options22 == null ? void 0 : options22.ssr) ? "ssr" : "client"];
      return transformRequest(environment, url2, options22);
    },
    async warmupRequest(url2, options22) {
      try {
        const environment = server.environments[(options22 == null ? void 0 : options22.ssr) ? "ssr" : "client"];
        await transformRequest(environment, url2, options22);
      } catch (e2) {
        if ((e2 == null ? void 0 : e2.code) === ERR_OUTDATED_OPTIMIZED_DEP2 || (e2 == null ? void 0 : e2.code) === ERR_CLOSED_SERVER) {
          return;
        }
        server.config.logger.error(
          buildErrorMessage(e2, [`Pre-transform error: ${e2.message}`], false),
          {
            error: e2,
            timestamp: true
          }
        );
      }
    },
    transformIndexHtml(url2, html, originalUrl) {
      return devHtmlTransformFn(server, url2, html, originalUrl);
    },
    async ssrLoadModule(url2, opts) {
      warnFutureDeprecation(config2, "removeSsrLoadModule");
      return ssrLoadModule(url2, server, opts == null ? void 0 : opts.fixStacktrace);
    },
    ssrFixStacktrace(e2) {
      ssrFixStacktrace(e2, server.environments.ssr.moduleGraph);
    },
    ssrRewriteStacktrace(stack) {
      return ssrRewriteStacktrace(stack, server.environments.ssr.moduleGraph);
    },
    async reloadModule(module) {
      if (serverConfig.hmr !== false && module.file) {
        const environmentModule = module._clientModule ?? module._ssrModule;
        updateModules(
          environments[environmentModule.environment],
          module.file,
          [environmentModule],
          Date.now()
        );
      }
    },
    async listen(port, isRestart) {
      await startServer(server, port);
      if (httpServer) {
        server.resolvedUrls = await resolveServerUrls(
          httpServer,
          config2.server,
          httpsOptions,
          config2
        );
        if (!isRestart && config2.server.open) server.openBrowser();
      }
      return server;
    },
    openBrowser() {
      const options22 = server.config.server;
      const url2 = getServerUrlByHost(server.resolvedUrls, options22.host);
      if (url2) {
        const path22 = typeof options22.open === "string" ? new URL(options22.open, url2).href : url2;
        if (server.config.server.preTransformRequests) {
          setTimeout(() => {
            const getMethod = path22.startsWith("https:") ? import_node_https.get : import_node_http.get;
            getMethod(
              path22,
              {
                headers: {
                  // Allow the history middleware to redirect to /index.html
                  Accept: "text/html"
                }
              },
              (res) => {
                res.on("end", () => {
                });
              }
            ).on("error", () => {
            }).end();
          }, 0);
        }
        openBrowser(path22, true, server.config.logger);
      } else {
        server.config.logger.warn("No URL available to open in browser");
      }
    },
    async close() {
      if (!closeServerPromise) {
        closeServerPromise = closeServer();
      }
      return closeServerPromise;
    },
    printUrls() {
      if (server.resolvedUrls) {
        printServerUrls(
          server.resolvedUrls,
          serverConfig.host,
          config2.logger.info
        );
      } else if (middlewareMode) {
        throw new Error("cannot print server URLs in middleware mode.");
      } else {
        throw new Error(
          "cannot print server URLs before server.listen is called."
        );
      }
    },
    bindCLIShortcuts(options22) {
      bindCLIShortcuts(server, options22);
    },
    async restart(forceOptimize) {
      if (!server._restartPromise) {
        server._forceOptimizeOnRestart = !!forceOptimize;
        server._restartPromise = restartServer(server).finally(() => {
          server._restartPromise = null;
          server._forceOptimizeOnRestart = false;
        });
      }
      return server._restartPromise;
    },
    waitForRequestsIdle(ignoredId) {
      return environments.client.waitForRequestsIdle(ignoredId);
    },
    _setInternalServer(_server) {
      server = _server;
    },
    _importGlobMap: /* @__PURE__ */ new Map(),
    _restartPromise: null,
    _forceOptimizeOnRestart: false,
    _shortcutsOptions: void 0
  };
  const reflexServer = new Proxy(server, {
    get: (_, property) => {
      return server[property];
    },
    set: (_, property, value2) => {
      server[property] = value2;
      return true;
    }
  });
  const closeServerAndExit = async (_, exitCode) => {
    try {
      await server.close();
    } finally {
      process.exitCode ?? (process.exitCode = exitCode ? 128 + exitCode : void 0);
      process.exit();
    }
  };
  if (!middlewareMode) {
    setupSIGTERMListener(closeServerAndExit);
  }
  const onHMRUpdate = async (type, file) => {
    if (serverConfig.hmr !== false) {
      await handleHMRUpdate(type, file, server);
    }
  };
  const onFileAddUnlink = async (file, isUnlink) => {
    var _a3;
    file = normalizePath$3(file);
    reloadOnTsconfigChange(server, file);
    await pluginContainer.watchChange(file, {
      event: isUnlink ? "delete" : "create"
    });
    if (publicDir && publicFiles) {
      if (file.startsWith(publicDir)) {
        const path22 = file.slice(publicDir.length);
        publicFiles[isUnlink ? "delete" : "add"](path22);
        if (!isUnlink) {
          const clientModuleGraph = server.environments.client.moduleGraph;
          const moduleWithSamePath = await clientModuleGraph.getModuleByUrl(path22);
          const etag2 = (_a3 = moduleWithSamePath == null ? void 0 : moduleWithSamePath.transformResult) == null ? void 0 : _a3.etag;
          if (etag2) {
            clientModuleGraph.etagToModuleMap.delete(etag2);
          }
        }
      }
    }
    if (isUnlink) {
      for (const environment of Object.values(server.environments)) {
        environment.moduleGraph.onFileDelete(file);
      }
    }
    await onHMRUpdate(isUnlink ? "delete" : "create", file);
  };
  watcher.on("change", async (file) => {
    file = normalizePath$3(file);
    reloadOnTsconfigChange(server, file);
    await pluginContainer.watchChange(file, { event: "update" });
    for (const environment of Object.values(server.environments)) {
      environment.moduleGraph.onFileChange(file);
    }
    await onHMRUpdate("update", file);
  });
  watcher.on("add", (file) => {
    onFileAddUnlink(file, false);
  });
  watcher.on("unlink", (file) => {
    onFileAddUnlink(file, true);
  });
  if (!middlewareMode && httpServer) {
    httpServer.once("listening", () => {
      serverConfig.port = httpServer.address().port;
    });
  }
  const postHooks = [];
  for (const hook of config2.getSortedPluginHooks("configureServer")) {
    postHooks.push(await hook(reflexServer));
  }
  if (process.env.DEBUG) {
    middlewares.use(timeMiddleware(root));
  }
  middlewares.use(rejectInvalidRequestMiddleware());
  const { cors } = serverConfig;
  if (cors !== false) {
    middlewares.use(corsMiddleware(typeof cors === "boolean" ? {} : cors));
  }
  const { allowedHosts } = serverConfig;
  if (allowedHosts !== true && !serverConfig.https) {
    middlewares.use(hostCheckMiddleware(config2, false));
  }
  middlewares.use(cachedTransformMiddleware(server));
  const { proxy } = serverConfig;
  if (proxy) {
    const middlewareServer = (isObject$1(middlewareMode) ? middlewareMode.server : null) || httpServer;
    middlewares.use(proxyMiddleware(middlewareServer, proxy, config2));
  }
  if (config2.base !== "/") {
    middlewares.use(baseMiddleware(config2.rawBase, !!middlewareMode));
  }
  middlewares.use("/__open-in-editor", launchEditorMiddleware$1());
  middlewares.use(function viteHMRPingMiddleware(req2, res, next) {
    if (req2.headers["accept"] === "text/x-vite-ping") {
      res.writeHead(204).end();
    } else {
      next();
    }
  });
  if (publicDir) {
    middlewares.use(servePublicMiddleware(server, publicFiles));
  }
  middlewares.use(transformMiddleware(server));
  middlewares.use(serveRawFsMiddleware(server));
  middlewares.use(serveStaticMiddleware(server));
  if (config2.appType === "spa" || config2.appType === "mpa") {
    middlewares.use(htmlFallbackMiddleware(root, config2.appType === "spa"));
  }
  postHooks.forEach((fn) => fn && fn());
  if (config2.appType === "spa" || config2.appType === "mpa") {
    middlewares.use(indexHtmlMiddleware(root, server));
    middlewares.use(notFoundMiddleware());
  }
  middlewares.use(errorMiddleware(server, !!middlewareMode));
  let initingServer;
  let serverInited = false;
  const initServer = async (onListen) => {
    if (serverInited) return;
    if (initingServer) return initingServer;
    initingServer = async function() {
      await environments.client.pluginContainer.buildStart();
      if (onListen || options2.listen) {
        await Promise.all(
          Object.values(environments).map((e2) => e2.listen(server))
        );
      }
      initingServer = void 0;
      serverInited = true;
    }();
    return initingServer;
  };
  if (!middlewareMode && httpServer) {
    const listen2 = httpServer.listen.bind(httpServer);
    httpServer.listen = async (port, ...args) => {
      try {
        await initServer(true);
      } catch (e2) {
        httpServer.emit("error", e2);
        return;
      }
      return listen2(port, ...args);
    };
  } else {
    await initServer(false);
  }
  return server;
}
async function startServer(server, inlinePort) {
  const httpServer = server.httpServer;
  if (!httpServer) {
    throw new Error("Cannot call server.listen in middleware mode.");
  }
  const options2 = server.config.server;
  const hostname = await resolveHostname(options2.host);
  const configPort = inlinePort ?? options2.port;
  const port = (!configPort || configPort === server._configServerPort ? server._currentServerPort : configPort) ?? DEFAULT_DEV_PORT;
  server._configServerPort = configPort;
  const serverPort = await httpServerStart(httpServer, {
    port,
    strictPort: options2.strictPort,
    host: hostname.host,
    logger: server.config.logger
  });
  server._currentServerPort = serverPort;
}
function createServerCloseFn(server) {
  if (!server) {
    return () => Promise.resolve();
  }
  let hasListened = false;
  const openSockets = /* @__PURE__ */ new Set();
  server.on("connection", (socket) => {
    openSockets.add(socket);
    socket.on("close", () => {
      openSockets.delete(socket);
    });
  });
  server.once("listening", () => {
    hasListened = true;
  });
  return () => new Promise((resolve4, reject) => {
    openSockets.forEach((s2) => s2.destroy());
    if (hasListened) {
      server.close((err2) => {
        if (err2) {
          reject(err2);
        } else {
          resolve4();
        }
      });
    } else {
      resolve4();
    }
  });
}
function resolvedAllowDir(root, dir) {
  return normalizePath$3(import_node_path3.default.resolve(root, dir));
}
var serverConfigDefaults = Object.freeze({
  port: DEFAULT_DEV_PORT,
  strictPort: false,
  host: "localhost",
  allowedHosts: [],
  https: void 0,
  open: false,
  proxy: void 0,
  cors: { origin: defaultAllowedOrigins },
  headers: {},
  // hmr
  // ws
  warmup: {
    clientFiles: [],
    ssrFiles: []
  },
  // watch
  middlewareMode: false,
  fs: {
    strict: true,
    // allow
    deny: [".env", ".env.*", "*.{crt,pem}", "**/.git/**"]
  },
  // origin
  preTransformRequests: true,
  // sourcemapIgnoreList
  perEnvironmentStartEndDuringDev: false
  // hotUpdateEnvironments
});
function resolveServerOptions(root, raw, logger) {
  var _a2, _b;
  const _server = mergeWithDefaults(
    {
      ...serverConfigDefaults,
      host: void 0,
      // do not set here to detect whether host is set or not
      sourcemapIgnoreList: isInNodeModules$1
    },
    raw ?? {}
  );
  const server = {
    ..._server,
    fs: {
      ..._server.fs,
      // run searchForWorkspaceRoot only if needed
      allow: ((_a2 = raw == null ? void 0 : raw.fs) == null ? void 0 : _a2.allow) ?? [searchForWorkspaceRoot(root)]
    },
    sourcemapIgnoreList: _server.sourcemapIgnoreList === false ? () => false : _server.sourcemapIgnoreList
  };
  let allowDirs = server.fs.allow;
  if (process.versions.pnp) {
    const cwd2 = searchForPackageRoot(root);
    try {
      const enableGlobalCache = (0, import_node_child_process.execSync)("yarn config get enableGlobalCache", { cwd: cwd2 }).toString().trim() === "true";
      const yarnCacheDir = (0, import_node_child_process.execSync)(
        `yarn config get ${enableGlobalCache ? "globalFolder" : "cacheFolder"}`,
        { cwd: cwd2 }
      ).toString().trim();
      allowDirs.push(yarnCacheDir);
    } catch (e2) {
      logger.warn(`Get yarn cache dir error: ${e2.message}`, {
        timestamp: true
      });
    }
  }
  allowDirs = allowDirs.map((i) => resolvedAllowDir(root, i));
  const resolvedClientDir = resolvedAllowDir(root, CLIENT_DIR);
  if (!allowDirs.some((dir) => isParentDirectory(dir, resolvedClientDir))) {
    allowDirs.push(resolvedClientDir);
  }
  server.fs.allow = allowDirs;
  if ((_b = server.origin) == null ? void 0 : _b.endsWith("/")) {
    server.origin = server.origin.slice(0, -1);
    logger.warn(
      colors$1.yellow(
        `${colors$1.bold("(!)")} server.origin should not end with "/". Using "${server.origin}" instead.`
      )
    );
  }
  if (process.env.__VITE_ADDITIONAL_SERVER_ALLOWED_HOSTS && Array.isArray(server.allowedHosts)) {
    const additionalHost = process.env.__VITE_ADDITIONAL_SERVER_ALLOWED_HOSTS;
    server.allowedHosts = [...server.allowedHosts, additionalHost];
  }
  return server;
}
async function restartServer(server) {
  global.__vite_start_time = import_node_perf_hooks.performance.now();
  const shortcutsOptions = server._shortcutsOptions;
  let inlineConfig = server.config.inlineConfig;
  if (server._forceOptimizeOnRestart) {
    inlineConfig = mergeConfig(inlineConfig, {
      forceOptimizeDeps: true
    });
  }
  {
    let newServer = null;
    try {
      newServer = await _createServer(inlineConfig, {
        listen: false,
        previousEnvironments: server.environments
      });
    } catch (err2) {
      server.config.logger.error(err2.message, {
        timestamp: true
      });
      server.config.logger.error("server restart failed", { timestamp: true });
      return;
    }
    await server.close();
    const middlewares = server.middlewares;
    newServer._configServerPort = server._configServerPort;
    newServer._currentServerPort = server._currentServerPort;
    Object.assign(server, newServer);
    middlewares.stack = newServer.middlewares.stack;
    server.middlewares = middlewares;
    newServer._setInternalServer(server);
  }
  const {
    logger,
    server: { port, middlewareMode }
  } = server.config;
  if (!middlewareMode) {
    await server.listen(port, true);
  } else {
    await Promise.all(
      Object.values(server.environments).map((e2) => e2.listen(server))
    );
  }
  logger.info("server restarted.", { timestamp: true });
  if (shortcutsOptions) {
    shortcutsOptions.print = false;
    bindCLIShortcuts(server, shortcutsOptions);
  }
}
async function restartServerWithUrls(server) {
  if (server.config.server.middlewareMode) {
    await server.restart();
    return;
  }
  const { port: prevPort, host: prevHost } = server.config.server;
  const prevUrls = server.resolvedUrls;
  await server.restart();
  const {
    logger,
    server: { port, host }
  } = server.config;
  if ((port ?? DEFAULT_DEV_PORT) !== (prevPort ?? DEFAULT_DEV_PORT) || host !== prevHost || diffDnsOrderChange(prevUrls, server.resolvedUrls)) {
    logger.info("");
    server.printUrls();
  }
}
var debugHmr = createDebugger("vite:hmr");
var whitespaceRE = /\s/;
var normalizedClientDir = normalizePath$3(CLIENT_DIR);
function getShortName(file, root) {
  return file.startsWith(withTrailingSlash(root)) ? import_node_path3.default.posix.relative(root, file) : file;
}
var normalizeHotChannel = (channel, enableHmr, normalizeClient = true) => {
  const normalizedListenerMap = /* @__PURE__ */ new WeakMap();
  const listenersForEvents = /* @__PURE__ */ new Map();
  let invokeHandlers;
  let listenerForInvokeHandler;
  const handleInvoke = async (payload) => {
    if (!invokeHandlers) {
      return {
        error: {
          name: "TransportError",
          message: "invokeHandlers is not set",
          stack: new Error().stack
        }
      };
    }
    const data = payload.data;
    const { name, data: args } = data;
    try {
      const invokeHandler = invokeHandlers[name];
      const result = await invokeHandler(...args);
      return { result };
    } catch (error2) {
      return {
        error: {
          name: error2.name,
          message: error2.message,
          stack: error2.stack,
          ...error2
          // preserve enumerable properties such as RollupError.loc, frame, plugin
        }
      };
    }
  };
  return {
    ...channel,
    on: (event, fn) => {
      var _a2, _b;
      if (event === "connection" || !normalizeClient) {
        (_a2 = channel.on) == null ? void 0 : _a2.call(channel, event, fn);
        return;
      }
      const listenerWithNormalizedClient = (data, client) => {
        const normalizedClient = {
          send: (...args) => {
            let payload;
            if (typeof args[0] === "string") {
              payload = {
                type: "custom",
                event: args[0],
                data: args[1]
              };
            } else {
              payload = args[0];
            }
            client.send(payload);
          }
        };
        fn(data, normalizedClient);
      };
      normalizedListenerMap.set(fn, listenerWithNormalizedClient);
      (_b = channel.on) == null ? void 0 : _b.call(channel, event, listenerWithNormalizedClient);
      if (!listenersForEvents.has(event)) {
        listenersForEvents.set(event, /* @__PURE__ */ new Set());
      }
      listenersForEvents.get(event).add(listenerWithNormalizedClient);
    },
    off: (event, fn) => {
      var _a2, _b, _c;
      if (event === "connection" || !normalizeClient) {
        (_a2 = channel.off) == null ? void 0 : _a2.call(channel, event, fn);
        return;
      }
      const normalizedListener = normalizedListenerMap.get(fn);
      if (normalizedListener) {
        (_b = channel.off) == null ? void 0 : _b.call(channel, event, normalizedListener);
        (_c = listenersForEvents.get(event)) == null ? void 0 : _c.delete(normalizedListener);
      }
    },
    setInvokeHandler(_invokeHandlers) {
      var _a2, _b;
      invokeHandlers = _invokeHandlers;
      if (!_invokeHandlers) {
        if (listenerForInvokeHandler) {
          (_a2 = channel.off) == null ? void 0 : _a2.call(channel, "vite:invoke", listenerForInvokeHandler);
        }
        return;
      }
      listenerForInvokeHandler = async (payload, client) => {
        const responseInvoke = payload.id.replace("send", "response");
        client.send({
          type: "custom",
          event: "vite:invoke",
          data: {
            name: payload.name,
            id: responseInvoke,
            data: await handleInvoke({
              data: payload
            })
          }
        });
      };
      (_b = channel.on) == null ? void 0 : _b.call(channel, "vite:invoke", listenerForInvokeHandler);
    },
    handleInvoke,
    send: (...args) => {
      var _a2;
      let payload;
      if (typeof args[0] === "string") {
        payload = {
          type: "custom",
          event: args[0],
          data: args[1]
        };
      } else {
        payload = args[0];
      }
      if (enableHmr || payload.type === "connected" || payload.type === "ping" || payload.type === "custom" || payload.type === "error") {
        (_a2 = channel.send) == null ? void 0 : _a2.call(channel, payload);
      }
    },
    listen() {
      var _a2;
      return (_a2 = channel.listen) == null ? void 0 : _a2.call(channel);
    },
    close() {
      var _a2;
      return (_a2 = channel.close) == null ? void 0 : _a2.call(channel);
    }
  };
};
function getSortedPluginsByHotUpdateHook(plugins2) {
  const sortedPlugins = [];
  let pre = 0, normal = 0, post = 0;
  for (const plugin of plugins2) {
    const hook = plugin["hotUpdate"] ?? plugin["handleHotUpdate"];
    if (hook) {
      if (typeof hook === "object") {
        if (hook.order === "pre") {
          sortedPlugins.splice(pre++, 0, plugin);
          continue;
        }
        if (hook.order === "post") {
          sortedPlugins.splice(pre + normal + post++, 0, plugin);
          continue;
        }
      }
      sortedPlugins.splice(pre + normal++, 0, plugin);
    }
  }
  return sortedPlugins;
}
var sortedHotUpdatePluginsCache = /* @__PURE__ */ new WeakMap();
function getSortedHotUpdatePlugins(environment) {
  let sortedPlugins = sortedHotUpdatePluginsCache.get(environment);
  if (!sortedPlugins) {
    sortedPlugins = getSortedPluginsByHotUpdateHook(environment.plugins);
    sortedHotUpdatePluginsCache.set(environment, sortedPlugins);
  }
  return sortedPlugins;
}
async function handleHMRUpdate(type, file, server) {
  var _a2;
  const { config: config2 } = server;
  const mixedModuleGraph = ignoreDeprecationWarnings(() => server.moduleGraph);
  const environments = Object.values(server.environments);
  const shortFile = getShortName(file, config2.root);
  const isConfig = file === config2.configFile;
  const isConfigDependency = config2.configFileDependencies.some(
    (name) => file === name
  );
  const isEnv = config2.envDir !== false && getEnvFilesForMode(config2.mode, config2.envDir).includes(file);
  if (isConfig || isConfigDependency || isEnv) {
    debugHmr == null ? void 0 : debugHmr(`[config change] ${colors$1.dim(shortFile)}`);
    config2.logger.info(
      colors$1.green(
        `${normalizePath$3(
          import_node_path3.default.relative(process.cwd(), file)
        )} changed, restarting server...`
      ),
      { clear: true, timestamp: true }
    );
    try {
      await restartServerWithUrls(server);
    } catch (e2) {
      config2.logger.error(colors$1.red(e2));
    }
    return;
  }
  debugHmr == null ? void 0 : debugHmr(`[file change] ${colors$1.dim(shortFile)}`);
  if (file.startsWith(withTrailingSlash(normalizedClientDir))) {
    environments.forEach(
      ({ hot }) => hot.send({
        type: "full-reload",
        path: "*",
        triggeredBy: import_node_path3.default.resolve(config2.root, file)
      })
    );
    return;
  }
  const timestamp = Date.now();
  const contextMeta = {
    type,
    file,
    timestamp,
    read: () => readModifiedFile(file),
    server
  };
  const hotMap = /* @__PURE__ */ new Map();
  for (const environment of Object.values(server.environments)) {
    const mods = new Set(environment.moduleGraph.getModulesByFile(file));
    if (type === "create") {
      for (const mod of environment.moduleGraph._hasResolveFailedErrorModules) {
        mods.add(mod);
      }
    }
    const options2 = {
      ...contextMeta,
      modules: [...mods],
      // later on hotUpdate will be called for each runtime with a new HotUpdateOptions
      environment
    };
    hotMap.set(environment, { options: options2 });
  }
  const mixedMods = new Set(mixedModuleGraph.getModulesByFile(file));
  const mixedHmrContext = {
    ...contextMeta,
    modules: [...mixedMods]
  };
  const clientEnvironment = server.environments.client;
  const ssrEnvironment = server.environments.ssr;
  const clientContext = { environment: clientEnvironment };
  const clientHotUpdateOptions = hotMap.get(clientEnvironment).options;
  const ssrHotUpdateOptions = (_a2 = hotMap.get(ssrEnvironment)) == null ? void 0 : _a2.options;
  try {
    for (const plugin of getSortedHotUpdatePlugins(
      server.environments.client
    )) {
      if (plugin.hotUpdate) {
        const filteredModules = await getHookHandler(plugin.hotUpdate).call(
          clientContext,
          clientHotUpdateOptions
        );
        if (filteredModules) {
          clientHotUpdateOptions.modules = filteredModules;
          mixedHmrContext.modules = mixedHmrContext.modules.filter(
            (mixedMod) => filteredModules.some((mod) => mixedMod.id === mod.id) || (ssrHotUpdateOptions == null ? void 0 : ssrHotUpdateOptions.modules.some(
              (ssrMod) => ssrMod.id === mixedMod.id
            ))
          );
          mixedHmrContext.modules.push(
            ...filteredModules.filter(
              (mod) => !mixedHmrContext.modules.some(
                (mixedMod) => mixedMod.id === mod.id
              )
            ).map(
              (mod) => mixedModuleGraph.getBackwardCompatibleModuleNode(mod)
            )
          );
        }
      } else if (type === "update") {
        warnFutureDeprecation(
          config2,
          "removePluginHookHandleHotUpdate",
          `Used in plugin "${plugin.name}".`,
          false
        );
        const filteredModules = await getHookHandler(plugin.handleHotUpdate)(
          mixedHmrContext
        );
        if (filteredModules) {
          mixedHmrContext.modules = filteredModules;
          clientHotUpdateOptions.modules = clientHotUpdateOptions.modules.filter(
            (mod) => filteredModules.some((mixedMod) => mod.id === mixedMod.id)
          );
          clientHotUpdateOptions.modules.push(
            ...filteredModules.filter(
              (mixedMod) => !clientHotUpdateOptions.modules.some(
                (mod) => mod.id === mixedMod.id
              )
            ).map((mixedMod) => mixedMod._clientModule).filter(Boolean)
          );
          if (ssrHotUpdateOptions) {
            ssrHotUpdateOptions.modules = ssrHotUpdateOptions.modules.filter(
              (mod) => filteredModules.some((mixedMod) => mod.id === mixedMod.id)
            );
            ssrHotUpdateOptions.modules.push(
              ...filteredModules.filter(
                (mixedMod) => !ssrHotUpdateOptions.modules.some(
                  (mod) => mod.id === mixedMod.id
                )
              ).map((mixedMod) => mixedMod._ssrModule).filter(Boolean)
            );
          }
        }
      }
    }
  } catch (error2) {
    hotMap.get(server.environments.client).error = error2;
  }
  for (const environment of Object.values(server.environments)) {
    if (environment.name === "client") continue;
    const hot = hotMap.get(environment);
    const environmentThis = { environment };
    try {
      for (const plugin of getSortedHotUpdatePlugins(environment)) {
        if (plugin.hotUpdate) {
          const filteredModules = await getHookHandler(plugin.hotUpdate).call(
            environmentThis,
            hot.options
          );
          if (filteredModules) {
            hot.options.modules = filteredModules;
          }
        }
      }
    } catch (error2) {
      hot.error = error2;
    }
  }
  async function hmr(environment) {
    try {
      const { options: options2, error: error2 } = hotMap.get(environment);
      if (error2) {
        throw error2;
      }
      if (!options2.modules.length) {
        if (file.endsWith(".html") && environment.name === "client") {
          environment.logger.info(
            colors$1.green(`page reload `) + colors$1.dim(shortFile),
            {
              clear: true,
              timestamp: true
            }
          );
          environment.hot.send({
            type: "full-reload",
            path: config2.server.middlewareMode ? "*" : "/" + normalizePath$3(import_node_path3.default.relative(config2.root, file))
          });
        } else {
          debugHmr == null ? void 0 : debugHmr(
            `(${environment.name}) [no modules matched] ${colors$1.dim(shortFile)}`
          );
        }
        return;
      }
      updateModules(environment, shortFile, options2.modules, timestamp);
    } catch (err2) {
      environment.hot.send({
        type: "error",
        err: prepareError(err2)
      });
    }
  }
  const hotUpdateEnvironments = server.config.server.hotUpdateEnvironments ?? ((server2, hmr2) => {
    return Promise.all(
      Object.values(server2.environments).map(
        (environment) => hmr2(environment)
      )
    );
  });
  await hotUpdateEnvironments(server, hmr);
}
function updateModules(environment, file, modules, timestamp, firstInvalidatedBy) {
  const { hot } = environment;
  const updates = [];
  const invalidatedModules = /* @__PURE__ */ new Set();
  const traversedModules = /* @__PURE__ */ new Set();
  let needFullReload = modules.length === 0;
  for (const mod of modules) {
    const boundaries = [];
    const hasDeadEnd = propagateUpdate(mod, traversedModules, boundaries);
    environment.moduleGraph.invalidateModule(
      mod,
      invalidatedModules,
      timestamp,
      true
    );
    if (needFullReload) {
      continue;
    }
    if (hasDeadEnd) {
      needFullReload = hasDeadEnd;
      continue;
    }
    if (firstInvalidatedBy && boundaries.some(
      ({ acceptedVia }) => normalizeHmrUrl(acceptedVia.url) === firstInvalidatedBy
    )) {
      needFullReload = "circular import invalidate";
      continue;
    }
    updates.push(
      ...boundaries.map(
        ({ boundary, acceptedVia, isWithinCircularImport }) => ({
          type: `${boundary.type}-update`,
          timestamp,
          path: normalizeHmrUrl(boundary.url),
          acceptedPath: normalizeHmrUrl(acceptedVia.url),
          explicitImportRequired: boundary.type === "js" ? isExplicitImportRequired(acceptedVia.url) : false,
          isWithinCircularImport,
          firstInvalidatedBy
        })
      )
    );
  }
  if (needFullReload) {
    const reason = typeof needFullReload === "string" ? colors$1.dim(` (${needFullReload})`) : "";
    environment.logger.info(
      colors$1.green(`page reload `) + colors$1.dim(file) + reason,
      { clear: !firstInvalidatedBy, timestamp: true }
    );
    hot.send({
      type: "full-reload",
      triggeredBy: import_node_path3.default.resolve(environment.config.root, file)
    });
    return;
  }
  if (updates.length === 0) {
    debugHmr == null ? void 0 : debugHmr(colors$1.yellow(`no update happened `) + colors$1.dim(file));
    return;
  }
  environment.logger.info(
    colors$1.green(`hmr update `) + colors$1.dim([...new Set(updates.map((u) => u.path))].join(", ")),
    { clear: !firstInvalidatedBy, timestamp: true }
  );
  hot.send({
    type: "update",
    updates
  });
}
function areAllImportsAccepted(importedBindings, acceptedExports) {
  for (const binding of importedBindings) {
    if (!acceptedExports.has(binding)) {
      return false;
    }
  }
  return true;
}
function propagateUpdate(node2, traversedModules, boundaries, currentChain = [node2]) {
  var _a2;
  if (traversedModules.has(node2)) {
    return false;
  }
  traversedModules.add(node2);
  if (node2.id && node2.isSelfAccepting === void 0) {
    debugHmr == null ? void 0 : debugHmr(
      `[propagate update] stop propagation because not analyzed: ${colors$1.dim(
        node2.id
      )}`
    );
    return false;
  }
  if (node2.isSelfAccepting) {
    boundaries.push({
      boundary: node2,
      acceptedVia: node2,
      isWithinCircularImport: isNodeWithinCircularImports(node2, currentChain)
    });
    for (const importer of node2.importers) {
      if (isCSSRequest(importer.url) && !currentChain.includes(importer)) {
        propagateUpdate(
          importer,
          traversedModules,
          boundaries,
          currentChain.concat(importer)
        );
      }
    }
    return false;
  }
  if (node2.acceptedHmrExports) {
    boundaries.push({
      boundary: node2,
      acceptedVia: node2,
      isWithinCircularImport: isNodeWithinCircularImports(node2, currentChain)
    });
  } else {
    if (!node2.importers.size) {
      return true;
    }
    if (!isCSSRequest(node2.url) && // we assume .svg is never an entrypoint and does not need a full reload
    // to avoid frequent full reloads when an SVG file is referenced in CSS files (#18979)
    !((_a2 = node2.file) == null ? void 0 : _a2.endsWith(".svg")) && [...node2.importers].every((i) => isCSSRequest(i.url))) {
      return true;
    }
  }
  for (const importer of node2.importers) {
    const subChain = currentChain.concat(importer);
    if (importer.acceptedHmrDeps.has(node2)) {
      boundaries.push({
        boundary: importer,
        acceptedVia: node2,
        isWithinCircularImport: isNodeWithinCircularImports(importer, subChain)
      });
      continue;
    }
    if (node2.id && node2.acceptedHmrExports && importer.importedBindings) {
      const importedBindingsFromNode = importer.importedBindings.get(node2.id);
      if (importedBindingsFromNode && areAllImportsAccepted(importedBindingsFromNode, node2.acceptedHmrExports)) {
        continue;
      }
    }
    if (!currentChain.includes(importer) && propagateUpdate(importer, traversedModules, boundaries, subChain)) {
      return true;
    }
  }
  return false;
}
function isNodeWithinCircularImports(node2, nodeChain, currentChain = [node2], traversedModules = /* @__PURE__ */ new Set()) {
  if (traversedModules.has(node2)) {
    return false;
  }
  traversedModules.add(node2);
  for (const importer of node2.importers) {
    if (importer === node2) continue;
    if (isCSSRequest(importer.url)) continue;
    const importerIndex = nodeChain.indexOf(importer);
    if (importerIndex > -1) {
      if (debugHmr) {
        const importChain = [
          importer,
          ...[...currentChain].reverse(),
          ...nodeChain.slice(importerIndex, -1).reverse()
        ];
        debugHmr(
          colors$1.yellow(`circular imports detected: `) + importChain.map((m2) => colors$1.dim(m2.url)).join(" -> ")
        );
      }
      return true;
    }
    if (!currentChain.includes(importer)) {
      const result = isNodeWithinCircularImports(
        importer,
        nodeChain,
        currentChain.concat(importer),
        traversedModules
      );
      if (result) return result;
    }
  }
  return false;
}
function handlePrunedModules(mods, { hot }) {
  const t2 = Date.now();
  mods.forEach((mod) => {
    mod.lastHMRTimestamp = t2;
    mod.lastHMRInvalidationReceived = false;
    debugHmr == null ? void 0 : debugHmr(`[dispose] ${colors$1.dim(mod.file)}`);
  });
  hot.send({
    type: "prune",
    paths: [...mods].map((m2) => m2.url)
  });
}
function lexAcceptedHmrDeps(code, start, urls) {
  let state = 0;
  let prevState = 0;
  let currentDep = "";
  function addDep(index) {
    urls.add({
      url: currentDep,
      start: index - currentDep.length - 1,
      end: index + 1
    });
    currentDep = "";
  }
  for (let i = start; i < code.length; i++) {
    const char = code.charAt(i);
    switch (state) {
      case 0:
      case 4:
        if (char === `'`) {
          prevState = state;
          state = 1;
        } else if (char === `"`) {
          prevState = state;
          state = 2;
        } else if (char === "`") {
          prevState = state;
          state = 3;
        } else if (whitespaceRE.test(char)) {
          continue;
        } else {
          if (state === 0) {
            if (char === `[`) {
              state = 4;
            } else {
              return true;
            }
          } else {
            if (char === `]`) {
              return false;
            } else if (char === ",") {
              continue;
            } else {
              error(i);
            }
          }
        }
        break;
      case 1:
        if (char === `'`) {
          addDep(i);
          if (prevState === 0) {
            return false;
          } else {
            state = prevState;
          }
        } else {
          currentDep += char;
        }
        break;
      case 2:
        if (char === `"`) {
          addDep(i);
          if (prevState === 0) {
            return false;
          } else {
            state = prevState;
          }
        } else {
          currentDep += char;
        }
        break;
      case 3:
        if (char === "`") {
          addDep(i);
          if (prevState === 0) {
            return false;
          } else {
            state = prevState;
          }
        } else if (char === "$" && code.charAt(i + 1) === "{") {
          error(i);
        } else {
          currentDep += char;
        }
        break;
      default:
        throw new Error("unknown import.meta.hot lexer state");
    }
  }
  return false;
}
function lexAcceptedHmrExports(code, start, exportNames) {
  const urls = /* @__PURE__ */ new Set();
  lexAcceptedHmrDeps(code, start, urls);
  for (const { url: url2 } of urls) {
    exportNames.add(url2);
  }
  return urls.size > 0;
}
function normalizeHmrUrl(url2) {
  if (url2[0] !== "." && url2[0] !== "/") {
    url2 = wrapId$1(url2);
  }
  return url2;
}
function error(pos) {
  const err2 = new Error(
    `import.meta.hot.accept() can only accept string literals or an Array of string literals.`
  );
  err2.pos = pos;
  throw err2;
}
async function readModifiedFile(file) {
  const content = await import_promises.default.readFile(file, "utf-8");
  if (!content) {
    const mtime = (await import_promises.default.stat(file)).mtimeMs;
    for (let n2 = 0; n2 < 10; n2++) {
      await new Promise((r2) => setTimeout(r2, 10));
      const newMtime = (await import_promises.default.stat(file)).mtimeMs;
      if (newMtime !== mtime) {
        break;
      }
    }
    return await import_promises.default.readFile(file, "utf-8");
  } else {
    return content;
  }
}
function createServerHotChannel() {
  const innerEmitter = new import_node_events.EventEmitter();
  const outsideEmitter = new import_node_events.EventEmitter();
  return {
    send(payload) {
      outsideEmitter.emit("send", payload);
    },
    off(event, listener2) {
      innerEmitter.off(event, listener2);
    },
    on: (event, listener2) => {
      innerEmitter.on(event, listener2);
    },
    close() {
      innerEmitter.removeAllListeners();
      outsideEmitter.removeAllListeners();
    },
    listen() {
      innerEmitter.emit("connection");
    },
    api: {
      innerEmitter,
      outsideEmitter
    }
  };
}
function createDeprecatedHotBroadcaster(ws) {
  const broadcaster = {
    on: ws.on,
    off: ws.off,
    listen: ws.listen,
    send: ws.send,
    setInvokeHandler: ws.setInvokeHandler,
    handleInvoke: async () => ({
      error: {
        name: "TransportError",
        message: "handleInvoke not implemented",
        stack: new Error().stack
      }
    }),
    get channels() {
      return [ws];
    },
    addChannel() {
      return broadcaster;
    },
    close() {
      return Promise.all(broadcaster.channels.map((channel) => channel.close()));
    }
  };
  return broadcaster;
}
var nonJsRe = /\.json(?:$|\?)/;
var isNonJsRequest = (request) => nonJsRe.test(request);
var importMetaEnvMarker = "__vite_import_meta_env__";
var importMetaEnvKeyReCache = /* @__PURE__ */ new Map();
function definePlugin(config2) {
  const isBuild = config2.command === "build";
  const isBuildLib = isBuild && config2.build.lib;
  const processEnv = {};
  if (!isBuildLib) {
    const nodeEnv = "development";
    Object.assign(processEnv, {
      "process.env": `{}`,
      "global.process.env": `{}`,
      "globalThis.process.env": `{}`,
      "process.env.NODE_ENV": JSON.stringify(nodeEnv),
      "global.process.env.NODE_ENV": JSON.stringify(nodeEnv),
      "globalThis.process.env.NODE_ENV": JSON.stringify(nodeEnv)
    });
  }
  const importMetaKeys = {};
  const importMetaEnvKeys = {};
  const importMetaFallbackKeys = {};
  if (isBuild) {
    importMetaKeys["import.meta.hot"] = `undefined`;
    for (const key in config2.env) {
      const val = JSON.stringify(config2.env[key]);
      importMetaKeys[`import.meta.env.${key}`] = val;
      importMetaEnvKeys[key] = val;
    }
    importMetaKeys["import.meta.env.SSR"] = `undefined`;
    importMetaFallbackKeys["import.meta.env"] = `undefined`;
  }
  function generatePattern(environment) {
    const keepProcessEnv = environment.config.keepProcessEnv;
    const userDefine = {};
    const userDefineEnv = {};
    for (const key in environment.config.define) {
      userDefine[key] = handleDefineValue(environment.config.define[key]);
      if (isBuild && key.startsWith("import.meta.env.")) {
        userDefineEnv[key.slice(16)] = environment.config.define[key];
      }
    }
    const define = {
      ...keepProcessEnv ? {} : processEnv,
      ...importMetaKeys,
      ...userDefine,
      ...importMetaFallbackKeys
    };
    const ssr = environment.config.consumer === "server";
    if ("import.meta.env.SSR" in define) {
      define["import.meta.env.SSR"] = ssr + "";
    }
    if ("import.meta.env" in define) {
      define["import.meta.env"] = importMetaEnvMarker;
    }
    const importMetaEnvVal = serializeDefine({
      ...importMetaEnvKeys,
      SSR: ssr + "",
      ...userDefineEnv
    });
    const patternKeys = Object.keys(userDefine);
    if (!keepProcessEnv && Object.keys(processEnv).length) {
      patternKeys.push("process.env");
    }
    if (Object.keys(importMetaKeys).length) {
      patternKeys.push("import.meta.env", "import.meta.hot");
    }
    const pattern = patternKeys.length ? new RegExp(patternKeys.map(escapeRegex).join("|")) : null;
    return [define, pattern, importMetaEnvVal];
  }
  const patternsCache = /* @__PURE__ */ new WeakMap();
  function getPattern(environment) {
    let pattern = patternsCache.get(environment);
    if (!pattern) {
      pattern = generatePattern(environment);
      patternsCache.set(environment, pattern);
    }
    return pattern;
  }
  return {
    name: "vite:define",
    transform: {
      async handler(code, id) {
        if (this.environment.config.consumer === "client" && !isBuild) {
          return;
        }
        if (
          // exclude html, css and static assets for performance
          isHTMLRequest(id) || isCSSRequest(id) || isNonJsRequest(id) || config2.assetsInclude(id)
        ) {
          return;
        }
        let [define, pattern, importMetaEnvVal] = getPattern(this.environment);
        if (!pattern) return;
        pattern.lastIndex = 0;
        if (!pattern.test(code)) return;
        const hasDefineImportMetaEnv = "import.meta.env" in define;
        let marker = importMetaEnvMarker;
        if (hasDefineImportMetaEnv && code.includes(marker)) {
          let i = 1;
          do {
            marker = importMetaEnvMarker + i++;
          } while (code.includes(marker));
          if (marker !== importMetaEnvMarker) {
            define = { ...define, "import.meta.env": marker };
          }
        }
        const result = await replaceDefine(this.environment, code, id, define);
        if (hasDefineImportMetaEnv) {
          result.code = result.code.replaceAll(
            getImportMetaEnvKeyRe(marker),
            (m2) => "undefined".padEnd(m2.length)
          );
          if (result.code.includes(marker)) {
            result.code = `const ${marker} = ${importMetaEnvVal};
` + result.code;
            if (result.map) {
              const map2 = JSON.parse(result.map);
              map2.mappings = ";" + map2.mappings;
              result.map = map2;
            }
          }
        }
        return result;
      }
    }
  };
}
async function replaceDefine(environment, code, id, define) {
  const esbuildOptions = environment.config.esbuild || {};
  const result = await (0, import_esbuild.transform)(code, {
    loader: "js",
    charset: esbuildOptions.charset ?? "utf8",
    platform: "neutral",
    define,
    sourcefile: id,
    sourcemap: environment.config.command === "build" ? !!environment.config.build.sourcemap : true
  });
  if (result.map.includes("<define:")) {
    const originalMap = new TraceMap(result.map);
    if (originalMap.sources.length >= 2) {
      const sourceIndex = originalMap.sources.indexOf(id);
      const decoded = decodedMap(originalMap);
      decoded.sources = [id];
      decoded.mappings = decoded.mappings.map(
        (segments) => segments.filter((segment) => {
          const index = segment[1];
          segment[1] = 0;
          return index === sourceIndex;
        })
      );
      result.map = JSON.stringify(encodedMap(new TraceMap(decoded)));
    }
  }
  return {
    code: result.code,
    map: result.map || null
  };
}
function serializeDefine(define) {
  let res = `{`;
  const keys = Object.keys(define).sort();
  for (let i = 0; i < keys.length; i++) {
    const key = keys[i];
    const val = define[key];
    res += `${JSON.stringify(key)}: ${handleDefineValue(val)}`;
    if (i !== keys.length - 1) {
      res += `, `;
    }
  }
  return res + `}`;
}
function handleDefineValue(value2) {
  if (typeof value2 === "undefined") return "undefined";
  if (typeof value2 === "string") return value2;
  return JSON.stringify(value2);
}
function getImportMetaEnvKeyRe(marker) {
  let re = importMetaEnvKeyReCache.get(marker);
  if (!re) {
    re = new RegExp(`${marker}\\..+?\\b`, "g");
    importMetaEnvKeyReCache.set(marker, re);
  }
  return re;
}
var workerOrSharedWorkerRE = /(?:\?|&)(worker|sharedworker)(?:&|$)/;
var workerFileRE = /(?:\?|&)worker_file&type=(\w+)(?:&|$)/;
var inlineRE$1 = /[?&]inline\b/;
var WORKER_FILE_ID = "worker_file";
var workerCache = /* @__PURE__ */ new WeakMap();
function saveEmitWorkerAsset(config2, asset) {
  const workerMap = workerCache.get(config2.mainConfig || config2);
  const duplicateAsset = workerMap.assets.get(asset.fileName);
  if (duplicateAsset) {
    if (!isSameContent(duplicateAsset.source, asset.source)) {
      config2.logger.warn(
        `
` + colors$1.yellow(
          `The emitted file ${JSON.stringify(asset.fileName)} overwrites a previously emitted file of the same name.`
        )
      );
    }
  }
  workerMap.assets.set(asset.fileName, asset);
}
async function bundleWorkerEntry(config2, id) {
  const input = cleanUrl2(id);
  const newBundleChain = [...config2.bundleChain, input];
  if (config2.bundleChain.includes(input)) {
    throw new Error(
      `Circular worker imports detected. Vite does not support it. Import chain: ${newBundleChain.map((id2) => prettifyUrl(id2, config2.root)).join(" -> ")}`
    );
  }
  const { rollup } = await import("./rollup-XUJ5LW7P.js");
  const { plugins: plugins2, rollupOptions, format: format2 } = config2.worker;
  const workerConfig = await plugins2(newBundleChain);
  const workerEnvironment = new BuildEnvironment("client", workerConfig);
  await workerEnvironment.init();
  const bundle = await rollup({
    ...rollupOptions,
    input,
    plugins: workerEnvironment.plugins.map(
      (p2) => injectEnvironmentAndFilterToHooks(workerEnvironment, p2)
    ),
    onLog(level, log2) {
      onRollupLog(level, log2, workerEnvironment);
    },
    preserveEntrySignatures: false
  });
  let chunk;
  try {
    const workerOutputConfig = config2.worker.rollupOptions.output;
    const workerConfig2 = workerOutputConfig ? Array.isArray(workerOutputConfig) ? workerOutputConfig[0] || {} : workerOutputConfig : {};
    const {
      output: [outputChunk, ...outputChunks]
    } = await bundle.generate({
      entryFileNames: import_node_path3.default.posix.join(
        config2.build.assetsDir,
        "[name]-[hash].js"
      ),
      chunkFileNames: import_node_path3.default.posix.join(
        config2.build.assetsDir,
        "[name]-[hash].js"
      ),
      assetFileNames: import_node_path3.default.posix.join(
        config2.build.assetsDir,
        "[name]-[hash].[ext]"
      ),
      ...workerConfig2,
      format: format2,
      sourcemap: config2.build.sourcemap
    });
    chunk = outputChunk;
    outputChunks.forEach((outputChunk2) => {
      if (outputChunk2.type === "asset") {
        saveEmitWorkerAsset(config2, outputChunk2);
      } else if (outputChunk2.type === "chunk") {
        saveEmitWorkerAsset(config2, {
          fileName: outputChunk2.fileName,
          originalFileName: null,
          originalFileNames: [],
          source: outputChunk2.code
        });
      }
    });
  } catch (e2) {
    if (e2 instanceof Error && e2.name === "RollupError" && e2.code === "INVALID_OPTION" && e2.message.includes('"output.format"')) {
      e2.message = e2.message.replace("output.format", "worker.format");
    }
    throw e2;
  } finally {
    await bundle.close();
  }
  return emitSourcemapForWorkerEntry(config2, chunk);
}
function emitSourcemapForWorkerEntry(config2, chunk) {
  const { map: sourcemap } = chunk;
  if (sourcemap) {
    if (config2.build.sourcemap === "hidden" || config2.build.sourcemap === true) {
      const data = sourcemap.toString();
      const mapFileName = chunk.fileName + ".map";
      saveEmitWorkerAsset(config2, {
        fileName: mapFileName,
        originalFileName: null,
        originalFileNames: [],
        source: data
      });
    }
  }
  return chunk;
}
var workerAssetUrlRE = /__VITE_WORKER_ASSET__([a-z\d]{8})__/g;
function encodeWorkerAssetFileName(fileName, workerCache2) {
  const { fileNameHash } = workerCache2;
  const hash2 = getHash(fileName);
  if (!fileNameHash.get(hash2)) {
    fileNameHash.set(hash2, fileName);
  }
  return `__VITE_WORKER_ASSET__${hash2}__`;
}
async function workerFileToUrl(config2, id) {
  const workerMap = workerCache.get(config2.mainConfig || config2);
  let fileName = workerMap.bundle.get(id);
  if (!fileName) {
    const outputChunk = await bundleWorkerEntry(config2, id);
    fileName = outputChunk.fileName;
    saveEmitWorkerAsset(config2, {
      fileName,
      originalFileName: null,
      originalFileNames: [],
      source: outputChunk.code
    });
    workerMap.bundle.set(id, fileName);
  }
  return encodeWorkerAssetFileName(fileName, workerMap);
}
function webWorkerPostPlugin() {
  return {
    name: "vite:worker-post",
    resolveImportMeta(property, { format: format2 }) {
      if (format2 === "iife") {
        if (!property) {
          return `{
            url: self.location.href
          }`;
        }
        if (property === "url") {
          return "self.location.href";
        }
      }
      return null;
    }
  };
}
function webWorkerPlugin(config2) {
  const isBuild = config2.command === "build";
  const isWorker = config2.isWorker;
  return {
    name: "vite:worker",
    buildStart() {
      if (isWorker) {
        return;
      }
      workerCache.set(config2, {
        assets: /* @__PURE__ */ new Map(),
        bundle: /* @__PURE__ */ new Map(),
        fileNameHash: /* @__PURE__ */ new Map()
      });
    },
    load: {
      handler(id) {
        if (isBuild && workerOrSharedWorkerRE.test(id)) {
          return "";
        }
      }
    },
    shouldTransformCachedModule({ id }) {
      if (isBuild && config2.build.watch && workerOrSharedWorkerRE.test(id)) {
        return true;
      }
    },
    transform: {
      async handler(raw, id) {
        var _a2;
        const workerFileMatch = workerFileRE.exec(id);
        if (workerFileMatch) {
          const workerType2 = workerFileMatch[1];
          let injectEnv = "";
          const scriptPath = JSON.stringify(
            import_node_path3.default.posix.join(config2.base, ENV_PUBLIC_PATH)
          );
          if (workerType2 === "classic") {
            injectEnv = `importScripts(${scriptPath})
`;
          } else if (workerType2 === "module") {
            injectEnv = `import ${scriptPath}
`;
          } else if (workerType2 === "ignore") {
            if (isBuild) {
              injectEnv = "";
            } else {
              const environment = this.environment;
              const moduleGraph = environment.mode === "dev" ? environment.moduleGraph : void 0;
              const module = moduleGraph == null ? void 0 : moduleGraph.getModuleById(ENV_ENTRY);
              injectEnv = ((_a2 = module == null ? void 0 : module.transformResult) == null ? void 0 : _a2.code) || "";
            }
          }
          if (injectEnv) {
            const s2 = new MagicString(raw);
            s2.prepend(injectEnv + ";\n");
            return {
              code: s2.toString(),
              map: s2.generateMap({ hires: "boundary" })
            };
          }
          return;
        }
        const workerMatch = workerOrSharedWorkerRE.exec(id);
        if (!workerMatch) return;
        const { format: format2 } = config2.worker;
        const workerConstructor = workerMatch[1] === "sharedworker" ? "SharedWorker" : "Worker";
        const workerType = isBuild ? format2 === "es" ? "module" : "classic" : "module";
        const workerTypeOption = `{
          ${workerType === "module" ? `type: "module",` : ""}
          name: options?.name
        }`;
        let urlCode;
        if (isBuild) {
          if (isWorker && config2.bundleChain.at(-1) === cleanUrl2(id)) {
            urlCode = "self.location.href";
          } else if (inlineRE$1.test(id)) {
            const chunk = await bundleWorkerEntry(config2, id);
            const jsContent = `const jsContent = ${JSON.stringify(chunk.code)};`;
            const code = (
              // Using blob URL for SharedWorker results in multiple instances of a same worker
              workerConstructor === "Worker" ? `${jsContent}
            const blob = typeof self !== "undefined" && self.Blob && new Blob([${workerType === "classic" ? "" : (
                // `URL` is always available, in `Worker[type="module"]`
                `'URL.revokeObjectURL(import.meta.url);',`
              )}jsContent], { type: "text/javascript;charset=utf-8" });
            export default function WorkerWrapper(options) {
              let objURL;
              try {
                objURL = blob && (self.URL || self.webkitURL).createObjectURL(blob);
                if (!objURL) throw ''
                const worker = new ${workerConstructor}(objURL, ${workerTypeOption});
                worker.addEventListener("error", () => {
                  (self.URL || self.webkitURL).revokeObjectURL(objURL);
                });
                return worker;
              } catch(e) {
                return new ${workerConstructor}(
                  'data:text/javascript;charset=utf-8,' + encodeURIComponent(jsContent),
                  ${workerTypeOption}
                );
              }${// For module workers, we should not revoke the URL until the worker runs,
              // otherwise the worker fails to run
              workerType === "classic" ? ` finally {
                      objURL && (self.URL || self.webkitURL).revokeObjectURL(objURL);
                    }` : ""}
            }` : `${jsContent}
            export default function WorkerWrapper(options) {
              return new ${workerConstructor}(
                'data:text/javascript;charset=utf-8,' + encodeURIComponent(jsContent),
                ${workerTypeOption}
              );
            }
            `
            );
            return {
              code,
              // Empty sourcemap to suppress Rollup warning
              map: { mappings: "" }
            };
          } else {
            urlCode = JSON.stringify(await workerFileToUrl(config2, id));
          }
        } else {
          let url2 = await fileToUrl$1(this, cleanUrl2(id));
          url2 = injectQuery(url2, `${WORKER_FILE_ID}&type=${workerType}`);
          urlCode = JSON.stringify(url2);
        }
        if (urlRE$1.test(id)) {
          return {
            code: `export default ${urlCode}`,
            map: { mappings: "" }
            // Empty sourcemap to suppress Rollup warning
          };
        }
        return {
          code: `export default function WorkerWrapper(options) {
            return new ${workerConstructor}(
              ${urlCode},
              ${workerTypeOption}
            );
          }`,
          map: { mappings: "" }
          // Empty sourcemap to suppress Rollup warning
        };
      }
    },
    renderChunk(code, chunk, outputOptions) {
      let s2;
      const result = () => {
        return s2 && {
          code: s2.toString(),
          map: this.environment.config.build.sourcemap ? s2.generateMap({ hires: "boundary" }) : null
        };
      };
      workerAssetUrlRE.lastIndex = 0;
      if (workerAssetUrlRE.test(code)) {
        const toRelativeRuntime = createToImportMetaURLBasedRelativeRuntime(
          outputOptions.format,
          this.environment.config.isWorker
        );
        let match;
        s2 = new MagicString(code);
        workerAssetUrlRE.lastIndex = 0;
        const workerMap = workerCache.get(config2.mainConfig || config2);
        const { fileNameHash } = workerMap;
        while (match = workerAssetUrlRE.exec(code)) {
          const [full, hash2] = match;
          const filename = fileNameHash.get(hash2);
          const replacement = toOutputFilePathInJS(
            this.environment,
            filename,
            "asset",
            chunk.fileName,
            "js",
            toRelativeRuntime
          );
          const replacementString = typeof replacement === "string" ? JSON.stringify(encodeURIPath(replacement)).slice(1, -1) : `"+${replacement.runtime}+"`;
          s2.update(match.index, match.index + full.length, replacementString);
        }
      }
      return result();
    },
    generateBundle(opts, bundle) {
      if (opts.__vite_skip_asset_emit__ || isWorker) {
        return;
      }
      const workerMap = workerCache.get(config2);
      workerMap.assets.forEach((asset) => {
        const duplicateAsset = bundle[asset.fileName];
        if (duplicateAsset) {
          const content = duplicateAsset.type === "asset" ? duplicateAsset.source : duplicateAsset.code;
          if (isSameContent(content, asset.source)) {
            return;
          }
        }
        this.emitFile({
          type: "asset",
          fileName: asset.fileName,
          source: asset.source
          // NOTE: fileName is already generated when bundling the worker
          //       so no need to pass originalFileNames/names
        });
      });
      workerMap.assets.clear();
    }
  };
}
function isSameContent(a, b) {
  if (typeof a === "string") {
    if (typeof b === "string") {
      return a === b;
    }
    return Buffer.from(a).equals(b);
  }
  return Buffer.from(b).equals(a);
}
function preAliasPlugin(config2) {
  const findPatterns = getAliasPatterns(config2.resolve.alias);
  return {
    name: "vite:pre-alias",
    applyToEnvironment(environment) {
      return !isDepOptimizationDisabled(environment.config.optimizeDeps);
    },
    async resolveId(id, importer, options2) {
      var _a2;
      const environment = this.environment;
      const ssr = environment.config.consumer === "server";
      const depsOptimizer = environment.depsOptimizer;
      if (importer && depsOptimizer && bareImportRE.test(id) && !options2.scan && id !== "@vite/client" && id !== "@vite/env") {
        if (findPatterns.find((pattern) => matches(pattern, id))) {
          const optimizedId = await tryOptimizedResolve(
            depsOptimizer,
            id,
            importer,
            config2.resolve.preserveSymlinks,
            config2.packageCache
          );
          if (optimizedId) {
            return optimizedId;
          }
          if (depsOptimizer.options.noDiscovery) {
            return;
          }
          const resolved = await this.resolve(id, importer, options2);
          if (resolved && !depsOptimizer.isOptimizedDepFile(resolved.id)) {
            const optimizeDeps2 = depsOptimizer.options;
            const resolvedId = cleanUrl2(resolved.id);
            const isVirtual = resolvedId === id || resolvedId.includes("\0");
            if (!isVirtual && import_node_fs2.default.existsSync(resolvedId) && !moduleListContains(optimizeDeps2.exclude, id) && import_node_path3.default.isAbsolute(resolvedId) && (isInNodeModules$1(resolvedId) || ((_a2 = optimizeDeps2.include) == null ? void 0 : _a2.includes(id))) && isOptimizable(resolvedId, optimizeDeps2) && (!ssr || optimizeAliasReplacementForSSR(resolvedId, optimizeDeps2))) {
              const optimizedInfo = depsOptimizer.registerMissingImport(
                id,
                resolvedId
              );
              return { id: depsOptimizer.getOptimizedDepId(optimizedInfo) };
            }
          }
          return resolved;
        }
      }
    }
  };
}
function optimizeAliasReplacementForSSR(id, optimizeDeps2) {
  var _a2;
  if ((_a2 = optimizeDeps2.include) == null ? void 0 : _a2.includes(id)) {
    return true;
  }
  return false;
}
function matches(pattern, importee) {
  if (pattern instanceof RegExp) {
    return pattern.test(importee);
  }
  if (importee.length < pattern.length) {
    return false;
  }
  if (importee === pattern) {
    return true;
  }
  return importee.startsWith(withTrailingSlash(pattern));
}
function getAliasPatterns(entries) {
  if (Array.isArray(entries)) {
    return entries.map((entry) => entry.find);
  }
  return Object.entries(entries).map(([find2]) => find2);
}
function getAliasPatternMatcher(entries) {
  const patterns = getAliasPatterns(entries);
  return (importee) => patterns.some((pattern) => matches(pattern, importee));
}
var debug$2 = createDebugger("vite:import-analysis");
var clientDir = normalizePath$3(CLIENT_DIR);
var skipRE = /\.(?:map|json)(?:$|\?)/;
var canSkipImportAnalysis = (id) => skipRE.test(id) || isDirectCSSRequest(id);
var optimizedDepChunkRE = /\/chunk-[A-Z\d]{8}\.js/;
var optimizedDepDynamicRE = /-[A-Z\d]{8}\.js/;
var hasViteIgnoreRE = /\/\*\s*@vite-ignore\s*\*\//;
var urlIsStringRE = /^(?:'.*'|".*"|`.*`)$/;
var templateLiteralRE = /^\s*`(.*)`\s*$/;
function isExplicitImportRequired(url2) {
  return !isJSRequest(url2) && !isCSSRequest(url2);
}
function normalizeResolvedIdToUrl(environment, url2, resolved) {
  const root = environment.config.root;
  const depsOptimizer = environment.depsOptimizer;
  if (resolved.id.startsWith(withTrailingSlash(root))) {
    url2 = resolved.id.slice(root.length);
  } else if ((depsOptimizer == null ? void 0 : depsOptimizer.isOptimizedDepFile(resolved.id)) || // vite-plugin-react isn't following the leading \0 virtual module convention.
  // This is a temporary hack to avoid expensive fs checks for React apps.
  // We'll remove this as soon we're able to fix the react plugins.
  resolved.id !== "/@react-refresh" && import_node_path3.default.isAbsolute(resolved.id) && import_node_fs2.default.existsSync(cleanUrl2(resolved.id))) {
    url2 = import_node_path3.default.posix.join(FS_PREFIX, resolved.id);
  } else {
    url2 = resolved.id;
  }
  if (url2[0] !== "." && url2[0] !== "/") {
    url2 = wrapId$1(resolved.id);
  }
  return url2;
}
function extractImportedBindings(id, source, importSpec, importedBindings) {
  let bindings = importedBindings.get(id);
  if (!bindings) {
    bindings = /* @__PURE__ */ new Set();
    importedBindings.set(id, bindings);
  }
  const isDynamic = importSpec.d > -1;
  const isMeta = importSpec.d === -2;
  if (isDynamic || isMeta) {
    bindings.add("*");
    return;
  }
  const exp = source.slice(importSpec.ss, importSpec.se);
  ESM_STATIC_IMPORT_RE.lastIndex = 0;
  const match = ESM_STATIC_IMPORT_RE.exec(exp);
  if (!match) {
    return;
  }
  const staticImport = {
    type: "static",
    code: match[0],
    start: match.index,
    end: match.index + match[0].length,
    imports: match.groups.imports,
    specifier: match.groups.specifier
  };
  const parsed = parseStaticImport(staticImport);
  if (parsed.namespacedImport) {
    bindings.add("*");
  }
  if (parsed.defaultImport) {
    bindings.add("default");
  }
  if (parsed.namedImports) {
    for (const name of Object.keys(parsed.namedImports)) {
      bindings.add(name);
    }
  }
}
function importAnalysisPlugin(config2) {
  const { root, base } = config2;
  const clientPublicPath = import_node_path3.default.posix.join(base, CLIENT_PUBLIC_PATH);
  const enablePartialAccept = config2.experimental.hmrPartialAccept;
  const matchAlias = getAliasPatternMatcher(config2.resolve.alias);
  let _env;
  let _ssrEnv;
  function getEnv(ssr) {
    if (!_ssrEnv || !_env) {
      const importMetaEnvKeys = {};
      const userDefineEnv = {};
      for (const key in config2.env) {
        importMetaEnvKeys[key] = JSON.stringify(config2.env[key]);
      }
      for (const key in config2.define) {
        if (key.startsWith("import.meta.env.")) {
          userDefineEnv[key.slice(16)] = config2.define[key];
        }
      }
      const env2 = `import.meta.env = ${serializeDefine({
        ...importMetaEnvKeys,
        SSR: "__vite_ssr__",
        ...userDefineEnv
      })};`;
      _ssrEnv = env2.replace("__vite_ssr__", "true");
      _env = env2.replace("__vite_ssr__", "false");
    }
    return ssr ? _ssrEnv : _env;
  }
  return {
    name: "vite:import-analysis",
    async transform(source, importer) {
      const environment = this.environment;
      const ssr = environment.config.consumer === "server";
      const moduleGraph = environment.moduleGraph;
      if (canSkipImportAnalysis(importer)) {
        debug$2 == null ? void 0 : debug$2(colors$1.dim(`[skipped] ${prettifyUrl(importer, root)}`));
        return null;
      }
      const msAtStart = debug$2 ? import_node_perf_hooks.performance.now() : 0;
      await init;
      let imports;
      let exports;
      source = stripBomTag(source);
      try {
        [imports, exports] = parse$d(source);
      } catch (_e) {
        const e2 = _e;
        const { message, showCodeFrame } = createParseErrorInfo(
          importer,
          source
        );
        this.error(message, showCodeFrame ? e2.idx : void 0);
      }
      const depsOptimizer = environment.depsOptimizer;
      const importerModule = moduleGraph.getModuleById(importer);
      if (!importerModule) {
        throwOutdatedRequest(importer);
      }
      if (!imports.length && !this._addedImports) {
        importerModule.isSelfAccepting = false;
        debug$2 == null ? void 0 : debug$2(
          `${timeFrom(msAtStart)} ${colors$1.dim(
            `[no imports] ${prettifyUrl(importer, root)}`
          )}`
        );
        return source;
      }
      let hasHMR = false;
      let isSelfAccepting = false;
      let hasEnv = false;
      let needQueryInjectHelper = false;
      let s2;
      const str = () => s2 || (s2 = new MagicString(source));
      let isPartiallySelfAccepting = false;
      const importedBindings = enablePartialAccept ? /* @__PURE__ */ new Map() : null;
      const toAbsoluteUrl = (url2) => import_node_path3.default.posix.resolve(import_node_path3.default.posix.dirname(importerModule.url), url2);
      const normalizeUrl = async (url2, pos, forceSkipImportAnalysis = false) => {
        var _a2, _b;
        url2 = stripBase(url2, base);
        let importerFile = importer;
        if (depsOptimizer && moduleListContains(depsOptimizer.options.exclude, url2)) {
          await depsOptimizer.scanProcessing;
          for (const optimizedModule of depsOptimizer.metadata.depInfoList) {
            if (!optimizedModule.src) continue;
            if (optimizedModule.file === importerModule.file) {
              importerFile = optimizedModule.src;
            }
          }
        }
        const resolved = await this.resolve(url2, importerFile).catch((e2) => {
          if (e2 instanceof Error) {
            e2.pos ?? (e2.pos = pos);
          }
          throw e2;
        });
        if (!resolved || ((_b = (_a2 = resolved.meta) == null ? void 0 : _a2["vite:alias"]) == null ? void 0 : _b.noResolved)) {
          if (ssr) {
            return [url2, null];
          }
          importerModule.isSelfAccepting = false;
          moduleGraph._hasResolveFailedErrorModules.add(importerModule);
          return this.error(
            `Failed to resolve import "${url2}" from "${normalizePath$3(
              import_node_path3.default.relative(process.cwd(), importerFile)
            )}". Does the file exist?`,
            pos
          );
        }
        if (isExternalUrl(resolved.id)) {
          return [resolved.id, resolved.id];
        }
        const isRelative2 = url2[0] === ".";
        const isSelfImport = !isRelative2 && cleanUrl2(url2) === cleanUrl2(importer);
        url2 = normalizeResolvedIdToUrl(environment, url2, resolved);
        if (environment.config.consumer === "client") {
          if (isExplicitImportRequired(url2)) {
            url2 = injectQuery(url2, "import");
          } else if ((isRelative2 || isSelfImport) && !DEP_VERSION_RE.test(url2)) {
            const versionMatch = DEP_VERSION_RE.exec(importer);
            if (versionMatch) {
              url2 = injectQuery(url2, versionMatch[1]);
            }
          }
        }
        try {
          const depModule = await moduleGraph._ensureEntryFromUrl(
            unwrapId$1(url2),
            canSkipImportAnalysis(url2) || forceSkipImportAnalysis,
            resolved
          );
          if (environment.config.consumer === "client" && depModule.lastHMRTimestamp > 0) {
            url2 = injectQuery(url2, `t=${depModule.lastHMRTimestamp}`);
          }
        } catch (e2) {
          e2.pos = pos;
          throw e2;
        }
        if (!ssr) url2 = joinUrlSegments(base, url2);
        return [url2, resolved.id];
      };
      const orderedImportedUrls = new Array(imports.length);
      const orderedAcceptedUrls = new Array(
        imports.length
      );
      const orderedAcceptedExports = new Array(
        imports.length
      );
      await Promise.all(
        imports.map(async (importSpecifier, index) => {
          const {
            s: start,
            e: end,
            ss: expStart,
            se: expEnd,
            d: dynamicIndex,
            a: attributeIndex
          } = importSpecifier;
          let specifier = importSpecifier.n;
          const rawUrl = source.slice(start, end);
          if (rawUrl === "import.meta") {
            const prop = source.slice(end, end + 4);
            if (prop === ".hot") {
              hasHMR = true;
              const endHot = end + 4 + (source[end + 4] === "?" ? 1 : 0);
              if (source.slice(endHot, endHot + 7) === ".accept") {
                if (source.slice(endHot, endHot + 14) === ".acceptExports") {
                  const importAcceptedExports = orderedAcceptedExports[index] = /* @__PURE__ */ new Set();
                  lexAcceptedHmrExports(
                    source,
                    source.indexOf("(", endHot + 14) + 1,
                    importAcceptedExports
                  );
                  isPartiallySelfAccepting = true;
                } else {
                  const importAcceptedUrls = orderedAcceptedUrls[index] = /* @__PURE__ */ new Set();
                  if (lexAcceptedHmrDeps(
                    source,
                    source.indexOf("(", endHot + 7) + 1,
                    importAcceptedUrls
                  )) {
                    isSelfAccepting = true;
                  }
                }
              }
            } else if (prop === ".env") {
              hasEnv = true;
            }
            return;
          } else if (templateLiteralRE.test(rawUrl)) {
            if (!(rawUrl.includes("${") && rawUrl.includes("}"))) {
              specifier = rawUrl.replace(templateLiteralRE, "$1");
            }
          }
          const isDynamicImport = dynamicIndex > -1;
          if (!isDynamicImport && attributeIndex > -1) {
            str().remove(end + 1, expEnd);
          }
          if (specifier !== void 0) {
            if (isExternalUrl(specifier) && !specifier.startsWith("file://") || isDataUrl(specifier)) {
              return;
            }
            if (ssr && !matchAlias(specifier)) {
              if (shouldExternalize(environment, specifier, importer)) {
                return;
              }
              if (isBuiltin(environment.config.resolve.builtins, specifier)) {
                return;
              }
            }
            if (specifier === clientPublicPath) {
              return;
            }
            if (specifier[0] === "/" && !(config2.assetsInclude(cleanUrl2(specifier)) || urlRE$1.test(specifier)) && checkPublicFile(specifier, config2)) {
              throw new Error(
                `Cannot import non-asset file ${specifier} which is inside /public. JS/CSS files inside /public are copied as-is on build and can only be referenced via <script src> or <link href> in html. If you want to get the URL of that file, use ${injectQuery(
                  specifier,
                  "url"
                )} instead.`
              );
            }
            let [url2, resolvedId] = await normalizeUrl(specifier, start);
            resolvedId = resolvedId || url2;
            config2.safeModulePaths.add(fsPathFromUrl(stripBase(url2, base)));
            if (url2 !== specifier) {
              let rewriteDone = false;
              if ((depsOptimizer == null ? void 0 : depsOptimizer.isOptimizedDepFile(resolvedId)) && !optimizedDepChunkRE.test(resolvedId)) {
                const file = cleanUrl2(resolvedId);
                const needsInterop2 = await optimizedDepNeedsInterop(
                  environment,
                  depsOptimizer.metadata,
                  file
                );
                if (needsInterop2 === void 0) {
                  if (!optimizedDepDynamicRE.test(file)) {
                    config2.logger.error(
                      colors$1.red(
                        `Vite Error, ${url2} optimized info should be defined`
                      )
                    );
                  }
                } else if (needsInterop2) {
                  debug$2 == null ? void 0 : debug$2(`${url2} needs interop`);
                  interopNamedImports(
                    str(),
                    importSpecifier,
                    url2,
                    index,
                    importer,
                    config2
                  );
                  rewriteDone = true;
                }
              } else if (url2.includes(browserExternalId) && source.slice(expStart, start).includes("{")) {
                interopNamedImports(
                  str(),
                  importSpecifier,
                  url2,
                  index,
                  importer,
                  config2
                );
                rewriteDone = true;
              }
              if (!rewriteDone) {
                const rewrittenUrl = JSON.stringify(url2);
                const s22 = isDynamicImport ? start : start - 1;
                const e2 = isDynamicImport ? end : end + 1;
                str().overwrite(s22, e2, rewrittenUrl, {
                  contentOnly: true
                });
              }
            }
            const hmrUrl = unwrapId$1(stripBase(url2, base));
            const isLocalImport = !isExternalUrl(hmrUrl) && !isDataUrl(hmrUrl);
            if (isLocalImport) {
              orderedImportedUrls[index] = hmrUrl;
            }
            if (enablePartialAccept && importedBindings) {
              extractImportedBindings(
                resolvedId,
                source,
                importSpecifier,
                importedBindings
              );
            }
            if (!isDynamicImport && isLocalImport && environment.config.dev.preTransformRequests) {
              const url22 = removeImportQuery(hmrUrl);
              environment.warmupRequest(url22);
            }
          } else if (!importer.startsWith(withTrailingSlash(clientDir))) {
            if (!isInNodeModules$1(importer)) {
              const hasViteIgnore = hasViteIgnoreRE.test(
                // complete expression inside parens
                source.slice(dynamicIndex + 1, end)
              );
              if (!hasViteIgnore) {
                this.warn(
                  `
` + colors$1.cyan(importerModule.file) + `
` + colors$1.reset(generateCodeFrame(source, start, end)) + colors$1.yellow(
                    `
The above dynamic import cannot be analyzed by Vite.
See ${colors$1.blue(
                      `https://github.com/rollup/plugins/tree/master/packages/dynamic-import-vars#limitations`
                    )} for supported dynamic import formats. If this is intended to be left as-is, you can use the /* @vite-ignore */ comment inside the import() call to suppress this warning.
`
                  )
                );
              }
            }
            if (!ssr) {
              if (!urlIsStringRE.test(rawUrl) || isExplicitImportRequired(rawUrl.slice(1, -1))) {
                needQueryInjectHelper = true;
                str().overwrite(
                  start,
                  end,
                  `__vite__injectQuery(${rawUrl}, 'import')`,
                  { contentOnly: true }
                );
              }
            }
          }
        })
      );
      const _orderedImportedUrls = orderedImportedUrls.filter(isDefined);
      const importedUrls = new Set(_orderedImportedUrls);
      const staticImportedUrls = new Set(
        _orderedImportedUrls.map((url2) => removeTimestampQuery(url2))
      );
      const acceptedUrls = mergeAcceptedUrls(orderedAcceptedUrls);
      const acceptedExports = mergeAcceptedUrls(orderedAcceptedExports);
      const isClassicWorker = importer.includes(WORKER_FILE_ID) && importer.includes("type=classic");
      if (hasEnv && !isClassicWorker) {
        str().prepend(getEnv(ssr));
      }
      if (hasHMR && !ssr && !isClassicWorker) {
        debugHmr == null ? void 0 : debugHmr(
          `${isSelfAccepting ? `[self-accepts]` : isPartiallySelfAccepting ? `[accepts-exports]` : acceptedUrls.size ? `[accepts-deps]` : `[detected api usage]`} ${prettifyUrl(importer, root)}`
        );
        str().prepend(
          `import { createHotContext as __vite__createHotContext } from "${clientPublicPath}";import.meta.hot = __vite__createHotContext(${JSON.stringify(
            normalizeHmrUrl(importerModule.url)
          )});`
        );
      }
      if (needQueryInjectHelper) {
        if (isClassicWorker) {
          str().append("\n" + __vite__injectQuery.toString());
        } else {
          str().prepend(
            `import { injectQuery as __vite__injectQuery } from "${clientPublicPath}";`
          );
        }
      }
      const normalizedAcceptedUrls = /* @__PURE__ */ new Set();
      for (const { url: url2, start, end } of acceptedUrls) {
        let [normalized, resolvedId] = await normalizeUrl(url2, start).catch(
          () => []
        );
        if (resolvedId) {
          const mod = moduleGraph.getModuleById(resolvedId);
          if (!mod) {
            this.error(
              `module was not found for ${JSON.stringify(resolvedId)}`,
              start
            );
            return;
          }
          normalized = mod.url;
        } else {
          try {
            const [resolved] = await moduleGraph.resolveUrl(toAbsoluteUrl(url2));
            normalized = resolved;
            if (resolved) {
              this.warn({
                message: `Failed to resolve ${JSON.stringify(url2)} from ${importer}. An id should be written. Did you pass a URL?`,
                pos: start
              });
            }
          } catch {
            this.error(`Failed to resolve ${JSON.stringify(url2)}`, start);
            return;
          }
        }
        normalizedAcceptedUrls.add(normalized);
        const hmrAccept = normalizeHmrUrl(normalized);
        str().overwrite(start, end, JSON.stringify(hmrAccept), {
          contentOnly: true
        });
      }
      if (!isCSSRequest(importer) || SPECIAL_QUERY_RE.test(importer)) {
        const pluginImports = this._addedImports;
        if (pluginImports) {
          (await Promise.all(
            [...pluginImports].map((id) => normalizeUrl(id, 0, true))
          )).forEach(([url2]) => importedUrls.add(stripBase(url2, base)));
        }
        if (ssr && importerModule.isSelfAccepting) {
          isSelfAccepting = true;
        }
        if (!isSelfAccepting && isPartiallySelfAccepting && acceptedExports.size >= exports.length && exports.every((e2) => acceptedExports.has(e2.n))) {
          isSelfAccepting = true;
        }
        const prunedImports = await moduleGraph.updateModuleInfo(
          importerModule,
          importedUrls,
          importedBindings,
          normalizedAcceptedUrls,
          isPartiallySelfAccepting ? acceptedExports : null,
          isSelfAccepting,
          staticImportedUrls
        );
        if (hasHMR && prunedImports) {
          handlePrunedModules(prunedImports, environment);
        }
      }
      debug$2 == null ? void 0 : debug$2(
        `${timeFrom(msAtStart)} ${colors$1.dim(
          `[${importedUrls.size} imports rewritten] ${prettifyUrl(
            importer,
            root
          )}`
        )}`
      );
      if (s2) {
        return transformStableResult(s2, importer, config2);
      } else {
        return source;
      }
    }
  };
}
function mergeAcceptedUrls(orderedUrls) {
  const acceptedUrls = /* @__PURE__ */ new Set();
  for (const urls of orderedUrls) {
    if (!urls) continue;
    for (const url2 of urls) acceptedUrls.add(url2);
  }
  return acceptedUrls;
}
function createParseErrorInfo(importer, source) {
  const isVue = importer.endsWith(".vue");
  const isJsx = importer.endsWith(".jsx") || importer.endsWith(".tsx");
  const maybeJSX = !isVue && isJSRequest(importer);
  const probablyBinary = source.includes(
    "�"
  );
  const msg = isVue ? `Install @vitejs/plugin-vue to handle .vue files.` : maybeJSX ? isJsx ? `If you use tsconfig.json, make sure to not set jsx to preserve.` : `If you are using JSX, make sure to name the file with the .jsx or .tsx extension.` : `You may need to install appropriate plugins to handle the ${import_node_path3.default.extname(
    importer
  )} file format, or if it's an asset, add "**/*${import_node_path3.default.extname(
    importer
  )}" to \`assetsInclude\` in your configuration.`;
  return {
    message: `Failed to parse source for import analysis because the content contains invalid JS syntax. ` + msg,
    showCodeFrame: !probablyBinary
  };
}
var interopHelper = (m2) => (m2 == null ? void 0 : m2.__esModule) ? m2 : { ...typeof m2 === "object" && !Array.isArray(m2) || typeof m2 === "function" ? m2 : {}, default: m2 };
function interopNamedImports(str, importSpecifier, rewrittenUrl, importIndex, importer, config2) {
  const source = str.original;
  const {
    s: start,
    e: end,
    ss: expStart,
    se: expEnd,
    d: dynamicIndex
  } = importSpecifier;
  const exp = source.slice(expStart, expEnd);
  if (dynamicIndex > -1) {
    str.overwrite(
      expStart,
      expEnd,
      `import('${rewrittenUrl}').then(m => (${interopHelper.toString()})(m.default))` + getLineBreaks(exp),
      { contentOnly: true }
    );
  } else {
    const rawUrl = source.slice(start, end);
    const rewritten = transformCjsImport(
      exp,
      rewrittenUrl,
      rawUrl,
      importIndex,
      importer,
      config2
    );
    if (rewritten) {
      str.overwrite(expStart, expEnd, rewritten + getLineBreaks(exp), {
        contentOnly: true
      });
    } else {
      str.overwrite(
        start,
        end,
        rewrittenUrl + getLineBreaks(source.slice(start, end)),
        {
          contentOnly: true
        }
      );
    }
  }
}
function getLineBreaks(str) {
  return str.includes("\n") ? "\n".repeat(str.split("\n").length - 1) : "";
}
function transformCjsImport(importExp, url2, rawUrl, importIndex, importer, config2) {
  const node2 = parseAst(importExp).body[0];
  if (config2.command === "serve" && node2.type === "ExportAllDeclaration" && !node2.exported) {
    config2.logger.warn(
      colors$1.yellow(
        `
Unable to interop \`${importExp}\` in ${importer}, this may lose module exports. Please export "${rawUrl}" as ESM or use named exports instead, e.g. \`export { A, B } from "${rawUrl}"\``
      )
    );
  } else if (node2.type === "ImportDeclaration" || node2.type === "ExportNamedDeclaration") {
    if (!node2.specifiers.length) {
      return `import "${url2}"`;
    }
    const importNames = [];
    const exportNames = [];
    let defaultExports = "";
    for (const spec of node2.specifiers) {
      if (spec.type === "ImportSpecifier") {
        const importedName = getIdentifierNameOrLiteralValue(
          spec.imported
        );
        const localName = spec.local.name;
        importNames.push({ importedName, localName });
      } else if (spec.type === "ImportDefaultSpecifier") {
        importNames.push({
          importedName: "default",
          localName: spec.local.name
        });
      } else if (spec.type === "ImportNamespaceSpecifier") {
        importNames.push({ importedName: "*", localName: spec.local.name });
      } else if (spec.type === "ExportSpecifier") {
        const importedName = getIdentifierNameOrLiteralValue(
          spec.local
        );
        const exportedName = getIdentifierNameOrLiteralValue(
          spec.exported
        );
        if (exportedName === "default") {
          defaultExports = makeLegalIdentifier(
            `__vite__cjsExportDefault_${importIndex}`
          );
          importNames.push({ importedName, localName: defaultExports });
        } else {
          const localName = `__vite__cjsExport${spec.exported.type === "Literal" ? `L_${getHash(spec.exported.value)}` : "I_" + spec.exported.name}`;
          importNames.push({ importedName, localName });
          exportNames.push(
            `${localName} as ${spec.exported.type === "Literal" ? JSON.stringify(exportedName) : exportedName}`
          );
        }
      }
    }
    const cjsModuleName = makeLegalIdentifier(
      `__vite__cjsImport${importIndex}_${rawUrl}`
    );
    const lines = [`import ${cjsModuleName} from "${url2}"`];
    importNames.forEach(({ importedName, localName }) => {
      if (importedName === "*") {
        lines.push(
          `const ${localName} = (${interopHelper.toString()})(${cjsModuleName})`
        );
      } else if (importedName === "default") {
        lines.push(
          `const ${localName} = ${cjsModuleName}.__esModule ? ${cjsModuleName}.default : ${cjsModuleName}`
        );
      } else {
        lines.push(`const ${localName} = ${cjsModuleName}["${importedName}"]`);
      }
    });
    if (defaultExports) {
      lines.push(`export default ${defaultExports}`);
    }
    if (exportNames.length) {
      lines.push(`export { ${exportNames.join(", ")} }`);
    }
    return lines.join("; ");
  }
}
function getIdentifierNameOrLiteralValue(node2) {
  return node2.type === "Identifier" ? node2.name : node2.value;
}
function __vite__injectQuery(url2, queryToInject) {
  if (url2[0] !== "." && url2[0] !== "/") {
    return url2;
  }
  const pathname = url2.replace(/[?#].*$/, "");
  const { search, hash: hash2 } = new URL(url2, "http://vite.dev");
  return `${pathname}?${queryToInject}${search ? `&` + search.slice(1) : ""}${hash2 || ""}`;
}
var normalizedClientEntry = normalizePath$3(CLIENT_ENTRY);
var normalizedEnvEntry = normalizePath$3(ENV_ENTRY);
function clientInjectionsPlugin(config2) {
  let injectConfigValues;
  const getDefineReplacer = perEnvironmentState((environment) => {
    const userDefine = {};
    for (const key in environment.config.define) {
      if (!key.startsWith("import.meta.env.")) {
        userDefine[key] = environment.config.define[key];
      }
    }
    const serializedDefines = serializeDefine(userDefine);
    const definesReplacement = () => serializedDefines;
    return (code) => code.replace(`__DEFINES__`, definesReplacement);
  });
  return {
    name: "vite:client-inject",
    async buildStart() {
      const resolvedServerHostname = (await resolveHostname(config2.server.host)).name;
      const resolvedServerPort = config2.server.port;
      const devBase = config2.base;
      const serverHost = `${resolvedServerHostname}:${resolvedServerPort}${devBase}`;
      let hmrConfig = config2.server.hmr;
      hmrConfig = isObject$1(hmrConfig) ? hmrConfig : void 0;
      const host = (hmrConfig == null ? void 0 : hmrConfig.host) || null;
      const protocol = (hmrConfig == null ? void 0 : hmrConfig.protocol) || null;
      const timeout2 = (hmrConfig == null ? void 0 : hmrConfig.timeout) || 3e4;
      const overlay = (hmrConfig == null ? void 0 : hmrConfig.overlay) !== false;
      const isHmrServerSpecified = !!(hmrConfig == null ? void 0 : hmrConfig.server);
      const hmrConfigName = import_node_path3.default.basename(config2.configFile || "vite.config.js");
      let port = (hmrConfig == null ? void 0 : hmrConfig.clientPort) || (hmrConfig == null ? void 0 : hmrConfig.port) || null;
      if (config2.server.middlewareMode && !isHmrServerSpecified) {
        port || (port = 24678);
      }
      let directTarget = (hmrConfig == null ? void 0 : hmrConfig.host) || resolvedServerHostname;
      directTarget += `:${(hmrConfig == null ? void 0 : hmrConfig.port) || resolvedServerPort}`;
      directTarget += devBase;
      let hmrBase = devBase;
      if (hmrConfig == null ? void 0 : hmrConfig.path) {
        hmrBase = import_node_path3.default.posix.join(hmrBase, hmrConfig.path);
      }
      const modeReplacement = escapeReplacement(config2.mode);
      const baseReplacement = escapeReplacement(devBase);
      const serverHostReplacement = escapeReplacement(serverHost);
      const hmrProtocolReplacement = escapeReplacement(protocol);
      const hmrHostnameReplacement = escapeReplacement(host);
      const hmrPortReplacement = escapeReplacement(port);
      const hmrDirectTargetReplacement = escapeReplacement(directTarget);
      const hmrBaseReplacement = escapeReplacement(hmrBase);
      const hmrTimeoutReplacement = escapeReplacement(timeout2);
      const hmrEnableOverlayReplacement = escapeReplacement(overlay);
      const hmrConfigNameReplacement = escapeReplacement(hmrConfigName);
      const wsTokenReplacement = escapeReplacement(config2.webSocketToken);
      injectConfigValues = (code) => {
        return code.replace(`__MODE__`, modeReplacement).replace(/__BASE__/g, baseReplacement).replace(`__SERVER_HOST__`, serverHostReplacement).replace(`__HMR_PROTOCOL__`, hmrProtocolReplacement).replace(`__HMR_HOSTNAME__`, hmrHostnameReplacement).replace(`__HMR_PORT__`, hmrPortReplacement).replace(`__HMR_DIRECT_TARGET__`, hmrDirectTargetReplacement).replace(`__HMR_BASE__`, hmrBaseReplacement).replace(`__HMR_TIMEOUT__`, hmrTimeoutReplacement).replace(`__HMR_ENABLE_OVERLAY__`, hmrEnableOverlayReplacement).replace(`__HMR_CONFIG_NAME__`, hmrConfigNameReplacement).replace(`__WS_TOKEN__`, wsTokenReplacement);
      };
    },
    async transform(code, id, options2) {
      var _a2;
      const ssr = (options2 == null ? void 0 : options2.ssr) ?? this.environment.config.consumer === "server";
      if (id === normalizedClientEntry || id === normalizedEnvEntry) {
        const defineReplacer = getDefineReplacer(this);
        return defineReplacer(injectConfigValues(code));
      } else if (!ssr && code.includes("process.env.NODE_ENV")) {
        const nodeEnv = ((_a2 = this.environment.config.define) == null ? void 0 : _a2["process.env.NODE_ENV"]) || JSON.stringify("development");
        return await replaceDefine(this.environment, code, id, {
          "process.env.NODE_ENV": nodeEnv,
          "global.process.env.NODE_ENV": nodeEnv,
          "globalThis.process.env.NODE_ENV": nodeEnv
        });
      }
    }
  };
}
function escapeReplacement(value2) {
  const jsonValue = JSON.stringify(value2);
  return () => jsonValue;
}
var wasmHelperId = "\0vite/wasm-helper.js";
var wasmInitRE = new RegExp("(?<![?#].*)\\.wasm\\?init");
var wasmHelper = async (opts = {}, url2) => {
  let result;
  if (url2.startsWith("data:")) {
    const urlContent = url2.replace(/^data:.*?base64,/, "");
    let bytes;
    if (typeof Buffer === "function" && typeof Buffer.from === "function") {
      bytes = Buffer.from(urlContent, "base64");
    } else if (typeof atob === "function") {
      const binaryString = atob(urlContent);
      bytes = new Uint8Array(binaryString.length);
      for (let i = 0; i < binaryString.length; i++) {
        bytes[i] = binaryString.charCodeAt(i);
      }
    } else {
      throw new Error(
        "Failed to decode base64-encoded data URL, Buffer and atob are not supported"
      );
    }
    result = await WebAssembly.instantiate(bytes, opts);
  } else {
    const response = await fetch(url2);
    const contentType = response.headers.get("Content-Type") || "";
    if ("instantiateStreaming" in WebAssembly && contentType.startsWith("application/wasm")) {
      result = await WebAssembly.instantiateStreaming(response, opts);
    } else {
      const buffer = await response.arrayBuffer();
      result = await WebAssembly.instantiate(buffer, opts);
    }
  }
  return result.instance;
};
var wasmHelperCode = wasmHelper.toString();
var wasmHelperPlugin = () => {
  return {
    name: "vite:wasm-helper",
    resolveId: {
      handler(id) {
        if (id === wasmHelperId) {
          return id;
        }
      }
    },
    load: {
      async handler(id) {
        if (id === wasmHelperId) {
          return `export default ${wasmHelperCode}`;
        }
        if (!wasmInitRE.test(id)) {
          return;
        }
        const url2 = await fileToUrl$1(this, id);
        return `
  import initWasm from "${wasmHelperId}"
  export default opts => initWasm(opts, ${JSON.stringify(url2)})
  `;
      }
    }
  };
};
var wasmFallbackPlugin = () => {
  return {
    name: "vite:wasm-fallback",
    load: {
      handler(id) {
        if (!id.endsWith(".wasm")) {
          return;
        }
        throw new Error(
          '"ESM integration proposal for Wasm" is not supported currently. Use vite-plugin-wasm or other community plugins to handle this. Alternatively, you can use `.wasm?init` or `.wasm?url`. See https://vite.dev/guide/features.html#webassembly for more details.'
        );
      }
    }
  };
};
function err(e2, pos) {
  const error2 = new Error(e2);
  error2.pos = pos;
  return error2;
}
function findClosingParen(input, fromIndex) {
  let count = 1;
  for (let i = fromIndex; i < input.length; i++) {
    if (input[i] === "(") count++;
    if (input[i] === ")") count--;
    if (count === 0) return i;
  }
  return -1;
}
function extractWorkerTypeFromAst(expression, optsStartIndex) {
  if (expression.type !== "ObjectExpression") {
    return;
  }
  let lastSpreadElementIndex = -1;
  let typeProperty = null;
  let typePropertyIndex = -1;
  for (let i = 0; i < expression.properties.length; i++) {
    const property = expression.properties[i];
    if (property.type === "SpreadElement") {
      lastSpreadElementIndex = i;
      continue;
    }
    if (property.type === "Property" && (property.key.type === "Identifier" && property.key.name === "type" || property.key.type === "Literal" && property.key.value === "type")) {
      typeProperty = property;
      typePropertyIndex = i;
    }
  }
  if (typePropertyIndex === -1 && lastSpreadElementIndex === -1) {
    return "classic";
  }
  if (typePropertyIndex < lastSpreadElementIndex) {
    throw err(
      "Expected object spread to be used before the definition of the type property. Vite needs a static value for the type property to correctly infer it.",
      optsStartIndex
    );
  }
  if ((typeProperty == null ? void 0 : typeProperty.value.type) !== "Literal") {
    throw err(
      "Expected worker options type property to be a literal value.",
      optsStartIndex
    );
  }
  return (typeProperty == null ? void 0 : typeProperty.value.value) === "module" ? "module" : "classic";
}
async function parseWorkerOptions(rawOpts, optsStartIndex) {
  let opts = {};
  try {
    opts = evalValue(rawOpts);
  } catch {
    const optsNode = (await parseAstAsync(`(${rawOpts})`)).body[0].expression;
    const type = extractWorkerTypeFromAst(optsNode, optsStartIndex);
    if (type) {
      return { type };
    }
    throw err(
      "Vite is unable to parse the worker options as the value is not static. To ignore this error, please use /* @vite-ignore */ in the worker options.",
      optsStartIndex
    );
  }
  if (opts == null) {
    return {};
  }
  if (typeof opts !== "object") {
    throw err(
      `Expected worker options to be an object, got ${typeof opts}`,
      optsStartIndex
    );
  }
  return opts;
}
async function getWorkerType(raw, clean, i) {
  const commaIndex = clean.indexOf(",", i);
  if (commaIndex === -1) {
    return "classic";
  }
  const endIndex = findClosingParen(clean, i);
  if (commaIndex > endIndex) {
    return "classic";
  }
  let workerOptString = raw.substring(commaIndex + 1, endIndex);
  const hasViteIgnore = hasViteIgnoreRE.test(workerOptString);
  if (hasViteIgnore) {
    return "ignore";
  }
  const cleanWorkerOptString = clean.substring(commaIndex + 1, endIndex);
  const trimmedCleanWorkerOptString = cleanWorkerOptString.trim();
  if (!trimmedCleanWorkerOptString.length) {
    return "classic";
  }
  if (trimmedCleanWorkerOptString.endsWith(",")) {
    workerOptString = workerOptString.slice(
      0,
      cleanWorkerOptString.lastIndexOf(",")
    );
  }
  const workerOpts = await parseWorkerOptions(workerOptString, commaIndex + 1);
  if (workerOpts.type && (workerOpts.type === "module" || workerOpts.type === "classic")) {
    return workerOpts.type;
  }
  return "classic";
}
function isIncludeWorkerImportMetaUrl(code) {
  if ((code.includes("new Worker") || code.includes("new SharedWorker")) && code.includes("new URL") && code.includes(`import.meta.url`)) {
    return true;
  }
  return false;
}
function workerImportMetaUrlPlugin(config2) {
  const isBuild = config2.command === "build";
  let workerResolver;
  const fsResolveOptions = {
    ...config2.resolve,
    root: config2.root,
    isProduction: config2.isProduction,
    isBuild: config2.command === "build",
    packageCache: config2.packageCache,
    asSrc: true
  };
  return {
    name: "vite:worker-import-meta-url",
    applyToEnvironment(environment) {
      return environment.config.consumer === "client";
    },
    shouldTransformCachedModule({ code }) {
      if (isBuild && config2.build.watch && isIncludeWorkerImportMetaUrl(code)) {
        return true;
      }
    },
    transform: {
      async handler(code, id) {
        if (isIncludeWorkerImportMetaUrl(code)) {
          let s2;
          const cleanString = stripLiteral(code);
          const workerImportMetaUrlRE = new RegExp("\\bnew\\s+(?:Worker|SharedWorker)\\s*\\(\\s*(new\\s+URL\\s*\\(\\s*('[^']+'|\"[^\"]+\"|`[^`]+`)\\s*,\\s*import\\.meta\\.url\\s*\\))", "dg");
          let match;
          while (match = workerImportMetaUrlRE.exec(cleanString)) {
            const [[, endIndex], [expStart, expEnd], [urlStart, urlEnd]] = match.indices;
            const rawUrl = code.slice(urlStart, urlEnd);
            if (rawUrl[0] === "`" && rawUrl.includes("${")) {
              this.error(
                `\`new URL(url, import.meta.url)\` is not supported in dynamic template string.`,
                expStart
              );
            }
            s2 || (s2 = new MagicString(code));
            const workerType = await getWorkerType(code, cleanString, endIndex);
            const url2 = rawUrl.slice(1, -1);
            let file;
            if (url2[0] === ".") {
              file = import_node_path3.default.resolve(import_node_path3.default.dirname(id), url2);
              file = slash$1(tryFsResolve(file, fsResolveOptions) ?? file);
            } else {
              workerResolver ?? (workerResolver = createBackCompatIdResolver(config2, {
                extensions: [],
                tryIndex: false,
                preferRelative: true
              }));
              file = await workerResolver(this.environment, url2, id);
              file ?? (file = url2[0] === "/" ? slash$1(import_node_path3.default.join(config2.publicDir, url2)) : slash$1(import_node_path3.default.resolve(import_node_path3.default.dirname(id), url2)));
            }
            if (isBuild && config2.isWorker && config2.bundleChain.at(-1) === cleanUrl2(file)) {
              s2.update(expStart, expEnd, "self.location.href");
            } else {
              let builtUrl;
              if (isBuild) {
                builtUrl = await workerFileToUrl(config2, file);
              } else {
                builtUrl = await fileToUrl$1(this, cleanUrl2(file));
                builtUrl = injectQuery(
                  builtUrl,
                  `${WORKER_FILE_ID}&type=${workerType}`
                );
              }
              s2.update(
                expStart,
                expEnd,
                `new URL(/* @vite-ignore */ ${JSON.stringify(builtUrl)}, import.meta.url)`
              );
            }
          }
          if (s2) {
            return transformStableResult(s2, id, config2);
          }
          return null;
        }
      }
    }
  };
}
function assetImportMetaUrlPlugin(config2) {
  const { publicDir } = config2;
  let assetResolver;
  const fsResolveOptions = {
    ...config2.resolve,
    root: config2.root,
    isProduction: config2.isProduction,
    isBuild: config2.command === "build",
    packageCache: config2.packageCache,
    asSrc: true
  };
  return {
    name: "vite:asset-import-meta-url",
    applyToEnvironment(environment) {
      return environment.config.consumer === "client";
    },
    transform: {
      async handler(code, id) {
        if (id !== preloadHelperId && id !== CLIENT_ENTRY && code.includes("new URL") && code.includes(`import.meta.url`)) {
          let s2;
          const assetImportMetaUrlRE = new RegExp("\\bnew\\s+URL\\s*\\(\\s*('[^']+'|\"[^\"]+\"|`[^`]+`)\\s*,\\s*import\\.meta\\.url\\s*(?:,\\s*)?\\)", "dg");
          const cleanString = stripLiteral(code);
          let match;
          while (match = assetImportMetaUrlRE.exec(cleanString)) {
            const [[startIndex, endIndex], [urlStart, urlEnd]] = match.indices;
            if (hasViteIgnoreRE.test(code.slice(startIndex, urlStart))) continue;
            const rawUrl = code.slice(urlStart, urlEnd);
            if (!s2) s2 = new MagicString(code);
            if (rawUrl[0] === "`" && rawUrl.includes("${")) {
              const queryDelimiterIndex = getQueryDelimiterIndex(rawUrl);
              const hasQueryDelimiter = queryDelimiterIndex !== -1;
              const pureUrl = hasQueryDelimiter ? rawUrl.slice(0, queryDelimiterIndex) + "`" : rawUrl;
              const queryString = hasQueryDelimiter ? rawUrl.slice(queryDelimiterIndex, -1) : "";
              const ast = this.parse(pureUrl);
              const templateLiteral = ast.body[0].expression;
              if (templateLiteral.expressions.length) {
                const pattern = buildGlobPattern(templateLiteral);
                if (pattern.startsWith("*")) {
                  continue;
                }
                const globOptions = {
                  eager: true,
                  import: "default",
                  // A hack to allow 'as' & 'query' exist at the same time
                  query: injectQuery(queryString, "url")
                };
                s2.update(
                  startIndex,
                  endIndex,
                  `new URL((import.meta.glob(${JSON.stringify(
                    pattern
                  )}, ${JSON.stringify(
                    globOptions
                  )}))[${pureUrl}], import.meta.url)`
                );
                continue;
              }
            }
            const url2 = rawUrl.slice(1, -1);
            if (isDataUrl(url2)) {
              continue;
            }
            let file;
            if (url2[0] === ".") {
              file = slash$1(import_node_path3.default.resolve(import_node_path3.default.dirname(id), url2));
              file = tryFsResolve(file, fsResolveOptions) ?? file;
            } else {
              assetResolver ?? (assetResolver = createBackCompatIdResolver(config2, {
                extensions: [],
                mainFields: [],
                tryIndex: false,
                preferRelative: true
              }));
              file = await assetResolver(this.environment, url2, id);
              file ?? (file = url2[0] === "/" ? slash$1(import_node_path3.default.join(publicDir, url2)) : slash$1(import_node_path3.default.resolve(import_node_path3.default.dirname(id), url2)));
            }
            let builtUrl;
            if (file) {
              try {
                if (publicDir && isParentDirectory(publicDir, file)) {
                  const publicPath = "/" + import_node_path3.default.posix.relative(publicDir, file);
                  builtUrl = await fileToUrl$1(this, publicPath);
                } else {
                  builtUrl = await fileToUrl$1(this, file);
                }
              } catch {
              }
            }
            if (!builtUrl) {
              const rawExp = code.slice(startIndex, endIndex);
              config2.logger.warnOnce(
                `
${rawExp} doesn't exist at build time, it will remain unchanged to be resolved at runtime. If this is intended, you can use the /* @vite-ignore */ comment to suppress this warning.`
              );
              builtUrl = url2;
            }
            s2.update(
              startIndex,
              endIndex,
              `new URL(${JSON.stringify(builtUrl)}, import.meta.url)`
            );
          }
          if (s2) {
            return transformStableResult(s2, id, config2);
          }
        }
        return null;
      }
    }
  };
}
function buildGlobPattern(ast) {
  let pattern = "";
  let lastIsGlob = false;
  for (let i = 0; i < ast.quasis.length; i++) {
    const str = ast.quasis[i].value.raw;
    if (str) {
      pattern += str;
      lastIsGlob = false;
    }
    if (ast.expressions[i] && !lastIsGlob) {
      pattern += "*";
      lastIsGlob = true;
    }
  }
  return pattern;
}
function getQueryDelimiterIndex(rawUrl) {
  let bracketsStack = 0;
  for (let i = 0; i < rawUrl.length; i++) {
    if (rawUrl[i] === "{") {
      bracketsStack++;
    } else if (rawUrl[i] === "}") {
      bracketsStack--;
    } else if (rawUrl[i] === "?" && bracketsStack === 0) {
      return i;
    }
  }
  return -1;
}
function metadataPlugin() {
  return {
    name: "vite:build-metadata",
    async renderChunk(_code, chunk) {
      chunk.viteMetadata = {
        importedAssets: /* @__PURE__ */ new Set(),
        importedCss: /* @__PURE__ */ new Set()
      };
      return null;
    }
  };
}
var VariableDynamicImportError = class extends Error {
};
var example = "For example: import(`./foo/${bar}.js`).";
function sanitizeString(str) {
  if (str === "") return str;
  if (str.includes("*")) {
    throw new VariableDynamicImportError("A dynamic import cannot contain * characters.");
  }
  return escapePath(str);
}
function templateLiteralToGlob(node2) {
  let glob2 = "";
  for (let i = 0; i < node2.quasis.length; i += 1) {
    glob2 += sanitizeString(node2.quasis[i].value.raw);
    if (node2.expressions[i]) {
      glob2 += expressionToGlob(node2.expressions[i]);
    }
  }
  return glob2;
}
function callExpressionToGlob(node2) {
  const { callee } = node2;
  if (callee.type === "MemberExpression" && callee.property.type === "Identifier" && callee.property.name === "concat") {
    return `${expressionToGlob(callee.object)}${node2.arguments.map(expressionToGlob).join("")}`;
  }
  return "*";
}
function binaryExpressionToGlob(node2) {
  if (node2.operator !== "+") {
    throw new VariableDynamicImportError(`${node2.operator} operator is not supported.`);
  }
  return `${expressionToGlob(node2.left)}${expressionToGlob(node2.right)}`;
}
function expressionToGlob(node2) {
  switch (node2.type) {
    case "TemplateLiteral":
      return templateLiteralToGlob(node2);
    case "CallExpression":
      return callExpressionToGlob(node2);
    case "BinaryExpression":
      return binaryExpressionToGlob(node2);
    case "Literal": {
      return sanitizeString(node2.value);
    }
    default:
      return "*";
  }
}
var defaultProtocol = "file:";
var ignoredProtocols = ["data:", "http:", "https:"];
function shouldIgnore(glob2) {
  const containsAsterisk = glob2.includes("*");
  const globURL = new URL(glob2, defaultProtocol);
  const containsIgnoredProtocol = ignoredProtocols.some(
    (ignoredProtocol) => ignoredProtocol === globURL.protocol
  );
  return !containsAsterisk || containsIgnoredProtocol;
}
function dynamicImportToGlob(node2, sourceString) {
  let glob2 = expressionToGlob(node2);
  if (shouldIgnore(glob2)) {
    return null;
  }
  glob2 = glob2.replace(/\*\*/g, "*");
  if (glob2.startsWith("*")) {
    throw new VariableDynamicImportError(
      `invalid import "${sourceString}". It cannot be statically analyzed. Variable dynamic imports must start with ./ and be limited to a specific directory. ${example}`
    );
  }
  if (glob2.startsWith("/")) {
    throw new VariableDynamicImportError(
      `invalid import "${sourceString}". Variable absolute imports are not supported, imports must start with ./ in the static part of the import. ${example}`
    );
  }
  if (!glob2.startsWith("./") && !glob2.startsWith("../")) {
    throw new VariableDynamicImportError(
      `invalid import "${sourceString}". Variable bare imports are not supported, imports must start with ./ in the static part of the import. ${example}`
    );
  }
  const ownDirectoryStarExtension = /^\.\/\*\.\w+$/;
  if (ownDirectoryStarExtension.test(glob2)) {
    throw new VariableDynamicImportError(
      `${`invalid import "${sourceString}". Variable imports cannot import their own directory, place imports in a separate directory or make the import filename more specific. `}${example}`
    );
  }
  if (import_path2.default.extname(glob2) === "") {
    throw new VariableDynamicImportError(
      `invalid import "${sourceString}". A file extension must be included in the static part of the import. ${example}`
    );
  }
  return glob2;
}
var dynamicImportHelperId = "\0vite/dynamic-import-helper.js";
var relativePathRE = /^\.{1,2}\//;
var hasDynamicImportRE = /\bimport\s*[(/]/;
var dynamicImportHelper = (glob2, path4, segs) => {
  const v = glob2[path4];
  if (v) {
    return typeof v === "function" ? v() : Promise.resolve(v);
  }
  return new Promise((_, reject) => {
    (typeof queueMicrotask === "function" ? queueMicrotask : setTimeout)(
      reject.bind(
        null,
        new Error(
          "Unknown variable dynamic import: " + path4 + (path4.split("/").length !== segs ? ". Note that variables only represent file names one level deep." : "")
        )
      )
    );
  });
};
function parseDynamicImportPattern(strings) {
  const filename = strings.slice(1, -1);
  const ast = parseAst(strings).body[0].expression;
  const userPatternQuery = dynamicImportToGlob(ast, filename);
  if (!userPatternQuery) {
    return null;
  }
  const [userPattern] = userPatternQuery.split(
    // ? is escaped on posix OS
    requestQueryMaybeEscapedSplitRE,
    2
  );
  let [rawPattern, search] = filename.split(requestQuerySplitRE, 2);
  let globParams = null;
  if (search) {
    search = "?" + search;
    if (workerOrSharedWorkerRE.test(search) || urlRE$1.test(search) || rawRE$1.test(search)) {
      globParams = {
        query: search,
        import: "*"
      };
    } else {
      globParams = {
        query: search
      };
    }
  }
  return {
    globParams,
    userPattern,
    rawPattern
  };
}
async function transformDynamicImport(importSource, importer, resolve4, root) {
  if (importSource[1] !== "." && importSource[1] !== "/") {
    const resolvedFileName = await resolve4(importSource.slice(1, -1), importer);
    if (!resolvedFileName) {
      return null;
    }
    const relativeFileName = normalizePath$3(
      import_node_path3.posix.relative(
        import_node_path3.posix.dirname(normalizePath$3(importer)),
        normalizePath$3(resolvedFileName)
      )
    );
    importSource = "`" + (relativeFileName[0] === "." ? "" : "./") + relativeFileName + "`";
  }
  const dynamicImportPattern = parseDynamicImportPattern(importSource);
  if (!dynamicImportPattern) {
    return null;
  }
  const { globParams, rawPattern, userPattern } = dynamicImportPattern;
  const params = globParams ? `, ${JSON.stringify(globParams)}` : "";
  const dir = importer ? import_node_path3.posix.dirname(importer) : root;
  const normalized = rawPattern[0] === "/" ? import_node_path3.posix.join(root, rawPattern.slice(1)) : import_node_path3.posix.join(dir, rawPattern);
  let newRawPattern = import_node_path3.posix.relative(import_node_path3.posix.dirname(importer), normalized);
  if (!relativePathRE.test(newRawPattern)) {
    newRawPattern = `./${newRawPattern}`;
  }
  const exp = `(import.meta.glob(${JSON.stringify(userPattern)}${params}))`;
  return {
    rawPattern: newRawPattern,
    pattern: userPattern,
    glob: exp
  };
}
function dynamicImportVarsPlugin(config2) {
  const resolve4 = createBackCompatIdResolver(config2, {
    preferRelative: true,
    tryIndex: false,
    extensions: []
  });
  const getFilter = perEnvironmentState((environment) => {
    const { include, exclude } = environment.config.build.dynamicImportVarsOptions;
    return createFilter$1(include, exclude);
  });
  return {
    name: "vite:dynamic-import-vars",
    resolveId: {
      handler(id) {
        if (id === dynamicImportHelperId) {
          return id;
        }
      }
    },
    load: {
      handler(id) {
        if (id === dynamicImportHelperId) {
          return `export default ${dynamicImportHelper.toString()}`;
        }
      }
    },
    transform: {
      async handler(source, importer) {
        const { environment } = this;
        if (!getFilter(this)(importer) || importer === CLIENT_ENTRY || !hasDynamicImportRE.test(source)) {
          return;
        }
        await init;
        let imports = [];
        try {
          imports = parse$d(source)[0];
        } catch {
          return null;
        }
        if (!imports.length) {
          return null;
        }
        let s2;
        let needDynamicImportHelper = false;
        for (let index = 0; index < imports.length; index++) {
          const {
            s: start,
            e: end,
            ss: expStart,
            se: expEnd,
            d: dynamicIndex
          } = imports[index];
          if (dynamicIndex === -1 || source[start] !== "`") {
            continue;
          }
          if (hasViteIgnoreRE.test(source.slice(expStart, expEnd))) {
            continue;
          }
          s2 || (s2 = new MagicString(source));
          let result;
          try {
            result = await transformDynamicImport(
              source.slice(start, end),
              importer,
              (id, importer2) => resolve4(environment, id, importer2),
              config2.root
            );
          } catch (error2) {
            if (environment.config.build.dynamicImportVarsOptions.warnOnError) {
              this.warn(error2);
            } else {
              this.error(error2);
            }
          }
          if (!result) {
            continue;
          }
          const { rawPattern, glob: glob2 } = result;
          needDynamicImportHelper = true;
          s2.overwrite(
            expStart,
            expEnd,
            `__variableDynamicImportRuntimeHelper(${glob2}, \`${rawPattern}\`, ${rawPattern.split("/").length})`
          );
        }
        if (s2) {
          if (needDynamicImportHelper) {
            s2.prepend(
              `import __variableDynamicImportRuntimeHelper from "${dynamicImportHelperId}";`
            );
          }
          return transformStableResult(s2, importer, config2);
        }
      }
    }
  };
}
function getMatcherString(glob2, cwd2) {
  if (glob2.startsWith("**") || import_node_path3.default.isAbsolute(glob2)) {
    return slash$1(glob2);
  }
  const resolved = import_node_path3.default.join(cwd2, glob2);
  return slash$1(resolved);
}
function patternToIdFilter(pattern, cwd2) {
  if (pattern instanceof RegExp) {
    return (id) => {
      const normalizedId = slash$1(id);
      const result = pattern.test(normalizedId);
      pattern.lastIndex = 0;
      return result;
    };
  }
  const glob2 = getMatcherString(pattern, cwd2);
  const matcher = (0, import_picomatch2.default)(glob2, { dot: true });
  return (id) => {
    const normalizedId = slash$1(id);
    return matcher(normalizedId);
  };
}
function patternToCodeFilter(pattern) {
  if (pattern instanceof RegExp) {
    return (code) => {
      const result = pattern.test(code);
      pattern.lastIndex = 0;
      return result;
    };
  }
  return (code) => code.includes(pattern);
}
function createFilter2(exclude, include) {
  if (!exclude && !include) {
    return;
  }
  return (input) => {
    if (exclude == null ? void 0 : exclude.some((filter2) => filter2(input))) {
      return false;
    }
    if (include == null ? void 0 : include.some((filter2) => filter2(input))) {
      return true;
    }
    return !(include && include.length > 0);
  };
}
function normalizeFilter(filter2) {
  if (typeof filter2 === "string" || filter2 instanceof RegExp) {
    return {
      include: [filter2]
    };
  }
  if (Array.isArray(filter2)) {
    return {
      include: filter2
    };
  }
  return {
    include: filter2.include ? arraify(filter2.include) : void 0,
    exclude: filter2.exclude ? arraify(filter2.exclude) : void 0
  };
}
function createIdFilter(filter2, cwd2 = process.cwd()) {
  if (!filter2) return;
  const { exclude, include } = normalizeFilter(filter2);
  const excludeFilter = exclude == null ? void 0 : exclude.map((p2) => patternToIdFilter(p2, cwd2));
  const includeFilter = include == null ? void 0 : include.map((p2) => patternToIdFilter(p2, cwd2));
  return createFilter2(excludeFilter, includeFilter);
}
function createCodeFilter(filter2) {
  if (!filter2) return;
  const { exclude, include } = normalizeFilter(filter2);
  const excludeFilter = exclude == null ? void 0 : exclude.map(patternToCodeFilter);
  const includeFilter = include == null ? void 0 : include.map(patternToCodeFilter);
  return createFilter2(excludeFilter, includeFilter);
}
function createFilterForTransform(idFilter, codeFilter, cwd2) {
  if (!idFilter && !codeFilter) return;
  const idFilterFn = createIdFilter(idFilter, cwd2);
  const codeFilterFn = createCodeFilter(codeFilter);
  return (id, code) => {
    let fallback = true;
    if (idFilterFn) {
      fallback && (fallback = idFilterFn(id));
    }
    if (!fallback) {
      return false;
    }
    if (codeFilterFn) {
      fallback && (fallback = codeFilterFn(code));
    }
    return fallback;
  };
}
async function resolvePlugins(config2, prePlugins, normalPlugins, postPlugins) {
  const isBuild = config2.command === "build";
  const isWorker = config2.isWorker;
  const buildPlugins = isBuild ? await (await Promise.resolve().then(function() {
    return build$1;
  })).resolveBuildPlugins(config2) : { pre: [], post: [] };
  const { modulePreload } = config2.build;
  return [
    !isBuild ? optimizedDepsPlugin() : null,
    isBuild ? metadataPlugin() : null,
    !isWorker ? watchPackageDataPlugin(config2.packageCache) : null,
    !isBuild ? preAliasPlugin(config2) : null,
    alias$1({
      entries: config2.resolve.alias,
      customResolver: viteAliasCustomResolver
    }),
    ...prePlugins,
    modulePreload !== false && modulePreload.polyfill ? modulePreloadPolyfillPlugin(config2) : null,
    resolvePlugin({
      root: config2.root,
      isProduction: config2.isProduction,
      isBuild,
      packageCache: config2.packageCache,
      asSrc: true,
      optimizeDeps: true,
      externalize: true
    }),
    htmlInlineProxyPlugin(config2),
    cssPlugin(config2),
    config2.esbuild !== false ? esbuildPlugin(config2) : null,
    jsonPlugin(config2.json, isBuild),
    wasmHelperPlugin(),
    webWorkerPlugin(config2),
    assetPlugin(config2),
    ...normalPlugins,
    wasmFallbackPlugin(),
    definePlugin(config2),
    cssPostPlugin(config2),
    isBuild && buildHtmlPlugin(config2),
    workerImportMetaUrlPlugin(config2),
    assetImportMetaUrlPlugin(config2),
    ...buildPlugins.pre,
    dynamicImportVarsPlugin(config2),
    importGlobPlugin(config2),
    ...postPlugins,
    ...buildPlugins.post,
    // internal server-only plugins are always applied after everything else
    ...isBuild ? [] : [
      clientInjectionsPlugin(config2),
      cssAnalysisPlugin(config2),
      importAnalysisPlugin(config2)
    ]
  ].filter(Boolean);
}
function createPluginHookUtils(plugins2) {
  const sortedPluginsCache = /* @__PURE__ */ new Map();
  function getSortedPlugins(hookName) {
    if (sortedPluginsCache.has(hookName))
      return sortedPluginsCache.get(hookName);
    const sorted = getSortedPluginsByHook(hookName, plugins2);
    sortedPluginsCache.set(hookName, sorted);
    return sorted;
  }
  function getSortedPluginHooks(hookName) {
    const plugins22 = getSortedPlugins(hookName);
    return plugins22.map((p2) => getHookHandler(p2[hookName])).filter(Boolean);
  }
  return {
    getSortedPlugins,
    getSortedPluginHooks
  };
}
function getSortedPluginsByHook(hookName, plugins2) {
  const sortedPlugins = [];
  let pre = 0, normal = 0, post = 0;
  for (const plugin of plugins2) {
    const hook = plugin[hookName];
    if (hook) {
      if (typeof hook === "object") {
        if (hook.order === "pre") {
          sortedPlugins.splice(pre++, 0, plugin);
          continue;
        }
        if (hook.order === "post") {
          sortedPlugins.splice(pre + normal + post++, 0, plugin);
          continue;
        }
      }
      sortedPlugins.splice(pre + normal++, 0, plugin);
    }
  }
  return sortedPlugins;
}
function getHookHandler(hook) {
  return typeof hook === "object" ? hook.handler : hook;
}
var filterForPlugin = /* @__PURE__ */ new WeakMap();
function getCachedFilterForPlugin(plugin, hookName) {
  var _a2, _b;
  let filters = filterForPlugin.get(plugin);
  if (filters && hookName in filters) {
    return filters[hookName];
  }
  if (!filters) {
    filters = {};
    filterForPlugin.set(plugin, filters);
  }
  let filter2;
  switch (hookName) {
    case "resolveId": {
      const rawFilter = typeof plugin.resolveId === "object" ? (_a2 = plugin.resolveId.filter) == null ? void 0 : _a2.id : void 0;
      filters.resolveId = createIdFilter(rawFilter);
      filter2 = filters.resolveId;
      break;
    }
    case "load": {
      const rawFilter = typeof plugin.load === "object" ? (_b = plugin.load.filter) == null ? void 0 : _b.id : void 0;
      filters.load = createIdFilter(rawFilter);
      filter2 = filters.load;
      break;
    }
    case "transform": {
      const rawFilters = typeof plugin.transform === "object" ? plugin.transform.filter : void 0;
      filters.transform = createFilterForTransform(
        rawFilters == null ? void 0 : rawFilters.id,
        rawFilters == null ? void 0 : rawFilters.code
      );
      filter2 = filters.transform;
      break;
    }
  }
  return filter2;
}
var viteAliasCustomResolver = async function(id, importer, options2) {
  const resolved = await this.resolve(id, importer, options2);
  return resolved || { id, meta: { "vite:alias": { noResolved: true } } };
};
var EMPTY_OBJECT = Object.freeze({});
var debugSourcemapCombineFilter = process.env.DEBUG_VITE_SOURCEMAP_COMBINE_FILTER;
var debugSourcemapCombine = createDebugger("vite:sourcemap-combine", {
  onlyWhenFocused: true
});
var debugResolve = createDebugger("vite:resolve");
var debugPluginResolve = createDebugger("vite:plugin-resolve", {
  onlyWhenFocused: "vite:plugin"
});
var debugPluginTransform = createDebugger("vite:plugin-transform", {
  onlyWhenFocused: "vite:plugin"
});
var debugPluginContainerContext = createDebugger(
  "vite:plugin-container-context"
);
var ERR_CLOSED_SERVER = "ERR_CLOSED_SERVER";
function throwClosedServerError() {
  const err2 = new Error(
    "The server is being restarted or closed. Request is outdated"
  );
  err2.code = ERR_CLOSED_SERVER;
  throw err2;
}
async function createEnvironmentPluginContainer(environment, plugins2, watcher, autoStart = true) {
  const container = new EnvironmentPluginContainer(
    environment,
    plugins2,
    watcher,
    autoStart
  );
  await container.resolveRollupOptions();
  return container;
}
var EnvironmentPluginContainer = class {
  /**
   * @internal use `createEnvironmentPluginContainer` instead
   */
  constructor(environment, plugins2, watcher, autoStart = true) {
    __publicField(this, "_pluginContextMap", /* @__PURE__ */ new Map());
    __publicField(this, "_resolvedRollupOptions");
    __publicField(this, "_processesing", /* @__PURE__ */ new Set());
    __publicField(this, "_seenResolves", {});
    // _addedFiles from the `load()` hook gets saved here so it can be reused in the `transform()` hook
    __publicField(this, "_moduleNodeToLoadAddedImports", /* @__PURE__ */ new WeakMap());
    __publicField(this, "getSortedPluginHooks");
    __publicField(this, "getSortedPlugins");
    __publicField(this, "moduleGraph");
    __publicField(this, "watchFiles", /* @__PURE__ */ new Set());
    __publicField(this, "minimalContext");
    __publicField(this, "_started", false);
    __publicField(this, "_buildStartPromise");
    __publicField(this, "_closed", false);
    this.environment = environment;
    this.plugins = plugins2;
    this.watcher = watcher;
    this._started = !autoStart;
    this.minimalContext = new MinimalPluginContext(
      { rollupVersion, watchMode: true },
      environment
    );
    const utils2 = createPluginHookUtils(plugins2);
    this.getSortedPlugins = utils2.getSortedPlugins;
    this.getSortedPluginHooks = utils2.getSortedPluginHooks;
    this.moduleGraph = environment.mode === "dev" ? environment.moduleGraph : void 0;
  }
  _updateModuleLoadAddedImports(id, addedImports) {
    var _a2;
    const module = (_a2 = this.moduleGraph) == null ? void 0 : _a2.getModuleById(id);
    if (module) {
      this._moduleNodeToLoadAddedImports.set(module, addedImports);
    }
  }
  _getAddedImports(id) {
    var _a2;
    const module = (_a2 = this.moduleGraph) == null ? void 0 : _a2.getModuleById(id);
    return module ? this._moduleNodeToLoadAddedImports.get(module) || null : null;
  }
  getModuleInfo(id) {
    var _a2;
    const module = (_a2 = this.moduleGraph) == null ? void 0 : _a2.getModuleById(id);
    if (!module) {
      return null;
    }
    if (!module.info) {
      module.info = new Proxy(
        { id, meta: module.meta || EMPTY_OBJECT },
        // throw when an unsupported ModuleInfo property is accessed,
        // so that incompatible plugins fail in a non-cryptic way.
        {
          get(info, key) {
            if (key in info) {
              return info[key];
            }
            if (key === "then") {
              return void 0;
            }
            throw Error(
              `[vite] The "${key}" property of ModuleInfo is not supported.`
            );
          }
        }
      );
    }
    return module.info ?? null;
  }
  // keeps track of hook promises so that we can wait for them all to finish upon closing the server
  handleHookPromise(maybePromise) {
    if (!(maybePromise == null ? void 0 : maybePromise.then)) {
      return maybePromise;
    }
    const promise = maybePromise;
    this._processesing.add(promise);
    return promise.finally(() => this._processesing.delete(promise));
  }
  get options() {
    return this._resolvedRollupOptions;
  }
  async resolveRollupOptions() {
    if (!this._resolvedRollupOptions) {
      let options2 = this.environment.config.build.rollupOptions;
      for (const optionsHook of this.getSortedPluginHooks("options")) {
        if (this._closed) {
          throwClosedServerError();
        }
        options2 = await this.handleHookPromise(
          optionsHook.call(this.minimalContext, options2)
        ) || options2;
      }
      this._resolvedRollupOptions = options2;
    }
    return this._resolvedRollupOptions;
  }
  _getPluginContext(plugin) {
    if (!this._pluginContextMap.has(plugin)) {
      this._pluginContextMap.set(plugin, new PluginContext(plugin, this));
    }
    return this._pluginContextMap.get(plugin);
  }
  // parallel, ignores returns
  async hookParallel(hookName, context, args, condition) {
    const parallelPromises = [];
    for (const plugin of this.getSortedPlugins(hookName)) {
      if (condition && !condition(plugin)) continue;
      const hook = plugin[hookName];
      const handler = getHookHandler(hook);
      if (hook.sequential) {
        await Promise.all(parallelPromises);
        parallelPromises.length = 0;
        await handler.apply(context(plugin), args(plugin));
      } else {
        parallelPromises.push(handler.apply(context(plugin), args(plugin)));
      }
    }
    await Promise.all(parallelPromises);
  }
  async buildStart(_options) {
    if (this._started) {
      if (this._buildStartPromise) {
        await this._buildStartPromise;
      }
      return;
    }
    this._started = true;
    const config2 = this.environment.getTopLevelConfig();
    this._buildStartPromise = this.handleHookPromise(
      this.hookParallel(
        "buildStart",
        (plugin) => this._getPluginContext(plugin),
        () => [this.options],
        (plugin) => this.environment.name === "client" || config2.server.perEnvironmentStartEndDuringDev || plugin.perEnvironmentStartEndDuringDev
      )
    );
    await this._buildStartPromise;
    this._buildStartPromise = void 0;
  }
  async resolveId(rawId, importer = (0, import_node_path3.join)(
    this.environment.config.root,
    "index.html"
  ), options2) {
    if (!this._started) {
      this.buildStart();
      await this._buildStartPromise;
    }
    const skip = options2 == null ? void 0 : options2.skip;
    const skipCalls = options2 == null ? void 0 : options2.skipCalls;
    const scan = !!(options2 == null ? void 0 : options2.scan);
    const ssr = this.environment.config.consumer === "server";
    const ctx = new ResolveIdContext(this, skip, skipCalls, scan);
    const mergedSkip = new Set(skip);
    for (const call2 of skipCalls ?? []) {
      if (call2.called || call2.id === rawId && call2.importer === importer) {
        mergedSkip.add(call2.plugin);
      }
    }
    const resolveStart = debugResolve ? import_node_perf_hooks.performance.now() : 0;
    let id = null;
    const partial = {};
    for (const plugin of this.getSortedPlugins("resolveId")) {
      if (this._closed && this.environment.config.dev.recoverable)
        throwClosedServerError();
      if (mergedSkip == null ? void 0 : mergedSkip.has(plugin)) continue;
      const filter2 = getCachedFilterForPlugin(plugin, "resolveId");
      if (filter2 && !filter2(rawId)) continue;
      ctx._plugin = plugin;
      const pluginResolveStart = debugPluginResolve ? import_node_perf_hooks.performance.now() : 0;
      const handler = getHookHandler(plugin.resolveId);
      const result = await this.handleHookPromise(
        handler.call(ctx, rawId, importer, {
          attributes: (options2 == null ? void 0 : options2.attributes) ?? {},
          custom: options2 == null ? void 0 : options2.custom,
          isEntry: !!(options2 == null ? void 0 : options2.isEntry),
          ssr,
          scan
        })
      );
      if (!result) continue;
      if (typeof result === "string") {
        id = result;
      } else {
        id = result.id;
        Object.assign(partial, result);
      }
      debugPluginResolve == null ? void 0 : debugPluginResolve(
        timeFrom(pluginResolveStart),
        plugin.name,
        prettifyUrl(id, this.environment.config.root)
      );
      break;
    }
    if (debugResolve && rawId !== id && !rawId.startsWith(FS_PREFIX)) {
      const key = rawId + id;
      if (!this._seenResolves[key]) {
        this._seenResolves[key] = true;
        debugResolve(
          `${timeFrom(resolveStart)} ${colors$1.cyan(rawId)} -> ${colors$1.dim(
            id
          )}`
        );
      }
    }
    if (id) {
      partial.id = isExternalUrl(id) ? id : normalizePath$3(id);
      return partial;
    } else {
      return null;
    }
  }
  async load(id) {
    const ssr = this.environment.config.consumer === "server";
    const options2 = { ssr };
    const ctx = new LoadPluginContext(this);
    for (const plugin of this.getSortedPlugins("load")) {
      if (this._closed && this.environment.config.dev.recoverable)
        throwClosedServerError();
      const filter2 = getCachedFilterForPlugin(plugin, "load");
      if (filter2 && !filter2(id)) continue;
      ctx._plugin = plugin;
      const handler = getHookHandler(plugin.load);
      const result = await this.handleHookPromise(
        handler.call(ctx, id, options2)
      );
      if (result != null) {
        if (isObject$1(result)) {
          ctx._updateModuleInfo(id, result);
        }
        this._updateModuleLoadAddedImports(id, ctx._addedImports);
        return result;
      }
    }
    this._updateModuleLoadAddedImports(id, ctx._addedImports);
    return null;
  }
  async transform(code, id, options2) {
    const ssr = this.environment.config.consumer === "server";
    const optionsWithSSR = options2 ? { ...options2, ssr } : { ssr };
    const inMap = options2 == null ? void 0 : options2.inMap;
    const ctx = new TransformPluginContext(this, id, code, inMap);
    ctx._addedImports = this._getAddedImports(id);
    for (const plugin of this.getSortedPlugins("transform")) {
      if (this._closed && this.environment.config.dev.recoverable)
        throwClosedServerError();
      const filter2 = getCachedFilterForPlugin(plugin, "transform");
      if (filter2 && !filter2(id, code)) continue;
      ctx._updateActiveInfo(plugin, id, code);
      const start = debugPluginTransform ? import_node_perf_hooks.performance.now() : 0;
      let result;
      const handler = getHookHandler(plugin.transform);
      try {
        result = await this.handleHookPromise(
          handler.call(ctx, code, id, optionsWithSSR)
        );
      } catch (e2) {
        ctx.error(e2);
      }
      if (!result) continue;
      debugPluginTransform == null ? void 0 : debugPluginTransform(
        timeFrom(start),
        plugin.name,
        prettifyUrl(id, this.environment.config.root)
      );
      if (isObject$1(result)) {
        if (result.code !== void 0) {
          code = result.code;
          if (result.map) {
            if (debugSourcemapCombine) {
              result.map.name = plugin.name;
            }
            ctx.sourcemapChain.push(result.map);
          }
        }
        ctx._updateModuleInfo(id, result);
      } else {
        code = result;
      }
    }
    return {
      code,
      map: ctx._getCombinedSourcemap()
    };
  }
  async watchChange(id, change) {
    await this.hookParallel(
      "watchChange",
      (plugin) => this._getPluginContext(plugin),
      () => [id, change]
    );
  }
  async close() {
    if (this._closed) return;
    this._closed = true;
    await Promise.allSettled(Array.from(this._processesing));
    const config2 = this.environment.getTopLevelConfig();
    await this.hookParallel(
      "buildEnd",
      (plugin) => this._getPluginContext(plugin),
      () => [],
      (plugin) => this.environment.name === "client" || config2.server.perEnvironmentStartEndDuringDev || plugin.perEnvironmentStartEndDuringDev
    );
    await this.hookParallel(
      "closeBundle",
      (plugin) => this._getPluginContext(plugin),
      () => []
    );
  }
};
var MinimalPluginContext = class {
  constructor(meta, environment) {
    this.meta = meta;
    this.environment = environment;
  }
  debug(rawLog) {
    const log2 = this._normalizeRawLog(rawLog);
    const msg = buildErrorMessage(log2, [`debug: ${log2.message}`], false);
    debugPluginContainerContext == null ? void 0 : debugPluginContainerContext(msg);
  }
  info(rawLog) {
    const log2 = this._normalizeRawLog(rawLog);
    const msg = buildErrorMessage(log2, [`info: ${log2.message}`], false);
    this.environment.logger.info(msg, { clear: true, timestamp: true });
  }
  warn(rawLog) {
    const log2 = this._normalizeRawLog(rawLog);
    const msg = buildErrorMessage(
      log2,
      [colors$1.yellow(`warning: ${log2.message}`)],
      false
    );
    this.environment.logger.warn(msg, { clear: true, timestamp: true });
  }
  error(e2) {
    const err2 = typeof e2 === "string" ? new Error(e2) : e2;
    throw err2;
  }
  _normalizeRawLog(rawLog) {
    const logValue = typeof rawLog === "function" ? rawLog() : rawLog;
    return typeof logValue === "string" ? new Error(logValue) : logValue;
  }
};
var PluginContext = class extends MinimalPluginContext {
  constructor(_plugin, _container) {
    super(_container.minimalContext.meta, _container.environment);
    __publicField(this, "ssr", false);
    __publicField(this, "_scan", false);
    __publicField(this, "_activeId", null);
    __publicField(this, "_activeCode", null);
    __publicField(this, "_resolveSkips");
    __publicField(this, "_resolveSkipCalls");
    this._plugin = _plugin;
    this._container = _container;
  }
  parse(code, opts) {
    return parseAst(code, opts);
  }
  async resolve(id, importer, options2) {
    let skipCalls;
    if ((options2 == null ? void 0 : options2.skipSelf) === false) {
      skipCalls = this._resolveSkipCalls;
    } else if (this._resolveSkipCalls) {
      const skipCallsTemp = [...this._resolveSkipCalls];
      const sameCallIndex = this._resolveSkipCalls.findIndex(
        (c) => c.id === id && c.importer === importer && c.plugin === this._plugin
      );
      if (sameCallIndex !== -1) {
        skipCallsTemp[sameCallIndex] = {
          ...skipCallsTemp[sameCallIndex],
          called: true
        };
      } else {
        skipCallsTemp.push({ id, importer, plugin: this._plugin });
      }
      skipCalls = skipCallsTemp;
    } else {
      skipCalls = [{ id, importer, plugin: this._plugin }];
    }
    let out = await this._container.resolveId(id, importer, {
      attributes: options2 == null ? void 0 : options2.attributes,
      custom: options2 == null ? void 0 : options2.custom,
      isEntry: !!(options2 == null ? void 0 : options2.isEntry),
      skip: this._resolveSkips,
      skipCalls,
      scan: this._scan
    });
    if (typeof out === "string") out = { id: out };
    return out;
  }
  async load(options2) {
    var _a2;
    await ((_a2 = this._container.moduleGraph) == null ? void 0 : _a2.ensureEntryFromUrl(unwrapId$1(options2.id)));
    this._updateModuleInfo(options2.id, options2);
    const loadResult = await this._container.load(options2.id);
    const code = typeof loadResult === "object" ? loadResult == null ? void 0 : loadResult.code : loadResult;
    if (code != null) {
      await this._container.transform(code, options2.id);
    }
    const moduleInfo = this.getModuleInfo(options2.id);
    if (!moduleInfo) throw Error(`Failed to load module with id ${options2.id}`);
    return moduleInfo;
  }
  getModuleInfo(id) {
    return this._container.getModuleInfo(id);
  }
  _updateModuleInfo(id, { meta }) {
    if (meta) {
      const moduleInfo = this.getModuleInfo(id);
      if (moduleInfo) {
        moduleInfo.meta = { ...moduleInfo.meta, ...meta };
      }
    }
  }
  getModuleIds() {
    return this._container.moduleGraph ? this._container.moduleGraph.idToModuleMap.keys() : Array.prototype[Symbol.iterator]();
  }
  addWatchFile(id) {
    this._container.watchFiles.add(id);
    if (this._container.watcher)
      ensureWatchedFile(
        this._container.watcher,
        id,
        this.environment.config.root
      );
  }
  getWatchFiles() {
    return [...this._container.watchFiles];
  }
  emitFile(_assetOrFile) {
    this._warnIncompatibleMethod(`emitFile`);
    return "";
  }
  setAssetSource() {
    this._warnIncompatibleMethod(`setAssetSource`);
  }
  getFileName() {
    this._warnIncompatibleMethod(`getFileName`);
    return "";
  }
  debug(log2) {
    const err2 = this._formatLog(typeof log2 === "function" ? log2() : log2);
    super.debug(err2);
  }
  info(log2) {
    const err2 = this._formatLog(typeof log2 === "function" ? log2() : log2);
    super.info(err2);
  }
  warn(log2, position) {
    const err2 = this._formatLog(
      typeof log2 === "function" ? log2() : log2,
      position
    );
    super.warn(err2);
  }
  error(e2, position) {
    throw this._formatLog(e2, position);
  }
  _formatLog(e2, position) {
    var _a2, _b, _c, _d;
    const err2 = typeof e2 === "string" ? new Error(e2) : e2;
    if (err2.pluginCode) {
      return err2;
    }
    err2.plugin = this._plugin.name;
    if (this._activeId && !err2.id) err2.id = this._activeId;
    if (this._activeCode) {
      err2.pluginCode = this._activeCode;
      const pos = position ?? err2.pos ?? err2.position;
      if (pos != null) {
        let errLocation;
        try {
          errLocation = numberToPos(this._activeCode, pos);
        } catch (err22) {
          this.environment.logger.error(
            colors$1.red(
              `Error in error handler:
${err22.stack || err22.message}
`
            ),
            // print extra newline to separate the two errors
            { error: err22 }
          );
          throw err2;
        }
        err2.loc = err2.loc || {
          file: err2.id,
          ...errLocation
        };
        err2.frame = err2.frame || generateCodeFrame(this._activeCode, pos);
      } else if (err2.loc) {
        if (!err2.frame) {
          let code = this._activeCode;
          if (err2.loc.file) {
            err2.id = normalizePath$3(err2.loc.file);
            try {
              code = import_node_fs2.default.readFileSync(err2.loc.file, "utf-8");
            } catch {
            }
          }
          err2.frame = generateCodeFrame(code, err2.loc);
        }
      } else if (err2.line && err2.column) {
        err2.loc = {
          file: err2.id,
          line: err2.line,
          column: err2.column
        };
        err2.frame = err2.frame || generateCodeFrame(this._activeCode, err2.loc);
      }
      if (this instanceof TransformPluginContext && typeof ((_a2 = err2.loc) == null ? void 0 : _a2.line) === "number" && typeof err2.loc.column === "number") {
        const rawSourceMap = this._getCombinedSourcemap();
        if (rawSourceMap && "version" in rawSourceMap) {
          const traced = new TraceMap(rawSourceMap);
          const { source, line, column } = originalPositionFor$1(traced, {
            line: Number(err2.loc.line),
            column: Number(err2.loc.column)
          });
          if (source) {
            err2.loc = { file: source, line, column };
          }
        }
      }
    } else if (err2.loc) {
      if (!err2.frame) {
        let code = err2.pluginCode;
        if (err2.loc.file) {
          err2.id = normalizePath$3(err2.loc.file);
          if (!code) {
            try {
              code = import_node_fs2.default.readFileSync(err2.loc.file, "utf-8");
            } catch {
            }
          }
        }
        if (code) {
          err2.frame = generateCodeFrame(`${code}`, err2.loc);
        }
      }
    }
    if (typeof ((_b = err2.loc) == null ? void 0 : _b.column) !== "number" && typeof ((_c = err2.loc) == null ? void 0 : _c.line) !== "number" && !((_d = err2.loc) == null ? void 0 : _d.file)) {
      delete err2.loc;
    }
    return err2;
  }
  _warnIncompatibleMethod(method) {
    this.environment.logger.warn(
      colors$1.cyan(`[plugin:${this._plugin.name}] `) + colors$1.yellow(
        `context method ${colors$1.bold(
          `${method}()`
        )} is not supported in serve mode. This plugin is likely not vite-compatible.`
      )
    );
  }
};
var ResolveIdContext = class extends PluginContext {
  constructor(container, skip, skipCalls, scan) {
    super(null, container);
    this._resolveSkips = skip;
    this._resolveSkipCalls = skipCalls;
    this._scan = scan;
  }
};
var LoadPluginContext = class extends PluginContext {
  constructor(container) {
    super(null, container);
    __publicField(this, "_addedImports", null);
  }
  addWatchFile(id) {
    if (!this._addedImports) {
      this._addedImports = /* @__PURE__ */ new Set();
    }
    this._addedImports.add(id);
    super.addWatchFile(id);
  }
};
var TransformPluginContext = class extends LoadPluginContext {
  constructor(container, id, code, inMap) {
    super(container);
    __publicField(this, "filename");
    __publicField(this, "originalCode");
    __publicField(this, "originalSourcemap", null);
    __publicField(this, "sourcemapChain", []);
    __publicField(this, "combinedMap", null);
    this.filename = id;
    this.originalCode = code;
    if (inMap) {
      if (debugSourcemapCombine) {
        inMap.name = "$inMap";
      }
      this.sourcemapChain.push(inMap);
    }
  }
  _getCombinedSourcemap() {
    if (debugSourcemapCombine && debugSourcemapCombineFilter && this.filename.includes(debugSourcemapCombineFilter)) {
      debugSourcemapCombine("----------", this.filename);
      debugSourcemapCombine(this.combinedMap);
      debugSourcemapCombine(this.sourcemapChain);
      debugSourcemapCombine("----------");
    }
    let combinedMap = this.combinedMap;
    if (combinedMap && !("version" in combinedMap) && combinedMap.mappings === "") {
      this.sourcemapChain.length = 0;
      return combinedMap;
    }
    for (let m2 of this.sourcemapChain) {
      if (typeof m2 === "string") m2 = JSON.parse(m2);
      if (!("version" in m2)) {
        if (m2.mappings === "") {
          combinedMap = { mappings: "" };
          break;
        }
        combinedMap = null;
        break;
      }
      if (!combinedMap) {
        const sm = m2;
        if (sm.sources.length === 1 && !sm.sources[0]) {
          combinedMap = {
            ...sm,
            sources: [this.filename],
            sourcesContent: [this.originalCode]
          };
        } else {
          combinedMap = sm;
        }
      } else {
        combinedMap = combineSourcemaps(cleanUrl2(this.filename), [
          m2,
          combinedMap
        ]);
      }
    }
    if (combinedMap !== this.combinedMap) {
      this.combinedMap = combinedMap;
      this.sourcemapChain.length = 0;
    }
    return this.combinedMap;
  }
  getCombinedSourcemap() {
    const map2 = this._getCombinedSourcemap();
    if (!map2 || !("version" in map2) && map2.mappings === "") {
      return new MagicString(this.originalCode).generateMap({
        includeContent: true,
        hires: "boundary",
        source: cleanUrl2(this.filename)
      });
    }
    return map2;
  }
  _updateActiveInfo(plugin, id, code) {
    this._plugin = plugin;
    this._activeId = id;
    this._activeCode = code;
  }
};
var PluginContainer = class {
  constructor(environments) {
    this.environments = environments;
  }
  // Backward compatibility
  // Users should call pluginContainer.resolveId (and load/transform) passing the environment they want to work with
  // But there is code that is going to call it without passing an environment, or with the ssr flag to get the ssr environment
  _getEnvironment(options2) {
    return (options2 == null ? void 0 : options2.environment) ? options2.environment : this.environments[(options2 == null ? void 0 : options2.ssr) ? "ssr" : "client"];
  }
  _getPluginContainer(options2) {
    return this._getEnvironment(options2).pluginContainer;
  }
  getModuleInfo(id) {
    const clientModuleInfo = this.environments.client.pluginContainer.getModuleInfo(id);
    const ssrModuleInfo = this.environments.ssr.pluginContainer.getModuleInfo(id);
    if (clientModuleInfo == null && ssrModuleInfo == null) return null;
    return new Proxy({}, {
      get: (_, key) => {
        if (key === "meta") {
          const meta = {};
          if (ssrModuleInfo) {
            Object.assign(meta, ssrModuleInfo.meta);
          }
          if (clientModuleInfo) {
            Object.assign(meta, clientModuleInfo.meta);
          }
          return meta;
        }
        if (clientModuleInfo) {
          if (key in clientModuleInfo) {
            return clientModuleInfo[key];
          }
        }
        if (ssrModuleInfo) {
          if (key in ssrModuleInfo) {
            return ssrModuleInfo[key];
          }
        }
      }
    });
  }
  get options() {
    return this.environments.client.pluginContainer.options;
  }
  // For backward compatibility, buildStart and watchChange are called only for the client environment
  // buildStart is called per environment for a plugin with the perEnvironmentStartEndDuring dev flag
  async buildStart(_options) {
    return this.environments.client.pluginContainer.buildStart(_options);
  }
  async watchChange(id, change) {
    return this.environments.client.pluginContainer.watchChange(id, change);
  }
  async resolveId(rawId, importer, options2) {
    return this._getPluginContainer(options2).resolveId(rawId, importer, options2);
  }
  async load(id, options2) {
    return this._getPluginContainer(options2).load(id);
  }
  async transform(code, id, options2) {
    return this._getPluginContainer(options2).transform(code, id, options2);
  }
  async close() {
  }
};
function createPluginContainer(environments) {
  return new PluginContainer(environments);
}
function createBackCompatIdResolver(config2, options2) {
  const compatResolve = config2.createResolver(options2);
  let resolve4;
  return async (environment, id, importer, aliasOnly) => {
    if (environment.name === "client" || environment.name === "ssr") {
      return compatResolve(id, importer, aliasOnly, environment.name === "ssr");
    }
    resolve4 ?? (resolve4 = createIdResolver(config2, options2));
    return resolve4(environment, id, importer, aliasOnly);
  };
}
function createIdResolver(config2, options2) {
  const scan = options2 == null ? void 0 : options2.scan;
  const pluginContainerMap = /* @__PURE__ */ new Map();
  async function resolve4(environment, id, importer) {
    let pluginContainer = pluginContainerMap.get(environment);
    if (!pluginContainer) {
      pluginContainer = await createEnvironmentPluginContainer(
        environment,
        [
          alias$1({ entries: environment.config.resolve.alias }),
          resolvePlugin({
            root: config2.root,
            isProduction: config2.isProduction,
            isBuild: config2.command === "build",
            asSrc: true,
            preferRelative: false,
            tryIndex: true,
            ...options2,
            // Ignore sideEffects and other computations as we only need the id
            idOnly: true
          })
        ],
        void 0,
        false
      );
      pluginContainerMap.set(environment, pluginContainer);
    }
    return await pluginContainer.resolveId(id, importer, { scan });
  }
  const aliasOnlyPluginContainerMap = /* @__PURE__ */ new Map();
  async function resolveAlias(environment, id, importer) {
    let pluginContainer = aliasOnlyPluginContainerMap.get(environment);
    if (!pluginContainer) {
      pluginContainer = await createEnvironmentPluginContainer(
        environment,
        [alias$1({ entries: environment.config.resolve.alias })],
        void 0,
        false
      );
      aliasOnlyPluginContainerMap.set(environment, pluginContainer);
    }
    return await pluginContainer.resolveId(id, importer, { scan });
  }
  return async (environment, id, importer, aliasOnly) => {
    const resolveFn = aliasOnly ? resolveAlias : resolve4;
    const resolved = await resolveFn(environment, id, importer);
    return resolved == null ? void 0 : resolved.id;
  };
}
var decoder = new TextDecoder();
var cssConfigDefaults = Object.freeze({
  /** @experimental */
  transformer: "postcss",
  // modules
  // preprocessorOptions
  /** @experimental */
  preprocessorMaxWorkers: 0,
  // postcss
  /** @experimental */
  devSourcemap: false
  // lightningcss
});
function resolveCSSOptions(options2) {
  var _a2;
  const resolved = mergeWithDefaults(cssConfigDefaults, options2 ?? {});
  if (resolved.transformer === "lightningcss") {
    resolved.lightningcss ?? (resolved.lightningcss = {});
    (_a2 = resolved.lightningcss).targets ?? (_a2.targets = convertTargets(ESBUILD_MODULES_TARGET));
  }
  return resolved;
}
var cssModuleRE = new RegExp(`\\.module${CSS_LANGS_RE.source}`);
var directRequestRE = /[?&]direct\b/;
var htmlProxyRE = /[?&]html-proxy\b/;
var htmlProxyIndexRE = /&index=(\d+)/;
var commonjsProxyRE = /[?&]commonjs-proxy/;
var inlineRE = /[?&]inline\b/;
var inlineCSSRE = /[?&]inline-css\b/;
var styleAttrRE = /[?&]style-attr\b/;
var functionCallRE = /^[A-Z_][.\w-]*\(/i;
var transformOnlyRE = /[?&]transform-only\b/;
var nonEscapedDoubleQuoteRe = new RegExp('(?<!\\\\)"', "g");
var defaultCssBundleName = "style.css";
var isCSSRequest = (request) => CSS_LANGS_RE.test(request);
var isModuleCSSRequest = (request) => cssModuleRE.test(request);
var isDirectCSSRequest = (request) => CSS_LANGS_RE.test(request) && directRequestRE.test(request);
var isDirectRequest = (request) => directRequestRE.test(request);
var cssModulesCache = /* @__PURE__ */ new WeakMap();
var removedPureCssFilesCache = /* @__PURE__ */ new WeakMap();
var cssBundleNameCache = /* @__PURE__ */ new WeakMap();
var postcssConfigCache = /* @__PURE__ */ new WeakMap();
function encodePublicUrlsInCSS(config2) {
  return config2.command === "build";
}
var cssUrlAssetRE = /__VITE_CSS_URL__([\da-f]+)__/g;
function cssPlugin(config2) {
  const isBuild = config2.command === "build";
  let moduleCache;
  const idResolver = createBackCompatIdResolver(config2, {
    preferRelative: true,
    tryIndex: false,
    extensions: []
  });
  let preprocessorWorkerController;
  if (config2.css.transformer !== "lightningcss") {
    resolvePostcssConfig(config2).catch(() => {
    });
  }
  const plugin = {
    name: "vite:css",
    buildStart() {
      moduleCache = /* @__PURE__ */ new Map();
      cssModulesCache.set(config2, moduleCache);
      removedPureCssFilesCache.set(config2, /* @__PURE__ */ new Map());
      preprocessorWorkerController = createPreprocessorWorkerController(
        normalizeMaxWorkers(config2.css.preprocessorMaxWorkers)
      );
      preprocessorWorkerControllerCache.set(
        config2,
        preprocessorWorkerController
      );
    },
    buildEnd() {
      preprocessorWorkerController == null ? void 0 : preprocessorWorkerController.close();
    },
    load: {
      async handler(id) {
        if (!isCSSRequest(id)) return;
        if (urlRE$1.test(id)) {
          if (isModuleCSSRequest(id)) {
            throw new Error(
              `?url is not supported with CSS modules. (tried to import ${JSON.stringify(
                id
              )})`
            );
          }
          if (isBuild) {
            id = injectQuery(removeUrlQuery(id), "transform-only");
            return `import ${JSON.stringify(id)};export default "__VITE_CSS_URL__${Buffer.from(id).toString(
              "hex"
            )}__"`;
          }
        }
      }
    }
  };
  const transformHook = {
    async handler(raw, id) {
      if (!isCSSRequest(id) || commonjsProxyRE.test(id) || SPECIAL_QUERY_RE.test(id)) {
        return;
      }
      const { environment } = this;
      const resolveUrl2 = (url2, importer) => idResolver(environment, url2, importer);
      const urlResolver = async (url2, importer) => {
        const decodedUrl = decodeURI(url2);
        if (checkPublicFile(decodedUrl, config2)) {
          if (encodePublicUrlsInCSS(config2)) {
            return [publicFileToBuiltUrl(decodedUrl, config2), void 0];
          } else {
            return [joinUrlSegments(config2.base, decodedUrl), void 0];
          }
        }
        const [id2, fragment] = decodedUrl.split("#");
        let resolved = await resolveUrl2(id2, importer);
        if (resolved) {
          if (fragment) resolved += "#" + fragment;
          return [await fileToUrl$1(this, resolved), resolved];
        }
        if (config2.command === "build") {
          const isExternal2 = config2.build.rollupOptions.external ? resolveUserExternal(
            config2.build.rollupOptions.external,
            decodedUrl,
            // use URL as id since id could not be resolved
            id2,
            false
          ) : false;
          if (!isExternal2) {
            config2.logger.warnOnce(
              `
${decodedUrl} referenced in ${id2} didn't resolve at build time, it will remain unchanged to be resolved at runtime`
            );
          }
        }
        return [url2, void 0];
      };
      const {
        code: css,
        modules,
        deps,
        map: map2
      } = await compileCSS(
        environment,
        id,
        raw,
        preprocessorWorkerController,
        urlResolver
      );
      if (modules) {
        moduleCache.set(id, modules);
      }
      if (deps) {
        for (const file of deps) {
          this.addWatchFile(file);
        }
      }
      return {
        code: css,
        map: map2
      };
    }
  };
  plugin.transform = transformHook.handler;
  plugin.transform.handler = transformHook.handler;
  return plugin;
}
function cssPostPlugin(config2) {
  var _a2;
  const styles = /* @__PURE__ */ new Map();
  let codeSplitEmitQueue = createSerialPromiseQueue();
  const urlEmitQueue = createSerialPromiseQueue();
  let pureCssChunks;
  let hasEmitted = false;
  let chunkCSSMap;
  const rollupOptionsOutput = config2.build.rollupOptions.output;
  const assetFileNames = (_a2 = Array.isArray(rollupOptionsOutput) ? rollupOptionsOutput[0] : rollupOptionsOutput) == null ? void 0 : _a2.assetFileNames;
  const getCssAssetDirname = (cssAssetName) => {
    const cssAssetNameDir = import_node_path3.default.dirname(cssAssetName);
    if (!assetFileNames) {
      return import_node_path3.default.join(config2.build.assetsDir, cssAssetNameDir);
    } else if (typeof assetFileNames === "string") {
      return import_node_path3.default.join(import_node_path3.default.dirname(assetFileNames), cssAssetNameDir);
    } else {
      return import_node_path3.default.dirname(
        assetFileNames({
          type: "asset",
          name: cssAssetName,
          names: [cssAssetName],
          originalFileName: null,
          originalFileNames: [],
          source: "/* vite internal call, ignore */"
        })
      );
    }
  };
  function getCssBundleName() {
    const cached = cssBundleNameCache.get(config2);
    if (cached) return cached;
    const cssBundleName = config2.build.lib ? resolveLibCssFilename(
      config2.build.lib,
      config2.root,
      config2.packageCache
    ) : defaultCssBundleName;
    cssBundleNameCache.set(config2, cssBundleName);
    return cssBundleName;
  }
  const plugin = {
    name: "vite:css-post",
    renderStart() {
      pureCssChunks = /* @__PURE__ */ new Set();
      hasEmitted = false;
      chunkCSSMap = /* @__PURE__ */ new Map();
      codeSplitEmitQueue = createSerialPromiseQueue();
    },
    transform: {
      async handler(css, id) {
        var _a3;
        if (!isCSSRequest(id) || commonjsProxyRE.test(id) || SPECIAL_QUERY_RE.test(id)) {
          return;
        }
        css = stripBomTag(css);
        const inlineCSS = inlineCSSRE.test(id);
        const isHTMLProxy2 = htmlProxyRE.test(id);
        if (inlineCSS && isHTMLProxy2) {
          if (styleAttrRE.test(id)) {
            css = css.replace(/"/g, "&quot;");
          }
          const index = (_a3 = htmlProxyIndexRE.exec(id)) == null ? void 0 : _a3[1];
          if (index == null) {
            throw new Error(`HTML proxy index in "${id}" not found`);
          }
          addToHTMLProxyTransformResult(
            `${getHash(cleanUrl2(id))}_${Number.parseInt(index)}`,
            css
          );
          return `export default ''`;
        }
        const inlined = inlineRE.test(id);
        const modules = cssModulesCache.get(config2).get(id);
        const modulesCode = modules && !inlined && dataToEsm(modules, { namedExports: true, preferConst: true });
        if (config2.command === "serve") {
          const getContentWithSourcemap = async (content) => {
            if (config2.css.devSourcemap) {
              const sourcemap = this.getCombinedSourcemap();
              if (sourcemap.mappings) {
                await injectSourcesContent(
                  sourcemap,
                  cleanUrl2(id),
                  config2.logger
                );
              }
              return getCodeWithSourcemap("css", content, sourcemap);
            }
            return content;
          };
          if (isDirectCSSRequest(id)) {
            return null;
          }
          if (inlined) {
            return `export default ${JSON.stringify(css)}`;
          }
          if (this.environment.config.consumer === "server") {
            return modulesCode || "export {}";
          }
          const cssContent = await getContentWithSourcemap(css);
          const code2 = [
            `import { updateStyle as __vite__updateStyle, removeStyle as __vite__removeStyle } from ${JSON.stringify(
              import_node_path3.default.posix.join(config2.base, CLIENT_PUBLIC_PATH)
            )}`,
            `const __vite__id = ${JSON.stringify(id)}`,
            `const __vite__css = ${JSON.stringify(cssContent)}`,
            `__vite__updateStyle(__vite__id, __vite__css)`,
            // css modules exports change on edit so it can't self accept
            `${modulesCode || "import.meta.hot.accept()"}`,
            `import.meta.hot.prune(() => __vite__removeStyle(__vite__id))`
          ].join("\n");
          return { code: code2, map: { mappings: "" } };
        }
        if (!inlined) {
          styles.set(id, css);
        }
        let code;
        if (modulesCode) {
          code = modulesCode;
        } else if (inlined) {
          let content = css;
          if (config2.build.cssMinify) {
            content = await minifyCSS(content, config2, true);
          }
          code = `export default ${JSON.stringify(content)}`;
        } else {
          code = "";
        }
        return {
          code,
          map: { mappings: "" },
          // avoid the css module from being tree-shaken so that we can retrieve
          // it in renderChunk()
          moduleSideEffects: modulesCode || inlined ? false : "no-treeshake"
        };
      }
    },
    async renderChunk(code, chunk, opts, meta) {
      var _a3, _b, _c, _d;
      let chunkCSS = "";
      const renderedModules = new Proxy(
        {},
        {
          get(_target, p2) {
            for (const name in meta.chunks) {
              const modules = meta.chunks[name].modules;
              const module = modules[p2];
              if (module) {
                return module;
              }
            }
          }
        }
      );
      const isJsChunkEmpty = code === "" && !chunk.isEntry;
      let isPureCssChunk = chunk.exports.length === 0;
      const ids = Object.keys(chunk.modules);
      for (const id of ids) {
        if (styles.has(id)) {
          if (transformOnlyRE.test(id)) {
            continue;
          }
          const cssScopeTo = (_c = (_b = (_a3 = this.getModuleInfo(id)) == null ? void 0 : _a3.meta) == null ? void 0 : _b.vite) == null ? void 0 : _c.cssScopeTo;
          if (cssScopeTo && !isCssScopeToRendered(cssScopeTo, renderedModules)) {
            continue;
          }
          if (cssModuleRE.test(id)) {
            isPureCssChunk = false;
          }
          chunkCSS += styles.get(id);
        } else if (!isJsChunkEmpty) {
          isPureCssChunk = false;
        }
      }
      const publicAssetUrlMap = publicAssetUrlCache.get(config2);
      const resolveAssetUrlsInCss = (chunkCSS2, cssAssetName) => {
        const encodedPublicUrls = encodePublicUrlsInCSS(config2);
        const relative2 = config2.base === "./" || config2.base === "";
        const cssAssetDirname = encodedPublicUrls || relative2 ? slash$1(getCssAssetDirname(cssAssetName)) : void 0;
        const toRelative = (filename) => {
          const relativePath = normalizePath$3(
            import_node_path3.default.relative(cssAssetDirname, filename)
          );
          return relativePath[0] === "." ? relativePath : "./" + relativePath;
        };
        chunkCSS2 = chunkCSS2.replace(assetUrlRE, (_, fileHash, postfix = "") => {
          const filename = this.getFileName(fileHash) + postfix;
          chunk.viteMetadata.importedAssets.add(cleanUrl2(filename));
          return encodeURIPath(
            toOutputFilePathInCss(
              filename,
              "asset",
              cssAssetName,
              "css",
              config2,
              toRelative
            )
          );
        });
        if (encodedPublicUrls) {
          const relativePathToPublicFromCSS = normalizePath$3(
            import_node_path3.default.relative(cssAssetDirname, "")
          );
          chunkCSS2 = chunkCSS2.replace(publicAssetUrlRE, (_, hash2) => {
            const publicUrl = publicAssetUrlMap.get(hash2).slice(1);
            return encodeURIPath(
              toOutputFilePathInCss(
                publicUrl,
                "public",
                cssAssetName,
                "css",
                config2,
                () => `${relativePathToPublicFromCSS}/${publicUrl}`
              )
            );
          });
        }
        return chunkCSS2;
      };
      function ensureFileExt(name, ext) {
        return normalizePath$3(
          import_node_path3.default.format({ ...import_node_path3.default.parse(name), base: void 0, ext })
        );
      }
      let s2;
      const urlEmitTasks = [];
      if (code.includes("__VITE_CSS_URL__")) {
        let match;
        cssUrlAssetRE.lastIndex = 0;
        while (match = cssUrlAssetRE.exec(code)) {
          const [full, idHex] = match;
          const id = Buffer.from(idHex, "hex").toString();
          const originalFileName = cleanUrl2(id);
          const cssAssetName = ensureFileExt(
            import_node_path3.default.basename(originalFileName),
            ".css"
          );
          if (!styles.has(id)) {
            throw new Error(
              `css content for ${JSON.stringify(id)} was not found`
            );
          }
          let cssContent = styles.get(id);
          cssContent = resolveAssetUrlsInCss(cssContent, cssAssetName);
          urlEmitTasks.push({
            cssAssetName,
            originalFileName,
            content: cssContent,
            start: match.index,
            end: match.index + full.length
          });
        }
      }
      await urlEmitQueue.run(
        async () => Promise.all(
          urlEmitTasks.map(async (info) => {
            info.content = await finalizeCss(info.content, true, config2);
          })
        )
      );
      if (urlEmitTasks.length > 0) {
        const toRelativeRuntime = createToImportMetaURLBasedRelativeRuntime(
          opts.format,
          config2.isWorker
        );
        s2 || (s2 = new MagicString(code));
        for (const {
          cssAssetName,
          originalFileName,
          content,
          start,
          end
        } of urlEmitTasks) {
          const referenceId = this.emitFile({
            type: "asset",
            name: cssAssetName,
            originalFileName,
            source: content
          });
          const filename = this.getFileName(referenceId);
          chunk.viteMetadata.importedAssets.add(cleanUrl2(filename));
          const replacement = toOutputFilePathInJS(
            this.environment,
            filename,
            "asset",
            chunk.fileName,
            "js",
            toRelativeRuntime
          );
          const replacementString = typeof replacement === "string" ? JSON.stringify(encodeURIPath(replacement)).slice(1, -1) : `"+${replacement.runtime}+"`;
          s2.update(start, end, replacementString);
        }
      }
      if (chunkCSS) {
        if (isPureCssChunk && (opts.format === "es" || opts.format === "cjs")) {
          pureCssChunks.add(chunk);
        }
        if (this.environment.config.build.cssCodeSplit) {
          if (opts.format === "es" || opts.format === "cjs") {
            const isEntry = chunk.isEntry && isPureCssChunk;
            const cssFullAssetName = ensureFileExt(chunk.name, ".css");
            const cssAssetName = chunk.isEntry && (!chunk.facadeModuleId || !isCSSRequest(chunk.facadeModuleId)) ? import_node_path3.default.basename(cssFullAssetName) : cssFullAssetName;
            const originalFileName = getChunkOriginalFileName(
              chunk,
              config2.root,
              opts.format
            );
            chunkCSS = resolveAssetUrlsInCss(chunkCSS, cssAssetName);
            chunkCSS = await codeSplitEmitQueue.run(async () => {
              return finalizeCss(chunkCSS, true, config2);
            });
            const referenceId = this.emitFile({
              type: "asset",
              name: cssAssetName,
              originalFileName,
              source: chunkCSS
            });
            if (isEntry) {
              cssEntriesMap.get(this.environment).add(referenceId);
            }
            chunk.viteMetadata.importedCss.add(this.getFileName(referenceId));
          } else if (this.environment.config.consumer === "client") {
            chunkCSS = await finalizeCss(chunkCSS, true, config2);
            let cssString = JSON.stringify(chunkCSS);
            cssString = ((_d = renderAssetUrlInJS(this, chunk, opts, cssString)) == null ? void 0 : _d.toString()) || cssString;
            const style = `__vite_style__`;
            const injectCode = `var ${style} = document.createElement('style');${style}.textContent = ${cssString};document.head.appendChild(${style});`;
            let injectionPoint;
            const wrapIdx = code.indexOf("System.register");
            const singleQuoteUseStrict = `'use strict';`;
            const doubleQuoteUseStrict = `"use strict";`;
            if (wrapIdx >= 0) {
              const executeFnStart = code.indexOf("execute:", wrapIdx);
              injectionPoint = code.indexOf("{", executeFnStart) + 1;
            } else if (code.includes(singleQuoteUseStrict)) {
              injectionPoint = code.indexOf(singleQuoteUseStrict) + singleQuoteUseStrict.length;
            } else if (code.includes(doubleQuoteUseStrict)) {
              injectionPoint = code.indexOf(doubleQuoteUseStrict) + doubleQuoteUseStrict.length;
            } else {
              throw new Error("Injection point for inlined CSS not found");
            }
            s2 || (s2 = new MagicString(code));
            s2.appendRight(injectionPoint, injectCode);
          }
        } else {
          chunkCSS = resolveAssetUrlsInCss(chunkCSS, getCssBundleName());
          chunkCSSMap.set(chunk.fileName, chunkCSS);
        }
      }
      if (s2) {
        if (config2.build.sourcemap) {
          return {
            code: s2.toString(),
            map: s2.generateMap({ hires: "boundary" })
          };
        } else {
          return { code: s2.toString() };
        }
      }
      return null;
    },
    augmentChunkHash(chunk) {
      var _a3;
      if ((_a3 = chunk.viteMetadata) == null ? void 0 : _a3.importedCss.size) {
        let hash2 = "";
        for (const id of chunk.viteMetadata.importedCss) {
          hash2 += id;
        }
        return hash2;
      }
    },
    async generateBundle(opts, bundle) {
      if (opts.__vite_skip_asset_emit__) {
        return;
      }
      if (!this.environment.config.build.cssCodeSplit && !hasEmitted) {
        let collect2 = function(chunk) {
          if (!chunk || chunk.type !== "chunk" || collected.has(chunk)) return;
          collected.add(chunk);
          chunk.imports.forEach((importName) => collect2(bundle[importName]));
          chunk.dynamicImports.forEach(
            (importName) => dynamicImports.add(importName)
          );
          extractedCss += chunkCSSMap.get(chunk.preliminaryFileName) ?? "";
        };
        let extractedCss = "";
        const collected = /* @__PURE__ */ new Set();
        const dynamicImports = /* @__PURE__ */ new Set();
        for (const chunk of Object.values(bundle)) {
          if (chunk.type === "chunk" && chunk.isEntry) {
            collect2(chunk);
          }
        }
        for (const chunkName of dynamicImports) {
          collect2(bundle[chunkName]);
        }
        if (extractedCss) {
          hasEmitted = true;
          extractedCss = await finalizeCss(extractedCss, true, config2);
          this.emitFile({
            name: getCssBundleName(),
            type: "asset",
            source: extractedCss,
            // this file is an implicit entry point, use `style.css` as the original file name
            // this name is also used as a key in the manifest
            originalFileName: "style.css"
          });
        }
      }
      if (pureCssChunks.size) {
        const prelimaryNameToChunkMap = Object.fromEntries(
          Object.values(bundle).filter((chunk) => chunk.type === "chunk").map((chunk) => [chunk.preliminaryFileName, chunk.fileName])
        );
        const pureCssChunkNames = [...pureCssChunks].map((pureCssChunk) => prelimaryNameToChunkMap[pureCssChunk.fileName]).filter(Boolean);
        const replaceEmptyChunk = getEmptyChunkReplacer(
          pureCssChunkNames,
          opts.format
        );
        for (const file in bundle) {
          const chunk = bundle[file];
          if (chunk.type === "chunk") {
            let chunkImportsPureCssChunk = false;
            chunk.imports = chunk.imports.filter((file2) => {
              if (pureCssChunkNames.includes(file2)) {
                const { importedCss, importedAssets } = bundle[file2].viteMetadata;
                importedCss.forEach(
                  (file3) => chunk.viteMetadata.importedCss.add(file3)
                );
                importedAssets.forEach(
                  (file3) => chunk.viteMetadata.importedAssets.add(file3)
                );
                chunkImportsPureCssChunk = true;
                return false;
              }
              return true;
            });
            if (chunkImportsPureCssChunk) {
              chunk.code = replaceEmptyChunk(chunk.code);
            }
          }
        }
        const removedPureCssFiles = removedPureCssFilesCache.get(config2);
        pureCssChunkNames.forEach((fileName) => {
          removedPureCssFiles.set(fileName, bundle[fileName]);
          delete bundle[fileName];
          delete bundle[`${fileName}.map`];
        });
      }
      const cssAssets = Object.values(bundle).filter(
        (asset) => asset.type === "asset" && asset.fileName.endsWith(".css")
      );
      for (const cssAsset of cssAssets) {
        if (typeof cssAsset.source === "string") {
          cssAsset.source = cssAsset.source.replace(viteHashUpdateMarkerRE, "");
        }
      }
    }
  };
  const handler = plugin.transform.handler;
  plugin.transform = handler;
  plugin.transform.handler = handler;
  return plugin;
}
function cssAnalysisPlugin(config2) {
  return {
    name: "vite:css-analysis",
    transform: {
      async handler(_, id) {
        var _a2;
        if (!isCSSRequest(id) || commonjsProxyRE.test(id) || SPECIAL_QUERY_RE.test(id)) {
          return;
        }
        const { moduleGraph } = this.environment;
        const thisModule = moduleGraph.getModuleById(id);
        if (thisModule) {
          const isSelfAccepting = !((_a2 = cssModulesCache.get(config2)) == null ? void 0 : _a2.get(id)) && !inlineRE.test(id) && !htmlProxyRE.test(id);
          const pluginImports = this._addedImports;
          if (pluginImports) {
            const depModules = /* @__PURE__ */ new Set();
            for (const file of pluginImports) {
              if (isCSSRequest(file)) {
                depModules.add(moduleGraph.createFileOnlyEntry(file));
              } else {
                const url2 = await fileToDevUrl(
                  this.environment,
                  file,
                  /* skipBase */
                  true
                );
                if (url2.startsWith("data:")) {
                  depModules.add(moduleGraph.createFileOnlyEntry(file));
                } else {
                  depModules.add(await moduleGraph.ensureEntryFromUrl(url2));
                }
              }
            }
            moduleGraph.updateModuleInfo(
              thisModule,
              depModules,
              null,
              // The root CSS proxy module is self-accepting and should not
              // have an explicit accept list
              /* @__PURE__ */ new Set(),
              null,
              isSelfAccepting
            );
          } else {
            thisModule.isSelfAccepting = isSelfAccepting;
          }
        }
      }
    }
  };
}
function isCssScopeToRendered(cssScopeTo, renderedModules) {
  const [importerId, exp] = cssScopeTo;
  const importer = renderedModules[importerId];
  return importer && (exp === void 0 || importer.renderedExports.includes(exp));
}
function getEmptyChunkReplacer(pureCssChunkNames, outputFormat) {
  const emptyChunkFiles = pureCssChunkNames.map((file) => escapeRegex(import_node_path3.default.basename(file))).join("|");
  const emptyChunkRE = new RegExp(
    outputFormat === "es" ? `\\bimport\\s*["'][^"']*(?:${emptyChunkFiles})["'];` : `(\\b|,\\s*)require\\(\\s*["'][^"']*(?:${emptyChunkFiles})["']\\)(;|,)`,
    "g"
  );
  return (code) => code.replace(
    emptyChunkRE,
    // remove css import while preserving source map location
    (m2, p1, p2) => {
      if (outputFormat === "es") {
        return `/* empty css ${"".padEnd(m2.length - 15)}*/`;
      }
      if (p2 === ";") {
        return `${p2}/* empty css ${"".padEnd(m2.length - 16)}*/`;
      }
      return `${p1}/* empty css ${"".padEnd(m2.length - 15 - p1.length)}*/`;
    }
  );
}
var fileURLWithWindowsDriveRE = /^file:\/\/\/[a-zA-Z]:\//;
function createCSSResolvers(config2) {
  let cssResolve;
  let sassResolve;
  let lessResolve;
  return {
    get css() {
      return cssResolve ?? (cssResolve = createBackCompatIdResolver(config2, {
        extensions: [".css"],
        mainFields: ["style"],
        conditions: ["style", DEV_PROD_CONDITION],
        tryIndex: false,
        preferRelative: true
      }));
    },
    get sass() {
      if (!sassResolve) {
        const resolver = createBackCompatIdResolver(config2, {
          extensions: [".scss", ".sass", ".css"],
          mainFields: ["sass", "style"],
          conditions: ["sass", "style", DEV_PROD_CONDITION],
          tryIndex: true,
          tryPrefix: "_",
          preferRelative: true
        });
        sassResolve = async (...args) => {
          if (args[1].startsWith("file://")) {
            args[1] = (0, import_node_url2.fileURLToPath)(args[1], {
              windows: (
                // file:///foo cannot be converted to path with windows mode
                isWindows$3 && !fileURLWithWindowsDriveRE.test(args[1]) ? false : void 0
              )
            });
          }
          return resolver(...args);
        };
      }
      return sassResolve;
    },
    get less() {
      return lessResolve ?? (lessResolve = createBackCompatIdResolver(config2, {
        extensions: [".less", ".css"],
        mainFields: ["less", "style"],
        conditions: ["less", "style", DEV_PROD_CONDITION],
        tryIndex: false,
        preferRelative: true
      }));
    }
  };
}
function getCssResolversKeys(resolvers) {
  return Object.keys(resolvers);
}
async function compileCSSPreprocessors(environment, id, lang, code, workerController) {
  const { config: config2 } = environment;
  const { preprocessorOptions, devSourcemap } = config2.css;
  const atImportResolvers = getAtImportResolvers(
    environment.getTopLevelConfig()
  );
  const opts = {
    ...preprocessorOptions && preprocessorOptions[lang] || {},
    alias: config2.resolve.alias,
    // important: set this for relative import resolving
    filename: cleanUrl2(id),
    enableSourcemap: devSourcemap ?? false
  };
  const preProcessor = workerController[lang];
  const preprocessResult = await preProcessor(
    environment,
    code,
    config2.root,
    opts,
    atImportResolvers
  );
  if (preprocessResult.error) {
    throw preprocessResult.error;
  }
  let deps;
  if (preprocessResult.deps.length > 0) {
    const normalizedFilename = normalizePath$3(opts.filename);
    deps = new Set(
      [...preprocessResult.deps].filter(
        (dep) => normalizePath$3(dep) !== normalizedFilename
      )
    );
  }
  return {
    code: preprocessResult.code,
    map: combineSourcemapsIfExists(
      opts.filename,
      preprocessResult.map,
      preprocessResult.additionalMap
    ),
    deps
  };
}
var configToAtImportResolvers = /* @__PURE__ */ new WeakMap();
function getAtImportResolvers(config2) {
  let atImportResolvers = configToAtImportResolvers.get(config2);
  if (!atImportResolvers) {
    atImportResolvers = createCSSResolvers(config2);
    configToAtImportResolvers.set(config2, atImportResolvers);
  }
  return atImportResolvers;
}
async function compileCSS(environment, id, code, workerController, urlResolver) {
  var _a2, _b;
  const { config: config2 } = environment;
  const lang = (_a2 = CSS_LANGS_RE.exec(id)) == null ? void 0 : _a2[1];
  const deps = /* @__PURE__ */ new Set();
  let preprocessorMap;
  if (isPreProcessor(lang)) {
    const preprocessorResult = await compileCSSPreprocessors(
      environment,
      id,
      lang,
      code,
      workerController
    );
    code = preprocessorResult.code;
    preprocessorMap = preprocessorResult.map;
    (_b = preprocessorResult.deps) == null ? void 0 : _b.forEach((dep) => deps.add(dep));
  } else if (lang === "sss" && config2.css.transformer === "lightningcss") {
    const sssResult = await transformSugarSS(environment, id, code);
    code = sssResult.code;
    preprocessorMap = sssResult.map;
  }
  const transformResult = await (config2.css.transformer === "lightningcss" ? compileLightningCSS(
    environment,
    id,
    code,
    deps,
    workerController,
    urlResolver
  ) : compilePostCSS(
    environment,
    id,
    code,
    deps,
    lang,
    workerController,
    urlResolver
  ));
  if (!transformResult) {
    return {
      code,
      map: config2.css.devSourcemap ? preprocessorMap : { mappings: "" },
      deps
    };
  }
  return {
    ...transformResult,
    map: config2.css.devSourcemap ? combineSourcemapsIfExists(
      cleanUrl2(id),
      typeof transformResult.map === "string" ? JSON.parse(transformResult.map) : transformResult.map,
      preprocessorMap
    ) : { mappings: "" },
    deps
  };
}
async function compilePostCSS(environment, id, code, deps, lang, workerController, urlResolver) {
  const { config: config2 } = environment;
  const { modules: modulesOptions, devSourcemap } = config2.css;
  const isModule = modulesOptions !== false && cssModuleRE.test(id);
  const needInlineImport = code.includes("@import");
  const hasUrl = cssUrlRE.test(code) || cssImageSetRE.test(code);
  const postcssConfig = await resolvePostcssConfig(
    environment.getTopLevelConfig()
  );
  if (lang !== "sss" && !postcssConfig && !isModule && !needInlineImport && !hasUrl) {
    return;
  }
  const atImportResolvers = getAtImportResolvers(
    environment.getTopLevelConfig()
  );
  const postcssPlugins = (postcssConfig == null ? void 0 : postcssConfig.plugins.slice()) ?? [];
  if (needInlineImport) {
    postcssPlugins.unshift(
      (await importPostcssImport()).default({
        async resolve(id2, basedir) {
          const publicFile = checkPublicFile(
            id2,
            environment.getTopLevelConfig()
          );
          if (publicFile) {
            return publicFile;
          }
          const resolved = await atImportResolvers.css(
            environment,
            id2,
            import_node_path3.default.join(basedir, "*")
          );
          if (resolved) {
            return import_node_path3.default.resolve(resolved);
          }
          if (!import_node_path3.default.isAbsolute(id2)) {
            environment.logger.error(
              colors$1.red(
                `Unable to resolve \`@import "${id2}"\` from ${basedir}`
              )
            );
          }
          return id2;
        },
        async load(id2) {
          var _a2, _b;
          const code2 = await import_node_fs2.default.promises.readFile(id2, "utf-8");
          const lang2 = (_a2 = CSS_LANGS_RE.exec(id2)) == null ? void 0 : _a2[1];
          if (isPreProcessor(lang2)) {
            const result2 = await compileCSSPreprocessors(
              environment,
              id2,
              lang2,
              code2,
              workerController
            );
            (_b = result2.deps) == null ? void 0 : _b.forEach((dep) => deps.add(dep));
            return result2.code;
          }
          return code2;
        },
        nameLayer(index) {
          return `vite--anon-layer-${getHash(id)}-${index}`;
        }
      })
    );
  }
  if (urlResolver && // when a postcss plugin is used (including the internal postcss plugins),
  // we need to add this plugin regardless of whether
  // this file contains url() or image-set(),
  // because we don't know the content injected by those plugins
  (postcssPlugins.length > 0 || isModule || hasUrl)) {
    postcssPlugins.push(
      UrlRewritePostcssPlugin({
        resolver: urlResolver,
        deps,
        logger: environment.logger
      })
    );
  }
  let modules;
  if (isModule) {
    postcssPlugins.unshift(
      (await importPostcssModules()).default({
        ...modulesOptions,
        localsConvention: modulesOptions == null ? void 0 : modulesOptions.localsConvention,
        getJSON(cssFileName, _modules, outputFileName) {
          modules = _modules;
          if (modulesOptions && typeof modulesOptions.getJSON === "function") {
            modulesOptions.getJSON(cssFileName, _modules, outputFileName);
          }
        },
        async resolve(id2, importer) {
          for (const key of getCssResolversKeys(atImportResolvers)) {
            const resolved = await atImportResolvers[key](
              environment,
              id2,
              importer
            );
            if (resolved) {
              return import_node_path3.default.resolve(resolved);
            }
          }
          return id2;
        }
      })
    );
  }
  const postcssOptions = (postcssConfig == null ? void 0 : postcssConfig.options) ?? {};
  const postcssParser = lang === "sss" ? loadSss(config2.root) : postcssOptions.parser;
  if (!postcssPlugins.length && !postcssParser) {
    return;
  }
  const result = await runPostCSS(
    id,
    code,
    postcssPlugins,
    { ...postcssOptions, parser: postcssParser },
    deps,
    environment.logger,
    devSourcemap
  );
  return { ...result, modules };
}
async function transformSugarSS(environment, id, code) {
  const { config: config2 } = environment;
  const { devSourcemap } = config2.css;
  const result = await runPostCSS(
    id,
    code,
    [],
    { parser: loadSss(config2.root) },
    void 0,
    environment.logger,
    devSourcemap
  );
  return result;
}
async function runPostCSS(id, code, plugins2, options2, deps, logger, enableSourcemap) {
  let postcssResult;
  try {
    const source = removeDirectQuery(id);
    const postcss = await importPostcss();
    postcssResult = await postcss.default(plugins2).process(code, {
      ...options2,
      to: source,
      from: source,
      ...enableSourcemap ? {
        map: {
          inline: false,
          annotation: false,
          // postcss may return virtual files
          // we cannot obtain content of them, so this needs to be enabled
          sourcesContent: true
          // when "prev: preprocessorMap", the result map may include duplicate filename in `postcssResult.map.sources`
          // prev: preprocessorMap,
        }
      } : {}
    });
    for (const message of postcssResult.messages) {
      if (message.type === "dependency") {
        deps == null ? void 0 : deps.add(normalizePath$3(message.file));
      } else if (message.type === "dir-dependency") {
        const { dir, glob: globPattern = "**" } = message;
        const files = globSync(globPattern, {
          absolute: true,
          cwd: import_node_path3.default.resolve(import_node_path3.default.dirname(id), dir),
          expandDirectories: false,
          ignore: ["**/node_modules/**"]
        });
        for (let i = 0; i < files.length; i++) {
          deps == null ? void 0 : deps.add(files[i]);
        }
      } else if (message.type === "warning") {
        const warning = message;
        let msg = `[vite:css][postcss] ${warning.text}`;
        msg += `
${generateCodeFrame(
          code,
          {
            line: warning.line,
            column: warning.column - 1
            // 1-based
          },
          warning.endLine !== void 0 && warning.endColumn !== void 0 ? {
            line: warning.endLine,
            column: warning.endColumn - 1
            // 1-based
          } : void 0
        )}`;
        logger.warn(colors$1.yellow(msg));
      }
    }
  } catch (e2) {
    e2.message = `[postcss] ${e2.message}`;
    e2.code = code;
    e2.loc = {
      file: e2.file,
      line: e2.line,
      column: e2.column - 1
      // 1-based
    };
    throw e2;
  }
  if (!enableSourcemap) {
    return {
      code: postcssResult.css,
      map: { mappings: "" }
    };
  }
  const rawPostcssMap = postcssResult.map.toJSON();
  const postcssMap = await formatPostcssSourceMap(
    // version property of rawPostcssMap is declared as string
    // but actually it is a number
    rawPostcssMap,
    cleanUrl2(id)
  );
  return {
    code: postcssResult.css,
    map: postcssMap
  };
}
function createCachedImport(imp) {
  let cached;
  return () => {
    if (!cached) {
      cached = imp().then((module) => {
        cached = module;
        return module;
      });
    }
    return cached;
  };
}
var importPostcssImport = createCachedImport(() => import("./dep-AiMcmC_f-ZSOOJDIC.js").then(function(n2) {
  return n2.i;
}));
var importPostcssModules = createCachedImport(() => import("./dep-SgSik2vo-56ZD5HA6.js").then(function(n2) {
  return n2.i;
}));
var importPostcss = createCachedImport(() => import("./postcss-Z7XE543Z.js"));
var preprocessorWorkerControllerCache = /* @__PURE__ */ new WeakMap();
var alwaysFakeWorkerWorkerControllerCache;
async function preprocessCSS(code, filename, config2) {
  let workerController = preprocessorWorkerControllerCache.get(config2);
  if (!workerController) {
    alwaysFakeWorkerWorkerControllerCache || (alwaysFakeWorkerWorkerControllerCache = createPreprocessorWorkerController(0));
    workerController = alwaysFakeWorkerWorkerControllerCache;
  }
  const environment = new PartialEnvironment(
    "client",
    config2
  );
  return await compileCSS(environment, filename, code, workerController);
}
async function formatPostcssSourceMap(rawMap, file) {
  const inputFileDir = import_node_path3.default.dirname(file);
  const sources = rawMap.sources.map((source) => {
    const cleanSource = cleanUrl2(decodeURIComponent(source));
    if (cleanSource[0] === "<" && cleanSource.endsWith(">")) {
      return `\0${cleanSource}`;
    }
    return normalizePath$3(import_node_path3.default.resolve(inputFileDir, cleanSource));
  });
  return {
    file,
    mappings: rawMap.mappings,
    names: rawMap.names,
    sources,
    sourcesContent: rawMap.sourcesContent,
    version: rawMap.version
  };
}
function combineSourcemapsIfExists(filename, map1, map2) {
  if (!map1 || !map2) {
    return map1;
  }
  if (map1.mappings === "" || map2.mappings === "") {
    return { mappings: "" };
  }
  return combineSourcemaps(filename, [
    // type of version property of ExistingRawSourceMap is number
    // but it is always 3
    map1,
    map2
  ]);
}
var viteHashUpdateMarker = "/*$vite$:1*/";
var viteHashUpdateMarkerRE = /\/\*\$vite\$:\d+\*\//;
async function finalizeCss(css, minify, config2) {
  if (css.includes("@import") || css.includes("@charset")) {
    css = await hoistAtRules(css);
  }
  if (config2.build.cssMinify) {
    css = await minifyCSS(css, config2, false);
  }
  css += viteHashUpdateMarker;
  return css;
}
async function resolvePostcssConfig(config2) {
  let result = postcssConfigCache.get(config2);
  if (result !== void 0) {
    return await result;
  }
  const inlineOptions = config2.css.postcss;
  if (isObject$1(inlineOptions)) {
    const options2 = { ...inlineOptions };
    delete options2.plugins;
    result = {
      options: options2,
      plugins: inlineOptions.plugins || []
    };
  } else {
    const searchPath = typeof inlineOptions === "string" ? inlineOptions : config2.root;
    const stopDir = searchForWorkspaceRoot(config2.root);
    result = postcssrc({}, searchPath, { stopDir }).catch((e2) => {
      if (!e2.message.includes("No PostCSS Config found")) {
        if (e2 instanceof Error) {
          const { name, message, stack } = e2;
          e2.name = "Failed to load PostCSS config";
          e2.message = `Failed to load PostCSS config (searchPath: ${searchPath}): [${name}] ${message}
${stack}`;
          e2.stack = "";
          throw e2;
        } else {
          throw new Error(`Failed to load PostCSS config: ${e2}`);
        }
      }
      return null;
    });
    result.then(
      (resolved) => {
        postcssConfigCache.set(config2, resolved);
      },
      () => {
      }
    );
  }
  postcssConfigCache.set(config2, result);
  return result;
}
var cssUrlRE = new RegExp(`(?<!@import\\s+)(?<=^|[^\\w\\-\\u0080-\\uffff])url\\((\\s*('[^']+'|"[^"]+")\\s*|[^'")]+)\\)`);
var cssDataUriRE = new RegExp(`(?<=^|[^\\w\\-\\u0080-\\uffff])data-uri\\((\\s*('[^']+'|"[^"]+")\\s*|[^'")]+)\\)`);
var importCssRE = /@import\s+(?:url\()?('[^']+\.css'|"[^"]+\.css"|[^'"\s)]+\.css)/;
var cssImageSetRE = new RegExp("(?<=image-set\\()((?:[\\w-]{1,256}\\([^)]*\\)|[^)])*)(?=\\))");
var UrlRewritePostcssPlugin = (opts) => {
  if (!opts) {
    throw new Error("base or replace is required");
  }
  return {
    postcssPlugin: "vite-url-rewrite",
    Once(root) {
      const promises2 = [];
      root.walkDecls((declaration) => {
        var _a2;
        const importer = (_a2 = declaration.source) == null ? void 0 : _a2.input.file;
        if (!importer) {
          opts.logger.warnOnce(
            "\nA PostCSS plugin did not pass the `from` option to `postcss.parse`. This may cause imported assets to be incorrectly transformed. If you've recently added a PostCSS plugin that raised this warning, please contact the package author to fix the issue."
          );
        }
        const isCssUrl = cssUrlRE.test(declaration.value);
        const isCssImageSet = cssImageSetRE.test(declaration.value);
        if (isCssUrl || isCssImageSet) {
          const replacerForDeclaration = async (rawUrl) => {
            const [newUrl, resolvedId] = await opts.resolver(rawUrl, importer);
            if (newUrl.startsWith("data:") && resolvedId) {
              opts.deps.add(resolvedId);
            }
            return newUrl;
          };
          if (isCssUrl && isCssImageSet) {
            promises2.push(
              rewriteCssUrls(declaration.value, replacerForDeclaration).then((url2) => rewriteCssImageSet(url2, replacerForDeclaration)).then((url2) => {
                declaration.value = url2;
              })
            );
          } else {
            const rewriterToUse = isCssImageSet ? rewriteCssImageSet : rewriteCssUrls;
            promises2.push(
              rewriterToUse(declaration.value, replacerForDeclaration).then(
                (url2) => {
                  declaration.value = url2;
                }
              )
            );
          }
        }
      });
      if (promises2.length) {
        return Promise.all(promises2);
      }
    }
  };
};
UrlRewritePostcssPlugin.postcss = true;
function rewriteCssUrls(css, replacer) {
  return asyncReplace(css, cssUrlRE, async (match) => {
    const [matched, rawUrl] = match;
    return await doUrlReplace(rawUrl.trim(), matched, replacer);
  });
}
function rewriteCssDataUris(css, replacer) {
  return asyncReplace(css, cssDataUriRE, async (match) => {
    const [matched, rawUrl] = match;
    return await doUrlReplace(rawUrl.trim(), matched, replacer, "data-uri");
  });
}
function rewriteImportCss(css, replacer) {
  return asyncReplace(css, importCssRE, async (match) => {
    const [matched, rawUrl] = match;
    return await doImportCSSReplace(rawUrl, matched, replacer);
  });
}
var cssNotProcessedRE = /(?:gradient|element|cross-fade|image)\(/;
async function rewriteCssImageSet(css, replacer) {
  return await asyncReplace(css, cssImageSetRE, async (match) => {
    const [, rawUrl] = match;
    const url2 = await processSrcSet(rawUrl, async ({ url: url22 }) => {
      if (cssUrlRE.test(url22)) {
        return await rewriteCssUrls(url22, replacer);
      }
      if (!cssNotProcessedRE.test(url22)) {
        return await doUrlReplace(url22, url22, replacer);
      }
      return url22;
    });
    return url2;
  });
}
function skipUrlReplacer(rawUrl) {
  return isExternalUrl(rawUrl) || isDataUrl(rawUrl) || rawUrl[0] === "#" || functionCallRE.test(rawUrl);
}
async function doUrlReplace(rawUrl, matched, replacer, funcName = "url") {
  let wrap2 = "";
  const first2 = rawUrl[0];
  if (first2 === `"` || first2 === `'`) {
    wrap2 = first2;
    rawUrl = rawUrl.slice(1, -1);
  }
  if (skipUrlReplacer(rawUrl)) {
    return matched;
  }
  let newUrl = await replacer(rawUrl);
  if (wrap2 === "" && newUrl !== encodeURI(newUrl)) {
    wrap2 = '"';
  }
  if (wrap2 === "'" && newUrl.includes("'")) {
    wrap2 = '"';
  }
  if (wrap2 === '"' && newUrl.includes('"')) {
    newUrl = newUrl.replace(nonEscapedDoubleQuoteRe, '\\"');
  }
  return `${funcName}(${wrap2}${newUrl}${wrap2})`;
}
async function doImportCSSReplace(rawUrl, matched, replacer) {
  let wrap2 = "";
  const first2 = rawUrl[0];
  if (first2 === `"` || first2 === `'`) {
    wrap2 = first2;
    rawUrl = rawUrl.slice(1, -1);
  }
  if (isExternalUrl(rawUrl) || isDataUrl(rawUrl) || rawUrl[0] === "#") {
    return matched;
  }
  const prefix = matched.includes("url(") ? "url(" : "";
  return `@import ${prefix}${wrap2}${await replacer(rawUrl)}${wrap2}`;
}
async function minifyCSS(css, config2, inlined) {
  if (config2.build.cssMinify === "lightningcss") {
    try {
      const { code, warnings } = (await importLightningCSS()).transform({
        ...config2.css.lightningcss,
        targets: convertTargets(config2.build.cssTarget),
        cssModules: void 0,
        // TODO: Pass actual filename here, which can also be passed to esbuild's
        // `sourcefile` option below to improve error messages
        filename: defaultCssBundleName,
        code: Buffer.from(css),
        minify: true
      });
      for (const warning of warnings) {
        let msg = `[lightningcss minify] ${warning.message}`;
        msg += `
${generateCodeFrame(css, {
          line: warning.loc.line,
          column: warning.loc.column - 1
          // 1-based
        })}`;
        config2.logger.warn(colors$1.yellow(msg));
      }
      return decoder.decode(code) + (inlined ? "" : "\n");
    } catch (e2) {
      e2.message = `[lightningcss minify] ${e2.message}`;
      const friendlyMessage = getLightningCssErrorMessageForIeSyntaxes(css);
      if (friendlyMessage) {
        e2.message += friendlyMessage;
      }
      if (e2.loc) {
        e2.loc = {
          line: e2.loc.line,
          column: e2.loc.column - 1
          // 1-based
        };
        e2.frame = generateCodeFrame(css, e2.loc);
      }
      throw e2;
    }
  }
  try {
    const { code, warnings } = await (0, import_esbuild.transform)(css, {
      loader: "css",
      target: config2.build.cssTarget || void 0,
      ...resolveMinifyCssEsbuildOptions(config2.esbuild || {})
    });
    if (warnings.length) {
      const msgs = await (0, import_esbuild.formatMessages)(warnings, { kind: "warning" });
      config2.logger.warn(
        colors$1.yellow(`[esbuild css minify]
${msgs.join("\n")}`)
      );
    }
    return inlined ? code.trimEnd() : code;
  } catch (e2) {
    if (e2.errors) {
      e2.message = "[esbuild css minify] " + e2.message;
      const msgs = await (0, import_esbuild.formatMessages)(e2.errors, { kind: "error" });
      e2.frame = "\n" + msgs.join("\n");
      e2.loc = e2.errors[0].location;
    }
    throw e2;
  }
}
function resolveMinifyCssEsbuildOptions(options2) {
  const base = {
    charset: options2.charset ?? "utf8",
    logLevel: options2.logLevel,
    logLimit: options2.logLimit,
    logOverride: options2.logOverride,
    legalComments: options2.legalComments
  };
  if (options2.minifyIdentifiers != null || options2.minifySyntax != null || options2.minifyWhitespace != null) {
    return {
      ...base,
      minifyIdentifiers: options2.minifyIdentifiers ?? true,
      minifySyntax: options2.minifySyntax ?? true,
      minifyWhitespace: options2.minifyWhitespace ?? true
    };
  } else {
    return { ...base, minify: true };
  }
}
var atImportRE = new RegExp(`@import(?:\\s*(?:url\\([^)]*\\)|"(?:[^"]|(?<=\\\\)")*"|'(?:[^']|(?<=\\\\)')*').*?|[^;]*);`, "g");
var atCharsetRE = new RegExp(`@charset(?:\\s*(?:"(?:[^"]|(?<=\\\\)")*"|'(?:[^']|(?<=\\\\)')*').*?|[^;]*);`, "g");
async function hoistAtRules(css) {
  const s2 = new MagicString(css);
  const cleanCss = emptyCssComments(css);
  let match;
  atImportRE.lastIndex = 0;
  while (match = atImportRE.exec(cleanCss)) {
    s2.remove(match.index, match.index + match[0].length);
    s2.appendLeft(0, match[0]);
  }
  atCharsetRE.lastIndex = 0;
  let foundCharset = false;
  while (match = atCharsetRE.exec(cleanCss)) {
    s2.remove(match.index, match.index + match[0].length);
    if (!foundCharset) {
      s2.prepend(match[0]);
      foundCharset = true;
    }
  }
  return s2.toString();
}
var loadedPreprocessorPath = {};
function loadPreprocessorPath(lang, root) {
  const cached = loadedPreprocessorPath[lang];
  if (cached) {
    return cached;
  }
  try {
    const resolved = requireResolveFromRootWithFallback(root, lang);
    return loadedPreprocessorPath[lang] = resolved;
  } catch (e2) {
    if (e2.code === "MODULE_NOT_FOUND") {
      const installCommand = getPackageManagerCommand("install");
      throw new Error(
        `Preprocessor dependency "${lang}" not found. Did you install it? Try \`${installCommand} -D ${lang}\`.`
      );
    } else {
      const message = new Error(
        `Preprocessor dependency "${lang}" failed to load:
${e2.message}`
      );
      message.stack = e2.stack + "\n" + message.stack;
      throw message;
    }
  }
}
function loadSassPackage(root) {
  try {
    const path22 = loadPreprocessorPath("sass-embedded", root);
    return { name: "sass-embedded", path: path22 };
  } catch (e1) {
    try {
      const path22 = loadPreprocessorPath("sass", root);
      return { name: "sass", path: path22 };
    } catch {
      throw e1;
    }
  }
}
var cachedSss;
function loadSss(root) {
  if (cachedSss) return cachedSss;
  const sssPath = loadPreprocessorPath("sugarss", root);
  cachedSss = (0, import_node_module.createRequire)(import.meta.url)(sssPath);
  return cachedSss;
}
function cleanScssBugUrl(url2) {
  if (
    // check bug via `window` and `location` global
    typeof window !== "undefined" && typeof location !== "undefined" && typeof location.href === "string"
  ) {
    const prefix = location.href.replace(/\/$/, "");
    return url2.replace(prefix, "");
  } else {
    return url2;
  }
}
function fixScssBugImportValue(data) {
  if (
    // check bug via `window` and `location` global
    typeof window !== "undefined" && typeof location !== "undefined" && data && "file" in data && (!("contents" in data) || data.contents == null)
  ) {
    data.contents = import_node_fs2.default.readFileSync(data.file, "utf-8");
  }
  return data;
}
var makeScssWorker = (environment, resolvers, alias2, maxWorkers, packageName) => {
  const internalImporter = async (url2, importer, filename) => {
    importer = cleanScssBugUrl(importer);
    const resolved = await resolvers.sass(environment, url2, importer);
    if (resolved) {
      try {
        const data = await rebaseUrls(
          environment,
          resolved,
          filename,
          alias2,
          "$",
          resolvers.sass
        );
        if (packageName === "sass-embedded") {
          return data;
        }
        return fixScssBugImportValue(data);
      } catch (data) {
        return data;
      }
    } else {
      return null;
    }
  };
  const worker = new WorkerWithFallback(
    () => async (sassPath, data, options2) => {
      const sass = __require(sassPath);
      const path22 = require_node_path();
      const _internalImporter = (url2, importer2, done) => {
        internalImporter(url2, importer2, options2.filename).then(
          (data2) => done(data2)
        );
      };
      const importer = [_internalImporter];
      if (options2.importer) {
        if (Array.isArray(options2.importer)) {
          importer.unshift(...options2.importer);
        } else {
          importer.unshift(options2.importer);
        }
      }
      const finalOptions = {
        // support @import from node dependencies by default
        includePaths: ["node_modules"],
        ...options2,
        data,
        file: options2.filename,
        outFile: options2.filename,
        importer,
        ...options2.enableSourcemap ? {
          sourceMap: true,
          omitSourceMapUrl: true,
          sourceMapRoot: path22.dirname(options2.filename)
        } : {}
      };
      return new Promise((resolve4, reject) => {
        sass.render(finalOptions, (err2, res) => {
          var _a2;
          if (err2) {
            reject(err2);
          } else {
            resolve4({
              css: res.css.toString(),
              map: (_a2 = res.map) == null ? void 0 : _a2.toString(),
              stats: res.stats
            });
          }
        });
      });
    },
    {
      parentFunctions: { internalImporter },
      shouldUseFake(_sassPath, _data, options2) {
        return !!(options2.functions && Object.keys(options2.functions).length > 0 || options2.importer && (!Array.isArray(options2.importer) || options2.importer.length > 0) || options2.logger || options2.pkgImporter);
      },
      max: maxWorkers
    }
  );
  return worker;
};
var makeModernScssWorker = (environment, resolvers, alias2, maxWorkers) => {
  const internalCanonicalize = async (url2, importer) => {
    importer = cleanScssBugUrl(importer);
    const resolved = await resolvers.sass(environment, url2, importer);
    return resolved ?? null;
  };
  const internalLoad = async (file, rootFile) => {
    const result = await rebaseUrls(
      environment,
      file,
      rootFile,
      alias2,
      "$",
      resolvers.sass
    );
    if (result.contents) {
      return result.contents;
    }
    return await import_promises.default.readFile(result.file, "utf-8");
  };
  const worker = new WorkerWithFallback(
    () => async (sassPath, data, options2) => {
      const sass = __require(sassPath);
      const path22 = require_node_path();
      const { fileURLToPath: fileURLToPath22, pathToFileURL: pathToFileURL2 } = (
        // eslint-disable-next-line no-restricted-globals
        require_node_url()
      );
      const sassOptions = { ...options2 };
      sassOptions.url = pathToFileURL2(options2.filename);
      sassOptions.sourceMap = options2.enableSourcemap;
      const internalImporter = {
        async canonicalize(url2, context) {
          const importer = context.containingUrl ? fileURLToPath22(context.containingUrl) : options2.filename;
          const resolved = await internalCanonicalize(url2, importer);
          if (resolved && // only limit to these extensions because:
          // - for the `@import`/`@use`s written in file loaded by `load` function,
          //   the `canonicalize` function of that `importer` is called first
          // - the `load` function of an importer is only called for the importer
          //   that returned a non-null result from its `canonicalize` function
          (resolved.endsWith(".css") || resolved.endsWith(".scss") || resolved.endsWith(".sass"))) {
            return pathToFileURL2(resolved);
          }
          return null;
        },
        async load(canonicalUrl) {
          const ext = path22.extname(canonicalUrl.pathname);
          let syntax = "scss";
          if (ext === ".sass") {
            syntax = "indented";
          } else if (ext === ".css") {
            syntax = "css";
          }
          const contents = await internalLoad(
            fileURLToPath22(canonicalUrl),
            options2.filename
          );
          return { contents, syntax, sourceMapUrl: canonicalUrl };
        }
      };
      sassOptions.importers = [
        ...sassOptions.importers ?? [],
        internalImporter
      ];
      const result = await sass.compileStringAsync(data, sassOptions);
      return {
        css: result.css,
        map: result.sourceMap ? JSON.stringify(result.sourceMap) : void 0,
        stats: {
          includedFiles: result.loadedUrls.filter((url2) => url2.protocol === "file:").map((url2) => fileURLToPath22(url2))
        }
      };
    },
    {
      parentFunctions: {
        internalCanonicalize,
        internalLoad
      },
      shouldUseFake(_sassPath, _data, options2) {
        return !!(options2.functions && Object.keys(options2.functions).length > 0 || options2.importers && (!Array.isArray(options2.importers) || options2.importers.length > 0) || options2.logger);
      },
      max: maxWorkers
    }
  );
  return worker;
};
var makeModernCompilerScssWorker = (environment, resolvers, alias2, _maxWorkers) => {
  let compilerPromise;
  const worker = {
    async run(sassPath, data, options2) {
      const sass = (await import((0, import_node_url2.pathToFileURL)(sassPath).href)).default;
      compilerPromise ?? (compilerPromise = sass.initAsyncCompiler());
      const compiler = await compilerPromise;
      const sassOptions = { ...options2 };
      sassOptions.url = (0, import_node_url2.pathToFileURL)(options2.filename);
      sassOptions.sourceMap = options2.enableSourcemap;
      const internalImporter = {
        async canonicalize(url2, context) {
          const importer = context.containingUrl ? (0, import_node_url2.fileURLToPath)(context.containingUrl) : options2.filename;
          const resolved = await resolvers.sass(
            environment,
            url2,
            cleanScssBugUrl(importer)
          );
          if (resolved && (resolved.endsWith(".css") || resolved.endsWith(".scss") || resolved.endsWith(".sass"))) {
            return (0, import_node_url2.pathToFileURL)(resolved);
          }
          return null;
        },
        async load(canonicalUrl) {
          const ext = import_node_path3.default.extname(canonicalUrl.pathname);
          let syntax = "scss";
          if (ext === ".sass") {
            syntax = "indented";
          } else if (ext === ".css") {
            syntax = "css";
          }
          const result2 = await rebaseUrls(
            environment,
            (0, import_node_url2.fileURLToPath)(canonicalUrl),
            options2.filename,
            alias2,
            "$",
            resolvers.sass
          );
          const contents = result2.contents ?? await import_promises.default.readFile(result2.file, "utf-8");
          return { contents, syntax, sourceMapUrl: canonicalUrl };
        }
      };
      sassOptions.importers = [
        ...sassOptions.importers ?? [],
        internalImporter
      ];
      const result = await compiler.compileStringAsync(data, sassOptions);
      return {
        css: result.css,
        map: result.sourceMap ? JSON.stringify(result.sourceMap) : void 0,
        stats: {
          includedFiles: result.loadedUrls.filter((url2) => url2.protocol === "file:").map((url2) => (0, import_node_url2.fileURLToPath)(url2))
        }
      };
    },
    async stop() {
      var _a2;
      (_a2 = await compilerPromise) == null ? void 0 : _a2.dispose();
      compilerPromise = void 0;
    }
  };
  return worker;
};
var scssProcessor = (maxWorkers) => {
  const workerMap = /* @__PURE__ */ new Map();
  return {
    close() {
      for (const worker of workerMap.values()) {
        worker.stop();
      }
    },
    async process(environment, source, root, options2, resolvers) {
      var _a2;
      const sassPackage = loadSassPackage(root);
      const api = options2.api ?? (sassPackage.name === "sass-embedded" ? "modern-compiler" : "modern");
      if (!workerMap.has(options2.alias)) {
        workerMap.set(
          options2.alias,
          api === "modern-compiler" ? makeModernCompilerScssWorker(
            environment,
            resolvers,
            options2.alias
          ) : api === "modern" ? makeModernScssWorker(
            environment,
            resolvers,
            options2.alias,
            maxWorkers
          ) : makeScssWorker(
            environment,
            resolvers,
            options2.alias,
            maxWorkers,
            sassPackage.name
          )
        );
      }
      const worker = workerMap.get(options2.alias);
      const { content: data, map: additionalMap } = await getSource(
        source,
        options2.filename,
        options2.additionalData,
        options2.enableSourcemap
      );
      const optionsWithoutAdditionalData = {
        ...options2,
        additionalData: void 0
      };
      try {
        const result = await worker.run(
          sassPackage.path,
          data,
          // @ts-expect-error the correct worker is selected for `options.type`
          optionsWithoutAdditionalData
        );
        const deps = result.stats.includedFiles.map((f2) => cleanScssBugUrl(f2));
        const map2 = result.map ? JSON.parse(result.map.toString()) : void 0;
        if (map2) {
          map2.sources = map2.sources.map(
            (url2) => url2.startsWith("file://") ? normalizePath$3((0, import_node_url2.fileURLToPath)(url2)) : url2
          );
        }
        return {
          code: result.css.toString(),
          map: map2,
          additionalMap,
          deps
        };
      } catch (e2) {
        e2.message = `[sass] ${e2.message}`;
        e2.id = e2.file;
        e2.frame = e2.formatted;
        if ((_a2 = e2.span) == null ? void 0 : _a2.start) {
          e2.line = e2.span.start.line + 1;
          e2.column = e2.span.start.column + 1;
          e2.frame = e2.message;
        }
        return { code: "", error: e2, deps: [] };
      }
    }
  };
};
async function rebaseUrls(environment, file, rootFile, alias2, variablePrefix, resolver) {
  file = import_node_path3.default.resolve(file);
  const fileDir = import_node_path3.default.dirname(file);
  const rootDir = import_node_path3.default.dirname(rootFile);
  if (fileDir === rootDir) {
    return { file };
  }
  const content = await import_promises.default.readFile(file, "utf-8");
  const hasUrls = cssUrlRE.test(content);
  const hasDataUris = cssDataUriRE.test(content);
  const hasImportCss = importCssRE.test(content);
  if (!hasUrls && !hasDataUris && !hasImportCss) {
    return { file };
  }
  let rebased;
  const rebaseFn = async (url2) => {
    if (url2[0] === "/") return url2;
    if (url2.startsWith(variablePrefix)) return url2;
    for (const { find: find2 } of alias2) {
      const matches2 = typeof find2 === "string" ? url2.startsWith(find2) : find2.test(url2);
      if (matches2) {
        return url2;
      }
    }
    const absolute = await resolver(environment, url2, file) || import_node_path3.default.resolve(fileDir, url2);
    const relative2 = import_node_path3.default.relative(rootDir, absolute);
    return normalizePath$3(relative2);
  };
  if (hasImportCss) {
    rebased = await rewriteImportCss(content, rebaseFn);
  }
  if (hasUrls) {
    rebased = await rewriteCssUrls(rebased || content, rebaseFn);
  }
  if (hasDataUris) {
    rebased = await rewriteCssDataUris(rebased || content, rebaseFn);
  }
  return {
    file,
    contents: rebased
  };
}
var makeLessWorker = (environment, resolvers, alias2, maxWorkers) => {
  const viteLessResolve = async (filename, dir, rootFile, mime) => {
    const resolved = await resolvers.less(
      environment,
      filename,
      import_node_path3.default.join(dir, "*")
    );
    if (!resolved) return void 0;
    if (mime === "application/javascript") {
      const file = import_node_path3.default.resolve(resolved);
      return { resolved: file };
    }
    const result = await rebaseUrls(
      environment,
      resolved,
      rootFile,
      alias2,
      "@",
      resolvers.less
    );
    return {
      resolved,
      contents: "contents" in result ? result.contents : void 0
    };
  };
  const worker = new WorkerWithFallback(
    () => {
      const fsp2 = require_promises();
      const path22 = require_node_path();
      let ViteLessManager;
      const createViteLessPlugin = (less, rootFile) => {
        const { FileManager } = less;
        ViteLessManager ?? (ViteLessManager = class ViteManager extends FileManager {
          constructor(rootFile2) {
            super();
            __publicField(this, "rootFile");
            this.rootFile = rootFile2;
          }
          supports(filename) {
            return !/^(?:https?:)?\/\//.test(filename);
          }
          supportsSync() {
            return false;
          }
          async loadFile(filename, dir, opts, env2) {
            const result = await viteLessResolve(
              filename,
              dir,
              this.rootFile,
              opts.mime
            );
            if (result) {
              return {
                filename: path22.resolve(result.resolved),
                contents: result.contents ?? await fsp2.readFile(result.resolved, "utf-8")
              };
            } else {
              return super.loadFile(filename, dir, opts, env2);
            }
          }
        });
        return {
          install(_, pluginManager) {
            pluginManager.addFileManager(new ViteLessManager(rootFile));
          },
          minVersion: [3, 0, 0]
        };
      };
      return async (lessPath, content, options2) => {
        const nodeLess = __require(lessPath);
        const viteResolverPlugin = createViteLessPlugin(
          nodeLess,
          options2.filename
        );
        const result = await nodeLess.render(content, {
          // support @import from node dependencies by default
          paths: ["node_modules"],
          ...options2,
          plugins: [viteResolverPlugin, ...options2.plugins || []],
          ...options2.enableSourcemap ? {
            sourceMap: {
              outputSourceFiles: true,
              sourceMapFileInline: false
            }
          } : {}
        });
        return result;
      };
    },
    {
      parentFunctions: { viteLessResolve },
      shouldUseFake(_lessPath, _content, options2) {
        return !!options2.plugins && options2.plugins.length > 0;
      },
      max: maxWorkers
    }
  );
  return worker;
};
var lessProcessor = (maxWorkers) => {
  const workerMap = /* @__PURE__ */ new Map();
  return {
    close() {
      for (const worker of workerMap.values()) {
        worker.stop();
      }
    },
    async process(environment, source, root, options2, resolvers) {
      const lessPath = loadPreprocessorPath("less", root);
      if (!workerMap.has(options2.alias)) {
        workerMap.set(
          options2.alias,
          makeLessWorker(environment, resolvers, options2.alias, maxWorkers)
        );
      }
      const worker = workerMap.get(options2.alias);
      const { content, map: additionalMap } = await getSource(
        source,
        options2.filename,
        options2.additionalData,
        options2.enableSourcemap
      );
      let result;
      const optionsWithoutAdditionalData = {
        ...options2,
        additionalData: void 0
      };
      try {
        result = await worker.run(
          lessPath,
          content,
          optionsWithoutAdditionalData
        );
      } catch (e2) {
        const error2 = e2;
        const normalizedError = new Error(
          `[less] ${error2.message || error2.type}`
        );
        normalizedError.loc = {
          file: error2.filename || options2.filename,
          line: error2.line,
          column: error2.column
        };
        return { code: "", error: normalizedError, deps: [] };
      }
      const map2 = result.map && JSON.parse(result.map);
      if (map2) {
        delete map2.sourcesContent;
      }
      return {
        code: result.css.toString(),
        map: map2,
        additionalMap,
        deps: result.imports
      };
    }
  };
};
var makeStylWorker = (maxWorkers) => {
  const worker = new WorkerWithFallback(
    () => {
      return async (stylusPath, content, root, options2) => {
        const nodeStylus = __require(stylusPath);
        const ref = nodeStylus(content, {
          // support @import from node dependencies by default
          paths: ["node_modules"],
          ...options2
        });
        if (options2.define) {
          for (const key in options2.define) {
            ref.define(key, options2.define[key]);
          }
        }
        if (options2.enableSourcemap) {
          ref.set("sourcemap", {
            comment: false,
            inline: false,
            basePath: root
          });
        }
        return {
          code: ref.render(),
          // @ts-expect-error sourcemap exists
          map: ref.sourcemap,
          deps: ref.deps()
        };
      };
    },
    {
      shouldUseFake(_stylusPath, _content, _root, options2) {
        return !!(options2.define && Object.values(options2.define).some((d2) => typeof d2 === "function"));
      },
      max: maxWorkers
    }
  );
  return worker;
};
var stylProcessor = (maxWorkers) => {
  const workerMap = /* @__PURE__ */ new Map();
  return {
    close() {
      for (const worker of workerMap.values()) {
        worker.stop();
      }
    },
    async process(_environment, source, root, options2, _resolvers) {
      const stylusPath = loadPreprocessorPath("stylus", root);
      if (!workerMap.has(options2.alias)) {
        workerMap.set(options2.alias, makeStylWorker(maxWorkers));
      }
      const worker = workerMap.get(options2.alias);
      const { content, map: additionalMap } = await getSource(
        source,
        options2.filename,
        options2.additionalData,
        options2.enableSourcemap,
        "\n"
      );
      const importsDeps = (options2.imports ?? []).map(
        (dep) => import_node_path3.default.resolve(dep)
      );
      const optionsWithoutAdditionalData = {
        ...options2,
        additionalData: void 0
      };
      try {
        const { code, map: map2, deps } = await worker.run(
          stylusPath,
          content,
          root,
          optionsWithoutAdditionalData
        );
        return {
          code,
          map: formatStylusSourceMap(map2, root),
          additionalMap,
          // Concat imports deps with computed deps
          deps: [...deps, ...importsDeps]
        };
      } catch (e2) {
        const wrapped = new Error(`[stylus] ${e2.message}`);
        wrapped.name = e2.name;
        wrapped.stack = e2.stack;
        return { code: "", error: wrapped, deps: [] };
      }
    }
  };
};
function formatStylusSourceMap(mapBefore, root) {
  if (!mapBefore) return void 0;
  const map2 = { ...mapBefore };
  const resolveFromRoot = (p2) => normalizePath$3(import_node_path3.default.resolve(root, p2));
  if (map2.file) {
    map2.file = resolveFromRoot(map2.file);
  }
  map2.sources = map2.sources.map(resolveFromRoot);
  return map2;
}
async function getSource(source, filename, additionalData, enableSourcemap, sep2 = "") {
  if (!additionalData) return { content: source };
  if (typeof additionalData === "function") {
    const newContent = await additionalData(source, filename);
    if (typeof newContent === "string") {
      return { content: newContent };
    }
    return newContent;
  }
  if (!enableSourcemap) {
    return { content: additionalData + sep2 + source };
  }
  const ms2 = new MagicString(source);
  ms2.appendLeft(0, sep2);
  ms2.appendLeft(0, additionalData);
  const map2 = ms2.generateMap({ hires: "boundary" });
  map2.file = filename;
  map2.sources = [filename];
  return {
    content: ms2.toString(),
    map: map2
  };
}
var createPreprocessorWorkerController = (maxWorkers) => {
  const scss = scssProcessor(maxWorkers);
  const less = lessProcessor(maxWorkers);
  const styl = stylProcessor(maxWorkers);
  const sassProcess = (environment, source, root, options2, resolvers) => {
    const opts = { ...options2 };
    if (opts.api === "legacy") {
      opts.indentedSyntax = true;
    } else {
      opts.syntax = "indented";
    }
    return scss.process(environment, source, root, opts, resolvers);
  };
  const close2 = () => {
    less.close();
    scss.close();
    styl.close();
  };
  return {
    [
      "less"
      /* less */
    ]: less.process,
    [
      "scss"
      /* scss */
    ]: scss.process,
    [
      "sass"
      /* sass */
    ]: sassProcess,
    [
      "styl"
      /* styl */
    ]: styl.process,
    [
      "stylus"
      /* stylus */
    ]: styl.process,
    close: close2
  };
};
var normalizeMaxWorkers = (maxWorker) => {
  if (maxWorker === void 0) return 0;
  if (maxWorker === true) return void 0;
  return maxWorker;
};
var preprocessorSet = /* @__PURE__ */ new Set([
  "less",
  "sass",
  "scss",
  "styl",
  "stylus"
  /* stylus */
]);
function isPreProcessor(lang) {
  return lang && preprocessorSet.has(lang);
}
var importLightningCSS = createCachedImport(() => import("./__vite-optional-peer-dep_lightningcss_vite-LUUMBJI5.js"));
async function compileLightningCSS(environment, id, src2, deps, workerController, urlResolver) {
  var _a2, _b, _c;
  const { config: config2 } = environment;
  const filename = removeDirectQuery(id).replace("\0", NULL_BYTE_PLACEHOLDER2);
  let res;
  try {
    res = styleAttrRE.test(id) ? (await importLightningCSS()).transformStyleAttribute({
      filename,
      code: Buffer.from(src2),
      targets: (_a2 = config2.css.lightningcss) == null ? void 0 : _a2.targets,
      minify: config2.isProduction && !!config2.build.cssMinify,
      analyzeDependencies: true
    }) : await (await importLightningCSS()).bundleAsync({
      ...config2.css.lightningcss,
      filename,
      // projectRoot is needed to get stable hash when using CSS modules
      projectRoot: config2.root,
      resolver: {
        async read(filePath) {
          var _a3, _b2;
          if (filePath === filename) {
            return src2;
          }
          const code = import_node_fs2.default.readFileSync(filePath, "utf-8");
          const lang = (_a3 = CSS_LANGS_RE.exec(filePath)) == null ? void 0 : _a3[1];
          if (isPreProcessor(lang)) {
            const result = await compileCSSPreprocessors(
              environment,
              id,
              lang,
              code,
              workerController
            );
            (_b2 = result.deps) == null ? void 0 : _b2.forEach((dep) => deps.add(dep));
            return result.code;
          } else if (lang === "sss") {
            const sssResult = await transformSugarSS(environment, id, code);
            return sssResult.code;
          }
          return code;
        },
        async resolve(id2, from) {
          var _a3;
          const publicFile = checkPublicFile(
            id2,
            environment.getTopLevelConfig()
          );
          if (publicFile) {
            return publicFile;
          }
          const atImportResolvers = getAtImportResolvers(
            environment.getTopLevelConfig()
          );
          const lang = (_a3 = CSS_LANGS_RE.exec(from)) == null ? void 0 : _a3[1];
          let resolver;
          switch (lang) {
            case "css":
            case "sss":
            case "styl":
            case "stylus":
            case void 0:
              resolver = atImportResolvers.css;
              break;
            case "sass":
            case "scss":
              resolver = atImportResolvers.sass;
              break;
            case "less":
              resolver = atImportResolvers.less;
              break;
            default:
              throw new Error(`Unknown lang: ${lang}`);
          }
          const resolved = await resolver(environment, id2, from);
          if (resolved) {
            deps.add(resolved);
            return resolved;
          }
          return id2;
        }
      },
      minify: config2.isProduction && !!config2.build.cssMinify,
      sourceMap: config2.command === "build" ? !!config2.build.sourcemap : config2.css.devSourcemap,
      analyzeDependencies: true,
      cssModules: cssModuleRE.test(id) ? ((_b = config2.css.lightningcss) == null ? void 0 : _b.cssModules) ?? true : void 0
    });
  } catch (e2) {
    e2.message = `[lightningcss] ${e2.message}`;
    if (e2.loc) {
      e2.loc = {
        file: e2.fileName.replace(NULL_BYTE_PLACEHOLDER2, "\0"),
        line: e2.loc.line,
        column: e2.loc.column - 1
        // 1-based
      };
      try {
        const code = import_node_fs2.default.readFileSync(e2.fileName, "utf-8");
        const friendlyMessage = getLightningCssErrorMessageForIeSyntaxes(code);
        if (friendlyMessage) {
          e2.message += friendlyMessage;
        }
      } catch {
      }
    }
    throw e2;
  }
  for (const warning of res.warnings) {
    let msg = `[vite:css][lightningcss] ${warning.message}`;
    msg += `
${generateCodeFrame(src2, {
      line: warning.loc.line,
      column: warning.loc.column - 1
      // 1-based
    })}`;
    environment.logger.warn(colors$1.yellow(msg));
  }
  let css = decoder.decode(res.code);
  for (const dep of res.dependencies) {
    switch (dep.type) {
      case "url": {
        let replaceUrl;
        if (skipUrlReplacer(dep.url)) {
          replaceUrl = dep.url;
        } else if (urlResolver) {
          const [newUrl, resolvedId] = await urlResolver(
            dep.url,
            dep.loc.filePath.replace(NULL_BYTE_PLACEHOLDER2, "\0")
          );
          if (newUrl.startsWith("data:") && resolvedId) {
            deps.add(resolvedId);
          }
          replaceUrl = newUrl;
        } else {
          replaceUrl = dep.url;
        }
        css = css.replace(
          dep.placeholder,
          // lightningcss always generates `url("placeholder")`
          // (`url('placeholder')`, `url(placeholder)` is not generated)
          // so escape double quotes
          () => replaceUrl.replaceAll('"', '\\"')
        );
        break;
      }
      default:
        throw new Error(`Unsupported dependency type: ${dep.type}`);
    }
  }
  let modules;
  if ("exports" in res && res.exports) {
    modules = {};
    const sortedEntries = Object.entries(res.exports).sort(
      (a, b) => a[0].localeCompare(b[0])
    );
    for (const [key, value2] of sortedEntries) {
      modules[key] = value2.name;
      for (const c of value2.composes) {
        modules[key] += " " + c.name;
      }
    }
  }
  return {
    code: css,
    map: "map" in res ? (_c = res.map) == null ? void 0 : _c.toString() : void 0,
    modules
  };
}
function getLightningCssErrorMessageForIeSyntaxes(code) {
  const commonIeMessage = ", which was used in the past to support old Internet Explorer versions. This is not a valid CSS syntax and will be ignored by modern browsers. \nWhile this is not supported by LightningCSS, you can set `css.lightningcss.errorRecovery: true` to strip these codes.";
  if (/[\s;{]\*[a-zA-Z-][\w-]+\s*:/.test(code)) {
    return ".\nThis file contains star property hack (e.g. `*zoom`)" + commonIeMessage;
  }
  if (/min-width:\s*0\\0/.test(code)) {
    return ".\nThis file contains @media zero hack (e.g. `@media (min-width: 0\\0)`)" + commonIeMessage;
  }
  return void 0;
}
var map = {
  chrome: "chrome",
  edge: "edge",
  firefox: "firefox",
  hermes: false,
  ie: "ie",
  ios: "ios_saf",
  node: false,
  opera: "opera",
  rhino: false,
  safari: "safari"
};
var esMap = {
  // https://caniuse.com/?search=es2015
  2015: ["chrome49", "edge13", "safari10", "firefox44", "opera36"],
  // https://caniuse.com/?search=es2016
  2016: ["chrome50", "edge13", "safari10", "firefox43", "opera37"],
  // https://caniuse.com/?search=es2017
  2017: ["chrome58", "edge15", "safari11", "firefox52", "opera45"],
  // https://caniuse.com/?search=es2018
  2018: ["chrome63", "edge79", "safari12", "firefox58", "opera50"],
  // https://caniuse.com/?search=es2019
  2019: ["chrome73", "edge79", "safari12.1", "firefox64", "opera60"],
  // https://caniuse.com/?search=es2020
  2020: ["chrome80", "edge80", "safari14.1", "firefox80", "opera67"],
  // https://caniuse.com/?search=es2021
  2021: ["chrome85", "edge85", "safari14.1", "firefox80", "opera71"],
  // https://caniuse.com/?search=es2022
  2022: ["chrome94", "edge94", "safari16.4", "firefox93", "opera80"],
  // https://caniuse.com/?search=es2023
  2023: ["chrome110", "edge110", "safari16.4", "opera96"]
};
var esRE = /es(\d{4})/;
var versionRE = /\d/;
var convertTargetsCache = /* @__PURE__ */ new Map();
var convertTargets = (esbuildTarget) => {
  if (!esbuildTarget) return {};
  const cached = convertTargetsCache.get(esbuildTarget);
  if (cached) return cached;
  const targets = {};
  const entriesWithoutES = arraify(esbuildTarget).flatMap((e2) => {
    const match = esRE.exec(e2);
    if (!match) return e2;
    const year = Number(match[1]);
    if (!esMap[year]) throw new Error(`Unsupported target "${e2}"`);
    return esMap[year];
  });
  for (const entry of entriesWithoutES) {
    if (entry === "esnext") continue;
    const index = entry.search(versionRE);
    if (index >= 0) {
      const browser = map[entry.slice(0, index)];
      if (browser === false) continue;
      if (browser) {
        const [major, minor = 0] = entry.slice(index).split(".").map((v) => parseInt(v, 10));
        if (!isNaN(major) && !isNaN(minor)) {
          const version3 = major << 16 | minor << 8;
          if (!targets[browser] || version3 < targets[browser]) {
            targets[browser] = version3;
          }
          continue;
        }
      }
    }
    throw new Error(`Unsupported target "${entry}"`);
  }
  convertTargetsCache.set(esbuildTarget, targets);
  return targets;
};
function resolveLibCssFilename(libOptions, root, packageCache) {
  var _a2;
  if (typeof libOptions.cssFileName === "string") {
    return `${libOptions.cssFileName}.css`;
  } else if (typeof libOptions.fileName === "string") {
    return `${libOptions.fileName}.css`;
  }
  const packageJson2 = (_a2 = findNearestMainPackageData(root, packageCache)) == null ? void 0 : _a2.data;
  const name = packageJson2 ? getPkgName(packageJson2.name) : void 0;
  if (!name)
    throw new Error(
      'Name in package.json is required if option "build.lib.cssFileName" is not provided.'
    );
  return `${name}.css`;
}
var isModernFlag = `__VITE_IS_MODERN__`;
var preloadMethod = `__vitePreload`;
var preloadMarker = `__VITE_PRELOAD__`;
var preloadHelperId = "\0vite/preload-helper.js";
var preloadMarkerRE = new RegExp(preloadMarker, "g");
var dynamicImportPrefixRE = /import\s*\(/;
var dynamicImportTreeshakenRE = /((?:\bconst\s+|\blet\s+|\bvar\s+|,\s*)(\{[^{}.=]+\})\s*=\s*await\s+import\([^)]+\))|(\(\s*await\s+import\([^)]+\)\s*\)(\??\.[\w$]+))|\bimport\([^)]+\)(\s*\.then\(\s*(?:function\s*)?\(\s*\{([^{}.=]+)\}\))/g;
function toRelativePath(filename, importer) {
  const relPath = import_node_path3.default.posix.relative(import_node_path3.default.posix.dirname(importer), filename);
  return relPath[0] === "." ? relPath : `./${relPath}`;
}
function indexOfMatchInSlice(str, reg, pos = 0) {
  reg.lastIndex = pos;
  const result = reg.exec(str);
  return (result == null ? void 0 : result.index) ?? -1;
}
function detectScriptRel() {
  const relList = typeof document !== "undefined" && document.createElement("link").relList;
  return relList && relList.supports && relList.supports("modulepreload") ? "modulepreload" : "preload";
}
function preload(baseModule, deps, importerUrl) {
  let promise = Promise.resolve();
  if (__VITE_IS_MODERN__ && deps && deps.length > 0) {
    let allSettled2 = function(promises2) {
      return Promise.all(
        promises2.map(
          (p2) => Promise.resolve(p2).then(
            (value2) => ({ status: "fulfilled", value: value2 }),
            (reason) => ({ status: "rejected", reason })
          )
        )
      );
    };
    const links = document.getElementsByTagName("link");
    const cspNonceMeta = document.querySelector(
      "meta[property=csp-nonce]"
    );
    const cspNonce = (cspNonceMeta == null ? void 0 : cspNonceMeta.nonce) || (cspNonceMeta == null ? void 0 : cspNonceMeta.getAttribute("nonce"));
    promise = allSettled2(
      deps.map((dep) => {
        dep = assetsURL(dep, importerUrl);
        if (dep in seen) return;
        seen[dep] = true;
        const isCss = dep.endsWith(".css");
        const cssSelector = isCss ? '[rel="stylesheet"]' : "";
        const isBaseRelative = !!importerUrl;
        if (isBaseRelative) {
          for (let i = links.length - 1; i >= 0; i--) {
            const link2 = links[i];
            if (link2.href === dep && (!isCss || link2.rel === "stylesheet")) {
              return;
            }
          }
        } else if (document.querySelector(`link[href="${dep}"]${cssSelector}`)) {
          return;
        }
        const link = document.createElement("link");
        link.rel = isCss ? "stylesheet" : scriptRel;
        if (!isCss) {
          link.as = "script";
        }
        link.crossOrigin = "";
        link.href = dep;
        if (cspNonce) {
          link.setAttribute("nonce", cspNonce);
        }
        document.head.appendChild(link);
        if (isCss) {
          return new Promise((res, rej) => {
            link.addEventListener("load", res);
            link.addEventListener(
              "error",
              () => rej(new Error(`Unable to preload CSS for ${dep}`))
            );
          });
        }
      })
    );
  }
  function handlePreloadError(err2) {
    const e2 = new Event("vite:preloadError", {
      cancelable: true
    });
    e2.payload = err2;
    window.dispatchEvent(e2);
    if (!e2.defaultPrevented) {
      throw err2;
    }
  }
  return promise.then((res) => {
    for (const item of res || []) {
      if (item.status !== "rejected") continue;
      handlePreloadError(item.reason);
    }
    return baseModule().catch(handlePreloadError);
  });
}
function buildImportAnalysisPlugin(config2) {
  const getInsertPreload = (environment) => environment.config.consumer === "client" && !config2.isWorker && !config2.build.lib;
  const renderBuiltUrl = config2.experimental.renderBuiltUrl;
  const isRelativeBase = config2.base === "./" || config2.base === "";
  return {
    name: "vite:build-import-analysis",
    resolveId: {
      handler(id) {
        if (id === preloadHelperId) {
          return id;
        }
      }
    },
    load: {
      handler(id) {
        if (id === preloadHelperId) {
          const { modulePreload } = this.environment.config.build;
          const scriptRel2 = modulePreload && modulePreload.polyfill ? `'modulepreload'` : `/* @__PURE__ */ (${detectScriptRel.toString()})()`;
          const assetsURL2 = renderBuiltUrl || isRelativeBase ? (
            // If `experimental.renderBuiltUrl` is used, the dependencies might be relative to the current chunk.
            // If relative base is used, the dependencies are relative to the current chunk.
            // The importerUrl is passed as third parameter to __vitePreload in this case
            `function(dep, importerUrl) { return new URL(dep, importerUrl).href }`
          ) : (
            // If the base isn't relative, then the deps are relative to the projects `outDir` and the base
            // is appended inside __vitePreload too.
            `function(dep) { return ${JSON.stringify(config2.base)}+dep }`
          );
          const preloadCode = `const scriptRel = ${scriptRel2};const assetsURL = ${assetsURL2};const seen = {};export const ${preloadMethod} = ${preload.toString()}`;
          return { code: preloadCode, moduleSideEffects: false };
        }
      }
    },
    transform: {
      async handler(source, importer) {
        var _a2, _b, _c, _d, _e;
        if (isInNodeModules$1(importer) && !dynamicImportPrefixRE.test(source)) {
          return;
        }
        await init;
        let imports = [];
        try {
          imports = parse$d(source)[0];
        } catch (_e2) {
          const e2 = _e2;
          const { message, showCodeFrame } = createParseErrorInfo(
            importer,
            source
          );
          this.error(message, showCodeFrame ? e2.idx : void 0);
        }
        if (!imports.length) {
          return null;
        }
        const insertPreload = getInsertPreload(this.environment);
        const dynamicImports = {};
        if (insertPreload) {
          let match;
          while (match = dynamicImportTreeshakenRE.exec(source)) {
            if (match[1]) {
              dynamicImports[dynamicImportTreeshakenRE.lastIndex] = {
                declaration: `const ${match[2]}`,
                names: (_a2 = match[2]) == null ? void 0 : _a2.trim()
              };
              continue;
            }
            if (match[3]) {
              let names2 = ((_b = /\.([^.?]+)/.exec(match[4])) == null ? void 0 : _b[1]) || "";
              if (names2 === "default") {
                names2 = "default: __vite_default__";
              }
              dynamicImports[dynamicImportTreeshakenRE.lastIndex - ((_c = match[4]) == null ? void 0 : _c.length) - 1] = { declaration: `const {${names2}}`, names: `{ ${names2} }` };
              continue;
            }
            const names = (_d = match[6]) == null ? void 0 : _d.trim();
            dynamicImports[dynamicImportTreeshakenRE.lastIndex - ((_e = match[5]) == null ? void 0 : _e.length)] = { declaration: `const {${names}}`, names: `{ ${names} }` };
          }
        }
        let s2;
        const str = () => s2 || (s2 = new MagicString(source));
        let needPreloadHelper = false;
        for (let index = 0; index < imports.length; index++) {
          const {
            s: start,
            e: end,
            ss: expStart,
            se: expEnd,
            d: dynamicIndex,
            a: attributeIndex
          } = imports[index];
          const isDynamicImport = dynamicIndex > -1;
          if (!isDynamicImport && attributeIndex > -1) {
            str().remove(end + 1, expEnd);
          }
          if (isDynamicImport && insertPreload && // Only preload static urls
          (source[start] === '"' || source[start] === "'" || source[start] === "`")) {
            needPreloadHelper = true;
            const { declaration, names } = dynamicImports[expEnd] || {};
            if (names) {
              str().prependLeft(
                expStart,
                `${preloadMethod}(async () => { ${declaration} = await `
              );
              str().appendRight(expEnd, `;return ${names}}`);
            } else {
              str().prependLeft(expStart, `${preloadMethod}(() => `);
            }
            str().appendRight(
              expEnd,
              `,${isModernFlag}?${preloadMarker}:void 0${renderBuiltUrl || isRelativeBase ? ",import.meta.url" : ""})`
            );
          }
        }
        if (needPreloadHelper && insertPreload && !source.includes(`const ${preloadMethod} =`)) {
          str().prepend(
            `import { ${preloadMethod} } from "${preloadHelperId}";`
          );
        }
        if (s2) {
          return {
            code: s2.toString(),
            map: this.environment.config.build.sourcemap ? s2.generateMap({ hires: "boundary" }) : null
          };
        }
      }
    },
    renderChunk(code, _, { format: format2 }) {
      if (code.indexOf(isModernFlag) > -1) {
        const re = new RegExp(isModernFlag, "g");
        const isModern = String(format2 === "es");
        const isModernWithPadding = isModern + " ".repeat(isModernFlag.length - isModern.length);
        return {
          code: code.replace(re, isModernWithPadding),
          map: null
        };
      }
      return null;
    },
    generateBundle({ format: format2 }, bundle) {
      if (format2 !== "es") {
        return;
      }
      if (!getInsertPreload(this.environment)) {
        const removedPureCssFiles = removedPureCssFilesCache.get(config2);
        if (removedPureCssFiles && removedPureCssFiles.size > 0) {
          for (const file in bundle) {
            const chunk = bundle[file];
            if (chunk.type === "chunk" && chunk.code.includes("import")) {
              const code = chunk.code;
              let imports;
              try {
                imports = parse$d(code)[0].filter((i) => i.d > -1);
              } catch (e2) {
                const loc = numberToPos(code, e2.idx);
                this.error({
                  name: e2.name,
                  message: e2.message,
                  stack: e2.stack,
                  cause: e2.cause,
                  pos: e2.idx,
                  loc: { ...loc, file: chunk.fileName },
                  frame: generateCodeFrame(code, loc)
                });
              }
              for (const imp of imports) {
                const {
                  n: name,
                  s: start,
                  e: end,
                  ss: expStart,
                  se: expEnd
                } = imp;
                let url2 = name;
                if (!url2) {
                  const rawUrl = code.slice(start, end);
                  if (rawUrl[0] === `"` && rawUrl.endsWith(`"`))
                    url2 = rawUrl.slice(1, -1);
                }
                if (!url2) continue;
                const normalizedFile = import_node_path3.default.posix.join(
                  import_node_path3.default.posix.dirname(chunk.fileName),
                  url2
                );
                if (removedPureCssFiles.has(normalizedFile)) {
                  chunk.code = chunk.code.slice(0, expStart) + `Promise.resolve({${"".padEnd(expEnd - expStart - 19, " ")}})` + chunk.code.slice(expEnd);
                }
              }
            }
          }
        }
        return;
      }
      const buildSourcemap = this.environment.config.build.sourcemap;
      const { modulePreload } = this.environment.config.build;
      for (const file in bundle) {
        const chunk = bundle[file];
        if (chunk.type === "chunk" && chunk.code.indexOf(preloadMarker) > -1) {
          const code = chunk.code;
          let imports;
          try {
            imports = parse$d(code)[0].filter((i) => i.d > -1);
          } catch (e2) {
            const loc = numberToPos(code, e2.idx);
            this.error({
              name: e2.name,
              message: e2.message,
              stack: e2.stack,
              cause: e2.cause,
              pos: e2.idx,
              loc: { ...loc, file: chunk.fileName },
              frame: generateCodeFrame(code, loc)
            });
          }
          const s2 = new MagicString(code);
          const rewroteMarkerStartPos = /* @__PURE__ */ new Set();
          const fileDeps = [];
          const addFileDep = (url2, runtime = false) => {
            const index = fileDeps.findIndex((dep) => dep.url === url2);
            if (index === -1) {
              return fileDeps.push({ url: url2, runtime }) - 1;
            } else {
              return index;
            }
          };
          if (imports.length) {
            for (let index = 0; index < imports.length; index++) {
              const {
                n: name,
                s: start,
                e: end,
                ss: expStart,
                se: expEnd
              } = imports[index];
              let url2 = name;
              if (!url2) {
                const rawUrl = code.slice(start, end);
                if (rawUrl[0] === `"` && rawUrl.endsWith(`"`))
                  url2 = rawUrl.slice(1, -1);
              }
              const deps = /* @__PURE__ */ new Set();
              let hasRemovedPureCssChunk = false;
              let normalizedFile = void 0;
              if (url2) {
                normalizedFile = import_node_path3.default.posix.join(
                  import_node_path3.default.posix.dirname(chunk.fileName),
                  url2
                );
                const ownerFilename = chunk.fileName;
                const analyzed = /* @__PURE__ */ new Set();
                const addDeps = (filename) => {
                  if (filename === ownerFilename) return;
                  if (analyzed.has(filename)) return;
                  analyzed.add(filename);
                  const chunk2 = bundle[filename];
                  if (chunk2) {
                    deps.add(chunk2.fileName);
                    if (chunk2.type === "chunk") {
                      chunk2.imports.forEach(addDeps);
                      chunk2.viteMetadata.importedCss.forEach((file2) => {
                        deps.add(file2);
                      });
                    }
                  } else {
                    const removedPureCssFiles = removedPureCssFilesCache.get(config2);
                    const chunk3 = removedPureCssFiles.get(filename);
                    if (chunk3) {
                      if (chunk3.viteMetadata.importedCss.size) {
                        chunk3.viteMetadata.importedCss.forEach((file2) => {
                          deps.add(file2);
                        });
                        hasRemovedPureCssChunk = true;
                      }
                      s2.update(expStart, expEnd, "Promise.resolve({})");
                    }
                  }
                };
                addDeps(normalizedFile);
              }
              let markerStartPos2 = indexOfMatchInSlice(
                code,
                preloadMarkerRE,
                end
              );
              if (markerStartPos2 === -1 && imports.length === 1) {
                markerStartPos2 = indexOfMatchInSlice(code, preloadMarkerRE);
              }
              if (markerStartPos2 > 0) {
                let depsArray = deps.size > 1 || // main chunk is removed
                hasRemovedPureCssChunk && deps.size > 0 ? modulePreload === false ? (
                  // CSS deps use the same mechanism as module preloads, so even if disabled,
                  // we still need to pass these deps to the preload helper in dynamic imports.
                  [...deps].filter((d2) => d2.endsWith(".css"))
                ) : [...deps] : [];
                const resolveDependencies = modulePreload ? modulePreload.resolveDependencies : void 0;
                if (resolveDependencies && normalizedFile) {
                  const cssDeps = [];
                  const otherDeps = [];
                  for (const dep of depsArray) {
                    (dep.endsWith(".css") ? cssDeps : otherDeps).push(dep);
                  }
                  depsArray = [
                    ...resolveDependencies(normalizedFile, otherDeps, {
                      hostId: file,
                      hostType: "js"
                    }),
                    ...cssDeps
                  ];
                }
                let renderedDeps;
                if (renderBuiltUrl) {
                  renderedDeps = depsArray.map((dep) => {
                    const replacement = toOutputFilePathInJS(
                      this.environment,
                      dep,
                      "asset",
                      chunk.fileName,
                      "js",
                      toRelativePath
                    );
                    if (typeof replacement === "string") {
                      return addFileDep(replacement);
                    }
                    return addFileDep(replacement.runtime, true);
                  });
                } else {
                  renderedDeps = depsArray.map(
                    (d2) => (
                      // Don't include the assets dir if the default asset file names
                      // are used, the path will be reconstructed by the import preload helper
                      isRelativeBase ? addFileDep(toRelativePath(d2, file)) : addFileDep(d2)
                    )
                  );
                }
                s2.update(
                  markerStartPos2,
                  markerStartPos2 + preloadMarker.length,
                  renderedDeps.length > 0 ? `__vite__mapDeps([${renderedDeps.join(",")}])` : `[]`
                );
                rewroteMarkerStartPos.add(markerStartPos2);
              }
            }
          }
          if (fileDeps.length > 0) {
            const fileDepsCode = `[${fileDeps.map(
              (fileDep) => fileDep.runtime ? fileDep.url : JSON.stringify(fileDep.url)
            ).join(",")}]`;
            const mapDepsCode = `const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=${fileDepsCode})))=>i.map(i=>d[i]);
`;
            if (code.startsWith("#!")) {
              s2.prependLeft(code.indexOf("\n") + 1, mapDepsCode);
            } else {
              s2.prepend(mapDepsCode);
            }
          }
          let markerStartPos = indexOfMatchInSlice(code, preloadMarkerRE);
          while (markerStartPos >= 0) {
            if (!rewroteMarkerStartPos.has(markerStartPos)) {
              s2.update(
                markerStartPos,
                markerStartPos + preloadMarker.length,
                "void 0"
              );
            }
            markerStartPos = indexOfMatchInSlice(
              code,
              preloadMarkerRE,
              markerStartPos + preloadMarker.length
            );
          }
          if (s2.hasChanged()) {
            chunk.code = s2.toString();
            if (buildSourcemap && chunk.map) {
              const nextMap = s2.generateMap({
                source: chunk.fileName,
                hires: "boundary"
              });
              const map2 = combineSourcemaps(chunk.fileName, [
                nextMap,
                chunk.map
              ]);
              map2.toUrl = () => genSourceMapUrl(map2);
              const originalDebugId = chunk.map.debugId;
              chunk.map = map2;
              if (buildSourcemap === "inline") {
                chunk.code = chunk.code.replace(
                  convertSourceMap.mapFileCommentRegex,
                  ""
                );
                chunk.code += `
//# sourceMappingURL=${genSourceMapUrl(map2)}`;
              } else {
                if (originalDebugId) {
                  map2.debugId = originalDebugId;
                }
                const mapAsset = bundle[chunk.fileName + ".map"];
                if (mapAsset && mapAsset.type === "asset") {
                  mapAsset.source = map2.toString();
                }
              }
            }
          }
        }
      }
    }
  };
}
function ssrManifestPlugin() {
  const getSsrManifest = perEnvironmentState(() => {
    return {};
  });
  return {
    name: "vite:ssr-manifest",
    applyToEnvironment(environment) {
      return !!environment.config.build.ssrManifest;
    },
    generateBundle(_options, bundle) {
      const config2 = this.environment.config;
      const ssrManifest = getSsrManifest(this);
      const { base } = config2;
      for (const file in bundle) {
        const chunk = bundle[file];
        if (chunk.type === "chunk") {
          for (const id in chunk.modules) {
            const normalizedId = normalizePath$3((0, import_node_path3.relative)(config2.root, id));
            const mappedChunks = ssrManifest[normalizedId] ?? (ssrManifest[normalizedId] = []);
            if (!chunk.isEntry) {
              mappedChunks.push(joinUrlSegments(base, chunk.fileName));
              chunk.viteMetadata.importedCss.forEach((file2) => {
                mappedChunks.push(joinUrlSegments(base, file2));
              });
            }
            chunk.viteMetadata.importedAssets.forEach((file2) => {
              mappedChunks.push(joinUrlSegments(base, file2));
            });
          }
          if (chunk.code.includes(preloadMethod)) {
            const code = chunk.code;
            let imports = [];
            try {
              imports = parse$d(code)[0].filter((i) => i.n && i.d > -1);
            } catch (_e) {
              const e2 = _e;
              const loc = numberToPos(code, e2.idx);
              this.error({
                name: e2.name,
                message: e2.message,
                stack: e2.stack,
                cause: e2.cause,
                pos: e2.idx,
                loc: { ...loc, file: chunk.fileName },
                frame: generateCodeFrame(code, loc)
              });
            }
            if (imports.length) {
              for (let index = 0; index < imports.length; index++) {
                const { s: start, e: end, n: name } = imports[index];
                const url2 = code.slice(start, end);
                const deps = [];
                const ownerFilename = chunk.fileName;
                const analyzed = /* @__PURE__ */ new Set();
                const addDeps = (filename) => {
                  if (filename === ownerFilename) return;
                  if (analyzed.has(filename)) return;
                  analyzed.add(filename);
                  const chunk2 = bundle[filename];
                  if (chunk2) {
                    chunk2.viteMetadata.importedCss.forEach((file2) => {
                      deps.push(joinUrlSegments(base, file2));
                    });
                    chunk2.imports.forEach(addDeps);
                  }
                };
                const normalizedFile = normalizePath$3(
                  (0, import_node_path3.join)((0, import_node_path3.dirname)(chunk.fileName), url2.slice(1, -1))
                );
                addDeps(normalizedFile);
                ssrManifest[(0, import_node_path3.basename)(name)] = deps;
              }
            }
          }
        }
      }
      this.emitFile({
        fileName: typeof config2.build.ssrManifest === "string" ? config2.build.ssrManifest : ".vite/ssr-manifest.json",
        type: "asset",
        source: JSON.stringify(sortObjectKeys(ssrManifest), void 0, 2)
      });
    }
  };
}
function buildLoadFallbackPlugin() {
  return {
    name: "vite:load-fallback",
    load: {
      async handler(id) {
        try {
          const cleanedId = cleanUrl2(id);
          const content = await import_promises.default.readFile(cleanedId, "utf-8");
          this.addWatchFile(cleanedId);
          return content;
        } catch {
          const content = await import_promises.default.readFile(id, "utf-8");
          this.addWatchFile(id);
          return content;
        }
      }
    }
  };
}
function completeSystemWrapPlugin() {
  const SystemJSWrapRE = /System.register\(.*?(\(exports\)|\(\))/g;
  return {
    name: "vite:force-systemjs-wrap-complete",
    renderChunk(code, _chunk, opts) {
      if (opts.format === "system") {
        return {
          code: code.replace(
            SystemJSWrapRE,
            (s2, s1) => s2.replace(s1, "(exports, module)")
          ),
          map: null
        };
      }
    }
  };
}
var buildEnvironmentOptionsDefaults = Object.freeze({
  target: "modules",
  /** @deprecated */
  polyfillModulePreload: true,
  modulePreload: true,
  outDir: "dist",
  assetsDir: "assets",
  assetsInlineLimit: DEFAULT_ASSETS_INLINE_LIMIT,
  // cssCodeSplit
  // cssTarget
  // cssMinify
  sourcemap: false,
  // minify
  terserOptions: {},
  rollupOptions: {},
  commonjsOptions: {
    include: [/node_modules/],
    extensions: [".js", ".cjs"]
  },
  dynamicImportVarsOptions: {
    warnOnError: true,
    exclude: [/node_modules/]
  },
  write: true,
  emptyOutDir: null,
  copyPublicDir: true,
  manifest: false,
  lib: false,
  // ssr
  ssrManifest: false,
  ssrEmitAssets: false,
  // emitAssets
  reportCompressedSize: true,
  chunkSizeWarningLimit: 500,
  watch: null
  // createEnvironment
});
function resolveBuildEnvironmentOptions(raw, logger, consumer) {
  const deprecatedPolyfillModulePreload = raw.polyfillModulePreload;
  const { polyfillModulePreload, ...rest } = raw;
  raw = rest;
  if (deprecatedPolyfillModulePreload !== void 0) {
    logger.warn(
      "polyfillModulePreload is deprecated. Use modulePreload.polyfill instead."
    );
  }
  if (deprecatedPolyfillModulePreload === false && raw.modulePreload === void 0) {
    raw.modulePreload = { polyfill: false };
  }
  const merged = mergeWithDefaults(
    {
      ...buildEnvironmentOptionsDefaults,
      cssCodeSplit: !raw.lib,
      minify: consumer === "server" ? false : "esbuild",
      ssr: consumer === "server",
      emitAssets: consumer === "client",
      createEnvironment: (name, config2) => new BuildEnvironment(name, config2)
    },
    raw
  );
  if (merged.target === "modules") {
    merged.target = ESBUILD_MODULES_TARGET;
  }
  if (merged.minify === "false") {
    merged.minify = false;
  } else if (merged.minify === true) {
    merged.minify = "esbuild";
  }
  const defaultModulePreload = {
    polyfill: true
  };
  const resolved = {
    ...merged,
    cssTarget: merged.cssTarget ?? merged.target,
    cssMinify: merged.cssMinify ?? (consumer === "server" ? "esbuild" : !!merged.minify),
    // Resolve to false | object
    modulePreload: merged.modulePreload === false ? false : merged.modulePreload === true ? defaultModulePreload : {
      ...defaultModulePreload,
      ...merged.modulePreload
    }
  };
  return resolved;
}
async function resolveBuildPlugins(config2) {
  return {
    pre: [
      completeSystemWrapPlugin(),
      perEnvironmentPlugin("commonjs", (environment) => {
        const { commonjsOptions } = environment.config.build;
        const usePluginCommonjs = !Array.isArray(commonjsOptions.include) || commonjsOptions.include.length !== 0;
        return usePluginCommonjs ? commonjs(commonjsOptions) : false;
      }),
      dataURIPlugin(),
      perEnvironmentPlugin(
        "vite:rollup-options-plugins",
        async (environment) => (await asyncFlatten(
          arraify(environment.config.build.rollupOptions.plugins)
        )).filter(Boolean)
      ),
      ...config2.isWorker ? [webWorkerPostPlugin()] : []
    ],
    post: [
      buildImportAnalysisPlugin(config2),
      buildEsbuildPlugin(),
      terserPlugin(config2),
      ...!config2.isWorker ? [manifestPlugin(), ssrManifestPlugin(), buildReporterPlugin(config2)] : [],
      buildLoadFallbackPlugin()
    ]
  };
}
async function build(inlineConfig = {}) {
  const builder = await createBuilder(inlineConfig, true);
  const environment = Object.values(builder.environments)[0];
  if (!environment) throw new Error("No environment found");
  return builder.build(environment);
}
function resolveConfigToBuild(inlineConfig = {}, patchConfig, patchPlugins) {
  return resolveConfig(
    inlineConfig,
    "build",
    "production",
    "production",
    false,
    patchConfig,
    patchPlugins
  );
}
async function buildEnvironment(environment) {
  var _a2;
  const { root, packageCache } = environment.config;
  const options2 = environment.config.build;
  const libOptions = options2.lib;
  const { logger } = environment;
  const ssr = environment.config.consumer === "server";
  logger.info(
    colors$1.cyan(
      `vite v${VERSION} ${colors$1.green(
        `building ${ssr ? `SSR bundle ` : ``}for ${environment.config.mode}...`
      )}`
    )
  );
  const resolve4 = (p2) => import_node_path3.default.resolve(root, p2);
  const input = libOptions ? options2.rollupOptions.input || (typeof libOptions.entry === "string" ? resolve4(libOptions.entry) : Array.isArray(libOptions.entry) ? libOptions.entry.map(resolve4) : Object.fromEntries(
    Object.entries(libOptions.entry).map(([alias2, file]) => [
      alias2,
      resolve4(file)
    ])
  )) : typeof options2.ssr === "string" ? resolve4(options2.ssr) : options2.rollupOptions.input || resolve4("index.html");
  if (ssr && typeof input === "string" && input.endsWith(".html")) {
    throw new Error(
      `rollupOptions.input should not be an html file when building for SSR. Please specify a dedicated SSR entry.`
    );
  }
  if (options2.cssCodeSplit === false) {
    const inputs = typeof input === "string" ? [input] : Array.isArray(input) ? input : Object.values(input);
    if (inputs.some((input2) => input2.endsWith(".css"))) {
      throw new Error(
        `When "build.cssCodeSplit: false" is set, "rollupOptions.input" should not include CSS files.`
      );
    }
  }
  const outDir = resolve4(options2.outDir);
  const plugins2 = environment.plugins.map(
    (p2) => injectEnvironmentAndFilterToHooks(environment, p2)
  );
  const rollupOptions = {
    preserveEntrySignatures: ssr ? "allow-extension" : libOptions ? "strict" : false,
    cache: options2.watch ? void 0 : false,
    ...options2.rollupOptions,
    output: options2.rollupOptions.output,
    input,
    plugins: plugins2,
    external: options2.rollupOptions.external,
    onLog(level, log2) {
      onRollupLog(level, log2, environment);
    }
  };
  function extractStack(e2) {
    const { stack, name = "Error", message } = e2;
    if (!stack) {
      return stack;
    }
    const expectedPrefix = `${name}: ${message}
`;
    if (stack.startsWith(expectedPrefix)) {
      return stack.slice(expectedPrefix.length);
    }
    return stack;
  }
  const normalizeCodeFrame = (frame) => {
    const trimmedPadding = frame.replace(/^\n|\n$/g, "");
    return `
${trimmedPadding}
`;
  };
  const enhanceRollupError = (e2) => {
    const stackOnly = extractStack(e2);
    let msg = colors$1.red((e2.plugin ? `[${e2.plugin}] ` : "") + e2.message);
    if (e2.loc && e2.loc.file && e2.loc.file !== e2.id) {
      msg += `
file: ${colors$1.cyan(
        `${e2.loc.file}:${e2.loc.line}:${e2.loc.column}` + (e2.id ? ` (${e2.id})` : "")
      )}`;
    } else if (e2.id) {
      msg += `
file: ${colors$1.cyan(
        e2.id + (e2.loc ? `:${e2.loc.line}:${e2.loc.column}` : "")
      )}`;
    }
    if (e2.frame) {
      msg += `
` + colors$1.yellow(normalizeCodeFrame(e2.frame));
    }
    e2.message = msg;
    if (stackOnly !== void 0) {
      e2.stack = `${e2.message}
${stackOnly}`;
    }
  };
  const outputBuildError = (e2) => {
    enhanceRollupError(e2);
    clearLine();
    logger.error(e2.message, { error: e2 });
  };
  const isSsrTargetWebworkerEnvironment = environment.name === "ssr" && ((_a2 = environment.getTopLevelConfig().ssr) == null ? void 0 : _a2.target) === "webworker";
  let bundle;
  let startTime;
  try {
    const buildOutputOptions = (output = {}) => {
      var _a3;
      if (output.output) {
        logger.warn(
          `You've set "rollupOptions.output.output" in your config. This is deprecated and will override all Vite.js default output options. Please use "rollupOptions.output" instead.`
        );
      }
      if (output.file) {
        throw new Error(
          `Vite does not support "rollupOptions.output.file". Please use "rollupOptions.output.dir" and "rollupOptions.output.entryFileNames" instead.`
        );
      }
      if (output.sourcemap) {
        logger.warnOnce(
          colors$1.yellow(
            `Vite does not support "rollupOptions.output.sourcemap". Please use "build.sourcemap" instead.`
          )
        );
      }
      const format2 = output.format || "es";
      const jsExt = ssr && !isSsrTargetWebworkerEnvironment || libOptions ? resolveOutputJsExtension(
        format2,
        (_a3 = findNearestPackageData(root, packageCache)) == null ? void 0 : _a3.data.type
      ) : "js";
      return {
        dir: outDir,
        // Default format is 'es' for regular and for SSR builds
        format: format2,
        exports: "auto",
        sourcemap: options2.sourcemap,
        name: libOptions ? libOptions.name : void 0,
        hoistTransitiveImports: libOptions ? false : void 0,
        // es2015 enables `generatedCode.symbols`
        // - #764 add `Symbol.toStringTag` when build es module into cjs chunk
        // - #1048 add `Symbol.toStringTag` for module default export
        generatedCode: "es2015",
        entryFileNames: ssr ? `[name].${jsExt}` : libOptions ? ({ name }) => resolveLibFilename(
          libOptions,
          format2,
          name,
          root,
          jsExt,
          packageCache
        ) : import_node_path3.default.posix.join(options2.assetsDir, `[name]-[hash].${jsExt}`),
        chunkFileNames: libOptions ? `[name]-[hash].${jsExt}` : import_node_path3.default.posix.join(options2.assetsDir, `[name]-[hash].${jsExt}`),
        assetFileNames: libOptions ? `[name].[ext]` : import_node_path3.default.posix.join(options2.assetsDir, `[name]-[hash].[ext]`),
        inlineDynamicImports: output.format === "umd" || output.format === "iife" || isSsrTargetWebworkerEnvironment && (typeof input === "string" || Object.keys(input).length === 1),
        ...output
      };
    };
    const outputs = resolveBuildOutputs(
      options2.rollupOptions.output,
      libOptions,
      logger
    );
    const normalizedOutputs = [];
    if (Array.isArray(outputs)) {
      for (const resolvedOutput of outputs) {
        normalizedOutputs.push(buildOutputOptions(resolvedOutput));
      }
    } else {
      normalizedOutputs.push(buildOutputOptions(outputs));
    }
    const resolvedOutDirs = getResolvedOutDirs(
      root,
      options2.outDir,
      options2.rollupOptions.output
    );
    const emptyOutDir = resolveEmptyOutDir(
      options2.emptyOutDir,
      root,
      resolvedOutDirs,
      logger
    );
    if (options2.watch) {
      logger.info(colors$1.cyan(`
watching for file changes...`));
      const resolvedChokidarOptions = resolveChokidarOptions(
        options2.watch.chokidar,
        resolvedOutDirs,
        emptyOutDir,
        environment.config.cacheDir
      );
      const { watch: watch2 } = await import("./rollup-XUJ5LW7P.js");
      const watcher = watch2({
        ...rollupOptions,
        output: normalizedOutputs,
        watch: {
          ...options2.watch,
          chokidar: resolvedChokidarOptions
        }
      });
      watcher.on("event", (event) => {
        if (event.code === "BUNDLE_START") {
          logger.info(colors$1.cyan(`
build started...`));
          if (options2.write) {
            prepareOutDir(resolvedOutDirs, emptyOutDir, environment);
          }
        } else if (event.code === "BUNDLE_END") {
          event.result.close();
          logger.info(colors$1.cyan(`built in ${event.duration}ms.`));
        } else if (event.code === "ERROR") {
          outputBuildError(event.error);
        }
      });
      return watcher;
    }
    const { rollup } = await import("./rollup-XUJ5LW7P.js");
    startTime = Date.now();
    bundle = await rollup(rollupOptions);
    if (options2.write) {
      prepareOutDir(resolvedOutDirs, emptyOutDir, environment);
    }
    const res = [];
    for (const output of normalizedOutputs) {
      res.push(await bundle[options2.write ? "write" : "generate"](output));
    }
    logger.info(
      `${colors$1.green(`✓ built in ${displayTime(Date.now() - startTime)}`)}`
    );
    return Array.isArray(outputs) ? res : res[0];
  } catch (e2) {
    enhanceRollupError(e2);
    clearLine();
    if (startTime) {
      logger.error(
        `${colors$1.red("✗")} Build failed in ${displayTime(Date.now() - startTime)}`
      );
      startTime = void 0;
    }
    throw e2;
  } finally {
    if (bundle) await bundle.close();
  }
}
function prepareOutDir(outDirs, emptyOutDir, environment) {
  const { publicDir } = environment.config;
  const outDirsArray = [...outDirs];
  for (const outDir of outDirs) {
    if (emptyOutDir !== false && import_node_fs2.default.existsSync(outDir)) {
      const skipDirs = outDirsArray.map((dir) => {
        const relative2 = import_node_path3.default.relative(outDir, dir);
        if (relative2 && !relative2.startsWith("..") && !import_node_path3.default.isAbsolute(relative2)) {
          return relative2;
        }
        return "";
      }).filter(Boolean);
      emptyDir(outDir, [...skipDirs, ".git"]);
    }
    if (environment.config.build.copyPublicDir && publicDir && import_node_fs2.default.existsSync(publicDir)) {
      if (!areSeparateFolders(outDir, publicDir)) {
        environment.logger.warn(
          colors$1.yellow(
            `
${colors$1.bold(
              `(!)`
            )} The public directory feature may not work correctly. outDir ${colors$1.white(
              colors$1.dim(outDir)
            )} and publicDir ${colors$1.white(
              colors$1.dim(publicDir)
            )} are not separate folders.
`
          )
        );
      }
      copyDir(publicDir, outDir);
    }
  }
}
function resolveOutputJsExtension(format2, type = "commonjs") {
  if (type === "module") {
    return format2 === "cjs" || format2 === "umd" ? "cjs" : "js";
  } else {
    return format2 === "es" ? "mjs" : "js";
  }
}
function resolveLibFilename(libOptions, format2, entryName, root, extension2, packageCache) {
  var _a2;
  if (typeof libOptions.fileName === "function") {
    return libOptions.fileName(format2, entryName);
  }
  const packageJson2 = (_a2 = findNearestMainPackageData(root, packageCache)) == null ? void 0 : _a2.data;
  const name = libOptions.fileName || (packageJson2 && typeof libOptions.entry === "string" ? getPkgName(packageJson2.name) : entryName);
  if (!name)
    throw new Error(
      'Name in package.json is required if option "build.lib.fileName" is not provided.'
    );
  extension2 ?? (extension2 = resolveOutputJsExtension(format2, packageJson2 == null ? void 0 : packageJson2.type));
  if (format2 === "cjs" || format2 === "es") {
    return `${name}.${extension2}`;
  }
  return `${name}.${format2}.${extension2}`;
}
function resolveBuildOutputs(outputs, libOptions, logger) {
  if (libOptions) {
    const libHasMultipleEntries = typeof libOptions.entry !== "string" && Object.values(libOptions.entry).length > 1;
    const libFormats = libOptions.formats || (libHasMultipleEntries ? ["es", "cjs"] : ["es", "umd"]);
    if (!Array.isArray(outputs)) {
      if (libFormats.includes("umd") || libFormats.includes("iife")) {
        if (libHasMultipleEntries) {
          throw new Error(
            'Multiple entry points are not supported when output formats include "umd" or "iife".'
          );
        }
        if (!libOptions.name) {
          throw new Error(
            'Option "build.lib.name" is required when output formats include "umd" or "iife".'
          );
        }
      }
      return libFormats.map((format2) => ({ ...outputs, format: format2 }));
    }
    if (libOptions.formats) {
      logger.warn(
        colors$1.yellow(
          '"build.lib.formats" will be ignored because "build.rollupOptions.output" is already an array format.'
        )
      );
    }
    outputs.forEach((output) => {
      if ((output.format === "umd" || output.format === "iife") && !output.name) {
        throw new Error(
          'Entries in "build.rollupOptions.output" must specify "name" when the format is "umd" or "iife".'
        );
      }
    });
  }
  return outputs;
}
var warningIgnoreList = [`CIRCULAR_DEPENDENCY`, `THIS_IS_UNDEFINED`];
var dynamicImportWarningIgnoreList = [
  `Unsupported expression`,
  `statically analyzed`
];
function clearLine() {
  const tty = process.stdout.isTTY && !process.env.CI;
  if (tty) {
    process.stdout.clearLine(0);
    process.stdout.cursorTo(0);
  }
}
function onRollupLog(level, log2, environment) {
  var _a2, _b;
  const debugLogger = createDebugger("vite:build");
  const viteLog = (logLeveling, rawLogging) => {
    const logging = typeof rawLogging === "object" ? rawLogging : { message: rawLogging };
    if (logging.code === "UNRESOLVED_IMPORT") {
      const id = logging.id;
      const exporter = logging.exporter;
      if (!id || !id.endsWith("?commonjs-external")) {
        throw new Error(
          `[vite]: Rollup failed to resolve import "${exporter}" from "${id}".
This is most likely unintended because it can break your application at runtime.
If you do want to externalize this module explicitly add it to
\`build.rollupOptions.external\``
        );
      }
    }
    if (logLeveling === "warn") {
      if (logging.plugin === "rollup-plugin-dynamic-import-variables" && dynamicImportWarningIgnoreList.some(
        (msg) => logging.message.includes(msg)
      )) {
        return;
      }
      if (warningIgnoreList.includes(logging.code)) {
        return;
      }
    }
    switch (logLeveling) {
      case "info":
        environment.logger.info(logging.message);
        return;
      case "warn":
        environment.logger.warn(colors$1.yellow(logging.message));
        return;
      case "error":
        environment.logger.error(colors$1.red(logging.message));
        return;
      case "debug":
        debugLogger == null ? void 0 : debugLogger(logging.message);
        return;
      default:
        environment.logger.info(logging.message);
        return;
    }
  };
  clearLine();
  const userOnLog = (_a2 = environment.config.build.rollupOptions) == null ? void 0 : _a2.onLog;
  const userOnWarn = (_b = environment.config.build.rollupOptions) == null ? void 0 : _b.onwarn;
  if (userOnLog) {
    if (userOnWarn) {
      const normalizedUserOnWarn = normalizeUserOnWarn(userOnWarn, viteLog);
      userOnLog(level, log2, normalizedUserOnWarn);
    } else {
      userOnLog(level, log2, viteLog);
    }
  } else if (userOnWarn) {
    const normalizedUserOnWarn = normalizeUserOnWarn(userOnWarn, viteLog);
    normalizedUserOnWarn(level, log2);
  } else {
    viteLog(level, log2);
  }
}
function normalizeUserOnWarn(userOnWarn, defaultHandler) {
  return (logLevel, logging) => {
    if (logLevel === "warn") {
      userOnWarn(
        normalizeLog(logging),
        (log2) => defaultHandler("warn", typeof log2 === "function" ? log2() : log2)
      );
    } else {
      defaultHandler(logLevel, logging);
    }
  };
}
var normalizeLog = (log2) => typeof log2 === "string" ? { message: log2 } : log2;
function resolveUserExternal(user, id, parentId, isResolved) {
  if (typeof user === "function") {
    return user(id, parentId, isResolved);
  } else if (Array.isArray(user)) {
    return user.some((test) => isExternal(id, test));
  } else {
    return isExternal(id, user);
  }
}
function isExternal(id, test) {
  if (typeof test === "string") {
    return id === test;
  } else {
    return test.test(id);
  }
}
function injectEnvironmentAndFilterToHooks(environment, plugin) {
  const { resolveId, load: load2, transform: transform2 } = plugin;
  const clone2 = { ...plugin };
  for (const hook of Object.keys(clone2)) {
    switch (hook) {
      case "resolveId":
        clone2[hook] = wrapEnvironmentAndFilterResolveId(environment, resolveId);
        break;
      case "load":
        clone2[hook] = wrapEnvironmentAndFilterLoad(environment, load2);
        break;
      case "transform":
        clone2[hook] = wrapEnvironmentAndFilterTransform(environment, transform2);
        break;
      default:
        if (ROLLUP_HOOKS.includes(hook)) {
          clone2[hook] = wrapEnvironmentHook(environment, clone2[hook]);
        }
        break;
    }
  }
  return clone2;
}
function wrapEnvironmentAndFilterResolveId(environment, hook) {
  var _a2;
  if (!hook) return;
  const rawIdFilter = typeof hook === "object" ? (_a2 = hook.filter) == null ? void 0 : _a2.id : void 0;
  const idFilter = rawIdFilter ? createIdFilter(rawIdFilter) : void 0;
  const fn = getHookHandler(hook);
  const handler = function(id, importer, options2) {
    if (idFilter && !idFilter(id)) {
      return;
    }
    return fn.call(
      injectEnvironmentInContext(this, environment),
      id,
      importer,
      injectSsrFlag(options2, environment)
    );
  };
  if ("handler" in hook) {
    return {
      ...hook,
      handler
    };
  } else {
    return handler;
  }
}
function wrapEnvironmentAndFilterLoad(environment, hook) {
  var _a2;
  if (!hook) return;
  const rawIdFilter = typeof hook === "object" ? (_a2 = hook.filter) == null ? void 0 : _a2.id : void 0;
  const idFilter = rawIdFilter ? createIdFilter(rawIdFilter) : void 0;
  const fn = getHookHandler(hook);
  const handler = function(id, ...args) {
    if (idFilter && !idFilter(id)) {
      return;
    }
    return fn.call(
      injectEnvironmentInContext(this, environment),
      id,
      injectSsrFlag(args[0], environment)
    );
  };
  if ("handler" in hook) {
    return {
      ...hook,
      handler
    };
  } else {
    return handler;
  }
}
function wrapEnvironmentAndFilterTransform(environment, hook) {
  if (!hook) return;
  const filters = typeof hook === "object" ? hook.filter : void 0;
  const filter2 = filters ? createFilterForTransform(filters.id, filters.code) : void 0;
  const fn = getHookHandler(hook);
  const handler = function(code, importer, ...args) {
    if (filter2 && !filter2(importer, code)) {
      return;
    }
    return fn.call(
      injectEnvironmentInContext(this, environment),
      code,
      importer,
      injectSsrFlag(args[0], environment)
    );
  };
  if ("handler" in hook) {
    return {
      ...hook,
      handler
    };
  } else {
    return handler;
  }
}
function wrapEnvironmentHook(environment, hook) {
  if (!hook) return;
  const fn = getHookHandler(hook);
  if (typeof fn !== "function") return hook;
  const handler = function(...args) {
    return fn.call(injectEnvironmentInContext(this, environment), ...args);
  };
  if ("handler" in hook) {
    return {
      ...hook,
      handler
    };
  } else {
    return handler;
  }
}
function injectEnvironmentInContext(context, environment) {
  context.environment ?? (context.environment = environment);
  return context;
}
function injectSsrFlag(options2, environment) {
  const ssr = environment ? environment.config.consumer === "server" : true;
  return { ...options2 ?? {}, ssr };
}
var needsEscapeRegEx = /[\n\r'\\\u2028\u2029]/;
var quoteNewlineRegEx = /([\n\r'\u2028\u2029])/g;
var backSlashRegEx = /\\/g;
function escapeId(id) {
  if (!needsEscapeRegEx.test(id)) return id;
  return id.replace(backSlashRegEx, "\\\\").replace(quoteNewlineRegEx, "\\$1");
}
var getResolveUrl = (path22, URL2 = "URL") => `new ${URL2}(${path22}).href`;
var getRelativeUrlFromDocument = (relativePath, umd = false) => getResolveUrl(
  `'${escapeId(partialEncodeURIPath(relativePath))}', ${umd ? `typeof document === 'undefined' ? location.href : ` : ""}document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT' && document.currentScript.src || document.baseURI`
);
var getFileUrlFromFullPath = (path22) => `require('u' + 'rl').pathToFileURL(${path22}).href`;
var getFileUrlFromRelativePath = (path22) => getFileUrlFromFullPath(`__dirname + '/${escapeId(path22)}'`);
var relativeUrlMechanisms = {
  amd: (relativePath) => {
    if (relativePath[0] !== ".") relativePath = "./" + relativePath;
    return getResolveUrl(
      `require.toUrl('${escapeId(relativePath)}'), document.baseURI`
    );
  },
  cjs: (relativePath) => `(typeof document === 'undefined' ? ${getFileUrlFromRelativePath(
    relativePath
  )} : ${getRelativeUrlFromDocument(relativePath)})`,
  es: (relativePath) => getResolveUrl(
    `'${escapeId(partialEncodeURIPath(relativePath))}', import.meta.url`
  ),
  iife: (relativePath) => getRelativeUrlFromDocument(relativePath),
  // NOTE: make sure rollup generate `module` params
  system: (relativePath) => getResolveUrl(
    `'${escapeId(partialEncodeURIPath(relativePath))}', module.meta.url`
  ),
  umd: (relativePath) => `(typeof document === 'undefined' && typeof location === 'undefined' ? ${getFileUrlFromRelativePath(
    relativePath
  )} : ${getRelativeUrlFromDocument(relativePath, true)})`
};
var customRelativeUrlMechanisms = {
  ...relativeUrlMechanisms,
  "worker-iife": (relativePath) => getResolveUrl(
    `'${escapeId(partialEncodeURIPath(relativePath))}', self.location.href`
  )
};
function toOutputFilePathInJS(environment, filename, type, hostId, hostType, toRelative) {
  const { experimental, base, decodedBase } = environment.config;
  const ssr = environment.config.consumer === "server";
  const { renderBuiltUrl } = experimental;
  let relative2 = base === "" || base === "./";
  if (renderBuiltUrl) {
    const result = renderBuiltUrl(filename, {
      hostId,
      hostType,
      type,
      ssr
    });
    if (typeof result === "object") {
      if (result.runtime) {
        return { runtime: result.runtime };
      }
      if (typeof result.relative === "boolean") {
        relative2 = result.relative;
      }
    } else if (result) {
      return result;
    }
  }
  if (relative2 && !ssr) {
    return toRelative(filename, hostId);
  }
  return joinUrlSegments(decodedBase, filename);
}
function createToImportMetaURLBasedRelativeRuntime(format2, isWorker) {
  const formatLong = isWorker && format2 === "iife" ? "worker-iife" : format2;
  const toRelativePath2 = customRelativeUrlMechanisms[formatLong];
  return (filename, importer) => ({
    runtime: toRelativePath2(
      import_node_path3.default.posix.relative(import_node_path3.default.dirname(importer), filename)
    )
  });
}
function toOutputFilePathWithoutRuntime(filename, type, hostId, hostType, config2, toRelative) {
  const { renderBuiltUrl } = config2.experimental;
  let relative2 = config2.base === "" || config2.base === "./";
  if (renderBuiltUrl) {
    const result = renderBuiltUrl(filename, {
      hostId,
      hostType,
      type,
      ssr: !!config2.build.ssr
    });
    if (typeof result === "object") {
      if (result.runtime) {
        throw new Error(
          `{ runtime: "${result.runtime}" } is not supported for assets in ${hostType} files: ${filename}`
        );
      }
      if (typeof result.relative === "boolean") {
        relative2 = result.relative;
      }
    } else if (result) {
      return result;
    }
  }
  if (relative2 && !config2.build.ssr) {
    return toRelative(filename, hostId);
  } else {
    return joinUrlSegments(config2.decodedBase, filename);
  }
}
var toOutputFilePathInCss = toOutputFilePathWithoutRuntime;
var toOutputFilePathInHtml = toOutputFilePathWithoutRuntime;
function areSeparateFolders(a, b) {
  const na = normalizePath$3(a);
  const nb = normalizePath$3(b);
  return na !== nb && !na.startsWith(withTrailingSlash(nb)) && !nb.startsWith(withTrailingSlash(na));
}
var BuildEnvironment = class extends BaseEnvironment {
  constructor(name, config2, setup) {
    let options2 = config2.environments[name] ?? getDefaultResolvedEnvironmentOptions(config2);
    if (setup == null ? void 0 : setup.options) {
      options2 = mergeConfig(
        options2,
        setup.options
      );
    }
    super(name, config2, options2);
    __publicField(this, "mode", "build");
  }
  async init() {
    if (this._initiated) {
      return;
    }
    this._initiated = true;
    this._plugins = await resolveEnvironmentPlugins(this);
  }
};
async function defaultBuildApp(builder) {
  for (const environment of Object.values(builder.environments)) {
    await builder.build(environment);
  }
}
var builderOptionsDefaults = Object.freeze({
  sharedConfigBuild: false,
  sharedPlugins: false
  // buildApp
});
function resolveBuilderOptions(options2) {
  if (!options2) return;
  return mergeWithDefaults(
    { ...builderOptionsDefaults, buildApp: defaultBuildApp },
    options2
  );
}
async function createBuilder(inlineConfig = {}, useLegacyBuilder = false) {
  const patchConfig = (resolved) => {
    if (!(useLegacyBuilder ?? !resolved.builder)) return;
    const environmentName = resolved.build.ssr ? "ssr" : "client";
    resolved.build = {
      ...resolved.environments[environmentName].build
    };
  };
  const config2 = await resolveConfigToBuild(inlineConfig, patchConfig);
  useLegacyBuilder ?? (useLegacyBuilder = !config2.builder);
  const configBuilder = config2.builder ?? resolveBuilderOptions({});
  const environments = {};
  const builder = {
    environments,
    config: config2,
    async buildApp() {
      return configBuilder.buildApp(builder);
    },
    async build(environment) {
      return buildEnvironment(environment);
    }
  };
  async function setupEnvironment(name, config22) {
    const environment = await config22.build.createEnvironment(name, config22);
    await environment.init();
    environments[name] = environment;
  }
  if (useLegacyBuilder) {
    await setupEnvironment(config2.build.ssr ? "ssr" : "client", config2);
  } else {
    for (const environmentName of Object.keys(config2.environments)) {
      let environmentConfig = config2;
      if (!configBuilder.sharedConfigBuild) {
        const patchConfig2 = (resolved) => {
          resolved.build = {
            ...resolved.environments[environmentName].build
          };
        };
        const patchPlugins = (resolvedPlugins) => {
          let j = 0;
          for (let i = 0; i < resolvedPlugins.length; i++) {
            const environmentPlugin = resolvedPlugins[i];
            if (configBuilder.sharedPlugins || environmentPlugin.sharedDuringBuild) {
              for (let k = j; k < config2.plugins.length; k++) {
                if (environmentPlugin.name === config2.plugins[k].name) {
                  resolvedPlugins[i] = config2.plugins[k];
                  j = k + 1;
                  break;
                }
              }
            }
          }
        };
        environmentConfig = await resolveConfigToBuild(
          inlineConfig,
          patchConfig2,
          patchPlugins
        );
      }
      await setupEnvironment(environmentName, environmentConfig);
    }
  }
  return builder;
}
var build$1 = {
  __proto__: null,
  BuildEnvironment,
  build,
  buildEnvironmentOptionsDefaults,
  builderOptionsDefaults,
  createBuilder,
  createToImportMetaURLBasedRelativeRuntime,
  injectEnvironmentAndFilterToHooks,
  onRollupLog,
  resolveBuildEnvironmentOptions,
  resolveBuildOutputs,
  resolveBuildPlugins,
  resolveBuilderOptions,
  resolveLibFilename,
  resolveUserExternal,
  toOutputFilePathInCss,
  toOutputFilePathInHtml,
  toOutputFilePathInJS,
  toOutputFilePathWithoutRuntime
};
async function fetchModule(environment, url2, importer, options2 = {}) {
  if (url2.startsWith("data:") || isBuiltin(environment.config.resolve.builtins, url2)) {
    return { externalize: url2, type: "builtin" };
  }
  const isFileUrl2 = url2.startsWith("file://");
  if (isExternalUrl(url2) && !isFileUrl2) {
    return { externalize: url2, type: "network" };
  }
  if (!isFileUrl2 && importer && url2[0] !== "." && url2[0] !== "/") {
    const { isProduction, root } = environment.config;
    const { externalConditions, dedupe, preserveSymlinks } = environment.config.resolve;
    const resolved = tryNodeResolve(url2, importer, {
      mainFields: ["main"],
      conditions: externalConditions,
      externalConditions,
      external: [],
      noExternal: [],
      extensions: [".js", ".cjs", ".json"],
      dedupe,
      preserveSymlinks,
      isBuild: false,
      isProduction,
      root,
      packageCache: environment.config.packageCache,
      builtins: environment.config.resolve.builtins
    });
    if (!resolved) {
      const err2 = new Error(
        `Cannot find module '${url2}' imported from '${importer}'`
      );
      err2.code = "ERR_MODULE_NOT_FOUND";
      throw err2;
    }
    const file = (0, import_node_url2.pathToFileURL)(resolved.id).toString();
    const type = isFilePathESM(resolved.id, environment.config.packageCache) ? "module" : "commonjs";
    return { externalize: file, type };
  }
  url2 = unwrapId$1(url2);
  const mod = await environment.moduleGraph.ensureEntryFromUrl(url2);
  const cached = !!mod.transformResult;
  if (options2.cached && cached) {
    return { cache: true };
  }
  let result = await environment.transformRequest(url2);
  if (!result) {
    throw new Error(
      `[vite] transform failed for module '${url2}'${importer ? ` imported from '${importer}'` : ""}.`
    );
  }
  if (options2.inlineSourceMap !== false) {
    result = inlineSourceMap(mod, result, options2.startOffset);
  }
  if (result.code[0] === "#")
    result.code = result.code.replace(/^#!.*/, (s2) => " ".repeat(s2.length));
  return {
    code: result.code,
    file: mod.file,
    id: mod.id,
    url: mod.url,
    invalidate: !cached
  };
}
var OTHER_SOURCE_MAP_REGEXP = new RegExp(
  `//# ${SOURCEMAPPING_URL2}=data:application/json[^,]+base64,([A-Za-z0-9+/=]+)$`,
  "gm"
);
function inlineSourceMap(mod, result, startOffset) {
  const map2 = result.map;
  let code = result.code;
  if (!map2 || !("version" in map2) || code.includes(MODULE_RUNNER_SOURCEMAPPING_SOURCE))
    return result;
  OTHER_SOURCE_MAP_REGEXP.lastIndex = 0;
  if (OTHER_SOURCE_MAP_REGEXP.test(code))
    code = code.replace(OTHER_SOURCE_MAP_REGEXP, "");
  const sourceMap = startOffset ? Object.assign({}, map2, {
    mappings: ";".repeat(startOffset) + map2.mappings
  }) : map2;
  result.code = `${code.trimEnd()}
//# sourceURL=${mod.id}
${MODULE_RUNNER_SOURCEMAPPING_SOURCE}
//# ${SOURCEMAPPING_URL2}=${genSourceMapUrl(sourceMap)}
`;
  return result;
}
var debug$1 = createDebugger("vite:deps");
var debounceMs = 100;
function createDepsOptimizer(environment) {
  const { logger } = environment;
  const sessionTimestamp = Date.now().toString();
  let debounceProcessingHandle;
  let closed = false;
  const options2 = environment.config.optimizeDeps;
  const { noDiscovery, holdUntilCrawlEnd } = options2;
  let metadata = initDepsOptimizerMetadata(
    environment,
    sessionTimestamp
  );
  const depsOptimizer = {
    init: init2,
    metadata,
    registerMissingImport,
    run: () => debouncedProcessing(0),
    isOptimizedDepFile: createIsOptimizedDepFile(environment),
    isOptimizedDepUrl: createIsOptimizedDepUrl(environment),
    getOptimizedDepId: (depInfo) => `${depInfo.file}?v=${depInfo.browserHash}`,
    close: close2,
    options: options2
  };
  let newDepsDiscovered = false;
  let newDepsToLog = [];
  let newDepsToLogHandle;
  const logNewlyDiscoveredDeps = () => {
    if (newDepsToLog.length) {
      logger.info(
        colors$1.green(
          `✨ new dependencies optimized: ${depsLogString(newDepsToLog)}`
        ),
        {
          timestamp: true
        }
      );
      newDepsToLog = [];
    }
  };
  let discoveredDepsWhileScanning = [];
  const logDiscoveredDepsWhileScanning = () => {
    if (discoveredDepsWhileScanning.length) {
      logger.info(
        colors$1.green(
          `✨ discovered while scanning: ${depsLogString(
            discoveredDepsWhileScanning
          )}`
        ),
        {
          timestamp: true
        }
      );
      discoveredDepsWhileScanning = [];
    }
  };
  let depOptimizationProcessing = promiseWithResolvers2();
  let depOptimizationProcessingQueue = [];
  const resolveEnqueuedProcessingPromises = () => {
    for (const processing of depOptimizationProcessingQueue) {
      processing.resolve();
    }
    depOptimizationProcessingQueue = [];
  };
  let enqueuedRerun;
  let currentlyProcessing = false;
  let firstRunCalled = false;
  let warnAboutMissedDependencies = false;
  let waitingForCrawlEnd = false;
  let optimizationResult;
  let discover;
  async function close2() {
    closed = true;
    await Promise.allSettled([
      discover == null ? void 0 : discover.cancel(),
      depsOptimizer.scanProcessing,
      optimizationResult == null ? void 0 : optimizationResult.cancel()
    ]);
  }
  let inited = false;
  async function init2() {
    if (inited) return;
    inited = true;
    const cachedMetadata = await loadCachedDepOptimizationMetadata(environment);
    firstRunCalled = !!cachedMetadata;
    metadata = depsOptimizer.metadata = cachedMetadata || initDepsOptimizerMetadata(environment, sessionTimestamp);
    if (!cachedMetadata) {
      waitingForCrawlEnd = true;
      currentlyProcessing = true;
      const manuallyIncludedDeps = {};
      await addManuallyIncludedOptimizeDeps(environment, manuallyIncludedDeps);
      const manuallyIncludedDepsInfo = toDiscoveredDependencies(
        environment,
        manuallyIncludedDeps,
        sessionTimestamp
      );
      for (const depInfo of Object.values(manuallyIncludedDepsInfo)) {
        addOptimizedDepInfo(metadata, "discovered", {
          ...depInfo,
          processing: depOptimizationProcessing.promise
        });
        newDepsDiscovered = true;
      }
      environment.waitForRequestsIdle().then(onCrawlEnd);
      if (noDiscovery) {
        runOptimizer();
      } else {
        depsOptimizer.scanProcessing = new Promise((resolve4) => {
          (async () => {
            try {
              debug$1 == null ? void 0 : debug$1(colors$1.green(`scanning for dependencies...`));
              discover = discoverProjectDependencies(
                devToScanEnvironment(environment)
              );
              const deps = await discover.result;
              discover = void 0;
              const manuallyIncluded = Object.keys(manuallyIncludedDepsInfo);
              discoveredDepsWhileScanning.push(
                ...Object.keys(metadata.discovered).filter(
                  (dep) => !deps[dep] && !manuallyIncluded.includes(dep)
                )
              );
              for (const id of Object.keys(deps)) {
                if (!metadata.discovered[id]) {
                  addMissingDep(id, deps[id]);
                }
              }
              const knownDeps = prepareKnownDeps();
              startNextDiscoveredBatch();
              optimizationResult = runOptimizeDeps(environment, knownDeps);
              if (!holdUntilCrawlEnd) {
                optimizationResult.result.then((result) => {
                  if (!waitingForCrawlEnd) return;
                  optimizationResult = void 0;
                  runOptimizer(result);
                });
              }
            } catch (e2) {
              logger.error(e2.stack || e2.message);
            } finally {
              resolve4();
              depsOptimizer.scanProcessing = void 0;
            }
          })();
        });
      }
    }
  }
  function startNextDiscoveredBatch() {
    newDepsDiscovered = false;
    depOptimizationProcessingQueue.push(depOptimizationProcessing);
    depOptimizationProcessing = promiseWithResolvers2();
  }
  function prepareKnownDeps() {
    const knownDeps = {};
    const metadata2 = depsOptimizer.metadata;
    for (const dep of Object.keys(metadata2.optimized)) {
      knownDeps[dep] = { ...metadata2.optimized[dep] };
    }
    for (const dep of Object.keys(metadata2.discovered)) {
      const { processing, ...info } = metadata2.discovered[dep];
      knownDeps[dep] = info;
    }
    return knownDeps;
  }
  async function runOptimizer(preRunResult) {
    const isRerun = firstRunCalled;
    firstRunCalled = true;
    enqueuedRerun = void 0;
    if (debounceProcessingHandle) clearTimeout(debounceProcessingHandle);
    if (closed) {
      currentlyProcessing = false;
      depOptimizationProcessing.resolve();
      resolveEnqueuedProcessingPromises();
      return;
    }
    currentlyProcessing = true;
    try {
      let processingResult;
      if (preRunResult) {
        processingResult = preRunResult;
      } else {
        const knownDeps = prepareKnownDeps();
        startNextDiscoveredBatch();
        optimizationResult = runOptimizeDeps(environment, knownDeps);
        processingResult = await optimizationResult.result;
        optimizationResult = void 0;
      }
      if (closed) {
        currentlyProcessing = false;
        processingResult.cancel();
        resolveEnqueuedProcessingPromises();
        return;
      }
      const newData = processingResult.metadata;
      const needsInteropMismatch = findInteropMismatches(
        metadata.discovered,
        newData.optimized
      );
      const needsReload = needsInteropMismatch.length > 0 || metadata.hash !== newData.hash || Object.keys(metadata.optimized).some((dep) => {
        return metadata.optimized[dep].fileHash !== newData.optimized[dep].fileHash;
      });
      const commitProcessing = async () => {
        await processingResult.commit();
        for (const id in metadata.discovered) {
          if (!newData.optimized[id]) {
            addOptimizedDepInfo(newData, "discovered", metadata.discovered[id]);
          }
        }
        if (!needsReload) {
          newData.browserHash = metadata.browserHash;
          for (const dep in newData.chunks) {
            newData.chunks[dep].browserHash = metadata.browserHash;
          }
          for (const dep in newData.optimized) {
            newData.optimized[dep].browserHash = (metadata.optimized[dep] || metadata.discovered[dep]).browserHash;
          }
        }
        for (const o2 in newData.optimized) {
          const discovered = metadata.discovered[o2];
          if (discovered) {
            const optimized = newData.optimized[o2];
            discovered.browserHash = optimized.browserHash;
            discovered.fileHash = optimized.fileHash;
            discovered.needsInterop = optimized.needsInterop;
            discovered.processing = void 0;
          }
        }
        if (isRerun) {
          newDepsToLog.push(
            ...Object.keys(newData.optimized).filter(
              (dep) => !metadata.optimized[dep]
            )
          );
        }
        metadata = depsOptimizer.metadata = newData;
        resolveEnqueuedProcessingPromises();
      };
      if (!needsReload) {
        await commitProcessing();
        if (!debug$1) {
          if (newDepsToLogHandle) clearTimeout(newDepsToLogHandle);
          newDepsToLogHandle = setTimeout(() => {
            newDepsToLogHandle = void 0;
            logNewlyDiscoveredDeps();
            if (warnAboutMissedDependencies) {
              logDiscoveredDepsWhileScanning();
              logger.info(
                colors$1.magenta(
                  `❗ add these dependencies to optimizeDeps.include to speed up cold start`
                ),
                { timestamp: true }
              );
              warnAboutMissedDependencies = false;
            }
          }, 2 * debounceMs);
        } else {
          debug$1(
            colors$1.green(
              `✨ ${!isRerun ? `dependencies optimized` : `optimized dependencies unchanged`}`
            )
          );
        }
      } else {
        if (newDepsDiscovered) {
          processingResult.cancel();
          debug$1 == null ? void 0 : debug$1(
            colors$1.green(
              `✨ delaying reload as new dependencies have been found...`
            )
          );
        } else {
          await commitProcessing();
          if (!debug$1) {
            if (newDepsToLogHandle) clearTimeout(newDepsToLogHandle);
            newDepsToLogHandle = void 0;
            logNewlyDiscoveredDeps();
            if (warnAboutMissedDependencies) {
              logDiscoveredDepsWhileScanning();
              logger.info(
                colors$1.magenta(
                  `❗ add these dependencies to optimizeDeps.include to avoid a full page reload during cold start`
                ),
                { timestamp: true }
              );
              warnAboutMissedDependencies = false;
            }
          }
          logger.info(
            colors$1.green(`✨ optimized dependencies changed. reloading`),
            {
              timestamp: true
            }
          );
          if (needsInteropMismatch.length > 0) {
            logger.warn(
              `Mixed ESM and CJS detected in ${colors$1.yellow(
                needsInteropMismatch.join(", ")
              )}, add ${needsInteropMismatch.length === 1 ? "it" : "them"} to optimizeDeps.needsInterop to speed up cold start`,
              {
                timestamp: true
              }
            );
          }
          fullReload();
        }
      }
    } catch (e2) {
      logger.error(
        colors$1.red(`error while updating dependencies:
${e2.stack}`),
        { timestamp: true, error: e2 }
      );
      resolveEnqueuedProcessingPromises();
      metadata.discovered = {};
    }
    currentlyProcessing = false;
    enqueuedRerun == null ? void 0 : enqueuedRerun();
  }
  function fullReload() {
    environment.moduleGraph.invalidateAll();
    environment.hot.send({
      type: "full-reload",
      path: "*"
    });
  }
  async function rerun() {
    const deps = Object.keys(metadata.discovered);
    const depsString = depsLogString(deps);
    debug$1 == null ? void 0 : debug$1(colors$1.green(`new dependencies found: ${depsString}`));
    runOptimizer();
  }
  function getDiscoveredBrowserHash(hash2, deps, missing) {
    return getHash(
      hash2 + JSON.stringify(deps) + JSON.stringify(missing) + sessionTimestamp
    );
  }
  function registerMissingImport(id, resolved) {
    const optimized = metadata.optimized[id];
    if (optimized) {
      return optimized;
    }
    const chunk = metadata.chunks[id];
    if (chunk) {
      return chunk;
    }
    let missing = metadata.discovered[id];
    if (missing) {
      return missing;
    }
    missing = addMissingDep(id, resolved);
    if (!waitingForCrawlEnd) {
      debouncedProcessing();
    }
    return missing;
  }
  function addMissingDep(id, resolved) {
    newDepsDiscovered = true;
    return addOptimizedDepInfo(metadata, "discovered", {
      id,
      file: getOptimizedDepPath(environment, id),
      src: resolved,
      // Adding a browserHash to this missing dependency that is unique to
      // the current state of known + missing deps. If its optimizeDeps run
      // doesn't alter the bundled files of previous known dependencies,
      // we don't need a full reload and this browserHash will be kept
      browserHash: getDiscoveredBrowserHash(
        metadata.hash,
        depsFromOptimizedDepInfo(metadata.optimized),
        depsFromOptimizedDepInfo(metadata.discovered)
      ),
      // loading of this pre-bundled dep needs to await for its processing
      // promise to be resolved
      processing: depOptimizationProcessing.promise,
      exportsData: extractExportsData(environment, resolved)
    });
  }
  function debouncedProcessing(timeout2 = debounceMs) {
    enqueuedRerun = void 0;
    if (debounceProcessingHandle) clearTimeout(debounceProcessingHandle);
    if (newDepsToLogHandle) clearTimeout(newDepsToLogHandle);
    newDepsToLogHandle = void 0;
    debounceProcessingHandle = setTimeout(() => {
      debounceProcessingHandle = void 0;
      enqueuedRerun = rerun;
      if (!currentlyProcessing) {
        enqueuedRerun();
      }
    }, timeout2);
  }
  async function onCrawlEnd() {
    waitingForCrawlEnd = false;
    debug$1 == null ? void 0 : debug$1(colors$1.green(`✨ static imports crawl ended`));
    if (closed) {
      return;
    }
    await depsOptimizer.scanProcessing;
    if (optimizationResult && !options2.noDiscovery) {
      const afterScanResult = optimizationResult.result;
      optimizationResult = void 0;
      const result = await afterScanResult;
      currentlyProcessing = false;
      const crawlDeps = Object.keys(metadata.discovered);
      const scanDeps = Object.keys(result.metadata.optimized);
      if (scanDeps.length === 0 && crawlDeps.length === 0) {
        debug$1 == null ? void 0 : debug$1(
          colors$1.green(
            `✨ no dependencies found by the scanner or crawling static imports`
          )
        );
        startNextDiscoveredBatch();
        runOptimizer(result);
        return;
      }
      const needsInteropMismatch = findInteropMismatches(
        metadata.discovered,
        result.metadata.optimized
      );
      const scannerMissedDeps = crawlDeps.some((dep) => !scanDeps.includes(dep));
      const outdatedResult = needsInteropMismatch.length > 0 || scannerMissedDeps;
      if (outdatedResult) {
        result.cancel();
        for (const dep of scanDeps) {
          if (!crawlDeps.includes(dep)) {
            addMissingDep(dep, result.metadata.optimized[dep].src);
          }
        }
        if (scannerMissedDeps) {
          debug$1 == null ? void 0 : debug$1(
            colors$1.yellow(
              `✨ new dependencies were found while crawling that weren't detected by the scanner`
            )
          );
        }
        debug$1 == null ? void 0 : debug$1(colors$1.green(`✨ re-running optimizer`));
        debouncedProcessing(0);
      } else {
        debug$1 == null ? void 0 : debug$1(
          colors$1.green(
            `✨ using post-scan optimizer result, the scanner found every used dependency`
          )
        );
        startNextDiscoveredBatch();
        runOptimizer(result);
      }
    } else if (!holdUntilCrawlEnd) {
      if (newDepsDiscovered) {
        debug$1 == null ? void 0 : debug$1(
          colors$1.green(
            `✨ new dependencies were found while crawling static imports, re-running optimizer`
          )
        );
        warnAboutMissedDependencies = true;
        debouncedProcessing(0);
      }
    } else {
      const crawlDeps = Object.keys(metadata.discovered);
      currentlyProcessing = false;
      if (crawlDeps.length === 0) {
        debug$1 == null ? void 0 : debug$1(
          colors$1.green(
            `✨ no dependencies found while crawling the static imports`
          )
        );
        firstRunCalled = true;
      }
      debouncedProcessing(0);
    }
  }
  return depsOptimizer;
}
function createExplicitDepsOptimizer(environment) {
  const depsOptimizer = {
    metadata: initDepsOptimizerMetadata(environment),
    isOptimizedDepFile: createIsOptimizedDepFile(environment),
    isOptimizedDepUrl: createIsOptimizedDepUrl(environment),
    getOptimizedDepId: (depInfo) => `${depInfo.file}?v=${depInfo.browserHash}`,
    registerMissingImport: () => {
      throw new Error(
        `Vite Internal Error: registerMissingImport is not supported in dev ${environment.name}`
      );
    },
    init: init2,
    // noop, there is no scanning during dev SSR
    // the optimizer blocks the server start
    run: () => {
    },
    close: async () => {
    },
    options: environment.config.optimizeDeps
  };
  let inited = false;
  async function init2() {
    if (inited) return;
    inited = true;
    depsOptimizer.metadata = await optimizeExplicitEnvironmentDeps(environment);
  }
  return depsOptimizer;
}
function findInteropMismatches(discovered, optimized) {
  const needsInteropMismatch = [];
  for (const dep in discovered) {
    const discoveredDepInfo = discovered[dep];
    if (discoveredDepInfo.needsInterop === void 0) continue;
    const depInfo = optimized[dep];
    if (!depInfo) continue;
    if (depInfo.needsInterop !== discoveredDepInfo.needsInterop) {
      needsInteropMismatch.push(dep);
      debug$1 == null ? void 0 : debug$1(colors$1.cyan(`✨ needsInterop mismatch detected for ${dep}`));
    }
  }
  return needsInteropMismatch;
}
var EnvironmentModuleNode = class {
  /**
   * @param setIsSelfAccepting - set `false` to set `isSelfAccepting` later. e.g. #7870
   */
  constructor(url2, environment, setIsSelfAccepting = true) {
    __publicField(this, "environment");
    /**
     * Public served url path, starts with /
     */
    __publicField(this, "url");
    /**
     * Resolved file system path + query
     */
    __publicField(this, "id", null);
    __publicField(this, "file", null);
    __publicField(this, "type");
    __publicField(this, "info");
    __publicField(this, "meta");
    __publicField(this, "importers", /* @__PURE__ */ new Set());
    __publicField(this, "importedModules", /* @__PURE__ */ new Set());
    __publicField(this, "acceptedHmrDeps", /* @__PURE__ */ new Set());
    __publicField(this, "acceptedHmrExports", null);
    __publicField(this, "importedBindings", null);
    __publicField(this, "isSelfAccepting");
    __publicField(this, "transformResult", null);
    // ssrModule and ssrError are no longer needed. They are on the module runner module cache.
    // Once `ssrLoadModule` is re-implemented on top of the new APIs, we can delete these.
    __publicField(this, "ssrModule", null);
    __publicField(this, "ssrError", null);
    __publicField(this, "lastHMRTimestamp", 0);
    /**
     * `import.meta.hot.invalidate` is called by the client.
     * If there's multiple clients, multiple `invalidate` request is received.
     * This property is used to dedupe those request to avoid multiple updates happening.
     * @internal
     */
    __publicField(this, "lastHMRInvalidationReceived", false);
    __publicField(this, "lastInvalidationTimestamp", 0);
    /**
     * If the module only needs to update its imports timestamp (e.g. within an HMR chain),
     * it is considered soft-invalidated. In this state, its `transformResult` should exist,
     * and the next `transformRequest` for this module will replace the timestamps.
     *
     * By default the value is `undefined` if it's not soft/hard-invalidated. If it gets
     * soft-invalidated, this will contain the previous `transformResult` value. If it gets
     * hard-invalidated, this will be set to `'HARD_INVALIDATED'`.
     * @internal
     */
    __publicField(this, "invalidationState");
    /**
     * The module urls that are statically imported in the code. This information is separated
     * out from `importedModules` as only importers that statically import the module can be
     * soft invalidated. Other imports (e.g. watched files) needs the importer to be hard invalidated.
     * @internal
     */
    __publicField(this, "staticImportedUrls");
    this.environment = environment;
    this.url = url2;
    this.type = isDirectCSSRequest(url2) ? "css" : "js";
    if (setIsSelfAccepting) {
      this.isSelfAccepting = false;
    }
  }
};
var EnvironmentModuleGraph = class {
  constructor(environment, resolveId) {
    __publicField(this, "environment");
    __publicField(this, "urlToModuleMap", /* @__PURE__ */ new Map());
    __publicField(this, "idToModuleMap", /* @__PURE__ */ new Map());
    __publicField(this, "etagToModuleMap", /* @__PURE__ */ new Map());
    // a single file may corresponds to multiple modules with different queries
    __publicField(this, "fileToModulesMap", /* @__PURE__ */ new Map());
    /**
     * @internal
     */
    __publicField(this, "_unresolvedUrlToModuleMap", /* @__PURE__ */ new Map());
    /**
     * @internal
     */
    __publicField(this, "_resolveId");
    /** @internal */
    __publicField(this, "_hasResolveFailedErrorModules", /* @__PURE__ */ new Set());
    this.environment = environment;
    this._resolveId = resolveId;
  }
  async getModuleByUrl(rawUrl) {
    rawUrl = removeImportQuery(removeTimestampQuery(rawUrl));
    const mod = this._getUnresolvedUrlToModule(rawUrl);
    if (mod) {
      return mod;
    }
    const [url2] = await this._resolveUrl(rawUrl);
    return this.urlToModuleMap.get(url2);
  }
  getModuleById(id) {
    return this.idToModuleMap.get(removeTimestampQuery(id));
  }
  getModulesByFile(file) {
    return this.fileToModulesMap.get(file);
  }
  onFileChange(file) {
    const mods = this.getModulesByFile(file);
    if (mods) {
      const seen2 = /* @__PURE__ */ new Set();
      mods.forEach((mod) => {
        this.invalidateModule(mod, seen2);
      });
    }
  }
  onFileDelete(file) {
    const mods = this.getModulesByFile(file);
    if (mods) {
      mods.forEach((mod) => {
        mod.importedModules.forEach((importedMod) => {
          importedMod.importers.delete(mod);
        });
      });
    }
  }
  invalidateModule(mod, seen2 = /* @__PURE__ */ new Set(), timestamp = Date.now(), isHmr = false, softInvalidate = false) {
    var _a2;
    const prevInvalidationState = mod.invalidationState;
    if (softInvalidate) {
      mod.invalidationState ?? (mod.invalidationState = mod.transformResult ?? "HARD_INVALIDATED");
    } else {
      mod.invalidationState = "HARD_INVALIDATED";
    }
    if (seen2.has(mod) && prevInvalidationState === mod.invalidationState) {
      return;
    }
    seen2.add(mod);
    if (isHmr) {
      mod.lastHMRTimestamp = timestamp;
      mod.lastHMRInvalidationReceived = false;
    } else {
      mod.lastInvalidationTimestamp = timestamp;
    }
    const etag2 = (_a2 = mod.transformResult) == null ? void 0 : _a2.etag;
    if (etag2) this.etagToModuleMap.delete(etag2);
    mod.transformResult = null;
    mod.ssrModule = null;
    mod.ssrError = null;
    mod.importers.forEach((importer) => {
      var _a3;
      if (!importer.acceptedHmrDeps.has(mod)) {
        const shouldSoftInvalidateImporter = (((_a3 = importer.staticImportedUrls) == null ? void 0 : _a3.has(mod.url)) || softInvalidate) && importer.type !== "css";
        this.invalidateModule(
          importer,
          seen2,
          timestamp,
          isHmr,
          shouldSoftInvalidateImporter
        );
      }
    });
    this._hasResolveFailedErrorModules.delete(mod);
  }
  invalidateAll() {
    const timestamp = Date.now();
    const seen2 = /* @__PURE__ */ new Set();
    this.idToModuleMap.forEach((mod) => {
      this.invalidateModule(mod, seen2, timestamp);
    });
  }
  /**
   * Update the module graph based on a module's updated imports information
   * If there are dependencies that no longer have any importers, they are
   * returned as a Set.
   *
   * @param staticImportedUrls Subset of `importedModules` where they're statically imported in code.
   *   This is only used for soft invalidations so `undefined` is fine but may cause more runtime processing.
   */
  async updateModuleInfo(mod, importedModules, importedBindings, acceptedModules, acceptedExports, isSelfAccepting, staticImportedUrls) {
    mod.isSelfAccepting = isSelfAccepting;
    const prevImports = mod.importedModules;
    let noLongerImported;
    let resolvePromises = [];
    let resolveResults = new Array(importedModules.size);
    let index = 0;
    for (const imported of importedModules) {
      const nextIndex = index++;
      if (typeof imported === "string") {
        resolvePromises.push(
          this.ensureEntryFromUrl(imported).then((dep) => {
            dep.importers.add(mod);
            resolveResults[nextIndex] = dep;
          })
        );
      } else {
        imported.importers.add(mod);
        resolveResults[nextIndex] = imported;
      }
    }
    if (resolvePromises.length) {
      await Promise.all(resolvePromises);
    }
    const nextImports = new Set(resolveResults);
    mod.importedModules = nextImports;
    prevImports.forEach((dep) => {
      if (!mod.importedModules.has(dep)) {
        dep.importers.delete(mod);
        if (!dep.importers.size) {
          (noLongerImported || (noLongerImported = /* @__PURE__ */ new Set())).add(dep);
        }
      }
    });
    resolvePromises = [];
    resolveResults = new Array(acceptedModules.size);
    index = 0;
    for (const accepted of acceptedModules) {
      const nextIndex = index++;
      if (typeof accepted === "string") {
        resolvePromises.push(
          this.ensureEntryFromUrl(accepted).then((dep) => {
            resolveResults[nextIndex] = dep;
          })
        );
      } else {
        resolveResults[nextIndex] = accepted;
      }
    }
    if (resolvePromises.length) {
      await Promise.all(resolvePromises);
    }
    mod.acceptedHmrDeps = new Set(resolveResults);
    mod.staticImportedUrls = staticImportedUrls;
    mod.acceptedHmrExports = acceptedExports;
    mod.importedBindings = importedBindings;
    return noLongerImported;
  }
  async ensureEntryFromUrl(rawUrl, setIsSelfAccepting = true) {
    return this._ensureEntryFromUrl(rawUrl, setIsSelfAccepting);
  }
  /**
   * @internal
   */
  async _ensureEntryFromUrl(rawUrl, setIsSelfAccepting = true, resolved) {
    rawUrl = removeImportQuery(removeTimestampQuery(rawUrl));
    let mod = this._getUnresolvedUrlToModule(rawUrl);
    if (mod) {
      return mod;
    }
    const modPromise = (async () => {
      const [url2, resolvedId, meta] = await this._resolveUrl(rawUrl, resolved);
      mod = this.idToModuleMap.get(resolvedId);
      if (!mod) {
        mod = new EnvironmentModuleNode(
          url2,
          this.environment,
          setIsSelfAccepting
        );
        if (meta) mod.meta = meta;
        this.urlToModuleMap.set(url2, mod);
        mod.id = resolvedId;
        this.idToModuleMap.set(resolvedId, mod);
        const file = mod.file = cleanUrl2(resolvedId);
        let fileMappedModules = this.fileToModulesMap.get(file);
        if (!fileMappedModules) {
          fileMappedModules = /* @__PURE__ */ new Set();
          this.fileToModulesMap.set(file, fileMappedModules);
        }
        fileMappedModules.add(mod);
      } else if (!this.urlToModuleMap.has(url2)) {
        this.urlToModuleMap.set(url2, mod);
      }
      this._setUnresolvedUrlToModule(rawUrl, mod);
      return mod;
    })();
    this._setUnresolvedUrlToModule(rawUrl, modPromise);
    return modPromise;
  }
  // some deps, like a css file referenced via @import, don't have its own
  // url because they are inlined into the main css import. But they still
  // need to be represented in the module graph so that they can trigger
  // hmr in the importing css file.
  createFileOnlyEntry(file) {
    file = normalizePath$3(file);
    let fileMappedModules = this.fileToModulesMap.get(file);
    if (!fileMappedModules) {
      fileMappedModules = /* @__PURE__ */ new Set();
      this.fileToModulesMap.set(file, fileMappedModules);
    }
    const url2 = `${FS_PREFIX}${file}`;
    for (const m2 of fileMappedModules) {
      if (m2.url === url2 || m2.id === file) {
        return m2;
      }
    }
    const mod = new EnvironmentModuleNode(url2, this.environment);
    mod.file = file;
    fileMappedModules.add(mod);
    return mod;
  }
  // for incoming urls, it is important to:
  // 1. remove the HMR timestamp query (?t=xxxx) and the ?import query
  // 2. resolve its extension so that urls with or without extension all map to
  // the same module
  async resolveUrl(url2) {
    url2 = removeImportQuery(removeTimestampQuery(url2));
    const mod = await this._getUnresolvedUrlToModule(url2);
    if (mod == null ? void 0 : mod.id) {
      return [mod.url, mod.id, mod.meta];
    }
    return this._resolveUrl(url2);
  }
  updateModuleTransformResult(mod, result) {
    var _a2;
    if (this.environment === "client") {
      const prevEtag = (_a2 = mod.transformResult) == null ? void 0 : _a2.etag;
      if (prevEtag) this.etagToModuleMap.delete(prevEtag);
      if (result == null ? void 0 : result.etag) this.etagToModuleMap.set(result.etag, mod);
    }
    mod.transformResult = result;
  }
  getModuleByEtag(etag2) {
    return this.etagToModuleMap.get(etag2);
  }
  /**
   * @internal
   */
  _getUnresolvedUrlToModule(url2) {
    return this._unresolvedUrlToModuleMap.get(url2);
  }
  /**
   * @internal
   */
  _setUnresolvedUrlToModule(url2, mod) {
    this._unresolvedUrlToModuleMap.set(url2, mod);
  }
  /**
   * @internal
   */
  async _resolveUrl(url2, alreadyResolved) {
    const resolved = alreadyResolved ?? await this._resolveId(url2);
    const resolvedId = (resolved == null ? void 0 : resolved.id) || url2;
    if (url2 !== resolvedId && !url2.includes("\0") && !url2.startsWith(`virtual:`)) {
      const ext = (0, import_node_path3.extname)(cleanUrl2(resolvedId));
      if (ext) {
        const pathname = cleanUrl2(url2);
        if (!pathname.endsWith(ext)) {
          url2 = pathname + ext + url2.slice(pathname.length);
        }
      }
    }
    return [url2, resolvedId, resolved == null ? void 0 : resolved.meta];
  }
};
function warmupFiles(server, environment) {
  const { root } = server.config;
  mapFiles(environment.config.dev.warmup, root).then((files) => {
    for (const file of files) {
      warmupFile(server, environment, file);
    }
  });
}
async function warmupFile(server, environment, file) {
  if (file.endsWith(".html")) {
    const url2 = htmlFileToUrl(file, server.config.root);
    if (url2) {
      try {
        const html = await import_promises.default.readFile(file, "utf-8");
        await server.transformIndexHtml(url2, html);
      } catch (e2) {
        environment.logger.error(
          `Pre-transform error (${colors$1.cyan(file)}): ${e2.message}`,
          {
            error: e2,
            timestamp: true
          }
        );
      }
    }
  } else {
    const url2 = fileToUrl(file, server.config.root);
    await environment.warmupRequest(url2);
  }
}
function htmlFileToUrl(file, root) {
  const url2 = import_node_path3.default.relative(root, file);
  if (url2[0] === ".") return;
  return "/" + normalizePath$3(url2);
}
function fileToUrl(file, root) {
  const url2 = import_node_path3.default.relative(root, file);
  if (url2[0] === ".") {
    return import_node_path3.default.posix.join(FS_PREFIX, normalizePath$3(file));
  }
  return "/" + normalizePath$3(url2);
}
async function mapFiles(files, root) {
  if (!files.length) return [];
  const result = [];
  const globs = [];
  for (const file of files) {
    if (isDynamicPattern(file)) {
      globs.push(file);
    } else {
      if (import_node_path3.default.isAbsolute(file)) {
        result.push(file);
      } else {
        result.push(import_node_path3.default.resolve(root, file));
      }
    }
  }
  if (globs.length) {
    result.push(
      ...await glob(globs, {
        absolute: true,
        cwd: root,
        expandDirectories: false,
        ignore: ["**/.git/**", "**/node_modules/**"]
      })
    );
  }
  return result;
}
var DevEnvironment = class extends BaseEnvironment {
  constructor(name, config2, context) {
    let options2 = config2.environments[name] ?? getDefaultResolvedEnvironmentOptions(config2);
    if (context.options) {
      options2 = mergeConfig(
        options2,
        context.options
      );
    }
    super(name, config2, options2);
    __publicField(this, "mode", "dev");
    __publicField(this, "moduleGraph");
    __publicField(this, "depsOptimizer");
    /**
     * @internal
     */
    __publicField(this, "_remoteRunnerOptions");
    /**
     * @internal
     */
    __publicField(this, "_pluginContainer");
    /**
     * @internal
     */
    __publicField(this, "_closing", false);
    /**
     * @internal
     */
    __publicField(this, "_pendingRequests");
    /**
     * @internal
     */
    __publicField(this, "_crawlEndFinder");
    /**
     * Hot channel for this environment. If not provided or disabled,
     * it will be a noop channel that does nothing.
     *
     * @example
     * environment.hot.send({ type: 'full-reload' })
     */
    __publicField(this, "hot");
    this._pendingRequests = /* @__PURE__ */ new Map();
    this.moduleGraph = new EnvironmentModuleGraph(
      name,
      (url2) => this.pluginContainer.resolveId(url2, void 0)
    );
    this._crawlEndFinder = setupOnCrawlEnd();
    this._remoteRunnerOptions = context.remoteRunner ?? {};
    this.hot = context.transport ? isWebSocketServer in context.transport ? context.transport : normalizeHotChannel(context.transport, context.hot) : normalizeHotChannel({}, context.hot);
    this.hot.setInvokeHandler({
      fetchModule: (id, importer, options22) => {
        return this.fetchModule(id, importer, options22);
      }
    });
    this.hot.on(
      "vite:invalidate",
      async ({ path: path4, message, firstInvalidatedBy }) => {
        invalidateModule(this, {
          path: path4,
          message,
          firstInvalidatedBy
        });
      }
    );
    const { optimizeDeps: optimizeDeps2 } = this.config;
    if (context.depsOptimizer) {
      this.depsOptimizer = context.depsOptimizer;
    } else if (isDepOptimizationDisabled(optimizeDeps2)) {
      this.depsOptimizer = void 0;
    } else {
      this.depsOptimizer = (optimizeDeps2.noDiscovery ? createExplicitDepsOptimizer : createDepsOptimizer)(this);
    }
  }
  get pluginContainer() {
    if (!this._pluginContainer)
      throw new Error(
        `${this.name} environment.pluginContainer called before initialized`
      );
    return this._pluginContainer;
  }
  async init(options2) {
    if (this._initiated) {
      return;
    }
    this._initiated = true;
    this._plugins = await resolveEnvironmentPlugins(this);
    this._pluginContainer = await createEnvironmentPluginContainer(
      this,
      this._plugins,
      options2 == null ? void 0 : options2.watcher
    );
  }
  /**
   * When the dev server is restarted, the methods are called in the following order:
   * - new instance `init`
   * - previous instance `close`
   * - new instance `listen`
   */
  async listen(server) {
    var _a2;
    this.hot.listen();
    await ((_a2 = this.depsOptimizer) == null ? void 0 : _a2.init());
    warmupFiles(server, this);
  }
  fetchModule(id, importer, options2) {
    return fetchModule(this, id, importer, {
      ...this._remoteRunnerOptions,
      ...options2
    });
  }
  async reloadModule(module) {
    if (this.config.server.hmr !== false && module.file) {
      updateModules(this, module.file, [module], Date.now());
    }
  }
  transformRequest(url2) {
    return transformRequest(this, url2);
  }
  async warmupRequest(url2) {
    try {
      await this.transformRequest(url2);
    } catch (e2) {
      if ((e2 == null ? void 0 : e2.code) === ERR_OUTDATED_OPTIMIZED_DEP2 || (e2 == null ? void 0 : e2.code) === ERR_CLOSED_SERVER) {
        return;
      }
      this.logger.error(
        buildErrorMessage(e2, [`Pre-transform error: ${e2.message}`], false),
        {
          error: e2,
          timestamp: true
        }
      );
    }
  }
  async close() {
    var _a2;
    this._closing = true;
    this._crawlEndFinder.cancel();
    await Promise.allSettled([
      this.pluginContainer.close(),
      (_a2 = this.depsOptimizer) == null ? void 0 : _a2.close(),
      // WebSocketServer is independent of HotChannel and should not be closed on environment close
      isWebSocketServer in this.hot ? Promise.resolve() : this.hot.close(),
      (async () => {
        while (this._pendingRequests.size > 0) {
          await Promise.allSettled(
            [...this._pendingRequests.values()].map(
              (pending) => pending.request
            )
          );
        }
      })()
    ]);
  }
  /**
   * Calling `await environment.waitForRequestsIdle(id)` will wait until all static imports
   * are processed after the first transformRequest call. If called from a load or transform
   * plugin hook, the id needs to be passed as a parameter to avoid deadlocks.
   * Calling this function after the first static imports section of the module graph has been
   * processed will resolve immediately.
   * @experimental
   */
  waitForRequestsIdle(ignoredId) {
    return this._crawlEndFinder.waitForRequestsIdle(ignoredId);
  }
  /**
   * @internal
   */
  _registerRequestProcessing(id, done) {
    this._crawlEndFinder.registerRequestProcessing(id, done);
  }
};
function invalidateModule(environment, m2) {
  const mod = environment.moduleGraph.urlToModuleMap.get(m2.path);
  if (mod && mod.isSelfAccepting && mod.lastHMRTimestamp > 0 && !mod.lastHMRInvalidationReceived) {
    mod.lastHMRInvalidationReceived = true;
    environment.logger.info(
      colors$1.yellow(`hmr invalidate `) + colors$1.dim(m2.path) + (m2.message ? ` ${m2.message}` : ""),
      { timestamp: true }
    );
    const file = getShortName(mod.file, environment.config.root);
    updateModules(
      environment,
      file,
      [...mod.importers],
      mod.lastHMRTimestamp,
      m2.firstInvalidatedBy
    );
  }
}
var callCrawlEndIfIdleAfterMs = 50;
function setupOnCrawlEnd() {
  const registeredIds = /* @__PURE__ */ new Set();
  const seenIds = /* @__PURE__ */ new Set();
  const onCrawlEndPromiseWithResolvers = promiseWithResolvers2();
  let timeoutHandle;
  let cancelled = false;
  function cancel() {
    cancelled = true;
  }
  function registerRequestProcessing(id, done) {
    if (!seenIds.has(id)) {
      seenIds.add(id);
      registeredIds.add(id);
      done().catch(() => {
      }).finally(() => markIdAsDone(id));
    }
  }
  function waitForRequestsIdle(ignoredId) {
    if (ignoredId) {
      seenIds.add(ignoredId);
      markIdAsDone(ignoredId);
    } else {
      checkIfCrawlEndAfterTimeout();
    }
    return onCrawlEndPromiseWithResolvers.promise;
  }
  function markIdAsDone(id) {
    registeredIds.delete(id);
    checkIfCrawlEndAfterTimeout();
  }
  function checkIfCrawlEndAfterTimeout() {
    if (cancelled || registeredIds.size > 0) return;
    if (timeoutHandle) clearTimeout(timeoutHandle);
    timeoutHandle = setTimeout(
      callOnCrawlEndWhenIdle,
      callCrawlEndIfIdleAfterMs
    );
  }
  async function callOnCrawlEndWhenIdle() {
    if (cancelled || registeredIds.size > 0) return;
    onCrawlEndPromiseWithResolvers.resolve();
  }
  return {
    registerRequestProcessing,
    waitForRequestsIdle,
    cancel
  };
}
function createRunnableDevEnvironment(name, config2, context = {}) {
  if (context.transport == null) {
    context.transport = createServerHotChannel();
  }
  if (context.hot == null) {
    context.hot = true;
  }
  return new RunnableDevEnvironment(name, config2, context);
}
function isRunnableDevEnvironment(environment) {
  return environment instanceof RunnableDevEnvironment;
}
var RunnableDevEnvironment = class extends DevEnvironment {
  constructor(name, config2, context) {
    super(name, config2, context);
    __publicField(this, "_runner");
    __publicField(this, "_runnerFactory");
    __publicField(this, "_runnerOptions");
    this._runnerFactory = context.runner;
    this._runnerOptions = context.runnerOptions;
  }
  get runner() {
    if (this._runner) {
      return this._runner;
    }
    const factory = this._runnerFactory || createServerModuleRunner;
    this._runner = factory(this, this._runnerOptions);
    return this._runner;
  }
  async close() {
    await super.close();
    if (this._runner) {
      await this._runner.close();
    }
  }
};
var NOOP = () => {
};
var MIMES = /text|javascript|\/json|xml/i;
function getChunkSize(chunk, enc) {
  return chunk ? Buffer.byteLength(chunk, enc) : 0;
}
function compression({ threshold = 1024, level = -1, brotli = false, gzip: gzip2 = true, mimes: mimes2 = MIMES } = {}) {
  const brotliOpts = typeof brotli === "object" && brotli || {};
  const gzipOpts = typeof gzip2 === "object" && gzip2 || {};
  if (!import_zlib.default.createBrotliCompress) brotli = false;
  return (req2, res, next = NOOP) => {
    const accept = req2.headers["accept-encoding"] + "";
    const encoding = (brotli && accept.match(/\bbr\b/) || gzip2 && accept.match(/\bgzip\b/) || [])[0];
    if (req2.method === "HEAD" || !encoding) return next();
    let compress;
    let pendingListeners = [];
    let pendingStatus = 0;
    let started = false;
    let size = 0;
    function start() {
      started = true;
      size = res.getHeader("Content-Length") | 0 || size;
      const compressible = mimes2.test(
        String(res.getHeader("Content-Type") || "text/plain")
      );
      const cleartext = !res.getHeader("Content-Encoding");
      const listeners = pendingListeners || [];
      if (compressible && cleartext && size >= threshold) {
        res.setHeader("Content-Encoding", encoding);
        res.removeHeader("Content-Length");
        if (encoding === "br") {
          compress = import_zlib.default.createBrotliCompress({
            params: Object.assign({
              [import_zlib.default.constants.BROTLI_PARAM_QUALITY]: level,
              [import_zlib.default.constants.BROTLI_PARAM_SIZE_HINT]: size
            }, brotliOpts)
          });
        } else {
          compress = import_zlib.default.createGzip(
            Object.assign({ level }, gzipOpts)
          );
        }
        compress.on("data", (chunk) => write.call(res, chunk) || compress.pause());
        on.call(res, "drain", () => compress.resume());
        compress.on("end", () => end.call(res));
        listeners.forEach((p2) => compress.on.apply(compress, p2));
      } else {
        pendingListeners = null;
        listeners.forEach((p2) => on.apply(res, p2));
      }
      writeHead.call(res, pendingStatus || res.statusCode);
    }
    const { end, write, on, writeHead } = res;
    res.writeHead = function(status2, reason, headers) {
      if (typeof reason !== "string") [headers, reason] = [reason, headers];
      if (headers) for (let k in headers) res.setHeader(k, headers[k]);
      pendingStatus = status2;
      return this;
    };
    res.write = function(chunk, enc) {
      size += getChunkSize(chunk, enc);
      if (!started) start();
      if (!compress) return write.apply(this, arguments);
      return compress.write.apply(compress, arguments);
    };
    res.end = function(chunk, enc) {
      if (arguments.length > 0 && typeof chunk !== "function") {
        size += getChunkSize(chunk, enc);
      }
      if (!started) start();
      if (!compress) return end.apply(this, arguments);
      return compress.end.apply(compress, arguments);
    };
    res.on = function(type, listener2) {
      if (!pendingListeners) on.call(this, type, listener2);
      else if (compress) compress.on(type, listener2);
      else pendingListeners.push([type, listener2]);
      return this;
    };
    next();
  };
}
function resolvePreviewOptions(preview2, server) {
  return {
    port: (preview2 == null ? void 0 : preview2.port) ?? DEFAULT_PREVIEW_PORT,
    strictPort: (preview2 == null ? void 0 : preview2.strictPort) ?? server.strictPort,
    host: (preview2 == null ? void 0 : preview2.host) ?? server.host,
    allowedHosts: (preview2 == null ? void 0 : preview2.allowedHosts) ?? server.allowedHosts,
    https: (preview2 == null ? void 0 : preview2.https) ?? server.https,
    open: (preview2 == null ? void 0 : preview2.open) ?? server.open,
    proxy: (preview2 == null ? void 0 : preview2.proxy) ?? server.proxy,
    cors: (preview2 == null ? void 0 : preview2.cors) ?? server.cors,
    headers: (preview2 == null ? void 0 : preview2.headers) ?? server.headers
  };
}
async function preview(inlineConfig = {}) {
  var _a2;
  const config2 = await resolveConfig(
    inlineConfig,
    "serve",
    "production",
    "production",
    true
  );
  const clientOutDir = config2.environments.client.build.outDir;
  const distDir = import_node_path3.default.resolve(config2.root, clientOutDir);
  if (!import_node_fs2.default.existsSync(distDir) && // error if no plugins implement `configurePreviewServer`
  config2.plugins.every((plugin) => !plugin.configurePreviewServer) && // error if called in CLI only. programmatic usage could access `httpServer`
  // and affect file serving
  ((_a2 = process.argv[1]) == null ? void 0 : _a2.endsWith(import_node_path3.default.normalize("bin/vite.js"))) && process.argv[2] === "preview") {
    throw new Error(
      `The directory "${clientOutDir}" does not exist. Did you build your project?`
    );
  }
  const httpsOptions = await resolveHttpsConfig(config2.preview.https);
  const app = connect$1();
  const httpServer = await resolveHttpServer(config2.preview, app, httpsOptions);
  setClientErrorHandler(httpServer, config2.logger);
  const options2 = config2.preview;
  const logger = config2.logger;
  const closeHttpServer = createServerCloseFn(httpServer);
  let closeServerPromise;
  const closeServer = async () => {
    teardownSIGTERMListener(closeServerAndExit);
    await closeHttpServer();
    server.resolvedUrls = null;
  };
  const server = {
    config: config2,
    middlewares: app,
    httpServer,
    async close() {
      if (!closeServerPromise) {
        closeServerPromise = closeServer();
      }
      return closeServerPromise;
    },
    resolvedUrls: null,
    printUrls() {
      if (server.resolvedUrls) {
        printServerUrls(server.resolvedUrls, options2.host, logger.info);
      } else {
        throw new Error("cannot print server URLs before server is listening.");
      }
    },
    bindCLIShortcuts(options22) {
      bindCLIShortcuts(server, options22);
    }
  };
  const closeServerAndExit = async (_, exitCode) => {
    try {
      await server.close();
    } finally {
      process.exitCode ?? (process.exitCode = exitCode ? 128 + exitCode : void 0);
      process.exit();
    }
  };
  setupSIGTERMListener(closeServerAndExit);
  const postHooks = [];
  for (const hook of config2.getSortedPluginHooks("configurePreviewServer")) {
    postHooks.push(await hook(server));
  }
  const { cors } = config2.preview;
  if (cors !== false) {
    app.use(corsMiddleware(typeof cors === "boolean" ? {} : cors));
  }
  const { allowedHosts } = config2.preview;
  if (allowedHosts !== true && !config2.preview.https) {
    app.use(hostCheckMiddleware(config2, true));
  }
  const { proxy } = config2.preview;
  if (proxy) {
    app.use(proxyMiddleware(httpServer, proxy, config2));
  }
  app.use(compression());
  if (config2.base !== "/") {
    app.use(baseMiddleware(config2.rawBase, false));
  }
  const headers = config2.preview.headers;
  const viteAssetMiddleware = (...args) => sirv(distDir, {
    etag: true,
    dev: true,
    extensions: [],
    ignores: false,
    setHeaders(res) {
      if (headers) {
        for (const name in headers) {
          res.setHeader(name, headers[name]);
        }
      }
    },
    shouldServe(filePath) {
      return shouldServeFile(filePath, distDir);
    }
  })(...args);
  app.use(viteAssetMiddleware);
  if (config2.appType === "spa" || config2.appType === "mpa") {
    app.use(htmlFallbackMiddleware(distDir, config2.appType === "spa"));
  }
  postHooks.forEach((fn) => fn && fn());
  if (config2.appType === "spa" || config2.appType === "mpa") {
    app.use(indexHtmlMiddleware(distDir, server));
    app.use(notFoundMiddleware());
  }
  const hostname = await resolveHostname(options2.host);
  await httpServerStart(httpServer, {
    port: options2.port,
    strictPort: options2.strictPort,
    host: hostname.host,
    logger
  });
  server.resolvedUrls = await resolveServerUrls(
    httpServer,
    config2.preview,
    httpsOptions,
    config2
  );
  if (options2.open) {
    const url2 = getServerUrlByHost(server.resolvedUrls, options2.host);
    if (url2) {
      const path22 = typeof options2.open === "string" ? new URL(options2.open, url2).href : url2;
      openBrowser(path22, true, logger);
    }
  }
  return server;
}
var ssrConfigDefaults = Object.freeze({
  // noExternal
  // external
  target: "node",
  optimizeDeps: {}
  // resolve
});
function resolveSSROptions(ssr, preserveSymlinks) {
  const defaults = mergeWithDefaults(ssrConfigDefaults, {
    optimizeDeps: { esbuildOptions: { preserveSymlinks } }
  });
  return mergeWithDefaults(defaults, ssr ?? {});
}
async function runnerImport(moduleId, inlineConfig) {
  const isModuleSyncConditionEnabled = (await import("./false-S466IWBL.js")).default;
  const config2 = await resolveConfig(
    mergeConfig(inlineConfig || {}, {
      configFile: false,
      envDir: false,
      cacheDir: process.cwd(),
      environments: {
        inline: {
          consumer: "server",
          dev: {
            moduleRunnerTransform: true
          },
          resolve: {
            external: true,
            mainFields: [],
            conditions: [
              "node",
              ...isModuleSyncConditionEnabled ? ["module-sync"] : []
            ]
          }
        }
      }
    }),
    "serve"
  );
  const environment = createRunnableDevEnvironment("inline", config2, {
    runnerOptions: {
      hmr: {
        logger: false
      }
    },
    hot: false
  });
  await environment.init();
  try {
    const module = await environment.runner.import(moduleId);
    const modules = [
      ...environment.runner.evaluatedModules.urlToIdModuleMap.values()
    ];
    const dependencies = modules.filter((m2) => {
      if (!m2.meta || "externalize" in m2.meta) {
        return false;
      }
      return m2.exports !== module;
    }).map((m2) => m2.file);
    return {
      module,
      dependencies
    };
  } finally {
    await environment.close();
  }
}
var debug = createDebugger("vite:config", { depth: 10 });
var promisifiedRealpath = (0, import_node_util.promisify)(import_node_fs2.default.realpath);
function defineConfig(config2) {
  return config2;
}
function defaultCreateClientDevEnvironment(name, config2, context) {
  return new DevEnvironment(name, config2, {
    hot: true,
    transport: context.ws
  });
}
function defaultCreateDevEnvironment(name, config2) {
  return createRunnableDevEnvironment(name, config2);
}
var configDefaults = Object.freeze({
  define: {},
  dev: {
    warmup: [],
    // preTransformRequests
    /** @experimental */
    sourcemap: { js: true },
    sourcemapIgnoreList: void 0
    // createEnvironment
    // recoverable
    // moduleRunnerTransform
  },
  build: buildEnvironmentOptionsDefaults,
  resolve: {
    // mainFields
    // conditions
    externalConditions: ["node"],
    extensions: [".mjs", ".js", ".mts", ".ts", ".jsx", ".tsx", ".json"],
    dedupe: [],
    /** @experimental */
    noExternal: [],
    external: [],
    preserveSymlinks: false,
    alias: []
  },
  // root
  base: "/",
  publicDir: "public",
  // cacheDir
  // mode
  plugins: [],
  html: {
    cspNonce: void 0
  },
  css: cssConfigDefaults,
  json: {
    namedExports: true,
    stringify: "auto"
  },
  // esbuild
  assetsInclude: void 0,
  /** @experimental */
  builder: builderOptionsDefaults,
  server: serverConfigDefaults,
  preview: {
    port: DEFAULT_PREVIEW_PORT
    // strictPort
    // host
    // https
    // open
    // proxy
    // cors
    // headers
  },
  /** @experimental */
  experimental: {
    importGlobRestoreExtension: false,
    renderBuiltUrl: void 0,
    hmrPartialAccept: false,
    skipSsrTransform: false
  },
  future: {
    removePluginHookHandleHotUpdate: void 0,
    removePluginHookSsrArgument: void 0,
    removeServerModuleGraph: void 0,
    removeServerHot: void 0,
    removeServerTransformRequest: void 0,
    removeSsrLoadModule: void 0
  },
  legacy: {
    proxySsrExternalModules: false,
    skipWebSocketTokenCheck: false
  },
  logLevel: "info",
  customLogger: void 0,
  clearScreen: true,
  envDir: void 0,
  envPrefix: "VITE_",
  worker: {
    format: "iife",
    plugins: () => []
    // rollupOptions
  },
  optimizeDeps: {
    include: [],
    exclude: [],
    needsInterop: [],
    // esbuildOptions
    /** @experimental */
    extensions: [],
    /** @deprecated @experimental */
    disabled: "build",
    // noDiscovery
    /** @experimental */
    holdUntilCrawlEnd: true,
    // entries
    /** @experimental */
    force: false
  },
  ssr: ssrConfigDefaults,
  environments: {},
  appType: "spa"
});
function resolveDevEnvironmentOptions(dev, environmentName, consumer, skipSsrTransform, preTransformRequest2) {
  const resolved = mergeWithDefaults(
    {
      ...configDefaults.dev,
      sourcemapIgnoreList: isInNodeModules$1,
      preTransformRequests: preTransformRequest2 ?? consumer === "client",
      createEnvironment: environmentName === "client" ? defaultCreateClientDevEnvironment : defaultCreateDevEnvironment,
      recoverable: consumer === "client",
      moduleRunnerTransform: skipSsrTransform !== void 0 && consumer === "server" ? skipSsrTransform : consumer === "server"
    },
    dev ?? {}
  );
  return {
    ...resolved,
    sourcemapIgnoreList: resolved.sourcemapIgnoreList === false ? () => false : resolved.sourcemapIgnoreList
  };
}
function resolveEnvironmentOptions(options2, alias2, preserveSymlinks, forceOptimizeDeps, logger, environmentName, skipSsrTransform, isSsrTargetWebworkerSet, preTransformRequests) {
  var _a2, _b;
  const isClientEnvironment = environmentName === "client";
  const consumer = options2.consumer ?? (isClientEnvironment ? "client" : "server");
  const isSsrTargetWebworkerEnvironment = isSsrTargetWebworkerSet && environmentName === "ssr";
  if ((_a2 = options2.define) == null ? void 0 : _a2["process.env"]) {
    const processEnvDefine = options2.define["process.env"];
    if (typeof processEnvDefine === "object") {
      const pathKey2 = (_b = Object.entries(processEnvDefine).find(
        // check with toLowerCase() to match with `Path` / `PATH` (Windows uses `Path`)
        ([key, value2]) => key.toLowerCase() === "path" && !!value2
      )) == null ? void 0 : _b[0];
      if (pathKey2) {
        logger.warnOnce(
          colors$1.yellow(
            `The \`define\` option contains an object with ${JSON.stringify(pathKey2)} for "process.env" key. It looks like you may have passed the entire \`process.env\` object to \`define\`, which can unintentionally expose all environment variables. This poses a security risk and is discouraged.`
          )
        );
      }
    }
  }
  const resolve4 = resolveEnvironmentResolveOptions(
    options2.resolve,
    alias2,
    preserveSymlinks,
    logger,
    consumer,
    isSsrTargetWebworkerEnvironment
  );
  return {
    define: options2.define,
    resolve: resolve4,
    keepProcessEnv: options2.keepProcessEnv ?? (isSsrTargetWebworkerEnvironment ? false : consumer === "server"),
    consumer,
    optimizeDeps: resolveDepOptimizationOptions(
      options2.optimizeDeps,
      resolve4.preserveSymlinks,
      forceOptimizeDeps,
      consumer
    ),
    dev: resolveDevEnvironmentOptions(
      options2.dev,
      environmentName,
      consumer,
      skipSsrTransform,
      preTransformRequests
    ),
    build: resolveBuildEnvironmentOptions(
      options2.build ?? {},
      logger,
      consumer
    )
  };
}
function getDefaultEnvironmentOptions(config2) {
  return {
    define: config2.define,
    resolve: {
      ...config2.resolve,
      // mainFields and conditions are not inherited
      mainFields: void 0,
      conditions: void 0
    },
    dev: config2.dev,
    build: config2.build
  };
}
function checkBadCharactersInPath(name, path22, logger) {
  const badChars = [];
  if (path22.includes("#")) {
    badChars.push("#");
  }
  if (path22.includes("?")) {
    badChars.push("?");
  }
  if (path22.includes("*")) {
    badChars.push("*");
  }
  if (badChars.length > 0) {
    const charString = badChars.map((c) => `"${c}"`).join(" and ");
    const inflectedChars = badChars.length > 1 ? "characters" : "character";
    logger.warn(
      colors$1.yellow(
        `${name} contains the ${charString} ${inflectedChars} (${colors$1.cyan(
          path22
        )}), which may not work when running Vite. Consider renaming the directory / file to remove the characters.`
      )
    );
  }
}
var clientAlias = [
  {
    find: /^\/?@vite\/env/,
    replacement: import_node_path3.default.posix.join(FS_PREFIX, normalizePath$3(ENV_ENTRY))
  },
  {
    find: /^\/?@vite\/client/,
    replacement: import_node_path3.default.posix.join(FS_PREFIX, normalizePath$3(CLIENT_ENTRY))
  }
];
function resolveEnvironmentResolveOptions(resolve4, alias2, preserveSymlinks, logger, consumer, isSsrTargetWebworkerEnvironment) {
  const resolvedResolve = mergeWithDefaults(
    {
      ...configDefaults.resolve,
      mainFields: consumer === void 0 || consumer === "client" || isSsrTargetWebworkerEnvironment ? DEFAULT_CLIENT_MAIN_FIELDS : DEFAULT_SERVER_MAIN_FIELDS,
      conditions: consumer === void 0 || consumer === "client" || isSsrTargetWebworkerEnvironment ? DEFAULT_CLIENT_CONDITIONS : DEFAULT_SERVER_CONDITIONS.filter((c) => c !== "browser"),
      builtins: (resolve4 == null ? void 0 : resolve4.builtins) ?? (consumer === "server" ? isSsrTargetWebworkerEnvironment && (resolve4 == null ? void 0 : resolve4.noExternal) === true ? [] : nodeLikeBuiltins : [])
    },
    resolve4 ?? {}
  );
  resolvedResolve.preserveSymlinks = preserveSymlinks;
  resolvedResolve.alias = alias2;
  if (
    // @ts-expect-error removed field
    (resolve4 == null ? void 0 : resolve4.browserField) === false && resolvedResolve.mainFields.includes("browser")
  ) {
    logger.warn(
      colors$1.yellow(
        `\`resolve.browserField\` is set to false, but the option is removed in favour of the 'browser' string in \`resolve.mainFields\`. You may want to update \`resolve.mainFields\` to remove the 'browser' string and preserve the previous browser behaviour.`
      )
    );
  }
  return resolvedResolve;
}
function resolveResolveOptions(resolve4, logger) {
  const alias2 = normalizeAlias(
    mergeAlias(clientAlias, (resolve4 == null ? void 0 : resolve4.alias) || configDefaults.resolve.alias)
  );
  const preserveSymlinks = (resolve4 == null ? void 0 : resolve4.preserveSymlinks) ?? configDefaults.resolve.preserveSymlinks;
  if (alias2.some((a) => a.find === "/")) {
    logger.warn(
      colors$1.yellow(
        `\`resolve.alias\` contains an alias that maps \`/\`. This is not recommended as it can cause unexpected behavior when resolving paths.`
      )
    );
  }
  return resolveEnvironmentResolveOptions(
    resolve4,
    alias2,
    preserveSymlinks,
    logger,
    void 0
  );
}
function resolveDepOptimizationOptions(optimizeDeps2, preserveSymlinks, forceOptimizeDeps, consumer) {
  return mergeWithDefaults(
    {
      ...configDefaults.optimizeDeps,
      disabled: void 0,
      // do not set here to avoid deprecation warning
      noDiscovery: consumer !== "client",
      esbuildOptions: {
        preserveSymlinks
      },
      force: forceOptimizeDeps ?? configDefaults.optimizeDeps.force
    },
    optimizeDeps2 ?? {}
  );
}
async function resolveConfig(inlineConfig, command, defaultMode = "development", defaultNodeEnv = "development", isPreview = false, patchConfig = void 0, patchPlugins = void 0) {
  var _a2, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _A, _B, _C, _D, _E, _F, _G, _H;
  let config2 = inlineConfig;
  let configFileDependencies = [];
  let mode2 = inlineConfig.mode || defaultMode;
  const isNodeEnvSet = true;
  const packageCache = /* @__PURE__ */ new Map();
  if (!isNodeEnvSet) {
    process.env.NODE_ENV = defaultNodeEnv;
  }
  const configEnv = {
    mode: mode2,
    command,
    isSsrBuild: command === "build" && !!((_a2 = config2.build) == null ? void 0 : _a2.ssr),
    isPreview
  };
  let { configFile } = config2;
  if (configFile !== false) {
    const loadResult = await loadConfigFromFile(
      configEnv,
      configFile,
      config2.root,
      config2.logLevel,
      config2.customLogger,
      config2.configLoader
    );
    if (loadResult) {
      config2 = mergeConfig(loadResult.config, config2);
      configFile = loadResult.path;
      configFileDependencies = loadResult.dependencies;
    }
  }
  mode2 = inlineConfig.mode || config2.mode || mode2;
  configEnv.mode = mode2;
  const filterPlugin = (p2) => {
    if (!p2) {
      return false;
    } else if (!p2.apply) {
      return true;
    } else if (typeof p2.apply === "function") {
      return p2.apply({ ...config2, mode: mode2 }, configEnv);
    } else {
      return p2.apply === command;
    }
  };
  const rawPlugins = (await asyncFlatten(config2.plugins || [])).filter(
    filterPlugin
  );
  const [prePlugins, normalPlugins, postPlugins] = sortUserPlugins(rawPlugins);
  const isBuild = command === "build";
  const userPlugins = [...prePlugins, ...normalPlugins, ...postPlugins];
  config2 = await runConfigHook(config2, userPlugins, configEnv);
  config2.environments ?? (config2.environments = {});
  if (!config2.environments.ssr && (!isBuild || config2.ssr || ((_b = config2.build) == null ? void 0 : _b.ssr))) {
    config2.environments = { ssr: {}, ...config2.environments };
  }
  if (!config2.environments.client) {
    config2.environments = { client: {}, ...config2.environments };
  }
  const logger = createLogger(config2.logLevel, {
    allowClearScreen: config2.clearScreen,
    customLogger: config2.customLogger
  });
  const resolvedRoot = normalizePath$3(
    config2.root ? import_node_path3.default.resolve(config2.root) : process.cwd()
  );
  checkBadCharactersInPath("The project root", resolvedRoot, logger);
  const configEnvironmentsClient = config2.environments.client;
  configEnvironmentsClient.dev ?? (configEnvironmentsClient.dev = {});
  const deprecatedSsrOptimizeDepsConfig = ((_c = config2.ssr) == null ? void 0 : _c.optimizeDeps) ?? {};
  let configEnvironmentsSsr = config2.environments.ssr;
  const warmupOptions = (_d = config2.server) == null ? void 0 : _d.warmup;
  if (warmupOptions == null ? void 0 : warmupOptions.clientFiles) {
    configEnvironmentsClient.dev.warmup = warmupOptions.clientFiles;
  }
  if (warmupOptions == null ? void 0 : warmupOptions.ssrFiles) {
    configEnvironmentsSsr ?? (configEnvironmentsSsr = {});
    configEnvironmentsSsr.dev ?? (configEnvironmentsSsr.dev = {});
    configEnvironmentsSsr.dev.warmup = warmupOptions.ssrFiles;
  }
  if (configEnvironmentsSsr) {
    configEnvironmentsSsr.optimizeDeps = mergeConfig(
      deprecatedSsrOptimizeDepsConfig,
      configEnvironmentsSsr.optimizeDeps ?? {}
    );
    configEnvironmentsSsr.resolve = mergeConfig(
      {
        conditions: (_f = (_e = config2.ssr) == null ? void 0 : _e.resolve) == null ? void 0 : _f.conditions,
        externalConditions: (_h = (_g = config2.ssr) == null ? void 0 : _g.resolve) == null ? void 0 : _h.externalConditions,
        mainFields: (_j = (_i = config2.ssr) == null ? void 0 : _i.resolve) == null ? void 0 : _j.mainFields,
        external: (_k = config2.ssr) == null ? void 0 : _k.external,
        noExternal: (_l = config2.ssr) == null ? void 0 : _l.noExternal
      },
      configEnvironmentsSsr.resolve ?? {}
    );
  }
  if (((_m = config2.build) == null ? void 0 : _m.ssrEmitAssets) !== void 0) {
    configEnvironmentsSsr ?? (configEnvironmentsSsr = {});
    configEnvironmentsSsr.build ?? (configEnvironmentsSsr.build = {});
    configEnvironmentsSsr.build.emitAssets = config2.build.ssrEmitAssets;
  }
  if (!config2.environments.client || !config2.environments.ssr && !isBuild) {
    throw new Error(
      "Required environments configuration were stripped out in the config hook"
    );
  }
  const defaultEnvironmentOptions = getDefaultEnvironmentOptions(config2);
  const defaultClientEnvironmentOptions = {
    ...defaultEnvironmentOptions,
    resolve: config2.resolve,
    // inherit everything including mainFields and conditions
    optimizeDeps: config2.optimizeDeps
  };
  const defaultNonClientEnvironmentOptions = {
    ...defaultEnvironmentOptions,
    dev: {
      ...defaultEnvironmentOptions.dev,
      createEnvironment: void 0,
      warmup: void 0
    },
    build: {
      ...defaultEnvironmentOptions.build,
      createEnvironment: void 0
    }
  };
  for (const name of Object.keys(config2.environments)) {
    config2.environments[name] = mergeConfig(
      name === "client" ? defaultClientEnvironmentOptions : defaultNonClientEnvironmentOptions,
      config2.environments[name]
    );
  }
  await runConfigEnvironmentHook(
    config2.environments,
    userPlugins,
    configEnv,
    ((_n = config2.ssr) == null ? void 0 : _n.target) === "webworker"
  );
  config2.resolve ?? (config2.resolve = {});
  config2.resolve.conditions = (_o = config2.environments.client.resolve) == null ? void 0 : _o.conditions;
  config2.resolve.mainFields = (_p = config2.environments.client.resolve) == null ? void 0 : _p.mainFields;
  const resolvedDefaultResolve = resolveResolveOptions(config2.resolve, logger);
  const resolvedEnvironments = {};
  for (const environmentName of Object.keys(config2.environments)) {
    resolvedEnvironments[environmentName] = resolveEnvironmentOptions(
      config2.environments[environmentName],
      resolvedDefaultResolve.alias,
      resolvedDefaultResolve.preserveSymlinks,
      inlineConfig.forceOptimizeDeps,
      logger,
      environmentName,
      (_q = config2.experimental) == null ? void 0 : _q.skipSsrTransform,
      ((_r = config2.ssr) == null ? void 0 : _r.target) === "webworker",
      (_s = config2.server) == null ? void 0 : _s.preTransformRequests
    );
  }
  const backwardCompatibleOptimizeDeps = resolvedEnvironments.client.optimizeDeps;
  const resolvedDevEnvironmentOptions = resolveDevEnvironmentOptions(
    config2.dev,
    // default environment options
    void 0,
    void 0
  );
  const resolvedBuildOptions = resolveBuildEnvironmentOptions(
    config2.build ?? {},
    logger,
    void 0
  );
  const patchedConfigSsr = {
    ...config2.ssr,
    external: (_t = resolvedEnvironments.ssr) == null ? void 0 : _t.resolve.external,
    noExternal: (_u = resolvedEnvironments.ssr) == null ? void 0 : _u.resolve.noExternal,
    optimizeDeps: (_v = resolvedEnvironments.ssr) == null ? void 0 : _v.optimizeDeps,
    resolve: {
      ...(_w = config2.ssr) == null ? void 0 : _w.resolve,
      conditions: (_x = resolvedEnvironments.ssr) == null ? void 0 : _x.resolve.conditions,
      externalConditions: (_y = resolvedEnvironments.ssr) == null ? void 0 : _y.resolve.externalConditions
    }
  };
  const ssr = resolveSSROptions(
    patchedConfigSsr,
    resolvedDefaultResolve.preserveSymlinks
  );
  let envDir = config2.envFile === false ? false : config2.envDir;
  if (envDir !== false) {
    envDir = config2.envDir ? normalizePath$3(import_node_path3.default.resolve(resolvedRoot, config2.envDir)) : resolvedRoot;
  }
  const userEnv = loadEnv(mode2, envDir, resolveEnvPrefix(config2));
  const userNodeEnv = process.env.VITE_USER_NODE_ENV;
  if (!isNodeEnvSet && userNodeEnv) {
    if (userNodeEnv === "development") {
      process.env.NODE_ENV = "development";
    } else {
      logger.warn(
        `NODE_ENV=${userNodeEnv} is not supported in the .env file. Only NODE_ENV=development is supported to create a development build of your project. If you need to set process.env.NODE_ENV, you can set it in the Vite config instead.`
      );
    }
  }
  const isProduction = false;
  const relativeBaseShortcut = config2.base === "" || config2.base === "./";
  const resolvedBase = relativeBaseShortcut ? !isBuild || ((_z = config2.build) == null ? void 0 : _z.ssr) ? "/" : "./" : resolveBaseUrl(config2.base, isBuild, logger);
  const pkgDir = (_A = findNearestPackageData(resolvedRoot, packageCache)) == null ? void 0 : _A.dir;
  const cacheDir = normalizePath$3(
    config2.cacheDir ? import_node_path3.default.resolve(resolvedRoot, config2.cacheDir) : pkgDir ? import_node_path3.default.join(pkgDir, `node_modules/.vite`) : import_node_path3.default.join(resolvedRoot, `.vite`)
  );
  const assetsFilter = config2.assetsInclude && (!Array.isArray(config2.assetsInclude) || config2.assetsInclude.length) ? createFilter$1(config2.assetsInclude) : () => false;
  const { publicDir } = config2;
  const resolvedPublicDir = publicDir !== false && publicDir !== "" ? normalizePath$3(
    import_node_path3.default.resolve(
      resolvedRoot,
      typeof publicDir === "string" ? publicDir : configDefaults.publicDir
    )
  ) : "";
  const server = resolveServerOptions(resolvedRoot, config2.server, logger);
  const builder = resolveBuilderOptions(config2.builder);
  const BASE_URL = resolvedBase;
  let resolved;
  let createUserWorkerPlugins = (_B = config2.worker) == null ? void 0 : _B.plugins;
  if (Array.isArray(createUserWorkerPlugins)) {
    createUserWorkerPlugins = () => {
      var _a3;
      return (_a3 = config2.worker) == null ? void 0 : _a3.plugins;
    };
    logger.warn(
      colors$1.yellow(
        `worker.plugins is now a function that returns an array of plugins. Please update your Vite config accordingly.
`
      )
    );
  }
  const createWorkerPlugins = async function(bundleChain) {
    const rawWorkerUserPlugins = (await asyncFlatten((createUserWorkerPlugins == null ? void 0 : createUserWorkerPlugins()) || [])).filter(filterPlugin);
    let workerConfig = mergeConfig({}, config2);
    const [workerPrePlugins, workerNormalPlugins, workerPostPlugins] = sortUserPlugins(rawWorkerUserPlugins);
    const workerUserPlugins = [
      ...workerPrePlugins,
      ...workerNormalPlugins,
      ...workerPostPlugins
    ];
    workerConfig = await runConfigHook(
      workerConfig,
      workerUserPlugins,
      configEnv
    );
    const workerResolved = {
      ...workerConfig,
      ...resolved,
      isWorker: true,
      mainConfig: resolved,
      bundleChain
    };
    const resolvedWorkerPlugins = await resolvePlugins(
      workerResolved,
      workerPrePlugins,
      workerNormalPlugins,
      workerPostPlugins
    );
    await Promise.all(
      createPluginHookUtils(resolvedWorkerPlugins).getSortedPluginHooks("configResolved").map((hook) => hook(workerResolved))
    );
    return {
      ...workerResolved,
      plugins: resolvedWorkerPlugins
    };
  };
  const resolvedWorkerOptions = {
    format: ((_C = config2.worker) == null ? void 0 : _C.format) || "iife",
    plugins: createWorkerPlugins,
    rollupOptions: ((_D = config2.worker) == null ? void 0 : _D.rollupOptions) || {}
  };
  const base = withTrailingSlash(resolvedBase);
  const preview2 = resolvePreviewOptions(config2.preview, server);
  resolved = {
    configFile: configFile ? normalizePath$3(configFile) : void 0,
    configFileDependencies: configFileDependencies.map(
      (name) => normalizePath$3(import_node_path3.default.resolve(name))
    ),
    inlineConfig,
    root: resolvedRoot,
    base,
    decodedBase: decodeBase(base),
    rawBase: resolvedBase,
    publicDir: resolvedPublicDir,
    cacheDir,
    command,
    mode: mode2,
    isWorker: false,
    mainConfig: null,
    bundleChain: [],
    isProduction,
    plugins: userPlugins,
    // placeholder to be replaced
    css: resolveCSSOptions(config2.css),
    json: mergeWithDefaults(configDefaults.json, config2.json ?? {}),
    esbuild: config2.esbuild === false ? false : {
      jsxDev: !isProduction,
      ...config2.esbuild
    },
    server,
    builder,
    preview: preview2,
    envDir,
    env: {
      ...userEnv,
      BASE_URL,
      MODE: mode2,
      DEV: !isProduction,
      PROD: isProduction
    },
    assetsInclude(file) {
      return DEFAULT_ASSETS_RE.test(file) || assetsFilter(file);
    },
    logger,
    packageCache,
    worker: resolvedWorkerOptions,
    appType: config2.appType ?? "spa",
    experimental: {
      importGlobRestoreExtension: false,
      hmrPartialAccept: false,
      ...config2.experimental
    },
    future: config2.future,
    ssr,
    optimizeDeps: backwardCompatibleOptimizeDeps,
    resolve: resolvedDefaultResolve,
    dev: resolvedDevEnvironmentOptions,
    build: resolvedBuildOptions,
    environments: resolvedEnvironments,
    // random 72 bits (12 base64 chars)
    // at least 64bits is recommended
    // https://owasp.org/www-community/vulnerabilities/Insufficient_Session-ID_Length
    webSocketToken: Buffer.from(
      import_node_crypto.default.getRandomValues(new Uint8Array(9))
    ).toString("base64url"),
    getSortedPlugins: void 0,
    getSortedPluginHooks: void 0,
    /**
     * createResolver is deprecated. It only works for the client and ssr
     * environments. The `aliasOnly` option is also not being used any more
     * Plugins should move to createIdResolver(environment) instead.
     * create an internal resolver to be used in special scenarios, e.g.
     * optimizer & handling css @imports
     */
    createResolver(options2) {
      const resolve4 = createIdResolver(this, options2);
      const clientEnvironment = new PartialEnvironment("client", this);
      let ssrEnvironment;
      return async (id, importer, aliasOnly, ssr2) => {
        if (ssr2) {
          ssrEnvironment ?? (ssrEnvironment = new PartialEnvironment("ssr", this));
        }
        return await resolve4(
          ssr2 ? ssrEnvironment : clientEnvironment,
          id,
          importer,
          aliasOnly
        );
      };
    },
    fsDenyGlob: (0, import_picomatch2.default)(
      // matchBase: true does not work as it's documented
      // https://github.com/micromatch/picomatch/issues/89
      // convert patterns without `/` on our side for now
      server.fs.deny.map(
        (pattern) => pattern.includes("/") ? pattern : `**/${pattern}`
      ),
      {
        matchBase: false,
        nocase: true,
        dot: true
      }
    ),
    safeModulePaths: /* @__PURE__ */ new Set(),
    additionalAllowedHosts: getAdditionalAllowedHosts(server, preview2)
  };
  resolved = {
    ...config2,
    ...resolved
  };
  patchConfig == null ? void 0 : patchConfig(resolved);
  const resolvedPlugins = await resolvePlugins(
    resolved,
    prePlugins,
    normalPlugins,
    postPlugins
  );
  patchPlugins == null ? void 0 : patchPlugins(resolvedPlugins);
  resolved.plugins = resolvedPlugins;
  Object.assign(resolved, createPluginHookUtils(resolved.plugins));
  await Promise.all(
    resolved.getSortedPluginHooks("configResolved").map((hook) => hook(resolved))
  );
  optimizeDepsDisabledBackwardCompatibility(resolved, resolved.optimizeDeps);
  optimizeDepsDisabledBackwardCompatibility(
    resolved,
    resolved.ssr.optimizeDeps,
    "ssr."
  );
  if (resolved.environments.ssr) {
    resolved.environments.ssr.build.emitAssets = resolved.build.ssrEmitAssets || resolved.build.emitAssets;
  }
  debug == null ? void 0 : debug(`using resolved config: %O`, {
    ...resolved,
    plugins: resolved.plugins.map((p2) => p2.name),
    worker: {
      ...resolved.worker,
      plugins: `() => plugins`
    }
  });
  const outputOption = ((_F = (_E = config2.build) == null ? void 0 : _E.rollupOptions) == null ? void 0 : _F.output) ?? [];
  if (Array.isArray(outputOption)) {
    const assetFileNamesList = outputOption.map(
      (output) => output.assetFileNames
    );
    if (assetFileNamesList.length > 1) {
      const firstAssetFileNames = assetFileNamesList[0];
      const hasDifferentReference = assetFileNamesList.some(
        (assetFileNames) => assetFileNames !== firstAssetFileNames
      );
      if (hasDifferentReference) {
        resolved.logger.warn(
          colors$1.yellow(`
assetFileNames isn't equal for every build.rollupOptions.output. A single pattern across all outputs is supported by Vite.
`)
        );
      }
    }
  }
  if (
    // @ts-expect-error Option removed
    ((_G = config2.legacy) == null ? void 0 : _G.buildSsrCjsExternalHeuristics) || // @ts-expect-error Option removed
    ((_H = config2.ssr) == null ? void 0 : _H.format) === "cjs"
  ) {
    resolved.logger.warn(
      colors$1.yellow(`
(!) Experimental legacy.buildSsrCjsExternalHeuristics and ssr.format were be removed in Vite 5.
    The only SSR Output format is ESM. Find more information at https://github.com/vitejs/vite/discussions/13816.
`)
    );
  }
  const resolvedBuildOutDir = normalizePath$3(
    import_node_path3.default.resolve(resolved.root, resolved.build.outDir)
  );
  if (isParentDirectory(resolvedBuildOutDir, resolved.root) || resolvedBuildOutDir === resolved.root) {
    resolved.logger.warn(
      colors$1.yellow(`
(!) build.outDir must not be the same directory of root or a parent directory of root as this could cause Vite to overwriting source files with build outputs.
`)
    );
  }
  return resolved;
}
function resolveBaseUrl(base = configDefaults.base, isBuild, logger) {
  if (base[0] === ".") {
    logger.warn(
      colors$1.yellow(
        colors$1.bold(
          `(!) invalid "base" option: "${base}". The value can only be an absolute URL, "./", or an empty string.`
        )
      )
    );
    return "/";
  }
  const isExternal2 = isExternalUrl(base);
  if (!isExternal2 && base[0] !== "/") {
    logger.warn(
      colors$1.yellow(
        colors$1.bold(`(!) "base" option should start with a slash.`)
      )
    );
  }
  if (!isBuild || !isExternal2) {
    base = new URL(base, "http://vite.dev").pathname;
    if (base[0] !== "/") {
      base = "/" + base;
    }
  }
  return base;
}
function decodeBase(base) {
  try {
    return decodeURI(base);
  } catch {
    throw new Error(
      'The value passed to "base" option was malformed. It should be a valid URL.'
    );
  }
}
function sortUserPlugins(plugins2) {
  const prePlugins = [];
  const postPlugins = [];
  const normalPlugins = [];
  if (plugins2) {
    plugins2.flat().forEach((p2) => {
      if (p2.enforce === "pre") prePlugins.push(p2);
      else if (p2.enforce === "post") postPlugins.push(p2);
      else normalPlugins.push(p2);
    });
  }
  return [prePlugins, normalPlugins, postPlugins];
}
async function loadConfigFromFile(configEnv, configFile, configRoot = process.cwd(), logLevel, customLogger, configLoader = "bundle") {
  if (configLoader !== "bundle" && configLoader !== "runner" && configLoader !== "native") {
    throw new Error(
      `Unsupported configLoader: ${configLoader}. Accepted values are 'bundle', 'runner', and 'native'.`
    );
  }
  const start = import_node_perf_hooks.performance.now();
  const getTime = () => `${(import_node_perf_hooks.performance.now() - start).toFixed(2)}ms`;
  let resolvedPath;
  if (configFile) {
    resolvedPath = import_node_path3.default.resolve(configFile);
  } else {
    for (const filename of DEFAULT_CONFIG_FILES) {
      const filePath = import_node_path3.default.resolve(configRoot, filename);
      if (!import_node_fs2.default.existsSync(filePath)) continue;
      resolvedPath = filePath;
      break;
    }
  }
  if (!resolvedPath) {
    debug == null ? void 0 : debug("no config file found.");
    return null;
  }
  try {
    const resolver = configLoader === "bundle" ? bundleAndLoadConfigFile : configLoader === "runner" ? runnerImportConfigFile : nativeImportConfigFile;
    const { configExport, dependencies } = await resolver(resolvedPath);
    debug == null ? void 0 : debug(`config file loaded in ${getTime()}`);
    const config2 = await (typeof configExport === "function" ? configExport(configEnv) : configExport);
    if (!isObject$1(config2)) {
      throw new Error(`config must export or return an object.`);
    }
    return {
      path: normalizePath$3(resolvedPath),
      config: config2,
      dependencies
    };
  } catch (e2) {
    const logger = createLogger(logLevel, { customLogger });
    checkBadCharactersInPath("The config path", resolvedPath, logger);
    logger.error(colors$1.red(`failed to load config from ${resolvedPath}`), {
      error: e2
    });
    throw e2;
  }
}
async function nativeImportConfigFile(resolvedPath) {
  const module = await import((0, import_node_url2.pathToFileURL)(resolvedPath).href + "?t=" + Date.now());
  return {
    configExport: module.default,
    dependencies: []
  };
}
async function runnerImportConfigFile(resolvedPath) {
  const { module, dependencies } = await runnerImport(resolvedPath);
  return {
    configExport: module.default,
    dependencies
  };
}
async function bundleAndLoadConfigFile(resolvedPath) {
  const isESM = typeof process.versions.deno === "string" || isFilePathESM(resolvedPath);
  const bundled = await bundleConfigFile(resolvedPath, isESM);
  const userConfig = await loadConfigFromBundledFile(
    resolvedPath,
    bundled.code,
    isESM
  );
  return {
    configExport: userConfig,
    dependencies: bundled.dependencies
  };
}
async function bundleConfigFile(fileName, isESM) {
  const isModuleSyncConditionEnabled = (await import("./false-S466IWBL.js")).default;
  const dirnameVarName = "__vite_injected_original_dirname";
  const filenameVarName = "__vite_injected_original_filename";
  const importMetaUrlVarName = "__vite_injected_original_import_meta_url";
  const result = await (0, import_esbuild.build)({
    absWorkingDir: process.cwd(),
    entryPoints: [fileName],
    write: false,
    target: [`node${process.versions.node}`],
    platform: "node",
    bundle: true,
    format: isESM ? "esm" : "cjs",
    mainFields: ["main"],
    sourcemap: "inline",
    // the last slash is needed to make the path correct
    sourceRoot: import_node_path3.default.dirname(fileName) + import_node_path3.default.sep,
    metafile: true,
    define: {
      __dirname: dirnameVarName,
      __filename: filenameVarName,
      "import.meta.url": importMetaUrlVarName,
      "import.meta.dirname": dirnameVarName,
      "import.meta.filename": filenameVarName
    },
    plugins: [
      {
        name: "externalize-deps",
        setup(build2) {
          const packageCache = /* @__PURE__ */ new Map();
          const resolveByViteResolver = (id, importer, isRequire2) => {
            var _a2;
            return (_a2 = tryNodeResolve(id, importer, {
              root: import_node_path3.default.dirname(fileName),
              isBuild: true,
              isProduction: true,
              preferRelative: false,
              tryIndex: true,
              mainFields: [],
              conditions: [
                "node",
                ...isModuleSyncConditionEnabled ? ["module-sync"] : []
              ],
              externalConditions: [],
              external: [],
              noExternal: [],
              dedupe: [],
              extensions: configDefaults.resolve.extensions,
              preserveSymlinks: false,
              packageCache,
              isRequire: isRequire2,
              builtins: nodeLikeBuiltins
            })) == null ? void 0 : _a2.id;
          };
          build2.onResolve(
            { filter: /^[^.#].*/ },
            async ({ path: id, importer, kind }) => {
              if (kind === "entry-point" || import_node_path3.default.isAbsolute(id) || isNodeBuiltin(id)) {
                return;
              }
              if (isNodeLikeBuiltin(id)) {
                return { external: true };
              }
              const isImport = isESM || kind === "dynamic-import";
              let idFsPath;
              try {
                idFsPath = resolveByViteResolver(id, importer, !isImport);
              } catch (e2) {
                if (!isImport) {
                  let canResolveWithImport = false;
                  try {
                    canResolveWithImport = !!resolveByViteResolver(
                      id,
                      importer,
                      false
                    );
                  } catch {
                  }
                  if (canResolveWithImport) {
                    throw new Error(
                      `Failed to resolve ${JSON.stringify(
                        id
                      )}. This package is ESM only but it was tried to load by \`require\`. See https://vite.dev/guide/troubleshooting.html#this-package-is-esm-only for more details.`
                    );
                  }
                }
                throw e2;
              }
              if (idFsPath && isImport) {
                idFsPath = (0, import_node_url2.pathToFileURL)(idFsPath).href;
              }
              return {
                path: idFsPath,
                external: true
              };
            }
          );
        }
      },
      {
        name: "inject-file-scope-variables",
        setup(build2) {
          build2.onLoad({ filter: /\.[cm]?[jt]s$/ }, async (args) => {
            const contents = await import_promises.default.readFile(args.path, "utf-8");
            const injectValues = `const ${dirnameVarName} = ${JSON.stringify(
              import_node_path3.default.dirname(args.path)
            )};const ${filenameVarName} = ${JSON.stringify(args.path)};const ${importMetaUrlVarName} = ${JSON.stringify(
              (0, import_node_url2.pathToFileURL)(args.path).href
            )};`;
            return {
              loader: args.path.endsWith("ts") ? "ts" : "js",
              contents: injectValues + contents
            };
          });
        }
      }
    ]
  });
  const { text } = result.outputFiles[0];
  return {
    code: text,
    dependencies: Object.keys(result.metafile.inputs)
  };
}
var _require = (0, import_node_module.createRequire)(import.meta.url);
async function loadConfigFromBundledFile(fileName, bundledCode, isESM) {
  if (isESM) {
    let nodeModulesDir = typeof process.versions.deno === "string" ? void 0 : findNearestNodeModules(import_node_path3.default.dirname(fileName));
    if (nodeModulesDir) {
      try {
        await import_promises.default.mkdir(import_node_path3.default.resolve(nodeModulesDir, ".vite-temp/"), {
          recursive: true
        });
      } catch (e2) {
        if (e2.code === "EACCES") {
          nodeModulesDir = void 0;
        } else {
          throw e2;
        }
      }
    }
    const hash2 = `timestamp-${Date.now()}-${Math.random().toString(16).slice(2)}`;
    const tempFileName = nodeModulesDir ? import_node_path3.default.resolve(
      nodeModulesDir,
      `.vite-temp/${import_node_path3.default.basename(fileName)}.${hash2}.mjs`
    ) : `${fileName}.${hash2}.mjs`;
    await import_promises.default.writeFile(tempFileName, bundledCode);
    try {
      return (await import((0, import_node_url2.pathToFileURL)(tempFileName).href)).default;
    } finally {
      import_node_fs2.default.unlink(tempFileName, () => {
      });
    }
  } else {
    const extension2 = import_node_path3.default.extname(fileName);
    const realFileName = await promisifiedRealpath(fileName);
    const loaderExt = extension2 in _require.extensions ? extension2 : ".js";
    const defaultLoader = _require.extensions[loaderExt];
    _require.extensions[loaderExt] = (module, filename) => {
      if (filename === realFileName) {
        module._compile(bundledCode, filename);
      } else {
        defaultLoader(module, filename);
      }
    };
    delete _require.cache[_require.resolve(fileName)];
    const raw = _require(fileName);
    _require.extensions[loaderExt] = defaultLoader;
    return raw.__esModule ? raw.default : raw;
  }
}
async function runConfigHook(config2, plugins2, configEnv) {
  let conf = config2;
  for (const p2 of getSortedPluginsByHook("config", plugins2)) {
    const hook = p2.config;
    const handler = getHookHandler(hook);
    const res = await handler(conf, configEnv);
    if (res && res !== conf) {
      conf = mergeConfig(conf, res);
    }
  }
  return conf;
}
async function runConfigEnvironmentHook(environments, plugins2, configEnv, isSsrTargetWebworkerSet) {
  const environmentNames = Object.keys(environments);
  for (const p2 of getSortedPluginsByHook("configEnvironment", plugins2)) {
    const hook = p2.configEnvironment;
    const handler = getHookHandler(hook);
    for (const name of environmentNames) {
      const res = await handler(name, environments[name], {
        ...configEnv,
        isSsrTargetWebworker: isSsrTargetWebworkerSet && name === "ssr"
      });
      if (res) {
        environments[name] = mergeConfig(environments[name], res);
      }
    }
  }
}
function optimizeDepsDisabledBackwardCompatibility(resolved, optimizeDeps2, optimizeDepsPath = "") {
  const optimizeDepsDisabled = optimizeDeps2.disabled;
  if (optimizeDepsDisabled !== void 0) {
    if (optimizeDepsDisabled === true || optimizeDepsDisabled === "dev") {
      const commonjsOptionsInclude = resolved.build.commonjsOptions.include;
      const commonjsPluginDisabled = Array.isArray(commonjsOptionsInclude) && commonjsOptionsInclude.length === 0;
      optimizeDeps2.noDiscovery = true;
      optimizeDeps2.include = void 0;
      if (commonjsPluginDisabled) {
        resolved.build.commonjsOptions.include = void 0;
      }
      resolved.logger.warn(
        colors$1.yellow(`(!) Experimental ${optimizeDepsPath}optimizeDeps.disabled and deps pre-bundling during build were removed in Vite 5.1.
    To disable the deps optimizer, set ${optimizeDepsPath}optimizeDeps.noDiscovery to true and ${optimizeDepsPath}optimizeDeps.include as undefined or empty.
    Please remove ${optimizeDepsPath}optimizeDeps.disabled from your config.
    ${commonjsPluginDisabled ? "Empty config.build.commonjsOptions.include will be ignored to support CJS during build. This config should also be removed." : ""}
  `)
      );
    } else if (optimizeDepsDisabled === false || optimizeDepsDisabled === "build") {
      resolved.logger.warn(
        colors$1.yellow(`(!) Experimental ${optimizeDepsPath}optimizeDeps.disabled and deps pre-bundling during build were removed in Vite 5.1.
    Setting it to ${optimizeDepsDisabled} now has no effect.
    Please remove ${optimizeDepsPath}optimizeDeps.disabled from your config.
  `)
      );
    }
  }
}

export {
  require_node_url,
  require_node_util,
  require_node_module,
  require_node_crypto,
  require_picomatch2 as require_picomatch,
  require_child_process,
  require_main,
  VERSION,
  DEFAULT_CLIENT_MAIN_FIELDS,
  DEFAULT_SERVER_MAIN_FIELDS,
  DEFAULT_CLIENT_CONDITIONS,
  DEFAULT_SERVER_CONDITIONS,
  defaultAllowedOrigins,
  require_dist,
  require_node_child_process,
  require_net,
  require_http,
  require_node_net,
  require_node_dns,
  require_node_buffer,
  require_node_readline,
  require_node_events,
  require_node_assert,
  require_node_v8,
  require_node_worker_threads,
  require_https,
  require_tls,
  require_zlib,
  require_buffer,
  require_node_querystring,
  require_node_zlib,
  commonjsGlobal,
  getDefaultExportFromCjs,
  perEnvironmentState,
  createFilter$1,
  isInNodeModules$1,
  rollupVersion,
  normalizePath$3,
  arraify,
  mergeConfig,
  mergeAlias,
  createLogger,
  transformWithEsbuild,
  perEnvironmentPlugin,
  optimizeDeps,
  loadEnv,
  resolveEnvPrefix,
  buildErrorMessage,
  createServerModuleRunnerTransport,
  createServerModuleRunner,
  ssrTransform,
  send$1,
  isFileServingAllowed,
  isFileLoadingAllowed,
  searchForWorkspaceRoot,
  createServer,
  createServerHotChannel,
  createIdResolver,
  preprocessCSS,
  formatPostcssSourceMap,
  build,
  BuildEnvironment,
  createBuilder,
  fetchModule,
  DevEnvironment,
  createRunnableDevEnvironment,
  isRunnableDevEnvironment,
  preview,
  runnerImport,
  defineConfig,
  resolveConfig,
  sortUserPlugins,
  loadConfigFromFile
};
/*! Bundled license information:

rollup/dist/es/parseAst.js:
  (*
    @license
  	Rollup.js v4.37.0
  	Sun, 23 Mar 2025 14:56:38 GMT - commit 8b1c634d945dda9294cf579de68c4b223c618e7f
  
  	https://github.com/rollup/rollup
  
  	Released under the MIT License.
  *)

vite/dist/node/chunks/dep-DBxKXgDP.js:
  (**
   * Autoload Config for PostCSS
   *
   * @author Michael Ciniawsky @michael-ciniawsky <michael.ciniawsky@gmail.com>
   * @license MIT
   *
   * @module postcss-load-config
   * @version 2.1.0
   *
   * @requires comsiconfig
   * @requires ./options
   * @requires ./plugins
   *)

vite/dist/node/chunks/dep-DBxKXgDP.js:
  (*!
   * encodeurl
   * Copyright(c) 2016 Douglas Christopher Wilson
   * MIT Licensed
   *)
  (*!
   * escape-html
   * Copyright(c) 2012-2013 TJ Holowaychuk
   * Copyright(c) 2015 Andreas Lubbe
   * Copyright(c) 2015 Tiancheng "Timothy" Gu
   * MIT Licensed
   *)
  (*!
   * ee-first
   * Copyright(c) 2014 Jonathan Ong
   * MIT Licensed
   *)
  (*!
   * on-finished
   * Copyright(c) 2013 Jonathan Ong
   * Copyright(c) 2014 Douglas Christopher Wilson
   * MIT Licensed
   *)
  (*!
   * parseurl
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2014-2017 Douglas Christopher Wilson
   * MIT Licensed
   *)
  (*!
   * statuses
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2016 Douglas Christopher Wilson
   * MIT Licensed
   *)
  (*!
   * unpipe
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   *)
  (*!
   * finalhandler
   * Copyright(c) 2014-2017 Douglas Christopher Wilson
   * MIT Licensed
   *)
  (*!
   * connect
   * Copyright(c) 2010 Sencha Inc.
   * Copyright(c) 2011 TJ Holowaychuk
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   *)
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)
  (*!
   * vary
   * Copyright(c) 2014-2017 Douglas Christopher Wilson
   * MIT Licensed
   *)
  (*!
   * normalize-path <https://github.com/jonschlinkert/normalize-path>
   *
   * Copyright (c) 2014-2018, Jon Schlinkert.
   * Released under the MIT License.
   *)
  (*!
   * is-extglob <https://github.com/jonschlinkert/is-extglob>
   *
   * Copyright (c) 2014-2016, Jon Schlinkert.
   * Licensed under the MIT License.
   *)
  (*!
   * is-glob <https://github.com/jonschlinkert/is-glob>
   *
   * Copyright (c) 2014-2017, Jon Schlinkert.
   * Released under the MIT License.
   *)
  (*!
   * is-number <https://github.com/jonschlinkert/is-number>
   *
   * Copyright (c) 2014-present, Jon Schlinkert.
   * Released under the MIT License.
   *)
  (*!
   * to-regex-range <https://github.com/micromatch/to-regex-range>
   *
   * Copyright (c) 2015-present, Jon Schlinkert.
   * Released under the MIT License.
   *)
  (*!
   * fill-range <https://github.com/jonschlinkert/fill-range>
   *
   * Copyright (c) 2014-present, Jon Schlinkert.
   * Licensed under the MIT License.
   *)
  (*!
   * Array of passes.
   *
   * A `pass` is just a function that is executed on `req, res, options`
   * so that you can easily add new checks while still keeping the base
   * flexible.
   *)
  (*!
   * Array of passes.
   *
   * A `pass` is just a function that is executed on `req, socket, options`
   * so that you can easily add new checks while still keeping the base
   * flexible.
   *)
  (*!
   * Caron dimonio, con occhi di bragia
   * loro accennando, tutte le raccoglie;
   * batte col remo qualunque s’adagia 
   *
   * Charon the demon, with the eyes of glede,
   * Beckoning to them, collects them all together,
   * Beats with his oar whoever lags behind
   *          
   *          Dante - The Divine Comedy (Canto III)
   *)
  (*!
   * etag
   * Copyright(c) 2014-2016 Douglas Christopher Wilson
   * MIT Licensed
   *)
*/
//# sourceMappingURL=chunk-GZMMYKV2.js.map
